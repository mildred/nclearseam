/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI10980002 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10950002 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10965674 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10945342 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10945325 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10938939 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10938934 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10938933 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10938942 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10938045 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10938037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10938028 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10938027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10938928 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10938923 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI912005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI912031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI912390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI912035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI912033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10936022 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10938033 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10938912 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10938908 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10938907 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10939051 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10356084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI179 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI10356041 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10356045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10356043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI942044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10356073 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10356070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10356067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6235.base = NTI6233;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
NTI6237.base = NTI6233;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI6245 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6245.node = NNI6245;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
NTI6245.base = NTI6243;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI10356041 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI10356041, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10356041, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10356041, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10356041, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10356041, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10356041, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10356041, name: "JArray", len: 0, sons: null}}};
NTI10356041.node = NNI10356041;
NTI10356084.base = NTI10356043;
var NNI10356045 = {kind: 3, offset: "kind", len: 7, typ: NTI10356041, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI112, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI179, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI104, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI163, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI10356067, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI10356084, name: "elems", sons: null}]]};
NTI10356045.node = NNI10356045;
NTI10356043.base = NTI10356045;
var NNI10356073 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI942044, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI112, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI10356043, name: "Field3", sons: null}]};
NTI10356073.node = NNI10356073;
NTI10356070.base = NTI10356073;
var NNI10356067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI10356070, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI143, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI143, name: "last", sons: null}]};
NTI10356067.node = NNI10356067;
NTI10938912.base = NTI10938033;
NTI912386.base = NTI912033;
NTI912388.base = NTI912033;
NTI912390.base = NTI912033;
var NNI912031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI912031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI912031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI912031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI912031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI912031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI912031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI912031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI912031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI912031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI912031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI912031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI912031, name: "NotationNode", len: 0, sons: null}}};
NTI912031.node = NNI912031;
var NNI912029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI912029.node = NNI912029;
NTI912029.base = NTI6008;
NTI912027.base = NTI912029;
NTI912537.base = NTI912041;
var NNI912083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI912537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI912083.node = NNI912083;
NTI912083.base = NTI912043;
NTI912081.base = NTI912083;
var NNI912079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI912079.node = NNI912079;
NTI912079.base = NTI912043;
NTI912077.base = NTI912079;
NTI912443.base = NTI912077;
NTI912445.base = NTI912077;
var NNI912043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI912027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI912081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI912443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI912445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI912043.node = NNI912043;
NTI912043.base = NTI912035;
NTI912041.base = NTI912043;
var NNI912075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI912075.node = NNI912075;
NTI912075.base = NTI912043;
NTI912073.base = NTI912075;
NTI912423.base = NTI912073;
NTI912425.base = NTI912081;
var NNI912087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI912087.node = NNI912087;
NTI912087.base = NTI912043;
NTI912085.base = NTI912087;
NTI912427.base = NTI912085;
NTI912429.base = NTI912041;
var NNI912071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI912071.node = NNI912071;
NTI912071.base = NTI912043;
NTI912069.base = NTI912071;
NTI912431.base = NTI912069;
var NNI912067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI912067.node = NNI912067;
NTI912067.base = NTI912043;
NTI912065.base = NTI912067;
NTI912433.base = NTI912065;
var NNI912039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI912041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI912041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI912041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI912423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI912425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI912427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI912429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI912431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI912433, name: "links", sons: null}]};
NTI912039.node = NNI912039;
NTI912039.base = NTI912035;
NTI912037.base = NTI912039;
var NNI912091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI912091.node = NNI912091;
NTI912091.base = NTI6008;
NTI912089.base = NTI912091;
var NNI912035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI912386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI912388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI912390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI912033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI912033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI912033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI912031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI912033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI912033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI912033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI912037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI912089, name: "style", sons: null}]};
NTI912035.node = NNI912035;
var NNI912005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI912180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI912184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI912188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI912192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI912196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI912200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI912204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI912208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI912212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI912216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI912220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI912224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI912228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI912232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI912236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI912240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI912244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI912248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI912252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI912256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI912260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI912264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI912268, name: "onloadend", sons: null}]};
NTI912005.node = NNI912005;
NTI912005.base = NTI6008;
NTI912035.base = NTI912005;
NTI912033.base = NTI912035;
NTI10938923.base = NTI10938907;
NTI10938037.base = NTI10938033;
NTI10938045.base = NTI10938027;
var NNI10938028 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "selector", len: 0, typ: NTI112, name: "selector", sons: null}, 
{kind: 1, offset: "refresh", len: 0, typ: NTI10938037, name: "refresh", sons: null}, 
{kind: 1, offset: "fetchData", len: 0, typ: NTI10936022, name: "fetchData", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI10938045, name: "matches", sons: null}, 
{kind: 1, offset: "iter", len: 0, typ: NTI163, name: "iter", sons: null}]};
NTI10938028.node = NNI10938028;
NTI10938027.base = NTI10938028;
NTI10938928.base = NTI10938027;
NTI10938939.base = NTI10938907;
var NNI10938934 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI912033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI10938939, name: "matches", sons: null}]};
NTI10938934.node = NNI10938934;
NTI10938933.base = NTI10938934;
NTI10938942.base = NTI10938933;
var NNI10938908 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI10938912, name: "refresh", sons: null}, 
{kind: 1, offset: "fetchData", len: 0, typ: NTI10936022, name: "fetchData", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI912033, name: "node", sons: null}, 
{kind: 1, offset: "oldValue", len: 0, typ: NTI10356043, name: "oldValue", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 1, offset: "matches", len: 0, typ: NTI10938923, name: "matches", sons: null}], 
[setConstr(1), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "match_templates", len: 0, typ: NTI10938928, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI10938942, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI912033, name: "anchor", sons: null}]}]]}]};
NTI10938908.node = NNI10938908;
NTI10938907.base = NTI10938908;
NTI10939051.base = NTI10938907;
NTI10945325.base = NTI10938933;
NTI10945342.base = NTI10938907;
NTI10965674.base = NTI10938907;
var NNI10950002 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI112, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI10356043, name: "Field1", sons: null}]};
NTI10950002.node = NNI10950002;
var NNI10980002 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI112, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI10356043, name: "Field1", sons: null}]};
NTI10980002.node = NNI10980002;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function modInt(a_230475, b_230476) {
        if (b_230476 == 0) raiseDivByZero();
    if (b_230476 == -1 && a_230475 == 2147483647) raiseOverflow();
    return Math.trunc(a_230475 % b_230476);
  

  
}
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet2 = setConstr(5);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(4);
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet4 = setConstr(6);
var ConstSet5 = setConstr(5);
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var ConstSet6 = setConstr(6);
var ConstSet7 = setConstr(5);
function addChar(x_275031, c_275032) {
    x_275031.push(c_275032);

  
}
var ConstSet8 = setConstr(4);
var ConstSet9 = setConstr(2);
var ConstSet10 = setConstr(3);
var ConstSet11 = setConstr(1);
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(true);
var ConstSet14 = setConstr(true);
var ConstSet15 = setConstr(true);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
var ConstSet18 = setConstr(4);
var ConstSet19 = setConstr(4);
var ConstSet20 = setConstr(2);
var ConstSet21 = setConstr(2);
var ConstSet22 = setConstr(3);
var ConstSet23 = setConstr(3);
var ConstSet24 = setConstr(1);
var ConstSet25 = setConstr(1);
var ConstSet26 = setConstr(6);
var ConstSet27 = setConstr(6);
var ConstSet28 = setConstr(5);
var ConstSet29 = setConstr(5);
var ConstSet30 = setConstr(5);
var ConstSet31 = setConstr(5);
var ConstSet32 = setConstr(5);
var ConstSet33 = setConstr(true);
function reprEnum(e_315480, typ_315481) {
  var result_315482 = null;

  var F={procname:"system.reprEnum",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    if (!(is_undefined_315483(typ_315481.node.sons[e_315480]))) {
    F.line = 38;
    result_315482 = nimCopy(null, makeNimstrLit(typ_315481.node.sons[e_315480].name), NTI112);
    }
    else {
      F.line = 40;
      result_315482 = nimCopy(null, (cstrToNimstr((e_315480)+"") || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI112);
    }
    
  framePtr = F.prev;

  return result_315482;

}
var ConstSet34 = setConstr(6);
var ConstSet35 = setConstr(true);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(true);
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(true);
var ConstSet40 = setConstr(true);
var ConstSet41 = setConstr(true);
var ConstSet42 = setConstr(false);
function genericReset(x_250044, ti_250045) {
  var result_250046 = null;

    result_250046 = null;
    switch (ti_250045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (is_fat_pointer_235401(ti_250045)) {
              result_250046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_250046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_250045.kind == 17)) {
      result_250046 = {m_type: ti_250045};
      }
      else {
        result_250046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_250046 = [];
    
      break;
    case 4:
    case 16:
            result_250046 = new Array(x_250044.length);
      for (var i = 0; i < x_250044.length; ++i) {
        result_250046[i] = genericReset(x_250044[i], ti_250045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_250046;

}
var ConstSet43 = setConstr(5);
var ConstSet44 = setConstr(6);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_945031 = [0];
function new_10938620() {
  var result_10938624 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_10938801 = null;
    F.line = 851;
    r_10938801 = {matches: null};
    F.line = 852;
    result_10938624 = r_10938801;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10938624;

}
function create_10938601(configurator_10938611) {
  var result_10938613 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 43;
    result_10938613 = new_10938620();
    F.line = 44;
    configurator_10938611(result_10938613);
  framePtr = F.prev;

  return result_10938613;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function match_10938120(t_10938124, selector_10938125, fetch_data_10938127, refresh_10938129) {
  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 47;
    var match_10938146 = {selector: nimCopy(null, selector_10938125, NTI112), refresh: [refresh_10938129], iter: false, fetchData: fetch_data_10938127, matches: null};
    F.line = 52;
    if (t_10938124.matches != null) { t_10938124.matches.push(match_10938146); } else { t_10938124.matches = [match_10938146]; };
  framePtr = F.prev;

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__10980393 = 0;
      colontmp__10980393 = (i_160051 - 1);
      var res_10980398 = colontmp__10980393;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_10980398)) break L8;
            j_175236 = res_10980398;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_10980398 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function imul_945517(a_945519, b_945520) {
  var result_945521 = 0;

  var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 133;
    var mask_945522 = 65535;
    F.line = 135;
    var a_hi_945531 = (((a_945519 >>> 0) >>> 16) & mask_945522);
    F.line = 136;
    var a_lo_945532 = (a_945519 & mask_945522);
    F.line = 137;
    var b_hi_945541 = (((b_945520 >>> 0) >>> 16) & mask_945522);
    F.line = 138;
    var b_lo_945542 = (b_945520 & mask_945522);
    F.line = 139;
    result_945521 = ((((a_lo_945532 * b_lo_945542) >>> 0) + (((((a_hi_945531 * b_lo_945542) >>> 0) + ((a_lo_945532 * b_hi_945541) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_945521;

}
function rotl32_945601(x_945603, r_945604) {
  var result_945605 = 0;

  var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_945605 = ((x_945603 << r_945604) | ((x_945603 >>> 0) >>> subInt(32, r_945604)));
  framePtr = F.prev;

  return result_945605;

}
function murmur_hash_945629(x_945632) {
  var result_945633 = 0;

  var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 155;
    var size_945643 = (x_945632 != null ? x_945632.length : 0);
    F.line = 156;
    var step_size_945645 = 4;
    F.line = 157;
    var n_945646 = divInt(size_945643, step_size_945645);
    F.line = 159;
    var h1_945647 = 0;
    F.line = 160;
    var i_945649 = 0;
    L1: do {
      F.line = 163;
        L2: while (true) {
        if (!(i_945649 < mulInt(n_945646, step_size_945645))) break L2;
          F.line = 164;
          var k1_945650 = 0;
          F.line = 166;
          var j_945651 = step_size_945645;
          L3: do {
            F.line = 167;
              L4: while (true) {
              if (!(0 < j_945651)) break L4;
                F.line = 168;
                j_945651 = subInt(j_945651, 1);
                F.line = 169;
                k1_945650 = ((k1_945650 << 8) | x_945632[chckIndx(addInt(i_945649, j_945651), 0, (x_945632 != null ? x_945632.length : 0)+0-1)-0]);
              }
          } while(false);
          F.line = 172;
          i_945649 = addInt(i_945649, step_size_945645);
          F.line = 174;
          k1_945650 = imul_945517(k1_945650, 3432918353);
          F.line = 175;
          k1_945650 = rotl32_945601(k1_945650, 15);
          F.line = 176;
          k1_945650 = imul_945517(k1_945650, 461845907);
          F.line = 178;
          h1_945647 = (h1_945647 ^ k1_945650);
          F.line = 179;
          h1_945647 = rotl32_945601(h1_945647, 13);
          F.line = 180;
          h1_945647 = ((((h1_945647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    F.line = 183;
    var k1_950208 = 0;
    F.line = 184;
    var rem_950209 = modInt(size_945643, step_size_945645);
    L5: do {
      F.line = 185;
        L6: while (true) {
        if (!(0 < rem_950209)) break L6;
          F.line = 186;
          rem_950209 = subInt(rem_950209, 1);
          F.line = 187;
          k1_950208 = ((k1_950208 << 8) | x_945632[chckIndx(addInt(i_945649, rem_950209), 0, (x_945632 != null ? x_945632.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 188;
    k1_950208 = imul_945517(k1_950208, 3432918353);
    F.line = 189;
    k1_950208 = rotl32_945601(k1_950208, 15);
    F.line = 190;
    k1_950208 = imul_945517(k1_950208, 461845907);
    F.line = 191;
    h1_945647 = (h1_945647 ^ k1_950208);
    F.line = 194;
    h1_945647 = (h1_945647 ^ size_945643);
    F.line = 195;
    h1_945647 = (h1_945647 ^ ((h1_945647 >>> 0) >>> 16));
    F.line = 196;
    h1_945647 = imul_945517(h1_945647, 2246822507);
    F.line = 197;
    h1_945647 = (h1_945647 ^ ((h1_945647 >>> 0) >>> 13));
    F.line = 198;
    h1_945647 = imul_945517(h1_945647, 3266489909);
    F.line = 199;
    h1_945647 = (h1_945647 ^ ((h1_945647 >>> 0) >>> 16));
    F.line = 200;
    result_945633 = (h1_945647|0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_945633;

}
function hash_985214(x_985216) {
  var result_985217 = 0;

  var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_985217 = murmur_hash_945629((x_985216.slice(0, (x_985216 != null ? (x_985216.length-1) : -1)+1)));
  framePtr = F.prev;

  return result_985217;

}
function is_filled_1094018(hcode_1094020) {
  var result_1094021 = false;

  var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_1094021 = !((hcode_1094020 == 0));
  framePtr = F.prev;

  return result_1094021;

}
function next_try_1095014(h_1095016, max_hash_1095017) {
  var result_1095018 = 0;

  var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_1095018 = (addInt(h_1095016, 1) & max_hash_1095017);
  framePtr = F.prev;

  return result_1095018;

}
function raw_get_10550157(t_10550161, key_10550162, hc_10550163, hc_10550163_Idx) {
            var Tmp3;

  var result_10550164 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10550163[hc_10550163_Idx] = hash_985214(key_10550162);
    if ((hc_10550163[hc_10550163_Idx] == 0)) {
    F.line = 65;
    hc_10550163[hc_10550163_Idx] = 314159265;
    }
    
    if (((t_10550161.data != null ? t_10550161.data.length : 0) == 0)) {
    F.line = 47;
    result_10550164 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10560138 = (hc_10550163[hc_10550163_Idx] & (t_10550161.data != null ? (t_10550161.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1094018(t_10550161.data[chckIndx(h_10560138, 0, (t_10550161.data != null ? t_10550161.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10550161.data[chckIndx(h_10560138, 0, (t_10550161.data != null ? t_10550161.data.length : 0)+0-1)-0].Field0 == hc_10550163[hc_10550163_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10550161.data[chckIndx(h_10560138, 0, (t_10550161.data != null ? t_10550161.data.length : 0)+0-1)-0].Field2, key_10550162);            }          if (Tmp3) {
          F.line = 55;
          result_10550164 = h_10560138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10560138 = next_try_1095014(h_10560138, (t_10550161.data != null ? (t_10550161.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10550164 = subInt(-1, h_10560138);
  } while (false);
  framePtr = F.prev;

  return result_10550164;

}
function HEX5BHEX5D_10550146(t_10550152, key_10550153) {
  var result_10550155 = null;
  var result_10550155_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym1110595_10550156 = [0];
    F.line = 258;
    var indexHEX60gensym1110596_10560605 = raw_get_10550157(t_10550152, key_10550153, hcHEX60gensym1110595_10550156, 0);
    if ((0 <= indexHEX60gensym1110596_10560605)) {
    F.line = 259;
    result_10550155 = t_10550152.data[chckIndx(indexHEX60gensym1110596_10560605, 0, (t_10550152.data != null ? t_10550152.data.length : 0)+0-1)-0]; result_10550155_Idx = "Field3";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10550153 || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_10550155, result_10550155_Idx];

}
function HEX5BHEX5D_10565497(node_10565499, name_10565500) {
    var Tmp1;
    var Tmp2;

  var result_10565501 = null;

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!(!((node_10565499 == null)))) {
    F.line = 464;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(464, 9) `not isNil(node)` "));
    }
    
    if (!((node_10565499.kind == 5))) {
    F.line = 465;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(465, 9) `node.kind == JObject` "));
    }
    
    F.line = 468;
    var Tmp1 = node_10565499;
    if (ConstSet2[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    result_10565501 = (Tmp2 = HEX5BHEX5D_10550146(Tmp1.fields, name_10565500), Tmp2)[0][Tmp2[1]];
  framePtr = F.prev;

  return result_10565501;

}
function get_10936085(k1_10936087) {
    k1_10936087 = nimCopy(null, k1_10936087, NTI112);
    function HEX3Aanonymous_10936093(node_10936095) {
      var result_10936096 = null;

      var F={procname:"get.:anonymous",prev:framePtr,filename:"sveltejson.nim",line:0};
      framePtr = F;
        F.line = 7;
        result_10936096 = HEX5BHEX5D_10565497(node_10936095, k1_10936087);
      framePtr = F.prev;

      return result_10936096;

    }

  var result_10936092 = null;

  var F={procname:"sveltejson.get",prev:framePtr,filename:"sveltejson.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 7;
    result_10936092 = HEX3Aanonymous_10936093;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10936092;

}
function get_str_10375703(n_10375705, default_10375706) {
      var Tmp1;
      var Tmp2;

  var result_10375707 = null;

  var F={procname:"json.getStr",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if ((n_10375705 == null)) Tmp1 = true; else {        Tmp1 = !((n_10375705.kind == 4));      }    if (Tmp1) {
    F.line = 220;
    result_10375707 = nimCopy(null, default_10375706, NTI112);
    break BeforeRet;
    }
    else {
      F.line = 221;
      var Tmp2 = n_10375705;
      if (ConstSet3[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_10375707 = nimCopy(null, Tmp2.str, NTI112);
      break BeforeRet;
    }
    
  } while (false);
  framePtr = F.prev;

  return result_10375707;

}
function iter_10938461(t_10938465, selector_10938466, fetch_data_10938468, actions_10938474) {
  var result_10938476 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 55;
    var match_10938512 = {selector: nimCopy(null, selector_10938466, NTI112), refresh: [], fetchData: fetch_data_10938468, iter: true, matches: []};
    F.line = 61;
    if (t_10938465.matches != null) { t_10938465.matches.push(match_10938512); } else { t_10938465.matches = [match_10938512]; };
    if (!((actions_10938474 == null))) {
    F.line = 63;
    actions_10938474(match_10938512);
    }
    
    F.line = 64;
    result_10938476 = match_10938512;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10938476;

}
function match_10938366(t_10938370, selector_10938371, fetch_data_10938373, refresh_10938375) {
  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 47;
    var match_10938392 = {selector: nimCopy(null, selector_10938371, NTI112), refresh: [refresh_10938375], iter: false, fetchData: fetch_data_10938373, matches: null};
    F.line = 52;
    if (t_10938370.matches != null) { t_10938370.matches.push(match_10938392); } else { t_10938370.matches = [match_10938392]; };
  framePtr = F.prev;

  
}
function get_10936014() {
    function HEX3Aanonymous_10936025(node_10936027) {
      var result_10936028 = null;

      var F={procname:"get.:anonymous",prev:framePtr,filename:"sveltejson.nim",line:0};
      framePtr = F;
        F.line = 5;
        result_10936028 = node_10936027;
      framePtr = F.prev;

      return result_10936028;

    }

  var result_10936024 = null;

  var F={procname:"sveltejson.get",prev:framePtr,filename:"sveltejson.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 5;
    result_10936024 = HEX3Aanonymous_10936025;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10936024;

}
function len_10535128(t_10535133) {
  var result_10535134 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1467;
    result_10535134 = t_10535133.counter;
  framePtr = F.prev;

  return result_10535134;

}
function len_10565341(n_10565343) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10565344 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 456;
    switch (n_10565343.kind) {
    case 6:
      F.line = 457;
      var Tmp1 = n_10565343;
      if (ConstSet4[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_10565344 = ((Tmp2 = Tmp1.elems, Tmp2) != null ? Tmp2.length : 0);
      break;
    case 5:
      F.line = 458;
      var Tmp3 = n_10565343;
      if (ConstSet5[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_10565344 = len_10535128(Tmp3.fields);
      break;
    default: 
      break;
    }
  framePtr = F.prev;

  return result_10565344;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function nsuToHex(x_9310243, len_9310244) {
  var result_9310245 = null;

  var F={procname:"strutils.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 936;
    var n_9310247 = x_9310243;
    F.line = 937;
    result_9310245 = nimCopy(null, mnewString(len_9310244), NTI112);
    L1: do {
      F.line = 938;
      var j_9310254 = 0;
      F.line = 6;
      var colontmp__10980445 = 0;
      F.line = 938;
      colontmp__10980445 = subInt(len_9310244, 1);
      F.line = 28;
      var res_10980446 = colontmp__10980445;
      L2: do {
        F.line = 29;
          L3: while (true) {
          if (!(0 <= res_10980446)) break L3;
            F.line = 938;
            j_9310254 = res_10980446;
            F.line = 939;
            result_9310245[chckIndx(j_9310254, 0, (result_9310245 != null ? result_9310245.length : 0)+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9310247 & 15), 0, (makeNimstrLit("0123456789ABCDEF") != null ? makeNimstrLit("0123456789ABCDEF").length : 0)+0-1)-0];
            F.line = 940;
            n_9310247 = (n_9310247 >> 4);
            if (((n_9310247 == 0) && (x_9310243 < 0))) {
            F.line = 942;
            n_9310247 = -1;
            }
            
            F.line = 31;
            res_10980446 = subInt(res_10980446, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9310245;

}
function escape_json_unquoted_10701679(s_10701681, result_10701683, result_10701683_Idx) {
  var F={procname:"json.escapeJsonUnquoted",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 585;
      var c_10701685 = 0;
      F.line = 202;
      var i_10980441 = 0;
      F.line = 203;
      var l_10980442 = (s_10701681 != null ? s_10701681.length : 0);
      L2: do {
        F.line = 204;
          L3: while (true) {
          if (!(i_10980441 < l_10980442)) break L3;
            F.line = 585;
            c_10701685 = s_10701681[chckIndx(i_10980441, 0, (s_10701681 != null ? s_10701681.length : 0)+0-1)-0];
            F.line = 586;
            switch (c_10701685) {
            case 10:
              F.line = 587;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\n")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\n"); };
              break;
            case 8:
              F.line = 588;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\b")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\b"); };
              break;
            case 12:
              F.line = 589;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\f")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\f"); };
              break;
            case 9:
              F.line = 590;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\t")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\t"); };
              break;
            case 11:
              F.line = 591;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\u000b")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\u000b"); };
              break;
            case 13:
              F.line = 592;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\r")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\r"); };
              break;
            case 34:
              F.line = 593;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\\"")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\\""); };
              break;
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              F.line = 594;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat((makeNimstrLit("\\u000") || []).concat(cstrToNimstr((c_10701685)+"") || [])); } else { result_10701683[result_10701683_Idx] = (makeNimstrLit("\\u000") || []).concat(cstrToNimstr((c_10701685)+"") || []).slice(); };
              break;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
              F.line = 595;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat((makeNimstrLit("\\u00") || []).concat(nsuToHex(c_10701685, 2) || [])); } else { result_10701683[result_10701683_Idx] = (makeNimstrLit("\\u00") || []).concat(nsuToHex(c_10701685, 2) || []).slice(); };
              break;
            case 92:
              F.line = 596;
              if (result_10701683[result_10701683_Idx] != null) { result_10701683[result_10701683_Idx] = (result_10701683[result_10701683_Idx]).concat(makeNimstrLit("\\\\")); } else { result_10701683[result_10701683_Idx] = makeNimstrLit("\\\\"); };
              break;
            default: 
              F.line = 597;
              if (result_10701683[result_10701683_Idx] != null) { addChar(result_10701683[result_10701683_Idx], c_10701685); } else { result_10701683[result_10701683_Idx] = [c_10701685]; };
              break;
            }
            F.line = 206;
            i_10980441 = addInt(i_10980441, 1);
            if (!(((s_10701681 != null ? s_10701681.length : 0) == l_10980442))) {
            F.line = 207;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(207, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function escape_json_10701732(s_10701734, result_10701736, result_10701736_Idx) {
  var F={procname:"json.escapeJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 607;
    if (result_10701736[result_10701736_Idx] != null) { result_10701736[result_10701736_Idx] = (result_10701736[result_10701736_Idx]).concat(makeNimstrLit("\"")); } else { result_10701736[result_10701736_Idx] = makeNimstrLit("\""); };
    F.line = 608;
    escape_json_unquoted_10701679(s_10701734, result_10701736, result_10701736_Idx);
    F.line = 609;
    if (result_10701736[result_10701736_Idx] != null) { result_10701736[result_10701736_Idx] = (result_10701736[result_10701736_Idx]).concat(makeNimstrLit("\"")); } else { result_10701736[result_10701736_Idx] = makeNimstrLit("\""); };
  framePtr = F.prev;

  
}
function to_ugly_10720035(result_10720038, result_10720038_Idx, node_10720039) {
        var Tmp2;
        var Tmp6;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
        var Tmp13;

  var F={procname:"json.toUgly",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 706;
    var comma_10720040 = false;
    F.line = 707;
    switch (node_10720039.kind) {
    case 6:
      F.line = 709;
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit("[")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit("["); };
      L1: do {
        F.line = 710;
        var child_10720048 = null;
        F.line = 182;
        var colontmp__10980427 = null;
        F.line = 710;
        var Tmp2 = node_10720039;
        if (ConstSet6[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        colontmp__10980427 = Tmp2.elems;
        F.line = 184;
        var i_10980429 = 0;
        F.line = 185;
        var l_10980430 = (colontmp__10980427 != null ? colontmp__10980427.length : 0);
        L3: do {
          F.line = 186;
            L4: while (true) {
            if (!(i_10980429 < l_10980430)) break L4;
              F.line = 710;
              child_10720048 = colontmp__10980427[chckIndx(i_10980429, 0, (colontmp__10980427 != null ? colontmp__10980427.length : 0)+0-1)-0];
              if (comma_10720040) {
              F.line = 711;
              if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit(",")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit(","); };
              }
              else {
                F.line = 712;
                comma_10720040 = true;
              }
              
              F.line = 713;
              to_ugly_10720035(result_10720038, result_10720038_Idx, child_10720048);
              F.line = 188;
              i_10980429 = addInt(i_10980429, 1);
              if (!(((colontmp__10980427 != null ? colontmp__10980427.length : 0) == l_10980430))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      F.line = 714;
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit("]")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit("]"); };
      break;
    case 5:
      F.line = 716;
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit("{")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit("{"); };
      L5: do {
        F.line = 717;
        var key_10720057 = null;
        F.line = 717;
        var value_10720058 = null;
        F.line = 1646;
        var colontmp__10980433 = {data: null, counter: 0, first: 0, last: 0};
        F.line = 717;
        var Tmp6 = node_10720039;
        if (ConstSet7[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        nimCopy(colontmp__10980433, Tmp6.fields, NTI10356067);
        F.line = 1672;
        var l_10980435 = len_10535128(colontmp__10980433);
        if ((0 < colontmp__10980433.counter)) {
        F.line = 1251;
        var h_10980436 = colontmp__10980433.first;
        L7: do {
          F.line = 1252;
            L8: while (true) {
            if (!(0 <= h_10980436)) break L8;
              F.line = 1253;
              var nxt_10980438 = colontmp__10980433.data[chckIndx(h_10980436, 0, (colontmp__10980433.data != null ? colontmp__10980433.data.length : 0)+0-1)-0].Field1;
              if (is_filled_1094018(colontmp__10980433.data[chckIndx(h_10980436, 0, (colontmp__10980433.data != null ? colontmp__10980433.data.length : 0)+0-1)-0].Field0)) {
              F.line = 717;
              key_10720057 = colontmp__10980433.data[chckIndx(h_10980436, 0, (colontmp__10980433.data != null ? colontmp__10980433.data.length : 0)+0-1)-0].Field2;
              F.line = 1674;
              value_10720058 = colontmp__10980433.data[chckIndx(h_10980436, 0, (colontmp__10980433.data != null ? colontmp__10980433.data.length : 0)+0-1)-0].Field3;
              if (comma_10720040) {
              F.line = 718;
              if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit(",")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit(","); };
              }
              else {
                F.line = 719;
                comma_10720040 = true;
              }
              
              F.line = 720;
              escape_json_10701732(key_10720057, result_10720038, result_10720038_Idx);
              F.line = 721;
              if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit(":")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit(":"); };
              F.line = 722;
              to_ugly_10720035(result_10720038, result_10720038_Idx, value_10720058);
              if (!((len_10535128(colontmp__10980433) == l_10980435))) {
              F.line = 1675;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tables.nim(1675, 11) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 1256;
              h_10980436 = nxt_10980438;
            }
        } while(false);
        }
        
      } while(false);
      F.line = 723;
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit("}")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit("}"); };
      break;
    case 4:
      F.line = 725;
      var Tmp9 = node_10720039;
      if (ConstSet8[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      escape_json_10701732(Tmp9.str, result_10720038, result_10720038_Idx);
      break;
    case 2:
      F.line = 727;
      var Tmp10 = node_10720039;
      if (ConstSet9[Tmp10.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(cstrToNimstr((Tmp10.num)+"")); } else { result_10720038[result_10720038_Idx] = cstrToNimstr((Tmp10.num)+"").slice(); };
      break;
    case 3:
      F.line = 730;
      var Tmp11 = node_10720039;
      if (ConstSet10[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(cstrToNimstr((Tmp11.fnum)+"")); } else { result_10720038[result_10720038_Idx] = cstrToNimstr((Tmp11.fnum)+"").slice(); };
      break;
    case 1:
      F.line = 733;
        var Tmp13 = node_10720039;
        if (ConstSet11[Tmp13.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      if (Tmp13.bval) {
      Tmp12 = makeNimstrLit("true");
      }
      else {
      Tmp12 = makeNimstrLit("false");
      }
      
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(Tmp12); } else { result_10720038[result_10720038_Idx] = Tmp12.slice(); };
      break;
    case 0:
      F.line = 735;
      if (result_10720038[result_10720038_Idx] != null) { result_10720038[result_10720038_Idx] = (result_10720038[result_10720038_Idx]).concat(makeNimstrLit("null")); } else { result_10720038[result_10720038_Idx] = makeNimstrLit("null"); };
      break;
    }
  framePtr = F.prev;

  
}
function HEX24_10720416(node_10720418) {
  var result_10720419 = [null];

  var F={procname:"json.$",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 739;
    result_10720419[0] = nimCopy(null, mnewString(0), NTI112);
    F.line = 740;
    to_ugly_10720035(result_10720419, 0, node_10720418);
  framePtr = F.prev;

  return result_10720419[0];

}
function new_10938956() {
  var result_10938960 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_10939001 = null;
    F.line = 851;
    r_10939001 = {matches: null, node: null};
    F.line = 852;
    result_10938960 = r_10939001;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10938960;

}
function compile_10945294(m0_10945298, node_10945299) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
      var Tmp5;
              var Tmp9;
              var Tmp10;

  var result_10945301 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 67;
    var matched_node_10945302 = node_10945299.querySelector(toJSStr(m0_10945298.selector));
    F.line = 68;
    var match_10945307 = {refresh: nimCopy(null, m0_10945298.refresh, NTI10938037), fetchData: m0_10945298.fetchData, iter: m0_10945298.iter, node: matched_node_10945302, oldValue: null, matches: null, match_templates: null, items: null, anchor: null};
    F.line = 73;
    match_10945307.node = matched_node_10945302;
    if (match_10945307.iter) {
    var Tmp1 = match_10945307;
    if (ConstSet12[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 75;
    Tmp1.anchor = matched_node_10945302.ownerDocument.createComment(matched_node_10945302.outerHTML);
    var Tmp2 = match_10945307;
    if (ConstSet13[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 76;
    Tmp2.match_templates = nimCopy(null, m0_10945298.matches, NTI10938045);
    var Tmp3 = match_10945307;
    if (ConstSet14[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 77;
    Tmp3.items = nimCopy(null, [], NTI10945325);
    F.line = 78;
    var Tmp4 = match_10945307;
    if (ConstSet15[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_10945302.parentNode.replaceChild(Tmp4.anchor, matched_node_10945302);
    }
    else {
      var Tmp5 = match_10945307;
      if (ConstSet16[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 80;
      Tmp5.matches = nimCopy(null, [], NTI10945342);
      L6: do {
        F.line = 81;
        var submatch_10945349 = null;
        F.line = 184;
        var i_10980459 = 0;
        F.line = 185;
        var l_10980460 = (m0_10945298.matches != null ? m0_10945298.matches.length : 0);
        L7: do {
          F.line = 186;
            L8: while (true) {
            if (!(i_10980459 < l_10980460)) break L8;
              F.line = 81;
              submatch_10945349 = m0_10945298.matches[chckIndx(i_10980459, 0, (m0_10945298.matches != null ? m0_10945298.matches.length : 0)+0-1)-0];
              F.line = 82;
              var Tmp9 = match_10945307;
              if (ConstSet17[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              if ((Tmp10 = Tmp9.matches, Tmp10) != null) { Tmp10.push(compile_10945294(submatch_10945349, matched_node_10945302)); } else { Tmp10 = [compile_10945294(submatch_10945349, matched_node_10945302)]; };
              F.line = 188;
              i_10980459 = addInt(i_10980459, 1);
              if (!(((m0_10945298.matches != null ? m0_10945298.matches.length : 0) == l_10980460))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
    F.line = 83;
    result_10945301 = match_10945307;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10945301;

}
function compile_10938894(tf_10938898, node_10938899) {
  var result_10938949 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 91;
    var t_10939036 = new_10938956();
    F.line = 92;
    t_10939036.matches = nimCopy(null, [], NTI10939051);
    F.line = 93;
    t_10939036.node = node_10938899.cloneNode(true);
    L1: do {
      F.line = 94;
      var match_tmpl_10945214 = null;
      F.line = 184;
      var i_10980454 = 0;
      F.line = 185;
      var l_10980455 = (tf_10938898.matches != null ? tf_10938898.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_10980454 < l_10980455)) break L3;
            F.line = 94;
            match_tmpl_10945214 = tf_10938898.matches[chckIndx(i_10980454, 0, (tf_10938898.matches != null ? tf_10938898.matches.length : 0)+0-1)-0];
            F.line = 95;
            var match_10945489 = compile_10945294(match_tmpl_10945214, t_10939036.node);
            F.line = 96;
            if (t_10939036.matches != null) { t_10939036.matches.push(match_10945489); } else { t_10939036.matches = [match_10945489]; };
            F.line = 188;
            i_10980454 = addInt(i_10980454, 1);
            if (!(((tf_10938898.matches != null ? tf_10938898.matches.length : 0) == l_10980455))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    F.line = 97;
    result_10938949 = t_10939036;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10938949;

}
function HEX3DHEX3D_10530020(x_10530024, y_10530026) {
  var result_10530027 = false;

  var F={procname:"==.==",prev:framePtr,filename:"comparisons.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 301;
    var same_object_10530601 = false;
    F.line = 302;
    same_object_10530601 = x_10530024 === y_10530026
    if (same_object_10530601) {
    F.line = 303;
    result_10530027 = true;
    break BeforeRet;
    }
    
    if (!(((x_10530024 != null ? x_10530024.length : 0) == (y_10530026 != null ? y_10530026.length : 0)))) {
    F.line = 310;
    result_10530027 = false;
    break BeforeRet;
    }
    
    L1: do {
      F.line = 312;
      var i_10531024 = 0;
      F.line = 66;
      var colontmp__10980505 = 0;
      F.line = 312;
      colontmp__10980505 = subInt((x_10530024 != null ? x_10530024.length : 0), 1);
      F.line = 77;
      var res_10980506 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_10980506 <= colontmp__10980505)) break L3;
            F.line = 312;
            i_10531024 = res_10980506;
            if (!(HEX3DHEX3D_10525506(x_10530024[chckIndx(i_10531024, 0, (x_10530024 != null ? x_10530024.length : 0)+0-1)-0], y_10530026[chckIndx(i_10531024, 0, (y_10530026 != null ? y_10530026.length : 0)+0-1)-0]))) {
            F.line = 314;
            result_10530027 = false;
            break BeforeRet;
            }
            
            F.line = 80;
            res_10980506 = addInt(res_10980506, 1);
          }
      } while(false);
    } while(false);
    F.line = 316;
    result_10530027 = true;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10530027;

}
function raw_get_10450621(t_10450626, key_10450627, hc_10450628, hc_10450628_Idx) {
            var Tmp3;

  var result_10450629 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10450628[hc_10450628_Idx] = hash_985214(key_10450627);
    if ((hc_10450628[hc_10450628_Idx] == 0)) {
    F.line = 65;
    hc_10450628[hc_10450628_Idx] = 314159265;
    }
    
    if (((t_10450626.data != null ? t_10450626.data.length : 0) == 0)) {
    F.line = 47;
    result_10450629 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10460138 = (hc_10450628[hc_10450628_Idx] & (t_10450626.data != null ? (t_10450626.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1094018(t_10450626.data[chckIndx(h_10460138, 0, (t_10450626.data != null ? t_10450626.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10450626.data[chckIndx(h_10460138, 0, (t_10450626.data != null ? t_10450626.data.length : 0)+0-1)-0].Field0 == hc_10450628[hc_10450628_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10450626.data[chckIndx(h_10460138, 0, (t_10450626.data != null ? t_10450626.data.length : 0)+0-1)-0].Field2, key_10450627);            }          if (Tmp3) {
          F.line = 55;
          result_10450629 = h_10460138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10460138 = next_try_1095014(h_10460138, (t_10450626.data != null ? (t_10450626.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10450629 = subInt(-1, h_10460138);
  } while (false);
  framePtr = F.prev;

  return result_10450629;

}
function has_key_10545326(t_10545331, key_10545332) {
  var result_10545333 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1371;
    var hc_10545334 = [0];
    F.line = 1372;
    result_10545333 = (0 <= raw_get_10450621(t_10545331, key_10545332, hc_10545334, 0));
  framePtr = F.prev;

  return result_10545333;

}
function HEX3DHEX3D_10525506(a_10525508, b_10525509) {
      var Tmp1;
        var Tmp2;
        var Tmp3;
        var Tmp4;
        var Tmp5;
        var Tmp6;
        var Tmp7;
        var Tmp8;
        var Tmp9;
        var Tmp10;
        var Tmp11;
          var Tmp12;
          var Tmp13;
          var Tmp15;
                  var Tmp18;
                  var Tmp19;
                  var Tmp20;

  var result_10525510 = false;

  var F={procname:"json.==",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((a_10525508 == null)) {
    if ((b_10525509 == null)) {
    F.line = 400;
    result_10525510 = true;
    break BeforeRet;
    }
    
    F.line = 401;
    result_10525510 = false;
    break BeforeRet;
    }
    else {
      if ((b_10525509 == null)) Tmp1 = true; else {        Tmp1 = !((a_10525508.kind == b_10525509.kind));      }    if (Tmp1) {
    F.line = 403;
    result_10525510 = false;
    break BeforeRet;
    }
    else {
      F.line = 405;
      switch (a_10525508.kind) {
      case 4:
        F.line = 407;
        var Tmp2 = a_10525508;
        if (ConstSet18[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp3 = b_10525509;
        if (ConstSet19[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10525510 = eqStrings(Tmp2.str, Tmp3.str);
        break;
      case 2:
        F.line = 409;
        var Tmp4 = a_10525508;
        if (ConstSet20[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp5 = b_10525509;
        if (ConstSet21[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10525510 = (Tmp4.num == Tmp5.num);
        break;
      case 3:
        F.line = 411;
        var Tmp6 = a_10525508;
        if (ConstSet22[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp7 = b_10525509;
        if (ConstSet23[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10525510 = (Tmp6.fnum == Tmp7.fnum);
        break;
      case 1:
        F.line = 413;
        var Tmp8 = a_10525508;
        if (ConstSet24[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp9 = b_10525509;
        if (ConstSet25[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10525510 = (Tmp8.bval == Tmp9.bval);
        break;
      case 0:
        F.line = 415;
        result_10525510 = true;
        break;
      case 6:
        F.line = 417;
        var Tmp10 = a_10525508;
        if (ConstSet26[Tmp10.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp11 = b_10525509;
        if (ConstSet27[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10525510 = HEX3DHEX3D_10530020(Tmp10.elems, Tmp11.elems);
        break;
      case 5:
          var Tmp12 = a_10525508;
          if (ConstSet28[Tmp12.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          var Tmp13 = b_10525509;
          if (ConstSet29[Tmp13.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        if (!((len_10535128(Tmp12.fields) == len_10535128(Tmp13.fields)))) {
        F.line = 421;
        result_10525510 = false;
        break BeforeRet;
        }
        
        L14: do {
          F.line = 422;
          var key_10545214 = null;
          F.line = 422;
          var val_10545215 = null;
          F.line = 1646;
          var colontmp__10980499 = {data: null, counter: 0, first: 0, last: 0};
          F.line = 422;
          var Tmp15 = a_10525508;
          if (ConstSet30[Tmp15.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          nimCopy(colontmp__10980499, Tmp15.fields, NTI10356067);
          F.line = 1672;
          var l_10980500 = len_10535128(colontmp__10980499);
          if ((0 < colontmp__10980499.counter)) {
          F.line = 1251;
          var h_10980501 = colontmp__10980499.first;
          L16: do {
            F.line = 1252;
              L17: while (true) {
              if (!(0 <= h_10980501)) break L17;
                F.line = 1253;
                var nxt_10980503 = colontmp__10980499.data[chckIndx(h_10980501, 0, (colontmp__10980499.data != null ? colontmp__10980499.data.length : 0)+0-1)-0].Field1;
                if (is_filled_1094018(colontmp__10980499.data[chckIndx(h_10980501, 0, (colontmp__10980499.data != null ? colontmp__10980499.data.length : 0)+0-1)-0].Field0)) {
                F.line = 422;
                key_10545214 = colontmp__10980499.data[chckIndx(h_10980501, 0, (colontmp__10980499.data != null ? colontmp__10980499.data.length : 0)+0-1)-0].Field2;
                F.line = 1674;
                val_10545215 = colontmp__10980499.data[chckIndx(h_10980501, 0, (colontmp__10980499.data != null ? colontmp__10980499.data.length : 0)+0-1)-0].Field3;
                  var Tmp18 = b_10525509;
                  if (ConstSet31[Tmp18.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(has_key_10545326(Tmp18.fields, key_10545214))) {
                F.line = 423;
                result_10525510 = false;
                break BeforeRet;
                }
                
                  var Tmp19 = b_10525509;
                  if (ConstSet32[Tmp19.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(HEX3DHEX3D_10525506((Tmp20 = HEX5BHEX5D_10550146(Tmp19.fields, key_10545214), Tmp20)[0][Tmp20[1]], val_10545215))) {
                F.line = 424;
                result_10525510 = false;
                break BeforeRet;
                }
                
                if (!((len_10535128(colontmp__10980499) == l_10980500))) {
                F.line = 1675;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tables.nim(1675, 11) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 1256;
                h_10980501 = nxt_10980503;
              }
          } while(false);
          }
          
        } while(false);
        F.line = 425;
        result_10525510 = true;
        break;
      }
    }
    }
  } while (false);
  framePtr = F.prev;

  return result_10525510;

}
function is_undefined_315483(x_315486) {
  var result_315487 = false;

  var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_315487 = x_315486 === undefined;
  framePtr = F.prev;

  return result_315487;

}
function compile_10965650(tfs_10965655, node_10965656) {
  var result_10965659 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 86;
    result_10965659 = nimCopy(null, [], NTI10965674);
    L1: do {
      F.line = 87;
      var tf_10965681 = null;
      F.line = 184;
      var i_10980514 = 0;
      F.line = 185;
      var l_10980515 = (tfs_10965655 != null ? tfs_10965655.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_10980514 < l_10980515)) break L3;
            F.line = 87;
            tf_10965681 = tfs_10965655[chckIndx(i_10980514, 0, (tfs_10965655 != null ? tfs_10965655.length : 0)+0-1)-0];
            F.line = 88;
            if (result_10965659 != null) { result_10965659.push(compile_10945294(tf_10965681, node_10965656)); } else { result_10965659 = [compile_10945294(tf_10965681, node_10965656)]; };
            F.line = 188;
            i_10980514 = addInt(i_10980514, 1);
            if (!(((tfs_10965655 != null ? tfs_10965655.length : 0) == l_10980515))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10965659;

}
function create_iter_item_10965600(match_10965604, parent_node_10965605) {
    var Tmp1;
    var Tmp2;

  var result_10965607 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 100;
    var node_10965608 = match_10965604.node.cloneNode(true);
    F.line = 101;
    var Tmp1 = match_10965604;
    if (ConstSet37[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_10965607 = {node: node_10965608, matches: compile_10965650(Tmp1.match_templates, node_10965608)};
    F.line = 104;
    var Tmp2 = match_10965604;
    if (ConstSet38[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_10965605.insertBefore(node_10965608, Tmp2.anchor);
  framePtr = F.prev;

  return result_10965607;

}
function detach_10975525(iter_item_10975529, parent_node_10975530) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 107;
    parent_node_10975530.removeChild(iter_item_10975529.node);
  framePtr = F.prev;

  
}
function pop_10975353(s_10975358, s_10975358_Idx) {
  var result_10975359 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_10975365 = subInt((s_10975358[s_10975358_Idx] != null ? s_10975358[s_10975358_Idx].length : 0), 1);
    F.line = 1784;
    result_10975359 = s_10975358[s_10975358_Idx][chckIndx(l_10975365, 0, (s_10975358[s_10975358_Idx] != null ? s_10975358[s_10975358_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_10975358[s_10975358_Idx] === null) s_10975358[s_10975358_Idx] = [];
               if (s_10975358[s_10975358_Idx].length < chckRange(l_10975365, 0, 2147483647)) { for (var i=s_10975358[s_10975358_Idx].length;i<chckRange(l_10975365, 0, 2147483647);++i) s_10975358[s_10975358_Idx].push(null); }
               else { s_10975358[s_10975358_Idx].length = chckRange(l_10975365, 0, 2147483647); };
  framePtr = F.prev;

  return result_10975359;

}
function update_10965455(match_10965459, data_10965460, refresh_10965461) {
      var Tmp1;
    var Tmp2;
        var Tmp5;
                var Tmp8;
                var Tmp9;
              var Tmp10;
              var Tmp11;
                var Tmp12;
                var Tmp13;
          var Tmp22;
          var Tmp23;
          var Tmp24;
        var Tmp29;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 111;
    var val_10965462 = match_10965459.fetchData(data_10965460);
      if (!!(refresh_10965461)) Tmp1 = false; else {        Tmp1 = HEX3DHEX3D_10525506(val_10965462, match_10965459.oldValue);      }    if (Tmp1) {
    F.line = 113;
    break BeforeRet;
    }
    
    F.line = 115;
    match_10965459.oldValue = val_10965462;
    if (match_10965459.iter) {
    F.line = 117;
    var i_10965464 = 0;
    F.line = 118;
    var Tmp2 = match_10965459;
    if (ConstSet33[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_10965466 = Tmp2.anchor.parentNode;
    L3: do {
      F.line = 119;
      var item_10965467 = null;
      if (!((val_10965462.kind == 6))) {
      F.line = 744;
      failed_assert_impl_102680((makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(744, 10) `node.kind == JArray` : items() can not iterate a JsonNode of kind ") || []).concat(reprEnum(val_10965462.kind, NTI10356041) || []));
      }
      
      L4: do {
        F.line = 745;
        var i_10980483 = null;
        F.line = 182;
        var colontmp__10980484 = null;
        F.line = 745;
        var Tmp5 = val_10965462;
        if (ConstSet34[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        colontmp__10980484 = Tmp5.elems;
        F.line = 184;
        var i_10980485 = 0;
        F.line = 185;
        var l_10980486 = (colontmp__10980484 != null ? colontmp__10980484.length : 0);
        L6: do {
          F.line = 186;
            L7: while (true) {
            if (!(i_10980485 < l_10980486)) break L7;
              F.line = 745;
              i_10980483 = colontmp__10980484[chckIndx(i_10980485, 0, (colontmp__10980484 != null ? colontmp__10980484.length : 0)+0-1)-0];
              F.line = 119;
              item_10965467 = i_10980483;
              F.line = 120;
              var iter_item_10965472 = null;
                var Tmp8 = match_10965459;
                if (ConstSet35[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              if ((i_10965464 < ((Tmp9 = Tmp8.items, Tmp9) != null ? Tmp9.length : 0))) {
              F.line = 124;
              var Tmp10 = match_10965459;
              if (ConstSet36[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              iter_item_10965472 = (Tmp11 = Tmp10.items, Tmp11)[chckIndx(i_10965464, 0, (Tmp11 != null ? Tmp11.length : 0)+0-1)-0];
              }
              else {
                F.line = 126;
                iter_item_10965472 = create_iter_item_10965600(match_10965459, parent_node_10965466);
                F.line = 127;
                var Tmp12 = match_10965459;
                if (ConstSet39[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp13 = Tmp12.items, Tmp13) != null) { Tmp13.push(iter_item_10965472); } else { Tmp13 = [iter_item_10965472]; };
              }
              
              L14: do {
                F.line = 130;
                var refresh_proc_10975214 = null;
                F.line = 184;
                var i_10980470 = 0;
                F.line = 185;
                var l_10980471 = (match_10965459.refresh != null ? match_10965459.refresh.length : 0);
                L15: do {
                  F.line = 186;
                    L16: while (true) {
                    if (!(i_10980470 < l_10980471)) break L16;
                      F.line = 130;
                      refresh_proc_10975214 = match_10965459.refresh[chckIndx(i_10980470, 0, (match_10965459.refresh != null ? match_10965459.refresh.length : 0)+0-1)-0];
                      F.line = 131;
                      refresh_proc_10975214(iter_item_10965472.node, item_10965467);
                      F.line = 188;
                      i_10980470 = addInt(i_10980470, 1);
                      if (!(((match_10965459.refresh != null ? match_10965459.refresh.length : 0) == l_10980471))) {
                      F.line = 189;
                      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
              L17: do {
                F.line = 134;
                var submatch_10975221 = null;
                F.line = 184;
                var i_10980474 = 0;
                F.line = 185;
                var l_10980475 = (iter_item_10965472.matches != null ? iter_item_10965472.matches.length : 0);
                L18: do {
                  F.line = 186;
                    L19: while (true) {
                    if (!(i_10980474 < l_10980475)) break L19;
                      F.line = 134;
                      submatch_10975221 = iter_item_10965472.matches[chckIndx(i_10980474, 0, (iter_item_10965472.matches != null ? iter_item_10965472.matches.length : 0)+0-1)-0];
                      F.line = 135;
                      update_10965455(submatch_10975221, item_10965467, refresh_10965461);
                      F.line = 188;
                      i_10980474 = addInt(i_10980474, 1);
                      if (!(((iter_item_10965472.matches != null ? iter_item_10965472.matches.length : 0) == l_10980475))) {
                      F.line = 189;
                      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while(false);
              } while(false);
              F.line = 137;
              i_10965464 = addInt(i_10965464, 1);
              F.line = 188;
              i_10980485 = addInt(i_10980485, 1);
              if (!(((colontmp__10980484 != null ? colontmp__10980484.length : 0) == l_10980486))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    } while(false);
    L20: do {
      F.line = 140;
        L21: while (true) {
          var Tmp22 = match_10965459;
          if (ConstSet40[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_10965464 < ((Tmp23 = Tmp22.items, Tmp23) != null ? Tmp23.length : 0))) break L21;
          F.line = 141;
          var Tmp24 = match_10965459;
          if (ConstSet41[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_10975525(pop_10975353(Tmp24, "items"), parent_node_10965466);
        }
    } while(false);
    }
    else {
      L25: do {
        F.line = 143;
        var refresh_proc_10975550 = null;
        F.line = 184;
        var i_10980490 = 0;
        F.line = 185;
        var l_10980491 = (match_10965459.refresh != null ? match_10965459.refresh.length : 0);
        L26: do {
          F.line = 186;
            L27: while (true) {
            if (!(i_10980490 < l_10980491)) break L27;
              F.line = 143;
              refresh_proc_10975550 = match_10965459.refresh[chckIndx(i_10980490, 0, (match_10965459.refresh != null ? match_10965459.refresh.length : 0)+0-1)-0];
              F.line = 144;
              refresh_proc_10975550(match_10965459.node, val_10965462);
              F.line = 188;
              i_10980490 = addInt(i_10980490, 1);
              if (!(((match_10965459.refresh != null ? match_10965459.refresh.length : 0) == l_10980491))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L28: do {
        F.line = 145;
        var submatch_10975558 = null;
        F.line = 182;
        var colontmp__10980494 = null;
        F.line = 145;
        var Tmp29 = match_10965459;
        if (ConstSet42[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__10980494 = Tmp29.matches;
        F.line = 184;
        var i_10980495 = 0;
        F.line = 185;
        var l_10980496 = (colontmp__10980494 != null ? colontmp__10980494.length : 0);
        L30: do {
          F.line = 186;
            L31: while (true) {
            if (!(i_10980495 < l_10980496)) break L31;
              F.line = 145;
              submatch_10975558 = colontmp__10980494[chckIndx(i_10980495, 0, (colontmp__10980494 != null ? colontmp__10980494.length : 0)+0-1)-0];
              F.line = 188;
              i_10980495 = addInt(i_10980495, 1);
              if (!(((colontmp__10980494 != null ? colontmp__10980494.length : 0) == l_10980496))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function update_10955312(t_10955316, data_10955317, refresh_10955318) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 150;
      var match_10965214 = null;
      F.line = 184;
      var i_10980464 = 0;
      F.line = 185;
      var l_10980465 = (t_10955316.matches != null ? t_10955316.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_10980464 < l_10980465)) break L3;
            F.line = 150;
            match_10965214 = t_10955316.matches[chckIndx(i_10980464, 0, (t_10955316.matches != null ? t_10955316.matches.length : 0)+0-1)-0];
            F.line = 151;
            update_10965455(match_10965214, data_10955317, refresh_10955318);
            F.line = 188;
            i_10980464 = addInt(i_10980464, 1);
            if (!(((t_10955316.matches != null ? t_10955316.matches.length : 0) == l_10980465))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function attach_10955064(t_10955068, target_10955069, anchor_10955070, data_10955071) {
  var F={procname:"attach.attach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 154;
    update_10955312(t_10955068, data_10955071, true);
    F.line = 155;
    target_10955069.insertBefore(t_10955068.node, anchor_10955070);
  framePtr = F.prev;

  
}
function new_jarray_10375657() {
  var result_10375659 = null;

  var F={procname:"json.newJArray",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 214;
    result_10375659 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};
  framePtr = F.prev;

  return result_10375659;

}
function is_power_of_two_1045029(x_1045031) {
    var Tmp1;

  var result_1045032 = false;

  BeforeRet: do {
    if (!(0 < x_1045031)) Tmp1 = false; else {      Tmp1 = ((x_1045031 & (x_1045031 - 1)) == 0);    }    result_1045032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1045032;

}
function init_ordered_table_10356240(initial_size_10356244) {
  var result_10356246 = {data: null, counter: 0, first: 0, last: 0};

  var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_1045029(initial_size_10356244))) {
    F.line = 127;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 128;
    result_10356246.counter = 0;
    F.line = 129;
    result_10356246.data = new Array(chckRange(initial_size_10356244, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10356244, 0, 2147483647);++i) {result_10356246.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    result_10356246.first = -1;
    F.line = 132;
    result_10356246.last = -1;
  framePtr = F.prev;

  return result_10356246;

}
function new_jobject_10356235() {
  var result_10356237 = null;

  var F={procname:"json.newJObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_10356237 = {kind: 5, fields: init_ordered_table_10356240(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
  framePtr = F.prev;

  return result_10356237;

}
function must_rehash_10485601(t_10485604) {
  var result_10485605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10485604.counter < (t_10485604.data != null ? t_10485604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10485605 = ((mulInt((t_10485604.data != null ? t_10485604.data.length : 0), 2) < mulInt(t_10485604.counter, 3)) || (subInt((t_10485604.data != null ? t_10485604.data.length : 0), t_10485604.counter) < 4));
  framePtr = F.prev;

  return result_10485605;

}
function raw_insert_10511349(t_10511355, data_10511358, data_10511358_Idx, key_10511359, val_10511360, hc_10511361, h_10511362) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10511358[data_10511358_Idx][chckIndx(h_10511362, 0, (data_10511358[data_10511358_Idx] != null ? data_10511358[data_10511358_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, key_10511359, NTI112);
    F.line = 23;
    data_10511358[data_10511358_Idx][chckIndx(h_10511362, 0, (data_10511358[data_10511358_Idx] != null ? data_10511358[data_10511358_Idx].length : 0)+0-1)-0].Field3 = val_10511360;
    F.line = 24;
    data_10511358[data_10511358_Idx][chckIndx(h_10511362, 0, (data_10511358[data_10511358_Idx] != null ? data_10511358[data_10511358_Idx].length : 0)+0-1)-0].Field0 = hc_10511361;
    F.line = 1227;
    data_10511358[data_10511358_Idx][chckIndx(h_10511362, 0, (data_10511358[data_10511358_Idx] != null ? data_10511358[data_10511358_Idx].length : 0)+0-1)-0].Field1 = -1;
    if ((t_10511355.first < 0)) {
    F.line = 1228;
    t_10511355.first = h_10511362;
    }
    
    if ((0 <= t_10511355.last)) {
    F.line = 1229;
    data_10511358[data_10511358_Idx][chckIndx(t_10511355.last, 0, (data_10511358[data_10511358_Idx] != null ? data_10511358[data_10511358_Idx].length : 0)+0-1)-0].Field1 = h_10511362;
    }
    
    F.line = 1230;
    t_10511355.last = h_10511362;
  framePtr = F.prev;

  
}
function enlarge_10510180(t_10510186) {
          var Tmp6;
          var Tmp7;

  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1233;
    var n_10510194 = null;
    F.line = 1234;
    n_10510194 = new Array(chckRange(mulInt((t_10510186.data != null ? t_10510186.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10510186.data != null ? t_10510186.data.length : 0), 2), 0, 2147483647);++i) {n_10510194[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 1235;
    var h_10510333 = t_10510186.first;
    F.line = 1236;
    t_10510186.first = -1;
    F.line = 1237;
    t_10510186.last = -1;
    F.line = 1238;
    var Tmp1 = t_10510186.data; t_10510186.data = n_10510194; n_10510194 = Tmp1;    L2: do {
      F.line = 1239;
        L3: while (true) {
        if (!(0 <= h_10510333)) break L3;
          F.line = 1240;
          var nxt_10510489 = n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field1;
          F.line = 1241;
          var eh_10510638 = n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field0;
          if (is_filled_1094018(eh_10510638)) {
          F.line = 1243;
          var j_10510645 = (eh_10510638 & (t_10510186.data != null ? (t_10510186.data.length-1) : -1));
          L4: do {
            F.line = 1244;
              L5: while (true) {
              if (!is_filled_1094018(t_10510186.data[chckIndx(j_10510645, 0, (t_10510186.data != null ? t_10510186.data.length : 0)+0-1)-0].Field0)) break L5;
                F.line = 1245;
                j_10510645 = next_try_1095014(j_10510645, (t_10510186.data != null ? (t_10510186.data.length-1) : -1));
              }
          } while(false);
          F.line = 1246;
          Tmp6 = n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field2;
          n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field2 = genericReset(n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field2, NTI112);
          Tmp7 = n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field3;
          n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field3 = genericReset(n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field3, NTI10356043);
          raw_insert_10511349(t_10510186, t_10510186, "data", Tmp6, Tmp7, n_10510194[chckIndx(h_10510333, 0, (n_10510194 != null ? n_10510194.length : 0)+0-1)-0].Field0, j_10510645);
          }
          
          F.line = 1247;
          h_10510333 = nxt_10510489;
        }
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10512149(t_10512154, key_10512155, hc_10512156) {
  var result_10512157 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10512154.data != null ? t_10512154.data.length : 0) == 0)) {
    F.line = 47;
    result_10512157 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10515138 = (hc_10512156 & (t_10512154.data != null ? (t_10512154.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1094018(t_10512154.data[chckIndx(h_10515138, 0, (t_10512154.data != null ? t_10512154.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10512154.data[chckIndx(h_10515138, 0, (t_10512154.data != null ? t_10512154.data.length : 0)+0-1)-0].Field0 == hc_10512156) && eqStrings(t_10512154.data[chckIndx(h_10515138, 0, (t_10512154.data != null ? t_10512154.data.length : 0)+0-1)-0].Field2, key_10512155))) {
          F.line = 55;
          result_10512157 = h_10515138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10515138 = next_try_1095014(h_10515138, (t_10512154.data != null ? (t_10512154.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10512157 = subInt(-1, h_10515138);
  } while (false);
  framePtr = F.prev;

  return result_10512157;

}
function HEX5BHEX5DHEX3D_10425311(t_10425317, key_10425318, val_10425319) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10425317.data != null ? t_10425317.data.length : 0) == 0)) {
    if (!(is_power_of_two_1045029(64))) {
    F.line = 127;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 128;
    t_10425317.counter = 0;
    F.line = 129;
    t_10425317.data = new Array(64); for (var i=0;i<64;++i) {t_10425317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    t_10425317.first = -1;
    F.line = 132;
    t_10425317.last = -1;
    }
    
    F.line = 57;
    var hc_10450601 = [0];
    F.line = 58;
    var index_10460620 = raw_get_10450621(t_10425317, key_10425318, hc_10450601, 0);
    if ((0 <= index_10460620)) {
    F.line = 59;
    t_10425317.data[chckIndx(index_10460620, 0, (t_10425317.data != null ? t_10425317.data.length : 0)+0-1)-0].Field3 = val_10425319;
    }
    else {
      if (((t_10425317.data != null ? t_10425317.data.length : 0) == 0)) {
      if (!(is_power_of_two_1045029(64))) {
      F.line = 127;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 128;
      t_10425317.counter = 0;
      F.line = 129;
      t_10425317.data = new Array(64); for (var i=0;i<64;++i) {t_10425317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}      F.line = 131;
      t_10425317.first = -1;
      F.line = 132;
      t_10425317.last = -1;
      }
      
      if (must_rehash_10485601(t_10425317)) {
      F.line = 49;
      enlarge_10510180(t_10425317);
      F.line = 50;
      index_10460620 = raw_get_known_hc_10512149(t_10425317, key_10425318, hc_10450601[0]);
      }
      
      F.line = 51;
      index_10460620 = subInt(-1, index_10460620);
      F.line = 52;
      raw_insert_10511349(t_10425317, t_10425317, "data", key_10425318, val_10425319, hc_10450601[0], index_10460620);
      F.line = 60;
      t_10425317.counter = addInt(t_10425317.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function HEX25_10515802(key_vals_10515808) {
            var Tmp4;

  var result_10515809 = null;

  var F={procname:"json.%",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((key_vals_10515808 != null ? key_vals_10515808.length : 0) == 0)) {
    F.line = 310;
    result_10515809 = new_jarray_10375657();
    break BeforeRet;
    }
    
    F.line = 311;
    result_10515809 = new_jobject_10356235();
    L1: do {
      F.line = 312;
      var key_10515859 = null;
      F.line = 312;
      var val_10515860 = null;
      F.line = 3;
      var i_10980519 = 0;
      L2: do {
        F.line = 4;
          L3: while (true) {
          if (!(i_10980519 < (key_vals_10515808 != null ? key_vals_10515808.length : 0))) break L3;
            F.line = 312;
            key_10515859 = key_vals_10515808[chckIndx(i_10980519, 0, (key_vals_10515808 != null ? key_vals_10515808.length : 0)+0-1)-0]["Field0"];
            F.line = 5;
            val_10515860 = key_vals_10515808[chckIndx(i_10980519, 0, (key_vals_10515808 != null ? key_vals_10515808.length : 0)+0-1)-0]["Field1"];
            F.line = 312;
            var Tmp4 = result_10515809;
            if (ConstSet43[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
            HEX5BHEX5DHEX3D_10425311(Tmp4.fields, key_10515859, val_10515860);
            F.line = 6;
            i_10980519 = addInt(i_10980519, 1);
          }
      } while(false);
    } while(false);
  } while (false);
  framePtr = F.prev;

  return result_10515809;

}
function HEX25_10515683(s_10515685) {
  var result_10515686 = null;

  var F={procname:"json.%",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 282;
    result_10515686 = {kind: 4, str: nimCopy(null, s_10515685, NTI112), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10515686;

}
function add_10405020(father_10405022, child_10405023) {
    var Tmp1;
    var Tmp2;

  var F={procname:"json.add",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((father_10405022.kind == 6))) {
    F.line = 272;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(272, 10) `father.kind == JArray` "));
    }
    
    F.line = 273;
    var Tmp1 = father_10405022;
    if (ConstSet44[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_10405023); } else { Tmp2 = [child_10405023]; };
  framePtr = F.prev;

  
}
function HEX25_10950058(elements_10950062) {
  var result_10950063 = null;

  var F={procname:"%.%",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 318;
    result_10950063 = new_jarray_10375657();
    L1: do {
      F.line = 319;
      var elem_10950069 = null;
      F.line = 3;
      var i_10980529 = 0;
      L2: do {
        F.line = 4;
          L3: while (true) {
          if (!(i_10980529 < (elements_10950062 != null ? elements_10950062.length : 0))) break L3;
            F.line = 319;
            elem_10950069 = elements_10950062[chckIndx(i_10980529, 0, (elements_10950062 != null ? elements_10950062.length : 0)+0-1)-0];
            F.line = 319;
            add_10405020(result_10950063, elem_10950069);
            F.line = 6;
            i_10980529 = addInt(i_10980529, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10950063;

}
function HEX3Aanonymous_10938015(t_10938052) {
    function HEX3Aanonymous_10938100(node_10938103, data_10938104) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample1.nim",line:0};
      framePtr = F;
        F.line = 9;
        node_10938103.textContent = toJSStr(get_str_10375703(data_10938104, []));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_10938257(name_10938264) {
        function HEX3Aanonymous_10938347(node_10938350, data_10938351) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample1.nim",line:0};
          framePtr = F;
            F.line = 12;
            node_10938350.textContent = toJSStr(HEX24_10720416(data_10938351));
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample1.nim",line:0};
      framePtr = F;
        F.line = 11;
        match_10938366(name_10938264, makeNimstrLit(".name"), get_10936014(), HEX3Aanonymous_10938347);
      framePtr = F.prev;

      
    }

  var F={procname:"sample1.:anonymous",prev:framePtr,filename:"sample1.nim",line:0};
  framePtr = F;
    F.line = 8;
    match_10938120(t_10938052, makeNimstrLit("h1 .name"), get_10936085(makeNimstrLit("name")), HEX3Aanonymous_10938100);
    iter_10938461(t_10938052, makeNimstrLit("ul li"), get_10936085(makeNimstrLit("names")), HEX3Aanonymous_10938257);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_10975598() {
  var F={procname:"sample1.:anonymous",prev:framePtr,filename:"sample1.nim",line:0};
  framePtr = F;
    F.line = 20;
    update_10955312(tmpl_10945510[0], HEX25_10515802([nimCopy(null, {Field0: makeNimstrLit("name"), Field1: HEX25_10515683(makeNimstrLit("timeout"))}, NTI10980002), nimCopy(null, {Field0: makeNimstrLit("names"), Field1: HEX25_10950058([HEX25_10515683(makeNimstrLit("a")), HEX25_10515683(makeNimstrLit("b")), HEX25_10515683(makeNimstrLit("c")), HEX25_10515683(makeNimstrLit("d"))])}, NTI10980002)]), false);
  framePtr = F.prev;

  
}
var test_template_10938849 = [create_10938601(HEX3Aanonymous_10938015)];
var node_10938850 = [document.querySelector("template#sample-1")];
console.log(node_10938850[0]);
var tmpl_10945510 = [compile_10938894(test_template_10938849[0], node_10938850[0].content)];
console.log(tmpl_10945510[0]);
attach_10955064(tmpl_10945510[0], node_10938850[0].parentNode, node_10938850[0], HEX25_10515802([nimCopy(null, {Field0: makeNimstrLit("name"), Field1: HEX25_10515683(makeNimstrLit("Name!!!"))}, NTI10950002), nimCopy(null, {Field0: makeNimstrLit("names"), Field1: HEX25_10950058([HEX25_10515683(makeNimstrLit("a")), HEX25_10515683(makeNimstrLit("b"))])}, NTI10950002)]));
setTimeout(HEX3Aanonymous_10975598, 1000);
