/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11170049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11161887 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11161880 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11161874 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11161873 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11162746 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11162741 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11162740 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11170030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051413 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051397 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051396 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11161869 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11161519 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11161864 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11180869 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051407 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051402 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051401 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11180886 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051275 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051266 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11140049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11091031 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11091024 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11091018 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11091017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11130842 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11130837 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11130836 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11140030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051072 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051056 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051055 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11091013 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11091004 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11091008 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11060049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11060030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11052011 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11052006 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051146 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051036 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051030 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051033 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051031 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051137 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11160049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051592 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051585 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051579 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051578 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11052675 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI9852029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI9852390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11052670 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11052669 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11160030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051569 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051553 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051552 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051574 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051543 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051547 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4180232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4435011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051563 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051558 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051557 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11070966 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11110649 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI11051066 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051060 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11110666 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NNI11051061 = {kind: 1, offset: "update", len: 0, typ: NTI11051066, name: "update", sons: null};
NTI11051061.node = NNI11051061;
NTI11051060.base = NTI11051061;
NTI11110666.base = NTI11051060;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6249.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
NTI6241.base = NTI6219;
NTI11110649.base = NTI11051060;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI11051558 = {kind: 1, offset: "update", len: 0, typ: NTI11051563, name: "update", sons: null};
NTI11051558.node = NNI11051558;
NTI11051557.base = NTI11051558;
NTI11070966.base = NTI11051557;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4435011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4180232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4435011.node = NNI4435011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI9881015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881015.node = NNI9881015;
NTI9881015.base = NTI6221;
NTI11051547.base = NTI11051543;
var NNI11051553 = {kind: 1, offset: "compile", len: 0, typ: NTI11051569, name: "compile", sons: null};
NTI11051553.node = NNI11051553;
NTI11051552.base = NTI11051553;
NTI11051574.base = NTI11051552;
NTI9852386.base = NTI9852033;
NTI9852388.base = NTI9852033;
NTI9852390.base = NTI9852033;
var NNI9852031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI9852031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI9852031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI9852031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI9852031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI9852031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI9852031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI9852031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI9852031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI9852031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI9852031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI9852031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI9852031, name: "NotationNode", len: 0, sons: null}}};
NTI9852031.node = NNI9852031;
var NNI9852029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9852029.node = NNI9852029;
NTI9852029.base = NTI6008;
NTI9852027.base = NTI9852029;
NTI9852537.base = NTI9852041;
var NNI9852083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI9852537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI9852083.node = NNI9852083;
NTI9852083.base = NTI9852043;
NTI9852081.base = NTI9852083;
var NNI9852079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI9852079.node = NNI9852079;
NTI9852079.base = NTI9852043;
NTI9852077.base = NTI9852079;
NTI9852443.base = NTI9852077;
NTI9852445.base = NTI9852077;
var NNI9852043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI9852027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI9852081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI9852443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI9852445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI9852043.node = NNI9852043;
NTI9852043.base = NTI9852035;
NTI9852041.base = NTI9852043;
var NNI9852075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852075.node = NNI9852075;
NTI9852075.base = NTI9852043;
NTI9852073.base = NTI9852075;
NTI9852423.base = NTI9852073;
NTI9852425.base = NTI9852081;
var NNI9852087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI9852087.node = NNI9852087;
NTI9852087.base = NTI9852043;
NTI9852085.base = NTI9852087;
NTI9852427.base = NTI9852085;
NTI9852429.base = NTI9852041;
var NNI9852071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI9852071.node = NNI9852071;
NTI9852071.base = NTI9852043;
NTI9852069.base = NTI9852071;
NTI9852431.base = NTI9852069;
var NNI9852067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852067.node = NNI9852067;
NTI9852067.base = NTI9852043;
NTI9852065.base = NTI9852067;
NTI9852433.base = NTI9852065;
var NNI9852039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI9852041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI9852041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI9852041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI9852423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI9852425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI9852427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI9852429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI9852431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI9852433, name: "links", sons: null}]};
NTI9852039.node = NNI9852039;
NTI9852039.base = NTI9852035;
NTI9852037.base = NTI9852039;
var NNI9852091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI9852091.node = NNI9852091;
NTI9852091.base = NTI6008;
NTI9852089.base = NTI9852091;
var NNI9852035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI9852386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI9852388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI9852390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI9852033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI9852033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI9852033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI9852031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI9852033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI9852033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI9852033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI9852037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI9852089, name: "style", sons: null}]};
NTI9852035.node = NNI9852035;
var NNI9852005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI9852180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI9852184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI9852188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI9852192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI9852196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI9852200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI9852204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI9852208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI9852212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI9852216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI9852220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI9852224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI9852228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI9852232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI9852236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI9852240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI9852244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI9852248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI9852252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI9852256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI9852260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI9852264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI9852268, name: "onloadend", sons: null}]};
NTI9852005.node = NNI9852005;
NTI9852005.base = NTI6008;
NTI9852035.base = NTI9852005;
NTI9852033.base = NTI9852035;
NTI11052675.base = NTI11051557;
var NNI11051579 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881200, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11051585, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11051592, name: "clone", sons: null}]};
NTI11051579.node = NNI11051579;
NTI11051578.base = NTI11051579;
var NNI11052670 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11052675, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11051578, name: "mount", sons: null}]};
NTI11052670.node = NNI11052670;
NTI11052669.base = NTI11052670;
NTI11160030.base = NTI11052669;
NTI11160049.base = NTI11051557;
NTI11051037.base = NTI11051028;
var NNI11051036 = {kind: 1, offset: "names", len: 0, typ: NTI11051037, name: "names", sons: null};
NTI11051036.node = NNI11051036;
NTI11051030.base = NTI11051036;
NTI11051033.base = NTI11051030;
var NNI11051031 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI11051033, name: "children", sons: null}]};
NTI11051031.node = NNI11051031;
NTI11051028.base = NTI11051031;
NTI11051137.base = NTI11051028;
var NNI11051146 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051028, name: "Field1", sons: null}]};
NTI11051146.node = NNI11051146;
NTI11052006.base = NTI11051543;
NTI11052011.base = NTI11051552;
NTI11060030.base = NTI11052669;
NTI11060049.base = NTI11051557;
NTI11091008.base = NTI11091004;
var NNI11051056 = {kind: 1, offset: "compile", len: 0, typ: NTI11051072, name: "compile", sons: null};
NTI11051056.node = NNI11051056;
NTI11051055.base = NTI11051056;
NTI11091013.base = NTI11051055;
NTI11130842.base = NTI11051060;
var NNI11091018 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881200, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11091024, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11091031, name: "clone", sons: null}]};
NTI11091018.node = NNI11091018;
NTI11091017.base = NTI11091018;
var NNI11130837 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11130842, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11091017, name: "mount", sons: null}]};
NTI11130837.node = NNI11130837;
NTI11130836.base = NTI11130837;
NTI11140030.base = NTI11130836;
NTI11140049.base = NTI11051060;
NTI11051266.base = NTI11051030;
var NNI11051275 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051030, name: "Field1", sons: null}]};
NTI11051275.node = NNI11051275;
var NNI11051402 = {kind: 1, offset: "update", len: 0, typ: NTI11051407, name: "update", sons: null};
NTI11051402.node = NNI11051402;
NTI11051401.base = NTI11051402;
NTI11180886.base = NTI11051401;
NTI11180869.base = NTI11051401;
NTI11161864.base = NTI11161519;
var NNI11051397 = {kind: 1, offset: "compile", len: 0, typ: NTI11051413, name: "compile", sons: null};
NTI11051397.node = NNI11051397;
NTI11051396.base = NTI11051397;
NTI11161869.base = NTI11051396;
NTI11162746.base = NTI11051401;
var NNI11161874 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881200, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11161880, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11161887, name: "clone", sons: null}]};
NTI11161874.node = NNI11161874;
NTI11161873.base = NTI11161874;
var NNI11162741 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11162746, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11161873, name: "mount", sons: null}]};
NTI11162741.node = NNI11162741;
NTI11162740.base = NTI11162741;
NTI11170030.base = NTI11162740;
NTI11170049.base = NTI11051401;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(true);
var ConstSet4 = setConstr(true);
var ConstSet5 = setConstr(true);
var ConstSet6 = setConstr(true);
var ConstSet7 = setConstr(true);
var ConstSet8 = setConstr(true);
var ConstSet9 = setConstr(true);
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(false);
var ConstSet14 = setConstr(false);
var ConstSet15 = setConstr(false);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
var ConstSet18 = setConstr(false);
var ConstSet19 = setConstr(false);
var ConstSet20 = setConstr(false);
var ConstSet21 = setConstr(false);
var ConstSet22 = setConstr(false);
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet23 = setConstr(60, 62, 94);
var ConstSet24 = setConstr(60, 62, 94);
var ConstSet25 = setConstr(45, 43, 32);
var ConstSet26 = setConstr([48, 57]);
var ConstSet27 = setConstr([48, 57]);
var ConstSet28 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet29 = setConstr([65, 90], [97, 122]);
var ConstSet30 = setConstr(true);
var ConstSet31 = setConstr(true);
var ConstSet32 = setConstr(true);
var ConstSet33 = setConstr(true);
var ConstSet34 = setConstr(true);
var ConstSet35 = setConstr(true);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(false);
var ConstSet38 = setConstr(false);
var ConstSet39 = setConstr(false);
var ConstSet40 = setConstr(false);
var ConstSet41 = setConstr(false);
var ConstSet42 = setConstr(false);
var ConstSet43 = setConstr(true);
var ConstSet44 = setConstr(true);
var ConstSet45 = setConstr(true);
var ConstSet46 = setConstr(true);
var ConstSet47 = setConstr(true);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(true);
var ConstSet50 = setConstr(true);
var ConstSet51 = setConstr(true);
var ConstSet52 = setConstr(true);
var ConstSet53 = setConstr(true);
var ConstSet54 = setConstr(false);
var ConstSet55 = setConstr(false);
var ConstSet56 = setConstr(false);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(false);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(false);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(true);
var ConstSet65 = setConstr(true);
var ConstSet66 = setConstr(true);
var ConstSet67 = setConstr(true);
var ConstSet68 = setConstr(true);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(true);
var ConstSet71 = setConstr(false);
var ConstSet72 = setConstr(false);
var ConstSet73 = setConstr(false);
var ConstSet74 = setConstr(false);
var ConstSet75 = setConstr(false);
var ConstSet76 = setConstr(false);
var ConstSet77 = setConstr(true);
var ConstSet78 = setConstr(true);
var ConstSet79 = setConstr(true);
var ConstSet80 = setConstr(true);
var ConstSet81 = setConstr(true);
var ConstSet82 = setConstr(true);
var ConstSet83 = setConstr(true);
var ConstSet84 = setConstr(true);
var ConstSet85 = setConstr(true);
var ConstSet86 = setConstr(true);
var ConstSet87 = setConstr(true);
var ConstSet88 = setConstr(false);
var ConstSet89 = setConstr(false);
var ConstSet90 = setConstr(false);
var ConstSet91 = setConstr(false);
var ConstSet92 = setConstr(false);
var ConstSet93 = setConstr(false);
var ConstSet94 = setConstr(false);
var ConstSet95 = setConstr(false);
var ConstSet96 = setConstr(false);
var ConstSet97 = setConstr(false);
var ConstSet98 = setConstr(true);
var ConstSet99 = setConstr(true);
var ConstSet100 = setConstr(true);
var ConstSet101 = setConstr(true);
var ConstSet102 = setConstr(true);
var ConstSet103 = setConstr(true);
var ConstSet104 = setConstr(true);
var ConstSet105 = setConstr(false);
var ConstSet106 = setConstr(false);
var ConstSet107 = setConstr(false);
var ConstSet108 = setConstr(false);
var ConstSet109 = setConstr(false);
var ConstSet110 = setConstr(false);
var ConstSet111 = setConstr(true);
var ConstSet112 = setConstr(true);
var ConstSet113 = setConstr(true);
var ConstSet114 = setConstr(true);
var ConstSet115 = setConstr(true);
var ConstSet116 = setConstr(true);
var ConstSet117 = setConstr(true);
var ConstSet118 = setConstr(true);
var ConstSet119 = setConstr(true);
var ConstSet120 = setConstr(true);
var ConstSet121 = setConstr(true);
var ConstSet122 = setConstr(false);
var ConstSet123 = setConstr(false);
var ConstSet124 = setConstr(false);
var ConstSet125 = setConstr(false);
var ConstSet126 = setConstr(false);
var ConstSet127 = setConstr(false);
var ConstSet128 = setConstr(false);
var ConstSet129 = setConstr(false);
var ConstSet130 = setConstr(false);
var ConstSet131 = setConstr(false);
var ConstSet132 = setConstr(true);
var ConstSet133 = setConstr(true);
var ConstSet134 = setConstr(true);
var ConstSet135 = setConstr(true);
var ConstSet136 = setConstr(true);
var ConstSet137 = setConstr(true);
var ConstSet138 = setConstr(true);
var ConstSet139 = setConstr(false);
var ConstSet140 = setConstr(false);
var ConstSet141 = setConstr(false);
var ConstSet142 = setConstr(false);
var ConstSet143 = setConstr(false);
var ConstSet144 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_9885031 = [0];
var comp2_11051088 = [null];
var comp1_11051429 = [null];
function new_11110473() {
  var result_11110477 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11110601 = null;
    F.line = 851;
    r_11110601 = {config: null, matches: null, node: null, original_node: null};
    F.line = 852;
    result_11110477 = r_11110601;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11110477;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__11212890 = 0;
      colontmp__11212890 = (i_160051 - 1);
      var res_11212895 = colontmp__11212890;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11212895)) break L8;
            j_175236 = res_11212895;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_11212895 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function compile_11110642(cfgs_11110647, node_11110648) {
  var result_11110651 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 240;
    result_11110651 = nimCopy(null, [], NTI11110666);
    L1: do {
      F.line = 241;
      var cfg_11120214 = null;
      F.line = 184;
      var i_11212875 = 0;
      F.line = 185;
      var l_11212876 = (cfgs_11110647 != null ? cfgs_11110647.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11212875 < l_11212876)) break L3;
            F.line = 241;
            cfg_11120214 = cfgs_11110647[chckIndx(i_11212875, 0, (cfgs_11110647 != null ? cfgs_11110647.length : 0)+0-1)-0];
            F.line = 242;
            if (result_11110651 != null) { result_11110651.push(cfg_11120214.compile(node_11110648)); } else { result_11110651 = [cfg_11120214.compile(node_11110648)]; };
            F.line = 188;
            i_11212875 = addInt(i_11212875, 1);
            if (!(((cfgs_11110647 != null ? cfgs_11110647.length : 0) == l_11212876))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11110651;

}
function compile_11110459(cfg_11110463, node_11110464) {
  var result_11110466 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 245;
    result_11110466 = new_11110473();
    F.line = 246;
    result_11110466.config = cfg_11110463;
    F.line = 247;
    result_11110466.original_node = node_11110464;
    F.line = 248;
    result_11110466.node = node_11110464.cloneNode(true);
    F.line = 249;
    result_11110466.matches = nimCopy(null, compile_11110642(cfg_11110463.matches, result_11110466.node), NTI11110649);
  framePtr = F.prev;

  return result_11110466;

}
function new_11161010() {
  var result_11161014 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11161201 = null;
    F.line = 851;
    r_11161201 = {matches: null};
    F.line = 852;
    result_11161014 = r_11161201;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11161014;

}
function create_11160991(configurator_11161001) {
  var result_11161003 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 125;
    result_11161003 = new_11161010();
    F.line = 126;
    configurator_11161001(result_11161003);
  framePtr = F.prev;

  return result_11161003;

}
function compile_11160975(node_11160980, configurator_11160986) {
  var result_11160988 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 354;
    result_11160988 = compile_11110459(create_11160991(configurator_11160986), node_11160980);
  framePtr = F.prev;

  return result_11160988;

}
function compile_11070942(cfgs_11070947, node_11070948) {
  var result_11070951 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 240;
    result_11070951 = nimCopy(null, [], NTI11070966);
    L1: do {
      F.line = 241;
      var cfg_11070973 = null;
      F.line = 184;
      var i_11212934 = 0;
      F.line = 185;
      var l_11212935 = (cfgs_11070947 != null ? cfgs_11070947.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11212934 < l_11212935)) break L3;
            F.line = 241;
            cfg_11070973 = cfgs_11070947[chckIndx(i_11212934, 0, (cfgs_11070947 != null ? cfgs_11070947.length : 0)+0-1)-0];
            F.line = 242;
            if (result_11070951 != null) { result_11070951.push(cfg_11070973.compile(node_11070948)); } else { result_11070951 = [cfg_11070973.compile(node_11070948)]; };
            F.line = 188;
            i_11212934 = addInt(i_11212934, 1);
            if (!(((cfgs_11070947 != null ? cfgs_11070947.length : 0) == l_11212935))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11070951;

}
function create_iter_item_11160558(match_11160563, parent_node_11160564) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11160566 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 257;
    var comp_11160571 = null;
    F.line = 258;
    var node_11160572 = null;
      var Tmp1 = match_11160563;
      if (ConstSet6[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 260;
    var Tmp2 = match_11160563;
    if (ConstSet7[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11160571 = Tmp2.mount_template.clone();
    F.line = 261;
    node_11160572 = comp_11160571.node();
    }
    else {
      F.line = 263;
      node_11160572 = match_11160563.node.cloneNode(true);
    }
    
    F.line = 264;
    var Tmp3 = match_11160563;
    if (ConstSet8[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11160566 = {mount: comp_11160571, node: node_11160572, matches: compile_11070942(Tmp3.match_templates, node_11160572)};
    F.line = 268;
    var Tmp4 = match_11160563;
    if (ConstSet9[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11160564.insertBefore(node_11160572, Tmp4.anchor);
  framePtr = F.prev;

  return result_11160566;

}
function detach_11090473(iter_item_11090477, parent_node_11090478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 272;
    parent_node_11090478.removeChild(iter_item_11090477.node);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function pop_11090222(s_11090227, s_11090227_Idx) {
  var result_11090228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11090234 = subInt((s_11090227[s_11090227_Idx] != null ? s_11090227[s_11090227_Idx].length : 0), 1);
    F.line = 1784;
    result_11090228 = s_11090227[s_11090227_Idx][chckIndx(l_11090234, 0, (s_11090227[s_11090227_Idx] != null ? s_11090227[s_11090227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11090227[s_11090227_Idx] === null) s_11090227[s_11090227_Idx] = [];
               if (s_11090227[s_11090227_Idx].length < chckRange(l_11090234, 0, 2147483647)) { for (var i=s_11090227[s_11090227_Idx].length;i<chckRange(l_11090234, 0, 2147483647);++i) s_11090227[s_11090227_Idx].push(null); }
               else { s_11090227[s_11090227_Idx].length = chckRange(l_11090234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11090228;

}
function update_11160517(match_11160522, val_11160523, refresh_11160524) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp20;
          var Tmp21;
          var Tmp22;
      var Tmp23;
        var Tmp24;
        var Tmp25;
          var Tmp26;
      var Tmp27;
      var Tmp28;
      var Tmp29;
        var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp34;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11160524)) Tmp1 = false; else {        Tmp1 = (val_11160523 == match_11160522.oldValue);      }    if (Tmp1) {
    F.line = 277;
    break BeforeRet;
    }
    
    F.line = 279;
    match_11160522.oldValue = val_11160523;
    if (match_11160522.iter) {
    F.line = 281;
    var i_11160533 = 0;
    F.line = 282;
    var Tmp2 = match_11160522;
    if (ConstSet2[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11160535 = Tmp2.anchor.parentNode;
    F.line = 283;
    var Tmp3 = match_11160522;
    if (ConstSet3[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11160537 = Tmp3.iterate(val_11160523);
    L4: do {
      F.line = 284;
        L5: while (true) {
        if (!true) break L5;
          F.line = 285;
          var it_11160538 = itf_11160537();
          if ((it_11160538["Field0"] == false)) {
          F.line = 286;
          break L4;
          }
          
          F.line = 287;
          var item_11160539 = it_11160538["Field1"];
          if ((10 < i_11160533)) {
          F.line = 290;
          break L4;
          }
          
          F.line = 292;
          var iter_item_11160544 = null;
            var Tmp6 = match_11160522;
            if (ConstSet4[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11160533 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 296;
          var Tmp8 = match_11160522;
          if (ConstSet5[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11160544 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11160533, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          }
          else {
            F.line = 298;
            iter_item_11160544 = create_iter_item_11160558(match_11160522, parent_node_11160535);
            F.line = 299;
            var Tmp10 = match_11160522;
            if (ConstSet10[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11160544); } else { Tmp11 = [iter_item_11160544]; };
          }
          
          if (!((iter_item_11160544.mount == null))) {
          F.line = 303;
          iter_item_11160544.mount.update(item_11160539, refresh_11160524);
          }
          
          L12: do {
            F.line = 306;
            var submatch_11160656 = null;
            F.line = 184;
            var i_11212912 = 0;
            F.line = 185;
            var l_11212913 = (iter_item_11160544.matches != null ? iter_item_11160544.matches.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11212912 < l_11212913)) break L14;
                  F.line = 306;
                  submatch_11160656 = iter_item_11160544.matches[chckIndx(i_11212912, 0, (iter_item_11160544.matches != null ? iter_item_11160544.matches.length : 0)+0-1)-0];
                  F.line = 307;
                  submatch_11160656.update(item_11160539, refresh_11160524);
                  F.line = 188;
                  i_11212912 = addInt(i_11212912, 1);
                  if (!(((iter_item_11160544.matches != null ? iter_item_11160544.matches.length : 0) == l_11212913))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L15: do {
            F.line = 310;
            var refresh_proc_11160663 = null;
            F.line = 184;
            var i_11212917 = 0;
            F.line = 185;
            var l_11212918 = (match_11160522.refresh != null ? match_11160522.refresh.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11212917 < l_11212918)) break L17;
                  F.line = 310;
                  refresh_proc_11160663 = match_11160522.refresh[chckIndx(i_11212917, 0, (match_11160522.refresh != null ? match_11160522.refresh.length : 0)+0-1)-0];
                  F.line = 311;
                  refresh_proc_11160663(iter_item_11160544.node, item_11160539);
                  F.line = 188;
                  i_11212917 = addInt(i_11212917, 1);
                  if (!(((match_11160522.refresh != null ? match_11160522.refresh.length : 0) == l_11212918))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 313;
          i_11160533 = addInt(i_11160533, 1);
        }
    } while(false);
    L18: do {
      F.line = 316;
        L19: while (true) {
          var Tmp20 = match_11160522;
          if (ConstSet11[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11160533 < ((Tmp21 = Tmp20.items, Tmp21) != null ? Tmp21.length : 0))) break L19;
          F.line = 317;
          var Tmp22 = match_11160522;
          if (ConstSet12[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11090473(pop_11090222(Tmp22, "items"), parent_node_11160535);
        }
    } while(false);
    }
    else {
      F.line = 319;
      var node_11160735 = match_11160522.node;
      F.line = 320;
      var Tmp23 = match_11160522;
      if (ConstSet13[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11160737 = Tmp23.convert(val_11160523);
        var Tmp25 = match_11160522;
        if (ConstSet14[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp25.mount == null)) Tmp24 = false; else {          var Tmp26 = match_11160522;
          if (ConstSet15[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp24 = !((Tmp26.mount_source == null));        }      if (Tmp24) {
      var Tmp27 = match_11160522;
      if (ConstSet16[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 324;
      var Tmp28 = match_11160522;
      if (ConstSet17[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp27.mount = Tmp28.mount_source.clone();
      F.line = 325;
      var Tmp29 = match_11160522;
      if (ConstSet18[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11160735.parentNode.replaceChild(Tmp29.mount.node(), node_11160735);
      }
      
        var Tmp30 = match_11160522;
        if (ConstSet19[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp30.mount == null))) {
      F.line = 329;
      var Tmp31 = match_11160522;
      if (ConstSet20[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11160735 = Tmp31.mount.node();
      F.line = 330;
      var Tmp32 = match_11160522;
      if (ConstSet21[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp32.mount.update(converted_val_11160737, refresh_11160524);
      }
      
      L33: do {
        F.line = 333;
        var submatch_11160777 = null;
        F.line = 182;
        var colontmp__11212922 = null;
        F.line = 333;
        var Tmp34 = match_11160522;
        if (ConstSet22[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11212922 = Tmp34.matches;
        F.line = 184;
        var i_11212923 = 0;
        F.line = 185;
        var l_11212924 = (colontmp__11212922 != null ? colontmp__11212922.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11212923 < l_11212924)) break L36;
              F.line = 333;
              submatch_11160777 = colontmp__11212922[chckIndx(i_11212923, 0, (colontmp__11212922 != null ? colontmp__11212922.length : 0)+0-1)-0];
              F.line = 334;
              submatch_11160777.update(converted_val_11160737, refresh_11160524);
              F.line = 188;
              i_11212923 = addInt(i_11212923, 1);
              if (!(((colontmp__11212922 != null ? colontmp__11212922.length : 0) == l_11212924))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L37: do {
        F.line = 337;
        var refresh_proc_11160784 = null;
        F.line = 184;
        var i_11212927 = 0;
        F.line = 185;
        var l_11212928 = (match_11160522.refresh != null ? match_11160522.refresh.length : 0);
        L38: do {
          F.line = 186;
            L39: while (true) {
            if (!(i_11212927 < l_11212928)) break L39;
              F.line = 337;
              refresh_proc_11160784 = match_11160522.refresh[chckIndx(i_11212927, 0, (match_11160522.refresh != null ? match_11160522.refresh.length : 0)+0-1)-0];
              F.line = 338;
              refresh_proc_11160784(node_11160735, converted_val_11160737);
              F.line = 188;
              i_11212927 = addInt(i_11212927, 1);
              if (!(((match_11160522.refresh != null ? match_11160522.refresh.length : 0) == l_11212928))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11160497(match_11160502) {
    function HEX3Aanonymous_11160509(data_11160511, refresh_11160512) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 380;
        update_11160517(match_11160502, data_11160511, refresh_11160512);
      framePtr = F.prev;

      
    }

  var result_11160504 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_11160504 = {update: HEX3Aanonymous_11160509};
  framePtr = F.prev;

  return result_11160504;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1025017(s_1025019, b_1025021, b_1025021_Idx, start_1025022) {
      var Tmp1;
          var Tmp4;

  var result_1025024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1025025 = start_1025022;
    if (((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1025025 = addInt(i_1025025, 1);
    }
    
      if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet27[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1025021[b_1025021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet28[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1035016 = subInt(s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0], 48);
          if ((b_1025021[b_1025021_Idx] <= divInt(subInt(2147483647, c_1035016), 10))) {
          F.line = 483;
          b_1025021[b_1025021_Idx] = addInt(mulInt(b_1025021[b_1025021_Idx], 10), c_1035016);
          }
          else {
            F.line = 485;
            b_1025021[b_1025021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1025025 = addInt(i_1025025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1025025 = addInt(i_1025025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1025024 = subInt(i_1025025, start_1025022);
    }
    
  framePtr = F.prev;

  return result_1025024;

}
function HEX5BHEX5D_4435068(s_4435072, x_4435074) {
  var result_4435075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4435201 = x_4435074.a;
    F.line = 2437;
    var l_4435401 = addInt(subInt(subInt((s_4435072 != null ? s_4435072.length : 0), x_4435074.b), a_4435201), 1);
    F.line = 2438;
    result_4435075 = nimCopy(null, mnewString(chckRange(l_4435401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4435409 = 0;
      F.line = 106;
      var i_11212958 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11212958 < l_4435401)) break L3;
            F.line = 2439;
            i_4435409 = i_11212958;
            F.line = 2439;
            result_4435075[chckIndx(i_4435409, 0, (result_4435075 != null ? result_4435075.length : 0)+0-1)-0] = s_4435072[chckIndx(addInt(i_4435409, a_4435201), 0, (s_4435072 != null ? s_4435072.length : 0)+0-1)-0];
            F.line = 109;
            i_11212958 = addInt(i_11212958, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4435075;

}
function HEX2EHEX2E_4435001(a_4435006, b_4435008) {
  var result_4435014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4435014, {a: a_4435006, b: b_4435008}, NTI4435011);
  framePtr = F.prev;

  return result_4435014;

}
function parse_standard_format_specifier_9745322(s_9745324, start_9745325, ignore_unknown_suffix_9745327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9745328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9745328.fill = 32;
    F.line = 380;
    result_9745328.align = 0;
    F.line = 381;
    result_9745328.sign = 45;
    F.line = 382;
    var i_9745331 = start_9745325;
    if (((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet23[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9745328.fill = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 385;
    result_9745328.align = s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 386;
    i_9745331 = addInt(i_9745331, 2);
    }
    else {
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet24[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9745328.align = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 389;
    i_9745331 = addInt(i_9745331, 1);
    }
    }
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet25[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9745328.sign = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 393;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9745328.alternateForm = true;
    F.line = 397;
    i_9745331 = addInt(i_9745331, 1);
    }
    
      if (!((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet26[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9745328.padWithZero = true;
    F.line = 401;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 403;
    var parsed_length_9765015 = parse_saturated_natural_1025017(s_9745324, result_9745328, "minimumWidth", i_9745331);
    F.line = 404;
    i_9745331 = addInt(i_9745331, parsed_length_9765015);
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9745331 = addInt(i_9745331, 1);
    F.line = 407;
    var parsed_length_b_9765029 = parse_saturated_natural_1025017(s_9745324, result_9745328, "precision", i_9745331);
    F.line = 408;
    i_9745331 = addInt(i_9745331, parsed_length_b_9765029);
    }
    else {
      F.line = 410;
      result_9745328.precision = -1;
    }
    
      if (!(i_9745331 < (s_9745324 != null ? s_9745324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet29[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9745328.typ = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 414;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 415;
    result_9745328.endPosition = i_9745331;
      if (!!((i_9745331 == (s_9745324 != null ? s_9745324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9745327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4435068(s_9745324, HEX2EHEX2E_4435001(i_9745331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9745328;

}
function nucruneLen(s_1106829) {
  var result_1106830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1106832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1106832 < (s_1106829 != null ? s_1106829.length : 0))) break L2;
          if ((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1106832 = addInt(i_1106832, 1);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1106832 = addInt(i_1106832, 2);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1106832 = addInt(i_1106832, 3);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1106832 = addInt(i_1106832, 4);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1106832 = addInt(i_1106832, 5);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1106832 = addInt(i_1106832, 6);
          }
          else {
            F.line = 49;
          i_1106832 = addInt(i_1106832, 1);
          }
          }}}}}
          F.line = 50;
          result_1106830 = addInt(result_1106830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1106830;

}
function rune_len_at_1106932(s_1106934, i_1106935) {
  var result_1106936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1106936 = 1;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1106936 = 2;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1106936 = 3;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1106936 = 4;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1106936 = 5;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1106936 = 6;
    }
    else {
      F.line = 68;
      result_1106936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1106936;

}
function rune_offset_1730244(s_1730246, pos_1730247, start_1730248) {
  var result_1730249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1730251 = 0;
    F.line = 320;
    var o_1730252 = start_1730248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1730251 < pos_1730247)) break L2;
          F.line = 322;
          o_1730252 = addInt(o_1730252, chckRange(rune_len_at_1106932(s_1730246, o_1730252), 0, 2147483647));
          if (((s_1730246 != null ? s_1730246.length : 0) <= o_1730252)) {
          F.line = 324;
          result_1730249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1730251 = addInt(i_1730251, 1);
        }
    } while(false);
    F.line = 326;
    result_1730249 = o_1730252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1730249;

}
function validate_utf8_1350229(s_1350231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1350232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1350234 = 0;
    F.line = 173;
    var l_1350235 = (s_1350231 != null ? s_1350231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1350234 < l_1350235)) break L2;
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1350234 = addInt(i_1350234, 1);
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1350232 = i_1350234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1350234, 1) < l_1350235)) Tmp3 = false; else {              Tmp3 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1350234 = addInt(i_1350234, 2);
          }
          else {
            F.line = 180;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1350234, 2) < l_1350235)) Tmp5 = false; else {              Tmp5 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1350234 = addInt(i_1350234, 3);
          }
          else {
            F.line = 184;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1350234, 3) < l_1350235)) Tmp8 = false; else {              Tmp8 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1350231[chckIndx(addInt(i_1350234, 3), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1350234 = addInt(i_1350234, 4);
          }
          else {
            F.line = 190;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1350232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1350232;

}
function nsuRepeatChar(c_9290048, count_9290049) {
  var result_9290050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9290050 = nimCopy(null, mnewString(count_9290049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9290059 = 0;
      F.line = 66;
      var colontmp__11212989 = 0;
      F.line = 1283;
      colontmp__11212989 = subInt(count_9290049, 1);
      F.line = 77;
      var res_11212990 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11212990 <= colontmp__11212989)) break L3;
            F.line = 1283;
            i_9290059 = res_11212990;
            F.line = 1283;
            result_9290050[chckIndx(i_9290059, 0, (result_9290050 != null ? result_9290050.length : 0)+0-1)-0] = c_9290048;
            F.line = 80;
            res_11212990 = addInt(res_11212990, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9290050;

}
function align_string_9745222(s_9745224, minimum_width_9745225, align_9745226, fill_9745227) {
      var Tmp1;

  var result_9745228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9745225 == 0)) {
    F.line = 282;
    result_9745228 = nimCopy(null, s_9745224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1350229(s_9745224) == -1)) {
      Tmp1 = nucruneLen(s_9745224);
      }
      else {
      Tmp1 = (s_9745224 != null ? s_9745224.length : 0);
      }
      
      var s_rune_len_9745229 = Tmp1;
      F.line = 285;
      var to_fill_9745230 = subInt(minimum_width_9745225, s_rune_len_9745229);
      if ((to_fill_9745230 <= 0)) {
      F.line = 287;
      result_9745228 = nimCopy(null, s_9745224, NTI112);
      }
      else {
      if (((align_9745226 == 60) || (align_9745226 == 0))) {
      F.line = 289;
      result_9745228 = nimCopy(null, (s_9745224 || []).concat(nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9745226 == 94)) {
      F.line = 291;
      var half_9745231 = divInt(to_fill_9745230, 2);
      F.line = 292;
      result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(half_9745231, 0, 2147483647)) || []).concat(s_9745224 || [],nsuRepeatChar(fill_9745227, chckRange(subInt(to_fill_9745230, half_9745231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []).concat(s_9745224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9745228;

}
function format_value_9790080(result_9790083, result_9790083_Idx, value_9790084, specifier_9790085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9790086 = parse_standard_format_specifier_9745322(specifier_9790085, 0, false);
    F.line = 503;
    var value_9790087 = nimCopy(null, value_9790084, NTI112);
    F.line = 504;
    switch (spec_9790086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9790086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9790086.precision == -1))) {
    if ((spec_9790086.precision < nucruneLen(value_9790087))) {
    F.line = 512;
    (value_9790087 == null ? value_9790087 = mnewString(chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9790087.length = chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9790083[result_9790083_Idx] != null) { result_9790083[result_9790083_Idx] = (result_9790083[result_9790083_Idx]).concat(align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill)); } else { result_9790083[result_9790083_Idx] = align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill).slice(); };
  framePtr = F.prev;

  
}
function compile_11151391(cfg_11151396, node_11151397) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
                var Tmp16;
                var Tmp17;

  var result_11151441 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 211;
    var matched_node_11151442 = node_11151397.querySelector(toJSStr(cfg_11151396.selector));
    if ((matched_node_11151442 == null)) {
    F.line = 213;
    var selector_11151451 = nimCopy(null, cfg_11151396.selector, NTI112);
    F.line = 214;
    var fmt_res_11151452 = [mnewString(0)];
    F.line = 214;
    if (fmt_res_11151452[0] != null) { fmt_res_11151452[0] = (fmt_res_11151452[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11151452[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 214;
    format_value_9790080(fmt_res_11151452, 0, selector_11151451, []);
    F.line = 214;
    if (fmt_res_11151452[0] != null) { fmt_res_11151452[0] = (fmt_res_11151452[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11151452[0] = makeNimstrLit("\'"); };
    F.line = 214;
    raiseException({message: nimCopy(null, fmt_res_11151452[0], NTI112), parent: null, m_type: NTI9881015, name: null, trace: null, up: null}, "CompileError");
    }
    
    F.line = 216;
    var match_11160009 = {refresh: nimCopy(null, cfg_11151396.refresh, NTI11051547), iter: cfg_11151396.iter, node: matched_node_11151442, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 220;
    match_11160009.node = matched_node_11151442;
    if (match_11160009.iter) {
    var Tmp1 = match_11160009;
    if (ConstSet30[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 222;
    var Tmp2 = cfg_11151396;
    if (ConstSet31[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11160009;
    if (ConstSet32[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 223;
    Tmp3.anchor = matched_node_11151442.ownerDocument.createComment(matched_node_11151442.outerHTML);
    var Tmp4 = match_11160009;
    if (ConstSet33[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 224;
    Tmp4.mount_template = cfg_11151396.mount;
    var Tmp5 = match_11160009;
    if (ConstSet34[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 225;
    Tmp5.match_templates = nimCopy(null, cfg_11151396.matches, NTI11051574);
    var Tmp6 = match_11160009;
    if (ConstSet35[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 226;
    Tmp6.items = nimCopy(null, [], NTI11160030);
    F.line = 227;
    var Tmp7 = match_11160009;
    if (ConstSet36[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11151442.parentNode.replaceChild(Tmp7.anchor, matched_node_11151442);
    }
    else {
      var Tmp8 = match_11160009;
      if (ConstSet37[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 229;
      var Tmp9 = cfg_11151396;
      if (ConstSet38[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11160009;
      if (ConstSet39[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 230;
      Tmp10.matches = nimCopy(null, [], NTI11160049);
      var Tmp11 = match_11160009;
      if (ConstSet40[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 231;
      Tmp11.mount = null;
      if (!((cfg_11151396.mount == null))) {
      var Tmp12 = match_11160009;
      if (ConstSet41[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 233;
      Tmp12.mount_source = cfg_11151396.mount;
      }
      else {
        L13: do {
          F.line = 235;
          var submatch_11160066 = null;
          F.line = 184;
          var i_11212941 = 0;
          F.line = 185;
          var l_11212942 = (cfg_11151396.matches != null ? cfg_11151396.matches.length : 0);
          L14: do {
            F.line = 186;
              L15: while (true) {
              if (!(i_11212941 < l_11212942)) break L15;
                F.line = 235;
                submatch_11160066 = cfg_11151396.matches[chckIndx(i_11212941, 0, (cfg_11151396.matches != null ? cfg_11151396.matches.length : 0)+0-1)-0];
                F.line = 236;
                var Tmp16 = match_11160009;
                if (ConstSet42[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp17 = Tmp16.matches, Tmp17) != null) { Tmp17.push(submatch_11160066.compile(matched_node_11151442)); } else { Tmp17 = [submatch_11160066.compile(matched_node_11151442)]; };
                F.line = 188;
                i_11212941 = addInt(i_11212941, 1);
                if (!(((cfg_11151396.matches != null ? cfg_11151396.matches.length : 0) == l_11212942))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 237;
    result_11151441 = match_11160009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11151441;

}
function as_interface_11151254(config_11151259) {
    function HEX3Aanonymous_11151266(node_11151268) {
      var result_11151273 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 385;
        result_11151273 = as_interface_11160497(compile_11151391(config_11151259, node_11151268));
      framePtr = F.prev;

      return result_11151273;

    }

  var result_11151261 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 384;
    result_11151261 = {compile: HEX3Aanonymous_11151266};
  framePtr = F.prev;

  return result_11151261;

}
function iter_11150837(c_11150842, selector_11150843, iter_11150845, actions_11150851) {
  var result_11150853 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 183;
    result_11150853 = {selector: nimCopy(null, selector_11150843, NTI112), refresh: [], mount: null, iter: true, iterate: iter_11150845, matches: [], convert: null};
    F.line = 190;
    if (c_11150842.matches != null) { c_11150842.matches.push(as_interface_11151254(result_11150853)); } else { c_11150842.matches = [as_interface_11151254(result_11150853)]; };
    if (!((actions_11150851 == null))) {
    F.line = 192;
    actions_11150851(result_11150853);
    }
    
  framePtr = F.prev;

  return result_11150853;

}
function seq_iterator_11051134(arr_11051138) {
    arr_11051138 = nimCopy(null, arr_11051138, NTI11051137);
    function next_11051144() {
      var result_11051149 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_11051138 != null ? arr_11051138.length : 0) <= it_11051142)) {
        F.line = 440;
        var colontmp__11212995 = false;
        F.line = 440;
        var colontmp__11212996 = empty_11051143;
        F.line = 440;
        nimCopy(result_11051149, {Field0: colontmp__11212995, Field1: colontmp__11212996}, NTI11051146);
        break BeforeRet;
        }
        
        F.line = 441;
        var colontmp__11212997 = true;
        F.line = 441;
        var colontmp__11212998 = arr_11051138[chckIndx(it_11051142, 0, (arr_11051138 != null ? arr_11051138.length : 0)+0-1)-0];
        F.line = 441;
        nimCopy(result_11051149, {Field0: colontmp__11212997, Field1: colontmp__11212998}, NTI11051146);
        F.line = 442;
        it_11051142 = addInt(it_11051142, 1);
      } while (false);
      framePtr = F.prev;

      return result_11051149;

    }

  var result_11051140 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 433;
    var it_11051142 = 0;
    F.line = 434;
    var empty_11051143 = null;
    F.line = 444;
    result_11051140 = next_11051144;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11051140;

}
function iter_names_11051117(c2_11051119) {
  var result_11051133 = null;

  var F={procname:"sample3.iterNames",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_11051133 = seq_iterator_11051134(c2_11051119.names);
  framePtr = F.prev;

  return result_11051133;

}
function refresh_11090817(c_11090822, refresh_11090824) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 151;
    if (c_11090822.refresh != null) { c_11090822.refresh.push(refresh_11090824); } else { c_11090822.refresh = [refresh_11090824]; };
  framePtr = F.prev;

  
}
function create_iter_item_11070891(match_11070896, parent_node_11070897) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11070899 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 257;
    var comp_11070904 = null;
    F.line = 258;
    var node_11070905 = null;
      var Tmp1 = match_11070896;
      if (ConstSet47[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 260;
    var Tmp2 = match_11070896;
    if (ConstSet48[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11070904 = Tmp2.mount_template.clone();
    F.line = 261;
    node_11070905 = comp_11070904.node();
    }
    else {
      F.line = 263;
      node_11070905 = match_11070896.node.cloneNode(true);
    }
    
    F.line = 264;
    var Tmp3 = match_11070896;
    if (ConstSet49[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11070899 = {mount: comp_11070904, node: node_11070905, matches: compile_11070942(Tmp3.match_templates, node_11070905)};
    F.line = 268;
    var Tmp4 = match_11070896;
    if (ConstSet50[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11070897.insertBefore(node_11070905, Tmp4.anchor);
  framePtr = F.prev;

  return result_11070899;

}
function update_11070850(match_11070855, val_11070856, refresh_11070857) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp20;
          var Tmp21;
          var Tmp22;
      var Tmp23;
        var Tmp24;
        var Tmp25;
          var Tmp26;
      var Tmp27;
      var Tmp28;
      var Tmp29;
        var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp34;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11070857)) Tmp1 = false; else {        Tmp1 = (val_11070856 == match_11070855.oldValue);      }    if (Tmp1) {
    F.line = 277;
    break BeforeRet;
    }
    
    F.line = 279;
    match_11070855.oldValue = val_11070856;
    if (match_11070855.iter) {
    F.line = 281;
    var i_11070866 = 0;
    F.line = 282;
    var Tmp2 = match_11070855;
    if (ConstSet43[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11070868 = Tmp2.anchor.parentNode;
    F.line = 283;
    var Tmp3 = match_11070855;
    if (ConstSet44[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11070870 = Tmp3.iterate(val_11070856);
    L4: do {
      F.line = 284;
        L5: while (true) {
        if (!true) break L5;
          F.line = 285;
          var it_11070871 = itf_11070870();
          if ((it_11070871["Field0"] == false)) {
          F.line = 286;
          break L4;
          }
          
          F.line = 287;
          var item_11070872 = it_11070871["Field1"];
          if ((10 < i_11070866)) {
          F.line = 290;
          break L4;
          }
          
          F.line = 292;
          var iter_item_11070877 = null;
            var Tmp6 = match_11070855;
            if (ConstSet45[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11070866 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 296;
          var Tmp8 = match_11070855;
          if (ConstSet46[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11070877 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11070866, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          }
          else {
            F.line = 298;
            iter_item_11070877 = create_iter_item_11070891(match_11070855, parent_node_11070868);
            F.line = 299;
            var Tmp10 = match_11070855;
            if (ConstSet51[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11070877); } else { Tmp11 = [iter_item_11070877]; };
          }
          
          if (!((iter_item_11070877.mount == null))) {
          F.line = 303;
          iter_item_11070877.mount.update(item_11070872, refresh_11070857);
          }
          
          L12: do {
            F.line = 306;
            var submatch_11080214 = null;
            F.line = 184;
            var i_11213004 = 0;
            F.line = 185;
            var l_11213005 = (iter_item_11070877.matches != null ? iter_item_11070877.matches.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11213004 < l_11213005)) break L14;
                  F.line = 306;
                  submatch_11080214 = iter_item_11070877.matches[chckIndx(i_11213004, 0, (iter_item_11070877.matches != null ? iter_item_11070877.matches.length : 0)+0-1)-0];
                  F.line = 307;
                  submatch_11080214.update(item_11070872, refresh_11070857);
                  F.line = 188;
                  i_11213004 = addInt(i_11213004, 1);
                  if (!(((iter_item_11070877.matches != null ? iter_item_11070877.matches.length : 0) == l_11213005))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L15: do {
            F.line = 310;
            var refresh_proc_11090214 = null;
            F.line = 184;
            var i_11213008 = 0;
            F.line = 185;
            var l_11213009 = (match_11070855.refresh != null ? match_11070855.refresh.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11213008 < l_11213009)) break L17;
                  F.line = 310;
                  refresh_proc_11090214 = match_11070855.refresh[chckIndx(i_11213008, 0, (match_11070855.refresh != null ? match_11070855.refresh.length : 0)+0-1)-0];
                  F.line = 311;
                  refresh_proc_11090214(iter_item_11070877.node, item_11070872);
                  F.line = 188;
                  i_11213008 = addInt(i_11213008, 1);
                  if (!(((match_11070855.refresh != null ? match_11070855.refresh.length : 0) == l_11213009))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 313;
          i_11070866 = addInt(i_11070866, 1);
        }
    } while(false);
    L18: do {
      F.line = 316;
        L19: while (true) {
          var Tmp20 = match_11070855;
          if (ConstSet52[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11070866 < ((Tmp21 = Tmp20.items, Tmp21) != null ? Tmp21.length : 0))) break L19;
          F.line = 317;
          var Tmp22 = match_11070855;
          if (ConstSet53[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11090473(pop_11090222(Tmp22, "items"), parent_node_11070868);
        }
    } while(false);
    }
    else {
      F.line = 319;
      var node_11090492 = match_11070855.node;
      F.line = 320;
      var Tmp23 = match_11070855;
      if (ConstSet54[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11090494 = Tmp23.convert(val_11070856);
        var Tmp25 = match_11070855;
        if (ConstSet55[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp25.mount == null)) Tmp24 = false; else {          var Tmp26 = match_11070855;
          if (ConstSet56[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp24 = !((Tmp26.mount_source == null));        }      if (Tmp24) {
      var Tmp27 = match_11070855;
      if (ConstSet57[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 324;
      var Tmp28 = match_11070855;
      if (ConstSet58[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp27.mount = Tmp28.mount_source.clone();
      F.line = 325;
      var Tmp29 = match_11070855;
      if (ConstSet59[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11090492.parentNode.replaceChild(Tmp29.mount.node(), node_11090492);
      }
      
        var Tmp30 = match_11070855;
        if (ConstSet60[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp30.mount == null))) {
      F.line = 329;
      var Tmp31 = match_11070855;
      if (ConstSet61[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11090492 = Tmp31.mount.node();
      F.line = 330;
      var Tmp32 = match_11070855;
      if (ConstSet62[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp32.mount.update(converted_val_11090494, refresh_11070857);
      }
      
      L33: do {
        F.line = 333;
        var submatch_11090534 = null;
        F.line = 182;
        var colontmp__11213013 = null;
        F.line = 333;
        var Tmp34 = match_11070855;
        if (ConstSet63[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11213013 = Tmp34.matches;
        F.line = 184;
        var i_11213014 = 0;
        F.line = 185;
        var l_11213015 = (colontmp__11213013 != null ? colontmp__11213013.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11213014 < l_11213015)) break L36;
              F.line = 333;
              submatch_11090534 = colontmp__11213013[chckIndx(i_11213014, 0, (colontmp__11213013 != null ? colontmp__11213013.length : 0)+0-1)-0];
              F.line = 334;
              submatch_11090534.update(converted_val_11090494, refresh_11070857);
              F.line = 188;
              i_11213014 = addInt(i_11213014, 1);
              if (!(((colontmp__11213013 != null ? colontmp__11213013.length : 0) == l_11213015))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L37: do {
        F.line = 337;
        var refresh_proc_11090541 = null;
        F.line = 184;
        var i_11213018 = 0;
        F.line = 185;
        var l_11213019 = (match_11070855.refresh != null ? match_11070855.refresh.length : 0);
        L38: do {
          F.line = 186;
            L39: while (true) {
            if (!(i_11213018 < l_11213019)) break L39;
              F.line = 337;
              refresh_proc_11090541 = match_11070855.refresh[chckIndx(i_11213018, 0, (match_11070855.refresh != null ? match_11070855.refresh.length : 0)+0-1)-0];
              F.line = 338;
              refresh_proc_11090541(node_11090492, converted_val_11090494);
              F.line = 188;
              i_11213018 = addInt(i_11213018, 1);
              if (!(((match_11070855.refresh != null ? match_11070855.refresh.length : 0) == l_11213019))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11070810(match_11070815) {
    function HEX3Aanonymous_11070822(data_11070824, refresh_11070825) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 380;
        update_11070850(match_11070815, data_11070824, refresh_11070825);
      framePtr = F.prev;

      
    }

  var result_11070817 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_11070817 = {update: HEX3Aanonymous_11070822};
  framePtr = F.prev;

  return result_11070817;

}
function compile_11052622(cfg_11052627, node_11052628) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
                var Tmp16;
                var Tmp17;

  var result_11052684 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 211;
    var matched_node_11052685 = node_11052628.querySelector(toJSStr(cfg_11052627.selector));
    if ((matched_node_11052685 == null)) {
    F.line = 213;
    var selector_11052694 = nimCopy(null, cfg_11052627.selector, NTI112);
    F.line = 214;
    var fmt_res_11052698 = [mnewString(0)];
    F.line = 214;
    if (fmt_res_11052698[0] != null) { fmt_res_11052698[0] = (fmt_res_11052698[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11052698[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 214;
    format_value_9790080(fmt_res_11052698, 0, selector_11052694, []);
    F.line = 214;
    if (fmt_res_11052698[0] != null) { fmt_res_11052698[0] = (fmt_res_11052698[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11052698[0] = makeNimstrLit("\'"); };
    F.line = 214;
    raiseException({message: nimCopy(null, fmt_res_11052698[0], NTI112), parent: null, m_type: NTI9881015, name: null, trace: null, up: null}, "CompileError");
    }
    
    F.line = 216;
    var match_11060009 = {refresh: nimCopy(null, cfg_11052627.refresh, NTI11052006), iter: cfg_11052627.iter, node: matched_node_11052685, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 220;
    match_11060009.node = matched_node_11052685;
    if (match_11060009.iter) {
    var Tmp1 = match_11060009;
    if (ConstSet64[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 222;
    var Tmp2 = cfg_11052627;
    if (ConstSet65[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11060009;
    if (ConstSet66[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 223;
    Tmp3.anchor = matched_node_11052685.ownerDocument.createComment(matched_node_11052685.outerHTML);
    var Tmp4 = match_11060009;
    if (ConstSet67[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 224;
    Tmp4.mount_template = cfg_11052627.mount;
    var Tmp5 = match_11060009;
    if (ConstSet68[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 225;
    Tmp5.match_templates = nimCopy(null, cfg_11052627.matches, NTI11052011);
    var Tmp6 = match_11060009;
    if (ConstSet69[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 226;
    Tmp6.items = nimCopy(null, [], NTI11060030);
    F.line = 227;
    var Tmp7 = match_11060009;
    if (ConstSet70[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11052685.parentNode.replaceChild(Tmp7.anchor, matched_node_11052685);
    }
    else {
      var Tmp8 = match_11060009;
      if (ConstSet71[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 229;
      var Tmp9 = cfg_11052627;
      if (ConstSet72[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11060009;
      if (ConstSet73[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 230;
      Tmp10.matches = nimCopy(null, [], NTI11060049);
      var Tmp11 = match_11060009;
      if (ConstSet74[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 231;
      Tmp11.mount = null;
      if (!((cfg_11052627.mount == null))) {
      var Tmp12 = match_11060009;
      if (ConstSet75[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 233;
      Tmp12.mount_source = cfg_11052627.mount;
      }
      else {
        L13: do {
          F.line = 235;
          var submatch_11070214 = null;
          F.line = 184;
          var i_11213025 = 0;
          F.line = 185;
          var l_11213026 = (cfg_11052627.matches != null ? cfg_11052627.matches.length : 0);
          L14: do {
            F.line = 186;
              L15: while (true) {
              if (!(i_11213025 < l_11213026)) break L15;
                F.line = 235;
                submatch_11070214 = cfg_11052627.matches[chckIndx(i_11213025, 0, (cfg_11052627.matches != null ? cfg_11052627.matches.length : 0)+0-1)-0];
                F.line = 236;
                var Tmp16 = match_11060009;
                if (ConstSet76[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp17 = Tmp16.matches, Tmp17) != null) { Tmp17.push(submatch_11070214.compile(matched_node_11052685)); } else { Tmp17 = [submatch_11070214.compile(matched_node_11052685)]; };
                F.line = 188;
                i_11213025 = addInt(i_11213025, 1);
                if (!(((cfg_11052627.matches != null ? cfg_11052627.matches.length : 0) == l_11213026))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 237;
    result_11052684 = match_11060009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11052684;

}
function as_interface_11052485(config_11052490) {
    function HEX3Aanonymous_11052497(node_11052499) {
      var result_11052504 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 385;
        result_11052504 = as_interface_11070810(compile_11052622(config_11052490, node_11052499));
      framePtr = F.prev;

      return result_11052504;

    }

  var result_11052492 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 384;
    result_11052492 = {compile: HEX3Aanonymous_11052497};
  framePtr = F.prev;

  return result_11052492;

}
function match_11052082(c_11052088, selector_11052089, convert_11052091, actions_11052097) {
  var result_11052099 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 129;
    result_11052099 = {selector: nimCopy(null, selector_11052089, NTI112), refresh: [], mount: null, iter: false, convert: convert_11052091, matches: null, iterate: null};
    F.line = 135;
    if (c_11052088.matches != null) { c_11052088.matches.push(as_interface_11052485(result_11052099)); } else { c_11052088.matches = [as_interface_11052485(result_11052099)]; };
    if (!((actions_11052097 == null))) {
    F.line = 137;
    actions_11052097(result_11052099);
    }
    
  framePtr = F.prev;

  return result_11052099;

}
function id_11052057(data_11052060) {
  var result_11052061 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 109;
    result_11052061 = data_11052060;
  framePtr = F.prev;

  return result_11052061;

}
function match_11052036(c_11052041, selector_11052042, actions_11052048) {
  var result_11052050 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 157;
    result_11052050 = match_11052082(c_11052041, selector_11052042, id_11052057, actions_11052048);
  framePtr = F.prev;

  return result_11052050;

}
function match_11051982(c_11051987, selector_11051988, refresh_proc_11051990) {
  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 163;
    refresh_11090817(match_11052036(c_11051987, selector_11051988, null), refresh_proc_11051990);
  framePtr = F.prev;

  
}
function create_iter_item_11140608(match_11140613, parent_node_11140614) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11140616 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 257;
    var comp_11140621 = null;
    F.line = 258;
    var node_11140622 = null;
      var Tmp1 = match_11140613;
      if (ConstSet81[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 260;
    var Tmp2 = match_11140613;
    if (ConstSet82[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11140621 = Tmp2.mount_template.clone();
    F.line = 261;
    node_11140622 = comp_11140621.node();
    }
    else {
      F.line = 263;
      node_11140622 = match_11140613.node.cloneNode(true);
    }
    
    F.line = 264;
    var Tmp3 = match_11140613;
    if (ConstSet83[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11140616 = {mount: comp_11140621, node: node_11140622, matches: compile_11110642(Tmp3.match_templates, node_11140622)};
    F.line = 268;
    var Tmp4 = match_11140613;
    if (ConstSet84[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11140614.insertBefore(node_11140622, Tmp4.anchor);
  framePtr = F.prev;

  return result_11140616;

}
function detach_11150473(iter_item_11150477, parent_node_11150478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 272;
    parent_node_11150478.removeChild(iter_item_11150477.node);
  framePtr = F.prev;

  
}
function pop_11150222(s_11150227, s_11150227_Idx) {
  var result_11150228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11150234 = subInt((s_11150227[s_11150227_Idx] != null ? s_11150227[s_11150227_Idx].length : 0), 1);
    F.line = 1784;
    result_11150228 = s_11150227[s_11150227_Idx][chckIndx(l_11150234, 0, (s_11150227[s_11150227_Idx] != null ? s_11150227[s_11150227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11150227[s_11150227_Idx] === null) s_11150227[s_11150227_Idx] = [];
               if (s_11150227[s_11150227_Idx].length < chckRange(l_11150234, 0, 2147483647)) { for (var i=s_11150227[s_11150227_Idx].length;i<chckRange(l_11150234, 0, 2147483647);++i) s_11150227[s_11150227_Idx].push(null); }
               else { s_11150227[s_11150227_Idx].length = chckRange(l_11150234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11150228;

}
function update_11140567(match_11140572, val_11140573, refresh_11140574) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp20;
          var Tmp21;
          var Tmp22;
      var Tmp23;
        var Tmp24;
        var Tmp25;
          var Tmp26;
      var Tmp27;
      var Tmp28;
      var Tmp29;
        var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp34;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11140574)) Tmp1 = false; else {        Tmp1 = (val_11140573 == match_11140572.oldValue);      }    if (Tmp1) {
    F.line = 277;
    break BeforeRet;
    }
    
    F.line = 279;
    match_11140572.oldValue = val_11140573;
    if (match_11140572.iter) {
    F.line = 281;
    var i_11140583 = 0;
    F.line = 282;
    var Tmp2 = match_11140572;
    if (ConstSet77[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11140585 = Tmp2.anchor.parentNode;
    F.line = 283;
    var Tmp3 = match_11140572;
    if (ConstSet78[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11140587 = Tmp3.iterate(val_11140573);
    L4: do {
      F.line = 284;
        L5: while (true) {
        if (!true) break L5;
          F.line = 285;
          var it_11140588 = itf_11140587();
          if ((it_11140588["Field0"] == false)) {
          F.line = 286;
          break L4;
          }
          
          F.line = 287;
          var item_11140589 = it_11140588["Field1"];
          if ((10 < i_11140583)) {
          F.line = 290;
          break L4;
          }
          
          F.line = 292;
          var iter_item_11140594 = null;
            var Tmp6 = match_11140572;
            if (ConstSet79[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11140583 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 296;
          var Tmp8 = match_11140572;
          if (ConstSet80[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11140594 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11140583, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          }
          else {
            F.line = 298;
            iter_item_11140594 = create_iter_item_11140608(match_11140572, parent_node_11140585);
            F.line = 299;
            var Tmp10 = match_11140572;
            if (ConstSet85[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11140594); } else { Tmp11 = [iter_item_11140594]; };
          }
          
          if (!((iter_item_11140594.mount == null))) {
          F.line = 303;
          iter_item_11140594.mount.update(item_11140589, refresh_11140574);
          }
          
          L12: do {
            F.line = 306;
            var submatch_11140721 = null;
            F.line = 184;
            var i_11213034 = 0;
            F.line = 185;
            var l_11213035 = (iter_item_11140594.matches != null ? iter_item_11140594.matches.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11213034 < l_11213035)) break L14;
                  F.line = 306;
                  submatch_11140721 = iter_item_11140594.matches[chckIndx(i_11213034, 0, (iter_item_11140594.matches != null ? iter_item_11140594.matches.length : 0)+0-1)-0];
                  F.line = 307;
                  submatch_11140721.update(item_11140589, refresh_11140574);
                  F.line = 188;
                  i_11213034 = addInt(i_11213034, 1);
                  if (!(((iter_item_11140594.matches != null ? iter_item_11140594.matches.length : 0) == l_11213035))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L15: do {
            F.line = 310;
            var refresh_proc_11150214 = null;
            F.line = 184;
            var i_11213039 = 0;
            F.line = 185;
            var l_11213040 = (match_11140572.refresh != null ? match_11140572.refresh.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11213039 < l_11213040)) break L17;
                  F.line = 310;
                  refresh_proc_11150214 = match_11140572.refresh[chckIndx(i_11213039, 0, (match_11140572.refresh != null ? match_11140572.refresh.length : 0)+0-1)-0];
                  F.line = 311;
                  refresh_proc_11150214(iter_item_11140594.node, item_11140589);
                  F.line = 188;
                  i_11213039 = addInt(i_11213039, 1);
                  if (!(((match_11140572.refresh != null ? match_11140572.refresh.length : 0) == l_11213040))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 313;
          i_11140583 = addInt(i_11140583, 1);
        }
    } while(false);
    L18: do {
      F.line = 316;
        L19: while (true) {
          var Tmp20 = match_11140572;
          if (ConstSet86[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11140583 < ((Tmp21 = Tmp20.items, Tmp21) != null ? Tmp21.length : 0))) break L19;
          F.line = 317;
          var Tmp22 = match_11140572;
          if (ConstSet87[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11150473(pop_11150222(Tmp22, "items"), parent_node_11140585);
        }
    } while(false);
    }
    else {
      F.line = 319;
      var node_11150492 = match_11140572.node;
      F.line = 320;
      var Tmp23 = match_11140572;
      if (ConstSet88[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11150494 = Tmp23.convert(val_11140573);
        var Tmp25 = match_11140572;
        if (ConstSet89[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp25.mount == null)) Tmp24 = false; else {          var Tmp26 = match_11140572;
          if (ConstSet90[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp24 = !((Tmp26.mount_source == null));        }      if (Tmp24) {
      var Tmp27 = match_11140572;
      if (ConstSet91[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 324;
      var Tmp28 = match_11140572;
      if (ConstSet92[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp27.mount = Tmp28.mount_source.clone();
      F.line = 325;
      var Tmp29 = match_11140572;
      if (ConstSet93[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11150492.parentNode.replaceChild(Tmp29.mount.node(), node_11150492);
      }
      
        var Tmp30 = match_11140572;
        if (ConstSet94[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp30.mount == null))) {
      F.line = 329;
      var Tmp31 = match_11140572;
      if (ConstSet95[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11150492 = Tmp31.mount.node();
      F.line = 330;
      var Tmp32 = match_11140572;
      if (ConstSet96[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp32.mount.update(converted_val_11150494, refresh_11140574);
      }
      
      L33: do {
        F.line = 333;
        var submatch_11150534 = null;
        F.line = 182;
        var colontmp__11213044 = null;
        F.line = 333;
        var Tmp34 = match_11140572;
        if (ConstSet97[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11213044 = Tmp34.matches;
        F.line = 184;
        var i_11213045 = 0;
        F.line = 185;
        var l_11213046 = (colontmp__11213044 != null ? colontmp__11213044.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11213045 < l_11213046)) break L36;
              F.line = 333;
              submatch_11150534 = colontmp__11213044[chckIndx(i_11213045, 0, (colontmp__11213044 != null ? colontmp__11213044.length : 0)+0-1)-0];
              F.line = 334;
              submatch_11150534.update(converted_val_11150494, refresh_11140574);
              F.line = 188;
              i_11213045 = addInt(i_11213045, 1);
              if (!(((colontmp__11213044 != null ? colontmp__11213044.length : 0) == l_11213046))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L37: do {
        F.line = 337;
        var refresh_proc_11150541 = null;
        F.line = 184;
        var i_11213049 = 0;
        F.line = 185;
        var l_11213050 = (match_11140572.refresh != null ? match_11140572.refresh.length : 0);
        L38: do {
          F.line = 186;
            L39: while (true) {
            if (!(i_11213049 < l_11213050)) break L39;
              F.line = 337;
              refresh_proc_11150541 = match_11140572.refresh[chckIndx(i_11213049, 0, (match_11140572.refresh != null ? match_11140572.refresh.length : 0)+0-1)-0];
              F.line = 338;
              refresh_proc_11150541(node_11150492, converted_val_11150494);
              F.line = 188;
              i_11213049 = addInt(i_11213049, 1);
              if (!(((match_11140572.refresh != null ? match_11140572.refresh.length : 0) == l_11213050))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11140527(match_11140532) {
    function HEX3Aanonymous_11140539(data_11140541, refresh_11140542) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 380;
        update_11140567(match_11140532, data_11140541, refresh_11140542);
      framePtr = F.prev;

      
    }

  var result_11140534 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_11140534 = {update: HEX3Aanonymous_11140539};
  framePtr = F.prev;

  return result_11140534;

}
function compile_11130789(cfg_11130794, node_11130795) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
                var Tmp16;
                var Tmp17;

  var result_11130851 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 211;
    var matched_node_11130852 = node_11130795.querySelector(toJSStr(cfg_11130794.selector));
    if ((matched_node_11130852 == null)) {
    F.line = 213;
    var selector_11130861 = nimCopy(null, cfg_11130794.selector, NTI112);
    F.line = 214;
    var fmt_res_11130862 = [mnewString(0)];
    F.line = 214;
    if (fmt_res_11130862[0] != null) { fmt_res_11130862[0] = (fmt_res_11130862[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11130862[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 214;
    format_value_9790080(fmt_res_11130862, 0, selector_11130861, []);
    F.line = 214;
    if (fmt_res_11130862[0] != null) { fmt_res_11130862[0] = (fmt_res_11130862[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11130862[0] = makeNimstrLit("\'"); };
    F.line = 214;
    raiseException({message: nimCopy(null, fmt_res_11130862[0], NTI112), parent: null, m_type: NTI9881015, name: null, trace: null, up: null}, "CompileError");
    }
    
    F.line = 216;
    var match_11140009 = {refresh: nimCopy(null, cfg_11130794.refresh, NTI11091008), iter: cfg_11130794.iter, node: matched_node_11130852, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 220;
    match_11140009.node = matched_node_11130852;
    if (match_11140009.iter) {
    var Tmp1 = match_11140009;
    if (ConstSet98[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 222;
    var Tmp2 = cfg_11130794;
    if (ConstSet99[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11140009;
    if (ConstSet100[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 223;
    Tmp3.anchor = matched_node_11130852.ownerDocument.createComment(matched_node_11130852.outerHTML);
    var Tmp4 = match_11140009;
    if (ConstSet101[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 224;
    Tmp4.mount_template = cfg_11130794.mount;
    var Tmp5 = match_11140009;
    if (ConstSet102[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 225;
    Tmp5.match_templates = nimCopy(null, cfg_11130794.matches, NTI11091013);
    var Tmp6 = match_11140009;
    if (ConstSet103[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 226;
    Tmp6.items = nimCopy(null, [], NTI11140030);
    F.line = 227;
    var Tmp7 = match_11140009;
    if (ConstSet104[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11130852.parentNode.replaceChild(Tmp7.anchor, matched_node_11130852);
    }
    else {
      var Tmp8 = match_11140009;
      if (ConstSet105[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 229;
      var Tmp9 = cfg_11130794;
      if (ConstSet106[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11140009;
      if (ConstSet107[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 230;
      Tmp10.matches = nimCopy(null, [], NTI11140049);
      var Tmp11 = match_11140009;
      if (ConstSet108[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 231;
      Tmp11.mount = null;
      if (!((cfg_11130794.mount == null))) {
      var Tmp12 = match_11140009;
      if (ConstSet109[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 233;
      Tmp12.mount_source = cfg_11130794.mount;
      }
      else {
        L13: do {
          F.line = 235;
          var submatch_11140066 = null;
          F.line = 184;
          var i_11213056 = 0;
          F.line = 185;
          var l_11213057 = (cfg_11130794.matches != null ? cfg_11130794.matches.length : 0);
          L14: do {
            F.line = 186;
              L15: while (true) {
              if (!(i_11213056 < l_11213057)) break L15;
                F.line = 235;
                submatch_11140066 = cfg_11130794.matches[chckIndx(i_11213056, 0, (cfg_11130794.matches != null ? cfg_11130794.matches.length : 0)+0-1)-0];
                F.line = 236;
                var Tmp16 = match_11140009;
                if (ConstSet110[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp17 = Tmp16.matches, Tmp17) != null) { Tmp17.push(submatch_11140066.compile(matched_node_11130852)); } else { Tmp17 = [submatch_11140066.compile(matched_node_11130852)]; };
                F.line = 188;
                i_11213056 = addInt(i_11213056, 1);
                if (!(((cfg_11130794.matches != null ? cfg_11130794.matches.length : 0) == l_11213057))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 237;
    result_11130851 = match_11140009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11130851;

}
function as_interface_11130652(config_11130657) {
    function HEX3Aanonymous_11130664(node_11130666) {
      var result_11130671 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 385;
        result_11130671 = as_interface_11140527(compile_11130789(config_11130657, node_11130666));
      framePtr = F.prev;

      return result_11130671;

    }

  var result_11130659 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 384;
    result_11130659 = {compile: HEX3Aanonymous_11130664};
  framePtr = F.prev;

  return result_11130659;

}
function iter_11130234(c_11130240, selector_11130241, iter_11130243, actions_11130249) {
  var result_11130251 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 195;
    result_11130251 = {selector: nimCopy(null, selector_11130241, NTI112), refresh: [], mount: null, iter: true, iterate: iter_11130243, matches: [], convert: null};
    F.line = 202;
    if (c_11130240.matches != null) { c_11130240.matches.push(as_interface_11130652(result_11130251)); } else { c_11130240.matches = [as_interface_11130652(result_11130251)]; };
    if (!((actions_11130249 == null))) {
    F.line = 204;
    actions_11130249(result_11130251);
    }
    
  framePtr = F.prev;

  return result_11130251;

}
function seq_iterator_11051263(arr_11051267) {
    arr_11051267 = nimCopy(null, arr_11051267, NTI11051266);
    function next_11051273() {
      var result_11051278 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_11051267 != null ? arr_11051267.length : 0) <= it_11051271)) {
        F.line = 440;
        var colontmp__11213059 = false;
        F.line = 440;
        var colontmp__11213060 = empty_11051272;
        F.line = 440;
        nimCopy(result_11051278, {Field0: colontmp__11213059, Field1: colontmp__11213060}, NTI11051275);
        break BeforeRet;
        }
        
        F.line = 441;
        var colontmp__11213061 = true;
        F.line = 441;
        var colontmp__11213062 = arr_11051267[chckIndx(it_11051271, 0, (arr_11051267 != null ? arr_11051267.length : 0)+0-1)-0];
        F.line = 441;
        nimCopy(result_11051278, {Field0: colontmp__11213061, Field1: colontmp__11213062}, NTI11051275);
        F.line = 442;
        it_11051271 = addInt(it_11051271, 1);
      } while (false);
      framePtr = F.prev;

      return result_11051278;

    }

  var result_11051269 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 433;
    var it_11051271 = 0;
    F.line = 434;
    var empty_11051272 = null;
    F.line = 444;
    result_11051269 = next_11051273;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11051269;

}
function iter_children_11051246(c2_11051248) {
  var result_11051262 = null;

  var F={procname:"sample3.iterChildren",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 18;
    result_11051262 = seq_iterator_11051263(c2_11051248.children);
  framePtr = F.prev;

  return result_11051262;

}
function mount_11120861(c_11120866, comp_11120868) {
  var F={procname:"mount.mount",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    if (!(!((comp_11120868 == null)))) {
    F.line = 175;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nim-svelte/svelte.nim(175, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 176;
    c_11120866.mount = comp_11120868.clone();
  framePtr = F.prev;

  
}
function update_11100462(t_11100466, data_11100467, refresh_11100468) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 361;
      var match_11110214 = null;
      F.line = 184;
      var i_11213065 = 0;
      F.line = 185;
      var l_11213066 = (t_11100466.matches != null ? t_11100466.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11213065 < l_11213066)) break L3;
            F.line = 361;
            match_11110214 = t_11100466.matches[chckIndx(i_11213065, 0, (t_11100466.matches != null ? t_11100466.matches.length : 0)+0-1)-0];
            F.line = 362;
            match_11110214.update(data_11100467, refresh_11100468);
            F.line = 188;
            i_11213065 = addInt(i_11213065, 1);
            if (!(((t_11100466.matches != null ? t_11100466.matches.length : 0) == l_11213066))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function clone_11110335(comp_11110339) {
  var result_11110341 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 357;
    result_11110341 = compile_11110459(comp_11110339.config, comp_11110339.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11110341;

}
function late_11091211(late_comp_11091217) {
function resolve_comp_11091225() {
  var result_11091231 = null;

  var F={procname:"late.resolveComp",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((comp_11091224 == null)) {
    F.line = 412;
    var late_11091240 = late_comp_11091217();
    if (!(!((late_11091240 == null)))) {
    F.line = 413;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nim-svelte/svelte.nim(413, 13) `\x0Anot (late == nil)` late component not resolved in time"));
    }
    
    F.line = 414;
    comp_11091224 = late_11091240;
    }
    
    F.line = 415;
    result_11091231 = comp_11091224;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11091231;

}
    function HEX3Aanonymous_11100218() {
      var result_11100220 = null;

      var F={procname:"late.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 419;
        result_11100220 = resolve_comp_11091225().node;
      framePtr = F.prev;

      return result_11100220;

    }
    function HEX3Aanonymous_11100234(data_11100236, refresh_11100237) {
      var F={procname:"late.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 421;
        update_11100462(resolve_comp_11091225(), data_11100236, refresh_11100237);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11110272() {
        function HEX3Aanonymous_11110279() {
          var result_11110285 = null;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
          framePtr = F;
            F.line = 423;
            result_11110285 = clone_11110335(resolve_comp_11091225());
          framePtr = F.prev;

          return result_11110285;

        }

      var result_11110278 = null;

      var F={procname:"late.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 423;
        result_11110278 = late_11091211(HEX3Aanonymous_11110279);
      framePtr = F.prev;

      return result_11110278;

    }

  var result_11091219 = null;

  var F={procname:"late.late",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 408;
    var comp_11091224 = null;
    F.line = 417;
    result_11091219 = {node: HEX3Aanonymous_11100218, update: HEX3Aanonymous_11100234, clone: HEX3Aanonymous_11110272};
  framePtr = F.prev;

  return result_11091219;

}
function new_11211980() {
  var result_11211984 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11212001 = null;
    F.line = 851;
    r_11212001 = {config: null, matches: null, node: null, original_node: null};
    F.line = 852;
    result_11211984 = r_11212001;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11211984;

}
function compile_11180862(cfgs_11180867, node_11180868) {
  var result_11180871 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 240;
    result_11180871 = nimCopy(null, [], NTI11180886);
    L1: do {
      F.line = 241;
      var cfg_11180893 = null;
      F.line = 184;
      var i_11213071 = 0;
      F.line = 185;
      var l_11213072 = (cfgs_11180867 != null ? cfgs_11180867.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11213071 < l_11213072)) break L3;
            F.line = 241;
            cfg_11180893 = cfgs_11180867[chckIndx(i_11213071, 0, (cfgs_11180867 != null ? cfgs_11180867.length : 0)+0-1)-0];
            F.line = 242;
            if (result_11180871 != null) { result_11180871.push(cfg_11180893.compile(node_11180868)); } else { result_11180871 = [cfg_11180893.compile(node_11180868)]; };
            F.line = 188;
            i_11213071 = addInt(i_11213071, 1);
            if (!(((cfgs_11180867 != null ? cfgs_11180867.length : 0) == l_11213072))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11180871;

}
function compile_11211966(cfg_11211970, node_11211971) {
  var result_11211973 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 245;
    result_11211973 = new_11211980();
    F.line = 246;
    result_11211973.config = cfg_11211970;
    F.line = 247;
    result_11211973.original_node = node_11211971;
    F.line = 248;
    result_11211973.node = node_11211971.cloneNode(true);
    F.line = 249;
    result_11211973.matches = nimCopy(null, compile_11180862(cfg_11211970.matches, result_11211973.node), NTI11180869);
  framePtr = F.prev;

  return result_11211973;

}
function new_11211659() {
  var result_11211663 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11211801 = null;
    F.line = 851;
    r_11211801 = {matches: null};
    F.line = 852;
    result_11211663 = r_11211801;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11211663;

}
function create_11211640(configurator_11211650) {
  var result_11211652 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 125;
    result_11211652 = new_11211659();
    F.line = 126;
    configurator_11211650(result_11211652);
  framePtr = F.prev;

  return result_11211652;

}
function compile_11211624(node_11211629, configurator_11211635) {
  var result_11211637 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 354;
    result_11211637 = compile_11211966(create_11211640(configurator_11211635), node_11211629);
  framePtr = F.prev;

  return result_11211637;

}
function refresh_11200847(c_11200852, refresh_11200854) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 151;
    if (c_11200852.refresh != null) { c_11200852.refresh.push(refresh_11200854); } else { c_11200852.refresh = [refresh_11200854]; };
  framePtr = F.prev;

  
}
function create_iter_item_11180811(match_11180816, parent_node_11180817) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11180819 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 257;
    var comp_11180824 = null;
    F.line = 258;
    var node_11180825 = null;
      var Tmp1 = match_11180816;
      if (ConstSet115[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 260;
    var Tmp2 = match_11180816;
    if (ConstSet116[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11180824 = Tmp2.mount_template.clone();
    F.line = 261;
    node_11180825 = comp_11180824.node();
    }
    else {
      F.line = 263;
      node_11180825 = match_11180816.node.cloneNode(true);
    }
    
    F.line = 264;
    var Tmp3 = match_11180816;
    if (ConstSet117[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11180819 = {mount: comp_11180824, node: node_11180825, matches: compile_11180862(Tmp3.match_templates, node_11180825)};
    F.line = 268;
    var Tmp4 = match_11180816;
    if (ConstSet118[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11180817.insertBefore(node_11180825, Tmp4.anchor);
  framePtr = F.prev;

  return result_11180819;

}
function detach_11200473(iter_item_11200477, parent_node_11200478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 272;
    parent_node_11200478.removeChild(iter_item_11200477.node);
  framePtr = F.prev;

  
}
function pop_11200222(s_11200227, s_11200227_Idx) {
  var result_11200228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11200234 = subInt((s_11200227[s_11200227_Idx] != null ? s_11200227[s_11200227_Idx].length : 0), 1);
    F.line = 1784;
    result_11200228 = s_11200227[s_11200227_Idx][chckIndx(l_11200234, 0, (s_11200227[s_11200227_Idx] != null ? s_11200227[s_11200227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11200227[s_11200227_Idx] === null) s_11200227[s_11200227_Idx] = [];
               if (s_11200227[s_11200227_Idx].length < chckRange(l_11200234, 0, 2147483647)) { for (var i=s_11200227[s_11200227_Idx].length;i<chckRange(l_11200234, 0, 2147483647);++i) s_11200227[s_11200227_Idx].push(null); }
               else { s_11200227[s_11200227_Idx].length = chckRange(l_11200234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11200228;

}
function update_11180770(match_11180775, val_11180776, refresh_11180777) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp20;
          var Tmp21;
          var Tmp22;
      var Tmp23;
        var Tmp24;
        var Tmp25;
          var Tmp26;
      var Tmp27;
      var Tmp28;
      var Tmp29;
        var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp34;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11180777)) Tmp1 = false; else {        Tmp1 = (val_11180776 == match_11180775.oldValue);      }    if (Tmp1) {
    F.line = 277;
    break BeforeRet;
    }
    
    F.line = 279;
    match_11180775.oldValue = val_11180776;
    if (match_11180775.iter) {
    F.line = 281;
    var i_11180786 = 0;
    F.line = 282;
    var Tmp2 = match_11180775;
    if (ConstSet111[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11180788 = Tmp2.anchor.parentNode;
    F.line = 283;
    var Tmp3 = match_11180775;
    if (ConstSet112[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11180790 = Tmp3.iterate(val_11180776);
    L4: do {
      F.line = 284;
        L5: while (true) {
        if (!true) break L5;
          F.line = 285;
          var it_11180791 = itf_11180790();
          if ((it_11180791["Field0"] == false)) {
          F.line = 286;
          break L4;
          }
          
          F.line = 287;
          var item_11180792 = it_11180791["Field1"];
          if ((10 < i_11180786)) {
          F.line = 290;
          break L4;
          }
          
          F.line = 292;
          var iter_item_11180797 = null;
            var Tmp6 = match_11180775;
            if (ConstSet113[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11180786 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 296;
          var Tmp8 = match_11180775;
          if (ConstSet114[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11180797 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11180786, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          }
          else {
            F.line = 298;
            iter_item_11180797 = create_iter_item_11180811(match_11180775, parent_node_11180788);
            F.line = 299;
            var Tmp10 = match_11180775;
            if (ConstSet119[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11180797); } else { Tmp11 = [iter_item_11180797]; };
          }
          
          if (!((iter_item_11180797.mount == null))) {
          F.line = 303;
          iter_item_11180797.mount.update(item_11180792, refresh_11180777);
          }
          
          L12: do {
            F.line = 306;
            var submatch_11190214 = null;
            F.line = 184;
            var i_11213081 = 0;
            F.line = 185;
            var l_11213082 = (iter_item_11180797.matches != null ? iter_item_11180797.matches.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11213081 < l_11213082)) break L14;
                  F.line = 306;
                  submatch_11190214 = iter_item_11180797.matches[chckIndx(i_11213081, 0, (iter_item_11180797.matches != null ? iter_item_11180797.matches.length : 0)+0-1)-0];
                  F.line = 307;
                  submatch_11190214.update(item_11180792, refresh_11180777);
                  F.line = 188;
                  i_11213081 = addInt(i_11213081, 1);
                  if (!(((iter_item_11180797.matches != null ? iter_item_11180797.matches.length : 0) == l_11213082))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L15: do {
            F.line = 310;
            var refresh_proc_11200214 = null;
            F.line = 184;
            var i_11213086 = 0;
            F.line = 185;
            var l_11213087 = (match_11180775.refresh != null ? match_11180775.refresh.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11213086 < l_11213087)) break L17;
                  F.line = 310;
                  refresh_proc_11200214 = match_11180775.refresh[chckIndx(i_11213086, 0, (match_11180775.refresh != null ? match_11180775.refresh.length : 0)+0-1)-0];
                  F.line = 311;
                  refresh_proc_11200214(iter_item_11180797.node, item_11180792);
                  F.line = 188;
                  i_11213086 = addInt(i_11213086, 1);
                  if (!(((match_11180775.refresh != null ? match_11180775.refresh.length : 0) == l_11213087))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 313;
          i_11180786 = addInt(i_11180786, 1);
        }
    } while(false);
    L18: do {
      F.line = 316;
        L19: while (true) {
          var Tmp20 = match_11180775;
          if (ConstSet120[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11180786 < ((Tmp21 = Tmp20.items, Tmp21) != null ? Tmp21.length : 0))) break L19;
          F.line = 317;
          var Tmp22 = match_11180775;
          if (ConstSet121[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11200473(pop_11200222(Tmp22, "items"), parent_node_11180788);
        }
    } while(false);
    }
    else {
      F.line = 319;
      var node_11200492 = match_11180775.node;
      F.line = 320;
      var Tmp23 = match_11180775;
      if (ConstSet122[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11200494 = Tmp23.convert(val_11180776);
        var Tmp25 = match_11180775;
        if (ConstSet123[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp25.mount == null)) Tmp24 = false; else {          var Tmp26 = match_11180775;
          if (ConstSet124[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp24 = !((Tmp26.mount_source == null));        }      if (Tmp24) {
      var Tmp27 = match_11180775;
      if (ConstSet125[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 324;
      var Tmp28 = match_11180775;
      if (ConstSet126[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp27.mount = Tmp28.mount_source.clone();
      F.line = 325;
      var Tmp29 = match_11180775;
      if (ConstSet127[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11200492.parentNode.replaceChild(Tmp29.mount.node(), node_11200492);
      }
      
        var Tmp30 = match_11180775;
        if (ConstSet128[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp30.mount == null))) {
      F.line = 329;
      var Tmp31 = match_11180775;
      if (ConstSet129[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11200492 = Tmp31.mount.node();
      F.line = 330;
      var Tmp32 = match_11180775;
      if (ConstSet130[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp32.mount.update(converted_val_11200494, refresh_11180777);
      }
      
      L33: do {
        F.line = 333;
        var submatch_11200534 = null;
        F.line = 182;
        var colontmp__11213091 = null;
        F.line = 333;
        var Tmp34 = match_11180775;
        if (ConstSet131[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11213091 = Tmp34.matches;
        F.line = 184;
        var i_11213092 = 0;
        F.line = 185;
        var l_11213093 = (colontmp__11213091 != null ? colontmp__11213091.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11213092 < l_11213093)) break L36;
              F.line = 333;
              submatch_11200534 = colontmp__11213091[chckIndx(i_11213092, 0, (colontmp__11213091 != null ? colontmp__11213091.length : 0)+0-1)-0];
              F.line = 334;
              submatch_11200534.update(converted_val_11200494, refresh_11180777);
              F.line = 188;
              i_11213092 = addInt(i_11213092, 1);
              if (!(((colontmp__11213091 != null ? colontmp__11213091.length : 0) == l_11213093))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L37: do {
        F.line = 337;
        var refresh_proc_11200541 = null;
        F.line = 184;
        var i_11213096 = 0;
        F.line = 185;
        var l_11213097 = (match_11180775.refresh != null ? match_11180775.refresh.length : 0);
        L38: do {
          F.line = 186;
            L39: while (true) {
            if (!(i_11213096 < l_11213097)) break L39;
              F.line = 337;
              refresh_proc_11200541 = match_11180775.refresh[chckIndx(i_11213096, 0, (match_11180775.refresh != null ? match_11180775.refresh.length : 0)+0-1)-0];
              F.line = 338;
              refresh_proc_11200541(node_11200492, converted_val_11200494);
              F.line = 188;
              i_11213096 = addInt(i_11213096, 1);
              if (!(((match_11180775.refresh != null ? match_11180775.refresh.length : 0) == l_11213097))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11180750(match_11180755) {
    function HEX3Aanonymous_11180762(data_11180764, refresh_11180765) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 380;
        update_11180770(match_11180755, data_11180764, refresh_11180765);
      framePtr = F.prev;

      
    }

  var result_11180757 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_11180757 = {update: HEX3Aanonymous_11180762};
  framePtr = F.prev;

  return result_11180757;

}
function compile_11162693(cfg_11162698, node_11162699) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
                var Tmp16;
                var Tmp17;

  var result_11162755 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 211;
    var matched_node_11162756 = node_11162699.querySelector(toJSStr(cfg_11162698.selector));
    if ((matched_node_11162756 == null)) {
    F.line = 213;
    var selector_11162765 = nimCopy(null, cfg_11162698.selector, NTI112);
    F.line = 214;
    var fmt_res_11162766 = [mnewString(0)];
    F.line = 214;
    if (fmt_res_11162766[0] != null) { fmt_res_11162766[0] = (fmt_res_11162766[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11162766[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 214;
    format_value_9790080(fmt_res_11162766, 0, selector_11162765, []);
    F.line = 214;
    if (fmt_res_11162766[0] != null) { fmt_res_11162766[0] = (fmt_res_11162766[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11162766[0] = makeNimstrLit("\'"); };
    F.line = 214;
    raiseException({message: nimCopy(null, fmt_res_11162766[0], NTI112), parent: null, m_type: NTI9881015, name: null, trace: null, up: null}, "CompileError");
    }
    
    F.line = 216;
    var match_11170009 = {refresh: nimCopy(null, cfg_11162698.refresh, NTI11161864), iter: cfg_11162698.iter, node: matched_node_11162756, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 220;
    match_11170009.node = matched_node_11162756;
    if (match_11170009.iter) {
    var Tmp1 = match_11170009;
    if (ConstSet132[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 222;
    var Tmp2 = cfg_11162698;
    if (ConstSet133[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11170009;
    if (ConstSet134[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 223;
    Tmp3.anchor = matched_node_11162756.ownerDocument.createComment(matched_node_11162756.outerHTML);
    var Tmp4 = match_11170009;
    if (ConstSet135[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 224;
    Tmp4.mount_template = cfg_11162698.mount;
    var Tmp5 = match_11170009;
    if (ConstSet136[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 225;
    Tmp5.match_templates = nimCopy(null, cfg_11162698.matches, NTI11161869);
    var Tmp6 = match_11170009;
    if (ConstSet137[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 226;
    Tmp6.items = nimCopy(null, [], NTI11170030);
    F.line = 227;
    var Tmp7 = match_11170009;
    if (ConstSet138[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11162756.parentNode.replaceChild(Tmp7.anchor, matched_node_11162756);
    }
    else {
      var Tmp8 = match_11170009;
      if (ConstSet139[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 229;
      var Tmp9 = cfg_11162698;
      if (ConstSet140[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11170009;
      if (ConstSet141[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 230;
      Tmp10.matches = nimCopy(null, [], NTI11170049);
      var Tmp11 = match_11170009;
      if (ConstSet142[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 231;
      Tmp11.mount = null;
      if (!((cfg_11162698.mount == null))) {
      var Tmp12 = match_11170009;
      if (ConstSet143[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 233;
      Tmp12.mount_source = cfg_11162698.mount;
      }
      else {
        L13: do {
          F.line = 235;
          var submatch_11180214 = null;
          F.line = 184;
          var i_11213103 = 0;
          F.line = 185;
          var l_11213104 = (cfg_11162698.matches != null ? cfg_11162698.matches.length : 0);
          L14: do {
            F.line = 186;
              L15: while (true) {
              if (!(i_11213103 < l_11213104)) break L15;
                F.line = 235;
                submatch_11180214 = cfg_11162698.matches[chckIndx(i_11213103, 0, (cfg_11162698.matches != null ? cfg_11162698.matches.length : 0)+0-1)-0];
                F.line = 236;
                var Tmp16 = match_11170009;
                if (ConstSet144[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp17 = Tmp16.matches, Tmp17) != null) { Tmp17.push(submatch_11180214.compile(matched_node_11162756)); } else { Tmp17 = [submatch_11180214.compile(matched_node_11162756)]; };
                F.line = 188;
                i_11213103 = addInt(i_11213103, 1);
                if (!(((cfg_11162698.matches != null ? cfg_11162698.matches.length : 0) == l_11213104))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 237;
    result_11162755 = match_11170009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11162755;

}
function as_interface_11162556(config_11162561) {
    function HEX3Aanonymous_11162568(node_11162570) {
      var result_11162575 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 385;
        result_11162575 = as_interface_11180750(compile_11162693(config_11162561, node_11162570));
      framePtr = F.prev;

      return result_11162575;

    }

  var result_11162563 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 384;
    result_11162563 = {compile: HEX3Aanonymous_11162568};
  framePtr = F.prev;

  return result_11162563;

}
function match_11162154(c_11162159, selector_11162160, convert_11162162, actions_11162168) {
  var result_11162170 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 140;
    result_11162170 = {selector: nimCopy(null, selector_11162160, NTI112), refresh: [], mount: null, iter: false, convert: convert_11162162, matches: null, iterate: null};
    F.line = 146;
    if (c_11162159.matches != null) { c_11162159.matches.push(as_interface_11162556(result_11162170)); } else { c_11162159.matches = [as_interface_11162556(result_11162170)]; };
    if (!((actions_11162168 == null))) {
    F.line = 148;
    actions_11162168(result_11162170);
    }
    
  framePtr = F.prev;

  return result_11162170;

}
function id_11162115(data_11162118) {
  var result_11162119 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 109;
    result_11162119 = data_11162118;
  framePtr = F.prev;

  return result_11162119;

}
function match_11162095(c_11162099, selector_11162100, actions_11162106) {
  var result_11162108 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 154;
    result_11162108 = match_11162154(c_11162099, selector_11162100, id_11162115, actions_11162106);
  framePtr = F.prev;

  return result_11162108;

}
function match_11161756(c_11161760, selector_11161761, refresh_proc_11161763) {
  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 160;
    refresh_11200847(match_11162095(c_11161760, selector_11161761, null), refresh_proc_11161763);
  framePtr = F.prev;

  
}
function as_interface_11210522(comp_11210527, convert_11210529) {
    function HEX3Aanonymous_11210536() {
      var result_11210538 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 400;
        result_11210538 = comp_11210527.node;
      framePtr = F.prev;

      return result_11210538;

    }
    function HEX3Aanonymous_11210552(data_11210554, refresh_11210555) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 402;
        update_11100462(comp_11210527, convert_11210529(data_11210554), refresh_11210555);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11210800() {
      var result_11210806 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 404;
        result_11210806 = as_interface_11210522(clone_11110335(comp_11210527), convert_11210529);
      framePtr = F.prev;

      return result_11210806;

    }

  var result_11210531 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 398;
    result_11210531 = {node: HEX3Aanonymous_11210536, update: HEX3Aanonymous_11210552, clone: HEX3Aanonymous_11210800};
  framePtr = F.prev;

  return result_11210531;

}
function mount_11201455(c_11201461, comp_11201463, convert_11201465) {
  var F={procname:"mount.mount",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    if (!(!((comp_11201463 == null)))) {
    F.line = 179;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nim-svelte/svelte.nim(179, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 180;
    c_11201461.mount = as_interface_11210522(clone_11110335(comp_11201463), convert_11201465);
  framePtr = F.prev;

  
}
function to_comp2_11051458(d_11051460) {
  var result_11051461 = null;

  var F={procname:"sample3.toComp2",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 26;
    result_11051461 = d_11051460.comp2;
  framePtr = F.prev;

  return result_11051461;

}
function update_11212629(t_11212633, data_11212634, refresh_11212635) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 361;
      var match_11212642 = null;
      F.line = 184;
      var i_11213108 = 0;
      F.line = 185;
      var l_11213109 = (t_11212633.matches != null ? t_11212633.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11213108 < l_11213109)) break L3;
            F.line = 361;
            match_11212642 = t_11212633.matches[chckIndx(i_11213108, 0, (t_11212633.matches != null ? t_11212633.matches.length : 0)+0-1)-0];
            F.line = 362;
            match_11212642.update(data_11212634, refresh_11212635);
            F.line = 188;
            i_11213108 = addInt(i_11213108, 1);
            if (!(((t_11212633.matches != null ? t_11212633.matches.length : 0) == l_11213109))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function attach_11212397(t_11212401, target_11212402, anchor_11212403, data_11212404) {
  var F={procname:"attach.attach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 365;
    update_11212629(t_11212401, data_11212404, true);
    F.line = 366;
    target_11212402.insertBefore(t_11212401.node, anchor_11212403);
  framePtr = F.prev;

  
}
function clone_11212126(comp_11212130) {
  var result_11212132 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 357;
    result_11212132 = compile_11211966(comp_11212130.config, comp_11212130.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11212132;

}
function HEX3Aanonymous_11051476(t_11051483) {
    function HEX3Aanonymous_11051530(name_11051608) {
        function HEX3Aanonymous_11051701(node_11051704, data_11051705) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
          framePtr = F;
            F.line = 31;
            node_11051704.textContent = toJSStr(data_11051705.name);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_11090991(child_11091047) {
            function HEX3Aanonymous_11091139() {
              var result_11091145 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
              framePtr = F;
                F.line = 33;
                result_11091145 = comp2_11051088[0];
              framePtr = F.prev;

              return result_11091145;

            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
          framePtr = F;
            F.line = 33;
            mount_11120861(child_11091047, late_11091211(HEX3Aanonymous_11091139));
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 30;
        match_11051982(name_11051608, makeNimstrLit(".name"), HEX3Aanonymous_11051701);
        iter_11130234(name_11051608, makeNimstrLit(".child"), iter_children_11051246, HEX3Aanonymous_11090991);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    iter_11150837(t_11051483, makeNimstrLit("ul li"), iter_names_11051117, HEX3Aanonymous_11051530);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_11161372(t_11161379) {
    function HEX3Aanonymous_11161499(node_11161502, data_11161503) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 37;
        node_11161502.textContent = toJSStr(data_11161503.name);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11201005(t_11201040) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 39;
        mount_11201455(t_11201040, comp2_11051088[0], to_comp2_11051458);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 36;
    match_11161756(t_11161379, makeNimstrLit("h1 .name"), HEX3Aanonymous_11161499);
    match_11162095(t_11161379, makeNimstrLit("div.insert"), HEX3Aanonymous_11201005);
  framePtr = F.prev;

  
}
comp2_11051088[0] = compile_11160975(document.querySelector("template#comp2").content, HEX3Aanonymous_11051476);
comp1_11051429[0] = compile_11211624(document.querySelector("template#comp1").content, HEX3Aanonymous_11161372);
if (true) {
attach_11212397(clone_11212126(comp1_11051429[0]), document.body, null, {name: makeNimstrLit("Hello comp1"), comp2: {names: [{name: makeNimstrLit("brian"), children: [{names: [{name: makeNimstrLit("arthur"), children: []}]}]}, {name: makeNimstrLit("zoe"), children: []}, {name: makeNimstrLit("ashley"), children: []}]}});
}

