/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11120049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11110808 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11110801 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11110795 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11110794 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11111648 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11111643 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11111642 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11120030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051262 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051246 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051245 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11110790 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11110440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11110785 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11130855 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051251 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051250 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11130872 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11060049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11060030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051875 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051870 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051139 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051130 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11100049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051456 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051449 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051443 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051442 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11052520 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI9852029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI9852390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11052515 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11052514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11100030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051433 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051417 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051416 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051438 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051407 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051411 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4180232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4435011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051427 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051422 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051421 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11070947 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11101449 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI11051059 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051054 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051053 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11101466 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NNI11051054 = {kind: 1, offset: "update", len: 0, typ: NTI11051059, name: "update", sons: null};
NTI11051054.node = NNI11051054;
NTI11051053.base = NTI11051054;
NTI11101466.base = NTI11051053;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6249.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
NTI6241.base = NTI6219;
NTI11101449.base = NTI11051053;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI11051422 = {kind: 1, offset: "update", len: 0, typ: NTI11051427, name: "update", sons: null};
NTI11051422.node = NNI11051422;
NTI11051421.base = NTI11051422;
NTI11070947.base = NTI11051421;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4435011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4180232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4435011.node = NNI4435011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI9881015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881015.node = NNI9881015;
NTI9881015.base = NTI6221;
NTI11051411.base = NTI11051407;
var NNI11051417 = {kind: 1, offset: "compile", len: 0, typ: NTI11051433, name: "compile", sons: null};
NTI11051417.node = NNI11051417;
NTI11051416.base = NTI11051417;
NTI11051438.base = NTI11051416;
NTI9852386.base = NTI9852033;
NTI9852388.base = NTI9852033;
NTI9852390.base = NTI9852033;
var NNI9852031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI9852031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI9852031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI9852031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI9852031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI9852031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI9852031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI9852031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI9852031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI9852031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI9852031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI9852031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI9852031, name: "NotationNode", len: 0, sons: null}}};
NTI9852031.node = NNI9852031;
var NNI9852029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9852029.node = NNI9852029;
NTI9852029.base = NTI6008;
NTI9852027.base = NTI9852029;
NTI9852537.base = NTI9852041;
var NNI9852083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI9852537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI9852083.node = NNI9852083;
NTI9852083.base = NTI9852043;
NTI9852081.base = NTI9852083;
var NNI9852079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI9852079.node = NNI9852079;
NTI9852079.base = NTI9852043;
NTI9852077.base = NTI9852079;
NTI9852443.base = NTI9852077;
NTI9852445.base = NTI9852077;
var NNI9852043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI9852027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI9852081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI9852443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI9852445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI9852043.node = NNI9852043;
NTI9852043.base = NTI9852035;
NTI9852041.base = NTI9852043;
var NNI9852075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852075.node = NNI9852075;
NTI9852075.base = NTI9852043;
NTI9852073.base = NTI9852075;
NTI9852423.base = NTI9852073;
NTI9852425.base = NTI9852081;
var NNI9852087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI9852087.node = NNI9852087;
NTI9852087.base = NTI9852043;
NTI9852085.base = NTI9852087;
NTI9852427.base = NTI9852085;
NTI9852429.base = NTI9852041;
var NNI9852071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI9852071.node = NNI9852071;
NTI9852071.base = NTI9852043;
NTI9852069.base = NTI9852071;
NTI9852431.base = NTI9852069;
var NNI9852067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852067.node = NNI9852067;
NTI9852067.base = NTI9852043;
NTI9852065.base = NTI9852067;
NTI9852433.base = NTI9852065;
var NNI9852039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI9852041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI9852041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI9852041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI9852423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI9852425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI9852427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI9852429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI9852431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI9852433, name: "links", sons: null}]};
NTI9852039.node = NNI9852039;
NTI9852039.base = NTI9852035;
NTI9852037.base = NTI9852039;
var NNI9852091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI9852091.node = NNI9852091;
NTI9852091.base = NTI6008;
NTI9852089.base = NTI9852091;
var NNI9852035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI9852386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI9852388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI9852390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI9852033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI9852033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI9852033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI9852031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI9852033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI9852033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI9852033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI9852037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI9852089, name: "style", sons: null}]};
NTI9852035.node = NNI9852035;
var NNI9852005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI9852180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI9852184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI9852188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI9852192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI9852196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI9852200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI9852204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI9852208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI9852212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI9852216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI9852220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI9852224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI9852228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI9852232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI9852236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI9852240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI9852244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI9852248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI9852252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI9852256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI9852260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI9852264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI9852268, name: "onloadend", sons: null}]};
NTI9852005.node = NNI9852005;
NTI9852005.base = NTI6008;
NTI9852035.base = NTI9852005;
NTI9852033.base = NTI9852035;
NTI11052520.base = NTI11051421;
var NNI11051443 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881200, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11051449, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11051456, name: "clone", sons: null}]};
NTI11051443.node = NNI11051443;
NTI11051442.base = NTI11051443;
var NNI11052515 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11052520, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11051442, name: "mount", sons: null}]};
NTI11052515.node = NNI11052515;
NTI11052514.base = NTI11052515;
NTI11100030.base = NTI11052514;
NTI11100049.base = NTI11051421;
NTI11051130.base = NTI112;
var NNI11051139 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI112, name: "Field1", sons: null}]};
NTI11051139.node = NNI11051139;
NTI11051870.base = NTI11051407;
NTI11051875.base = NTI11051416;
NTI11060030.base = NTI11052514;
NTI11060049.base = NTI11051421;
var NNI11051251 = {kind: 1, offset: "update", len: 0, typ: NTI11051256, name: "update", sons: null};
NTI11051251.node = NNI11051251;
NTI11051250.base = NTI11051251;
NTI11130872.base = NTI11051250;
NTI11130855.base = NTI11051250;
NTI11110785.base = NTI11110440;
var NNI11051246 = {kind: 1, offset: "compile", len: 0, typ: NTI11051262, name: "compile", sons: null};
NTI11051246.node = NNI11051246;
NTI11051245.base = NTI11051246;
NTI11110790.base = NTI11051245;
NTI11111648.base = NTI11051250;
var NNI11110795 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881200, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11110801, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11110808, name: "clone", sons: null}]};
NTI11110795.node = NNI11110795;
NTI11110794.base = NTI11110795;
var NNI11111643 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11111648, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11110794, name: "mount", sons: null}]};
NTI11111643.node = NNI11111643;
NTI11111642.base = NTI11111643;
NTI11120030.base = NTI11111642;
NTI11120049.base = NTI11051250;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(true);
var ConstSet4 = setConstr(true);
var ConstSet5 = setConstr(true);
var ConstSet6 = setConstr(true);
var ConstSet7 = setConstr(true);
var ConstSet8 = setConstr(true);
var ConstSet9 = setConstr(true);
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(false);
var ConstSet14 = setConstr(false);
var ConstSet15 = setConstr(false);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet18 = setConstr(60, 62, 94);
var ConstSet19 = setConstr(60, 62, 94);
var ConstSet20 = setConstr(45, 43, 32);
var ConstSet21 = setConstr([48, 57]);
var ConstSet22 = setConstr([48, 57]);
var ConstSet23 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet24 = setConstr([65, 90], [97, 122]);
var ConstSet25 = setConstr(true);
var ConstSet26 = setConstr(true);
var ConstSet27 = setConstr(true);
var ConstSet28 = setConstr(true);
var ConstSet29 = setConstr(true);
var ConstSet30 = setConstr(true);
var ConstSet31 = setConstr(true);
var ConstSet32 = setConstr(false);
var ConstSet33 = setConstr(false);
var ConstSet34 = setConstr(false);
var ConstSet35 = setConstr(false);
var ConstSet36 = setConstr(false);
var ConstSet37 = setConstr(false);
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(true);
var ConstSet40 = setConstr(true);
var ConstSet41 = setConstr(true);
var ConstSet42 = setConstr(true);
var ConstSet43 = setConstr(true);
var ConstSet44 = setConstr(true);
var ConstSet45 = setConstr(true);
var ConstSet46 = setConstr(true);
var ConstSet47 = setConstr(true);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(false);
var ConstSet50 = setConstr(false);
var ConstSet51 = setConstr(false);
var ConstSet52 = setConstr(false);
var ConstSet53 = setConstr(false);
var ConstSet54 = setConstr(true);
var ConstSet55 = setConstr(true);
var ConstSet56 = setConstr(true);
var ConstSet57 = setConstr(true);
var ConstSet58 = setConstr(true);
var ConstSet59 = setConstr(true);
var ConstSet60 = setConstr(true);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(false);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(false);
var ConstSet67 = setConstr(true);
var ConstSet68 = setConstr(true);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(true);
var ConstSet71 = setConstr(true);
var ConstSet72 = setConstr(true);
var ConstSet73 = setConstr(true);
var ConstSet74 = setConstr(true);
var ConstSet75 = setConstr(true);
var ConstSet76 = setConstr(true);
var ConstSet77 = setConstr(true);
var ConstSet78 = setConstr(false);
var ConstSet79 = setConstr(false);
var ConstSet80 = setConstr(false);
var ConstSet81 = setConstr(false);
var ConstSet82 = setConstr(false);
var ConstSet83 = setConstr(true);
var ConstSet84 = setConstr(true);
var ConstSet85 = setConstr(true);
var ConstSet86 = setConstr(true);
var ConstSet87 = setConstr(true);
var ConstSet88 = setConstr(true);
var ConstSet89 = setConstr(true);
var ConstSet90 = setConstr(false);
var ConstSet91 = setConstr(false);
var ConstSet92 = setConstr(false);
var ConstSet93 = setConstr(false);
var ConstSet94 = setConstr(false);
var ConstSet95 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_9885031 = [0];
var comp2_11051081 = [null];
var comp1_11051278 = [null];
function new_11101380() {
  var result_11101384 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11101401 = null;
    F.line = 851;
    r_11101401 = {config: null, matches: null, node: null, original_node: null};
    F.line = 852;
    result_11101384 = r_11101401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11101384;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__11162112 = 0;
      colontmp__11162112 = (i_160051 - 1);
      var res_11162117 = colontmp__11162112;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11162117)) break L8;
            j_175236 = res_11162117;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_11162117 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function compile_11101442(cfgs_11101447, node_11101448) {
  var result_11101451 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 234;
    result_11101451 = nimCopy(null, [], NTI11101466);
    L1: do {
      F.line = 235;
      var cfg_11110214 = null;
      F.line = 184;
      var i_11162097 = 0;
      F.line = 185;
      var l_11162098 = (cfgs_11101447 != null ? cfgs_11101447.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11162097 < l_11162098)) break L3;
            F.line = 235;
            cfg_11110214 = cfgs_11101447[chckIndx(i_11162097, 0, (cfgs_11101447 != null ? cfgs_11101447.length : 0)+0-1)-0];
            F.line = 236;
            if (result_11101451 != null) { result_11101451.push(cfg_11110214.compile(node_11101448)); } else { result_11101451 = [cfg_11110214.compile(node_11101448)]; };
            F.line = 188;
            i_11162097 = addInt(i_11162097, 1);
            if (!(((cfgs_11101447 != null ? cfgs_11101447.length : 0) == l_11162098))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11101451;

}
function compile_11101366(cfg_11101370, node_11101371) {
  var result_11101373 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 239;
    result_11101373 = new_11101380();
    F.line = 240;
    result_11101373.config = cfg_11101370;
    F.line = 241;
    result_11101373.original_node = node_11101371;
    F.line = 242;
    result_11101373.node = node_11101371.cloneNode(true);
    F.line = 243;
    result_11101373.matches = nimCopy(null, compile_11101442(cfg_11101370.matches, result_11101373.node), NTI11101449);
  framePtr = F.prev;

  return result_11101373;

}
function new_11101018() {
  var result_11101022 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11101201 = null;
    F.line = 851;
    r_11101201 = {matches: null};
    F.line = 852;
    result_11101022 = r_11101201;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11101022;

}
function create_11100999(configurator_11101009) {
  var result_11101011 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 124;
    result_11101011 = new_11101018();
    F.line = 125;
    configurator_11101009(result_11101011);
  framePtr = F.prev;

  return result_11101011;

}
function compile_11100983(node_11100988, configurator_11100994) {
  var result_11100996 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 343;
    result_11100996 = compile_11101366(create_11100999(configurator_11100994), node_11100988);
  framePtr = F.prev;

  return result_11100996;

}
function compile_11070923(cfgs_11070928, node_11070929) {
  var result_11070932 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 234;
    result_11070932 = nimCopy(null, [], NTI11070947);
    L1: do {
      F.line = 235;
      var cfg_11070954 = null;
      F.line = 184;
      var i_11162156 = 0;
      F.line = 185;
      var l_11162157 = (cfgs_11070928 != null ? cfgs_11070928.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11162156 < l_11162157)) break L3;
            F.line = 235;
            cfg_11070954 = cfgs_11070928[chckIndx(i_11162156, 0, (cfgs_11070928 != null ? cfgs_11070928.length : 0)+0-1)-0];
            F.line = 236;
            if (result_11070932 != null) { result_11070932.push(cfg_11070954.compile(node_11070929)); } else { result_11070932 = [cfg_11070954.compile(node_11070929)]; };
            F.line = 188;
            i_11162156 = addInt(i_11162156, 1);
            if (!(((cfgs_11070928 != null ? cfgs_11070928.length : 0) == l_11162157))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11070932;

}
function create_iter_item_11100544(match_11100549, parent_node_11100550) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11100552 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 251;
    var comp_11100557 = null;
    F.line = 252;
    var node_11100558 = null;
      var Tmp1 = match_11100549;
      if (ConstSet6[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 254;
    var Tmp2 = match_11100549;
    if (ConstSet7[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11100557 = Tmp2.mount_template.clone();
    F.line = 255;
    node_11100558 = comp_11100557.node();
    }
    else {
      F.line = 257;
      node_11100558 = match_11100549.node.cloneNode(true);
    }
    
    F.line = 258;
    var Tmp3 = match_11100549;
    if (ConstSet8[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11100552 = {mount: comp_11100557, node: node_11100558, matches: compile_11070923(Tmp3.match_templates, node_11100558)};
    F.line = 262;
    var Tmp4 = match_11100549;
    if (ConstSet9[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11100550.insertBefore(node_11100558, Tmp4.anchor);
  framePtr = F.prev;

  return result_11100552;

}
function detach_11090473(iter_item_11090477, parent_node_11090478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 266;
    parent_node_11090478.removeChild(iter_item_11090477.node);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function pop_11090222(s_11090227, s_11090227_Idx) {
  var result_11090228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11090234 = subInt((s_11090227[s_11090227_Idx] != null ? s_11090227[s_11090227_Idx].length : 0), 1);
    F.line = 1784;
    result_11090228 = s_11090227[s_11090227_Idx][chckIndx(l_11090234, 0, (s_11090227[s_11090227_Idx] != null ? s_11090227[s_11090227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11090227[s_11090227_Idx] === null) s_11090227[s_11090227_Idx] = [];
               if (s_11090227[s_11090227_Idx].length < chckRange(l_11090234, 0, 2147483647)) { for (var i=s_11090227[s_11090227_Idx].length;i<chckRange(l_11090234, 0, 2147483647);++i) s_11090227[s_11090227_Idx].push(null); }
               else { s_11090227[s_11090227_Idx].length = chckRange(l_11090234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11090228;

}
function update_11100503(match_11100508, val_11100509, refresh_11100510) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp20;
          var Tmp21;
          var Tmp22;
      var Tmp23;
        var Tmp24;
      var Tmp25;
      var Tmp26;
        var Tmp28;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11100510)) Tmp1 = false; else {        Tmp1 = (val_11100509 == match_11100508.oldValue);      }    if (Tmp1) {
    F.line = 271;
    break BeforeRet;
    }
    
    F.line = 273;
    match_11100508.oldValue = val_11100509;
    if (match_11100508.iter) {
    F.line = 275;
    var i_11100519 = 0;
    F.line = 276;
    var Tmp2 = match_11100508;
    if (ConstSet2[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11100521 = Tmp2.anchor.parentNode;
    F.line = 277;
    var Tmp3 = match_11100508;
    if (ConstSet3[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11100523 = Tmp3.iterate(val_11100509);
    L4: do {
      F.line = 278;
        L5: while (true) {
        if (!true) break L5;
          F.line = 279;
          var it_11100524 = itf_11100523();
          if ((it_11100524["Field0"] == false)) {
          F.line = 280;
          break L4;
          }
          
          F.line = 281;
          var item_11100525 = nimCopy(null, it_11100524["Field1"], NTI112);
          if ((10 < i_11100519)) {
          F.line = 284;
          break L4;
          }
          
          F.line = 286;
          var iter_item_11100530 = null;
            var Tmp6 = match_11100508;
            if (ConstSet4[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11100519 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 290;
          var Tmp8 = match_11100508;
          if (ConstSet5[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11100530 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11100519, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          }
          else {
            F.line = 292;
            iter_item_11100530 = create_iter_item_11100544(match_11100508, parent_node_11100521);
            F.line = 293;
            var Tmp10 = match_11100508;
            if (ConstSet10[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11100530); } else { Tmp11 = [iter_item_11100530]; };
          }
          
          if (!((iter_item_11100530.mount == null))) {
          F.line = 297;
          iter_item_11100530.mount.update(item_11100525, refresh_11100510);
          }
          
          L12: do {
            F.line = 300;
            var submatch_11100642 = null;
            F.line = 184;
            var i_11162134 = 0;
            F.line = 185;
            var l_11162135 = (iter_item_11100530.matches != null ? iter_item_11100530.matches.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11162134 < l_11162135)) break L14;
                  F.line = 300;
                  submatch_11100642 = iter_item_11100530.matches[chckIndx(i_11162134, 0, (iter_item_11100530.matches != null ? iter_item_11100530.matches.length : 0)+0-1)-0];
                  F.line = 301;
                  submatch_11100642.update(item_11100525, refresh_11100510);
                  F.line = 188;
                  i_11162134 = addInt(i_11162134, 1);
                  if (!(((iter_item_11100530.matches != null ? iter_item_11100530.matches.length : 0) == l_11162135))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L15: do {
            F.line = 304;
            var refresh_proc_11100649 = null;
            F.line = 184;
            var i_11162139 = 0;
            F.line = 185;
            var l_11162140 = (match_11100508.refresh != null ? match_11100508.refresh.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11162139 < l_11162140)) break L17;
                  F.line = 304;
                  refresh_proc_11100649 = match_11100508.refresh[chckIndx(i_11162139, 0, (match_11100508.refresh != null ? match_11100508.refresh.length : 0)+0-1)-0];
                  F.line = 305;
                  refresh_proc_11100649(iter_item_11100530.node, item_11100525);
                  F.line = 188;
                  i_11162139 = addInt(i_11162139, 1);
                  if (!(((match_11100508.refresh != null ? match_11100508.refresh.length : 0) == l_11162140))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 307;
          i_11100519 = addInt(i_11100519, 1);
        }
    } while(false);
    L18: do {
      F.line = 310;
        L19: while (true) {
          var Tmp20 = match_11100508;
          if (ConstSet11[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11100519 < ((Tmp21 = Tmp20.items, Tmp21) != null ? Tmp21.length : 0))) break L19;
          F.line = 311;
          var Tmp22 = match_11100508;
          if (ConstSet12[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11090473(pop_11090222(Tmp22, "items"), parent_node_11100521);
        }
    } while(false);
    }
    else {
      F.line = 313;
      var node_11100721 = match_11100508.node;
      F.line = 314;
      var Tmp23 = match_11100508;
      if (ConstSet13[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11100723 = Tmp23.convert(val_11100509);
        var Tmp24 = match_11100508;
        if (ConstSet14[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp24.mount == null))) {
      F.line = 318;
      var Tmp25 = match_11100508;
      if (ConstSet15[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11100721 = Tmp25.mount.node();
      F.line = 319;
      var Tmp26 = match_11100508;
      if (ConstSet16[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp26.mount.update(converted_val_11100723, refresh_11100510);
      }
      
      L27: do {
        F.line = 322;
        var submatch_11100742 = null;
        F.line = 182;
        var colontmp__11162144 = null;
        F.line = 322;
        var Tmp28 = match_11100508;
        if (ConstSet17[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11162144 = Tmp28.matches;
        F.line = 184;
        var i_11162145 = 0;
        F.line = 185;
        var l_11162146 = (colontmp__11162144 != null ? colontmp__11162144.length : 0);
        L29: do {
          F.line = 186;
            L30: while (true) {
            if (!(i_11162145 < l_11162146)) break L30;
              F.line = 322;
              submatch_11100742 = colontmp__11162144[chckIndx(i_11162145, 0, (colontmp__11162144 != null ? colontmp__11162144.length : 0)+0-1)-0];
              F.line = 323;
              submatch_11100742.update(converted_val_11100723, refresh_11100510);
              F.line = 188;
              i_11162145 = addInt(i_11162145, 1);
              if (!(((colontmp__11162144 != null ? colontmp__11162144.length : 0) == l_11162146))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L31: do {
        F.line = 326;
        var refresh_proc_11100749 = null;
        F.line = 184;
        var i_11162149 = 0;
        F.line = 185;
        var l_11162150 = (match_11100508.refresh != null ? match_11100508.refresh.length : 0);
        L32: do {
          F.line = 186;
            L33: while (true) {
            if (!(i_11162149 < l_11162150)) break L33;
              F.line = 326;
              refresh_proc_11100749 = match_11100508.refresh[chckIndx(i_11162149, 0, (match_11100508.refresh != null ? match_11100508.refresh.length : 0)+0-1)-0];
              F.line = 327;
              refresh_proc_11100749(node_11100721, converted_val_11100723);
              F.line = 188;
              i_11162149 = addInt(i_11162149, 1);
              if (!(((match_11100508.refresh != null ? match_11100508.refresh.length : 0) == l_11162150))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11100483(match_11100488) {
    function HEX3Aanonymous_11100495(data_11100497, refresh_11100498) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 369;
        update_11100503(match_11100488, data_11100497, refresh_11100498);
      framePtr = F.prev;

      
    }

  var result_11100490 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 368;
    result_11100490 = {update: HEX3Aanonymous_11100495};
  framePtr = F.prev;

  return result_11100490;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1025017(s_1025019, b_1025021, b_1025021_Idx, start_1025022) {
      var Tmp1;
          var Tmp4;

  var result_1025024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1025025 = start_1025022;
    if (((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1025025 = addInt(i_1025025, 1);
    }
    
      if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet22[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1025021[b_1025021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet23[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1035016 = subInt(s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0], 48);
          if ((b_1025021[b_1025021_Idx] <= divInt(subInt(2147483647, c_1035016), 10))) {
          F.line = 483;
          b_1025021[b_1025021_Idx] = addInt(mulInt(b_1025021[b_1025021_Idx], 10), c_1035016);
          }
          else {
            F.line = 485;
            b_1025021[b_1025021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1025025 = addInt(i_1025025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1025025 = addInt(i_1025025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1025024 = subInt(i_1025025, start_1025022);
    }
    
  framePtr = F.prev;

  return result_1025024;

}
function HEX5BHEX5D_4435068(s_4435072, x_4435074) {
  var result_4435075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4435201 = x_4435074.a;
    F.line = 2437;
    var l_4435401 = addInt(subInt(subInt((s_4435072 != null ? s_4435072.length : 0), x_4435074.b), a_4435201), 1);
    F.line = 2438;
    result_4435075 = nimCopy(null, mnewString(chckRange(l_4435401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4435409 = 0;
      F.line = 106;
      var i_11162180 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11162180 < l_4435401)) break L3;
            F.line = 2439;
            i_4435409 = i_11162180;
            F.line = 2439;
            result_4435075[chckIndx(i_4435409, 0, (result_4435075 != null ? result_4435075.length : 0)+0-1)-0] = s_4435072[chckIndx(addInt(i_4435409, a_4435201), 0, (s_4435072 != null ? s_4435072.length : 0)+0-1)-0];
            F.line = 109;
            i_11162180 = addInt(i_11162180, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4435075;

}
function HEX2EHEX2E_4435001(a_4435006, b_4435008) {
  var result_4435014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4435014, {a: a_4435006, b: b_4435008}, NTI4435011);
  framePtr = F.prev;

  return result_4435014;

}
function parse_standard_format_specifier_9745322(s_9745324, start_9745325, ignore_unknown_suffix_9745327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9745328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9745328.fill = 32;
    F.line = 380;
    result_9745328.align = 0;
    F.line = 381;
    result_9745328.sign = 45;
    F.line = 382;
    var i_9745331 = start_9745325;
    if (((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet18[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9745328.fill = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 385;
    result_9745328.align = s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 386;
    i_9745331 = addInt(i_9745331, 2);
    }
    else {
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet19[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9745328.align = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 389;
    i_9745331 = addInt(i_9745331, 1);
    }
    }
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet20[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9745328.sign = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 393;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9745328.alternateForm = true;
    F.line = 397;
    i_9745331 = addInt(i_9745331, 1);
    }
    
      if (!((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet21[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9745328.padWithZero = true;
    F.line = 401;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 403;
    var parsed_length_9765015 = parse_saturated_natural_1025017(s_9745324, result_9745328, "minimumWidth", i_9745331);
    F.line = 404;
    i_9745331 = addInt(i_9745331, parsed_length_9765015);
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9745331 = addInt(i_9745331, 1);
    F.line = 407;
    var parsed_length_b_9765029 = parse_saturated_natural_1025017(s_9745324, result_9745328, "precision", i_9745331);
    F.line = 408;
    i_9745331 = addInt(i_9745331, parsed_length_b_9765029);
    }
    else {
      F.line = 410;
      result_9745328.precision = -1;
    }
    
      if (!(i_9745331 < (s_9745324 != null ? s_9745324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet24[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9745328.typ = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 414;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 415;
    result_9745328.endPosition = i_9745331;
      if (!!((i_9745331 == (s_9745324 != null ? s_9745324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9745327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4435068(s_9745324, HEX2EHEX2E_4435001(i_9745331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9745328;

}
function nucruneLen(s_1106829) {
  var result_1106830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1106832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1106832 < (s_1106829 != null ? s_1106829.length : 0))) break L2;
          if ((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1106832 = addInt(i_1106832, 1);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1106832 = addInt(i_1106832, 2);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1106832 = addInt(i_1106832, 3);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1106832 = addInt(i_1106832, 4);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1106832 = addInt(i_1106832, 5);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1106832 = addInt(i_1106832, 6);
          }
          else {
            F.line = 49;
          i_1106832 = addInt(i_1106832, 1);
          }
          }}}}}
          F.line = 50;
          result_1106830 = addInt(result_1106830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1106830;

}
function rune_len_at_1106932(s_1106934, i_1106935) {
  var result_1106936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1106936 = 1;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1106936 = 2;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1106936 = 3;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1106936 = 4;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1106936 = 5;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1106936 = 6;
    }
    else {
      F.line = 68;
      result_1106936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1106936;

}
function rune_offset_1730244(s_1730246, pos_1730247, start_1730248) {
  var result_1730249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1730251 = 0;
    F.line = 320;
    var o_1730252 = start_1730248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1730251 < pos_1730247)) break L2;
          F.line = 322;
          o_1730252 = addInt(o_1730252, chckRange(rune_len_at_1106932(s_1730246, o_1730252), 0, 2147483647));
          if (((s_1730246 != null ? s_1730246.length : 0) <= o_1730252)) {
          F.line = 324;
          result_1730249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1730251 = addInt(i_1730251, 1);
        }
    } while(false);
    F.line = 326;
    result_1730249 = o_1730252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1730249;

}
function validate_utf8_1350229(s_1350231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1350232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1350234 = 0;
    F.line = 173;
    var l_1350235 = (s_1350231 != null ? s_1350231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1350234 < l_1350235)) break L2;
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1350234 = addInt(i_1350234, 1);
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1350232 = i_1350234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1350234, 1) < l_1350235)) Tmp3 = false; else {              Tmp3 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1350234 = addInt(i_1350234, 2);
          }
          else {
            F.line = 180;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1350234, 2) < l_1350235)) Tmp5 = false; else {              Tmp5 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1350234 = addInt(i_1350234, 3);
          }
          else {
            F.line = 184;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1350234, 3) < l_1350235)) Tmp8 = false; else {              Tmp8 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1350231[chckIndx(addInt(i_1350234, 3), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1350234 = addInt(i_1350234, 4);
          }
          else {
            F.line = 190;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1350232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1350232;

}
function nsuRepeatChar(c_9290048, count_9290049) {
  var result_9290050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9290050 = nimCopy(null, mnewString(count_9290049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9290059 = 0;
      F.line = 66;
      var colontmp__11162211 = 0;
      F.line = 1283;
      colontmp__11162211 = subInt(count_9290049, 1);
      F.line = 77;
      var res_11162212 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11162212 <= colontmp__11162211)) break L3;
            F.line = 1283;
            i_9290059 = res_11162212;
            F.line = 1283;
            result_9290050[chckIndx(i_9290059, 0, (result_9290050 != null ? result_9290050.length : 0)+0-1)-0] = c_9290048;
            F.line = 80;
            res_11162212 = addInt(res_11162212, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9290050;

}
function align_string_9745222(s_9745224, minimum_width_9745225, align_9745226, fill_9745227) {
      var Tmp1;

  var result_9745228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9745225 == 0)) {
    F.line = 282;
    result_9745228 = nimCopy(null, s_9745224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1350229(s_9745224) == -1)) {
      Tmp1 = nucruneLen(s_9745224);
      }
      else {
      Tmp1 = (s_9745224 != null ? s_9745224.length : 0);
      }
      
      var s_rune_len_9745229 = Tmp1;
      F.line = 285;
      var to_fill_9745230 = subInt(minimum_width_9745225, s_rune_len_9745229);
      if ((to_fill_9745230 <= 0)) {
      F.line = 287;
      result_9745228 = nimCopy(null, s_9745224, NTI112);
      }
      else {
      if (((align_9745226 == 60) || (align_9745226 == 0))) {
      F.line = 289;
      result_9745228 = nimCopy(null, (s_9745224 || []).concat(nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9745226 == 94)) {
      F.line = 291;
      var half_9745231 = divInt(to_fill_9745230, 2);
      F.line = 292;
      result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(half_9745231, 0, 2147483647)) || []).concat(s_9745224 || [],nsuRepeatChar(fill_9745227, chckRange(subInt(to_fill_9745230, half_9745231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []).concat(s_9745224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9745228;

}
function format_value_9790080(result_9790083, result_9790083_Idx, value_9790084, specifier_9790085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9790086 = parse_standard_format_specifier_9745322(specifier_9790085, 0, false);
    F.line = 503;
    var value_9790087 = nimCopy(null, value_9790084, NTI112);
    F.line = 504;
    switch (spec_9790086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9790086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9790086.precision == -1))) {
    if ((spec_9790086.precision < nucruneLen(value_9790087))) {
    F.line = 512;
    (value_9790087 == null ? value_9790087 = mnewString(chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9790087.length = chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9790083[result_9790083_Idx] != null) { result_9790083[result_9790083_Idx] = (result_9790083[result_9790083_Idx]).concat(align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill)); } else { result_9790083[result_9790083_Idx] = align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill).slice(); };
  framePtr = F.prev;

  
}
function compile_11091495(cfg_11091500, node_11091501) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
                var Tmp16;
                var Tmp17;

  var result_11091542 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 205;
    var matched_node_11091543 = node_11091501.querySelector(toJSStr(cfg_11091500.selector));
    if ((matched_node_11091543 == null)) {
    F.line = 207;
    var selector_11091552 = nimCopy(null, cfg_11091500.selector, NTI112);
    F.line = 208;
    var fmt_res_11091553 = [mnewString(0)];
    F.line = 208;
    if (fmt_res_11091553[0] != null) { fmt_res_11091553[0] = (fmt_res_11091553[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11091553[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 208;
    format_value_9790080(fmt_res_11091553, 0, selector_11091552, []);
    F.line = 208;
    if (fmt_res_11091553[0] != null) { fmt_res_11091553[0] = (fmt_res_11091553[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11091553[0] = makeNimstrLit("\'"); };
    F.line = 208;
    raiseException({message: nimCopy(null, fmt_res_11091553[0], NTI112), parent: null, m_type: NTI9881015, name: null, trace: null, up: null}, "CompileError");
    }
    
    F.line = 210;
    var match_11100009 = {refresh: nimCopy(null, cfg_11091500.refresh, NTI11051411), iter: cfg_11091500.iter, node: matched_node_11091543, oldValue: null, convert: null, mount: null, matches: null, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 214;
    match_11100009.node = matched_node_11091543;
    if (match_11100009.iter) {
    var Tmp1 = match_11100009;
    if (ConstSet25[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 216;
    var Tmp2 = cfg_11091500;
    if (ConstSet26[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11100009;
    if (ConstSet27[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 217;
    Tmp3.anchor = matched_node_11091543.ownerDocument.createComment(matched_node_11091543.outerHTML);
    var Tmp4 = match_11100009;
    if (ConstSet28[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 218;
    Tmp4.mount_template = cfg_11091500.mount;
    var Tmp5 = match_11100009;
    if (ConstSet29[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 219;
    Tmp5.match_templates = nimCopy(null, cfg_11091500.matches, NTI11051438);
    var Tmp6 = match_11100009;
    if (ConstSet30[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 220;
    Tmp6.items = nimCopy(null, [], NTI11100030);
    F.line = 221;
    var Tmp7 = match_11100009;
    if (ConstSet31[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11091543.parentNode.replaceChild(Tmp7.anchor, matched_node_11091543);
    }
    else {
      var Tmp8 = match_11100009;
      if (ConstSet32[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 223;
      var Tmp9 = cfg_11091500;
      if (ConstSet33[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11100009;
      if (ConstSet34[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 224;
      Tmp10.matches = nimCopy(null, [], NTI11100049);
      if (!((cfg_11091500.mount == null))) {
      var Tmp11 = match_11100009;
      if (ConstSet35[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 226;
      Tmp11.mount = cfg_11091500.mount.clone();
      F.line = 227;
      var Tmp12 = match_11100009;
      if (ConstSet36[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      matched_node_11091543.parentNode.replaceChild(Tmp12.mount.node(), matched_node_11091543);
      }
      else {
        L13: do {
          F.line = 229;
          var submatch_11100066 = null;
          F.line = 184;
          var i_11162163 = 0;
          F.line = 185;
          var l_11162164 = (cfg_11091500.matches != null ? cfg_11091500.matches.length : 0);
          L14: do {
            F.line = 186;
              L15: while (true) {
              if (!(i_11162163 < l_11162164)) break L15;
                F.line = 229;
                submatch_11100066 = cfg_11091500.matches[chckIndx(i_11162163, 0, (cfg_11091500.matches != null ? cfg_11091500.matches.length : 0)+0-1)-0];
                F.line = 230;
                var Tmp16 = match_11100009;
                if (ConstSet37[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp17 = Tmp16.matches, Tmp17) != null) { Tmp17.push(submatch_11100066.compile(matched_node_11091543)); } else { Tmp17 = [submatch_11100066.compile(matched_node_11091543)]; };
                F.line = 188;
                i_11162163 = addInt(i_11162163, 1);
                if (!(((cfg_11091500.matches != null ? cfg_11091500.matches.length : 0) == l_11162164))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 231;
    result_11091542 = match_11100009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11091542;

}
function as_interface_11091358(config_11091363) {
    function HEX3Aanonymous_11091370(node_11091372) {
      var result_11091377 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 374;
        result_11091377 = as_interface_11100483(compile_11091495(config_11091363, node_11091372));
      framePtr = F.prev;

      return result_11091377;

    }

  var result_11091365 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 373;
    result_11091365 = {compile: HEX3Aanonymous_11091370};
  framePtr = F.prev;

  return result_11091365;

}
function iter_11090957(c_11090962, selector_11090963, iter_11090965, actions_11090971) {
  var result_11090973 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 177;
    result_11090973 = {selector: nimCopy(null, selector_11090963, NTI112), refresh: [], mount: null, iter: true, iterate: iter_11090965, matches: [], convert: null};
    F.line = 184;
    if (c_11090962.matches != null) { c_11090962.matches.push(as_interface_11091358(result_11090973)); } else { c_11090962.matches = [as_interface_11091358(result_11090973)]; };
    if (!((actions_11090971 == null))) {
    F.line = 186;
    actions_11090971(result_11090973);
    }
    
  framePtr = F.prev;

  return result_11090973;

}
function seq_iterator_11051127(arr_11051131) {
    arr_11051131 = nimCopy(null, arr_11051131, NTI11051130);
    function next_11051137() {
      var result_11051142 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_11051131 != null ? arr_11051131.length : 0) <= it_11051135)) {
        F.line = 409;
        var colontmp__11162217 = false;
        F.line = 409;
        var colontmp__11162218 = nimCopy(null, empty_11051136, NTI112);
        F.line = 409;
        nimCopy(result_11051142, {Field0: colontmp__11162217, Field1: nimCopy(null, colontmp__11162218, NTI112)}, NTI11051139);
        break BeforeRet;
        }
        
        F.line = 410;
        var colontmp__11162219 = true;
        F.line = 410;
        var colontmp__11162220 = nimCopy(null, arr_11051131[chckIndx(it_11051135, 0, (arr_11051131 != null ? arr_11051131.length : 0)+0-1)-0], NTI112);
        F.line = 410;
        nimCopy(result_11051142, {Field0: colontmp__11162219, Field1: nimCopy(null, colontmp__11162220, NTI112)}, NTI11051139);
        F.line = 411;
        it_11051135 = addInt(it_11051135, 1);
      } while (false);
      framePtr = F.prev;

      return result_11051142;

    }

  var result_11051133 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 402;
    var it_11051135 = 0;
    F.line = 403;
    var empty_11051136 = null;
    F.line = 413;
    result_11051133 = next_11051137;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11051133;

}
function iter_names_11051110(c2_11051112) {
  var result_11051126 = null;

  var F={procname:"sample3.iterNames",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 11;
    result_11051126 = seq_iterator_11051127(c2_11051112.names);
  framePtr = F.prev;

  return result_11051126;

}
function refresh_11090794(c_11090799, refresh_11090801) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 150;
    if (c_11090799.refresh != null) { c_11090799.refresh.push(refresh_11090801); } else { c_11090799.refresh = [refresh_11090801]; };
  framePtr = F.prev;

  
}
function create_iter_item_11070872(match_11070877, parent_node_11070878) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11070880 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 251;
    var comp_11070885 = null;
    F.line = 252;
    var node_11070886 = null;
      var Tmp1 = match_11070877;
      if (ConstSet42[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 254;
    var Tmp2 = match_11070877;
    if (ConstSet43[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11070885 = Tmp2.mount_template.clone();
    F.line = 255;
    node_11070886 = comp_11070885.node();
    }
    else {
      F.line = 257;
      node_11070886 = match_11070877.node.cloneNode(true);
    }
    
    F.line = 258;
    var Tmp3 = match_11070877;
    if (ConstSet44[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11070880 = {mount: comp_11070885, node: node_11070886, matches: compile_11070923(Tmp3.match_templates, node_11070886)};
    F.line = 262;
    var Tmp4 = match_11070877;
    if (ConstSet45[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11070878.insertBefore(node_11070886, Tmp4.anchor);
  framePtr = F.prev;

  return result_11070880;

}
function update_11070836(match_11070841, val_11070842, refresh_11070843) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp20;
          var Tmp21;
          var Tmp22;
      var Tmp23;
        var Tmp24;
      var Tmp25;
      var Tmp26;
        var Tmp28;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11070843)) Tmp1 = false; else {        Tmp1 = eqStrings(val_11070842, match_11070841.oldValue);      }    if (Tmp1) {
    F.line = 271;
    break BeforeRet;
    }
    
    F.line = 273;
    match_11070841.oldValue = nimCopy(null, val_11070842, NTI112);
    if (match_11070841.iter) {
    F.line = 275;
    var i_11070847 = 0;
    F.line = 276;
    var Tmp2 = match_11070841;
    if (ConstSet38[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11070849 = Tmp2.anchor.parentNode;
    F.line = 277;
    var Tmp3 = match_11070841;
    if (ConstSet39[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11070851 = Tmp3.iterate(val_11070842);
    L4: do {
      F.line = 278;
        L5: while (true) {
        if (!true) break L5;
          F.line = 279;
          var it_11070852 = itf_11070851();
          if ((it_11070852["Field0"] == false)) {
          F.line = 280;
          break L4;
          }
          
          F.line = 281;
          var item_11070853 = nimCopy(null, it_11070852["Field1"], NTI112);
          if ((10 < i_11070847)) {
          F.line = 284;
          break L4;
          }
          
          F.line = 286;
          var iter_item_11070858 = null;
            var Tmp6 = match_11070841;
            if (ConstSet40[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11070847 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 290;
          var Tmp8 = match_11070841;
          if (ConstSet41[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11070858 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11070847, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          }
          else {
            F.line = 292;
            iter_item_11070858 = create_iter_item_11070872(match_11070841, parent_node_11070849);
            F.line = 293;
            var Tmp10 = match_11070841;
            if (ConstSet46[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11070858); } else { Tmp11 = [iter_item_11070858]; };
          }
          
          if (!((iter_item_11070858.mount == null))) {
          F.line = 297;
          iter_item_11070858.mount.update(item_11070853, refresh_11070843);
          }
          
          L12: do {
            F.line = 300;
            var submatch_11080214 = null;
            F.line = 184;
            var i_11162226 = 0;
            F.line = 185;
            var l_11162227 = (iter_item_11070858.matches != null ? iter_item_11070858.matches.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11162226 < l_11162227)) break L14;
                  F.line = 300;
                  submatch_11080214 = iter_item_11070858.matches[chckIndx(i_11162226, 0, (iter_item_11070858.matches != null ? iter_item_11070858.matches.length : 0)+0-1)-0];
                  F.line = 301;
                  submatch_11080214.update(item_11070853, refresh_11070843);
                  F.line = 188;
                  i_11162226 = addInt(i_11162226, 1);
                  if (!(((iter_item_11070858.matches != null ? iter_item_11070858.matches.length : 0) == l_11162227))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L15: do {
            F.line = 304;
            var refresh_proc_11090214 = null;
            F.line = 184;
            var i_11162230 = 0;
            F.line = 185;
            var l_11162231 = (match_11070841.refresh != null ? match_11070841.refresh.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11162230 < l_11162231)) break L17;
                  F.line = 304;
                  refresh_proc_11090214 = match_11070841.refresh[chckIndx(i_11162230, 0, (match_11070841.refresh != null ? match_11070841.refresh.length : 0)+0-1)-0];
                  F.line = 305;
                  refresh_proc_11090214(iter_item_11070858.node, item_11070853);
                  F.line = 188;
                  i_11162230 = addInt(i_11162230, 1);
                  if (!(((match_11070841.refresh != null ? match_11070841.refresh.length : 0) == l_11162231))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 307;
          i_11070847 = addInt(i_11070847, 1);
        }
    } while(false);
    L18: do {
      F.line = 310;
        L19: while (true) {
          var Tmp20 = match_11070841;
          if (ConstSet47[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11070847 < ((Tmp21 = Tmp20.items, Tmp21) != null ? Tmp21.length : 0))) break L19;
          F.line = 311;
          var Tmp22 = match_11070841;
          if (ConstSet48[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11090473(pop_11090222(Tmp22, "items"), parent_node_11070849);
        }
    } while(false);
    }
    else {
      F.line = 313;
      var node_11090492 = match_11070841.node;
      F.line = 314;
      var Tmp23 = match_11070841;
      if (ConstSet49[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11090494 = Tmp23.convert(val_11070842);
        var Tmp24 = match_11070841;
        if (ConstSet50[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp24.mount == null))) {
      F.line = 318;
      var Tmp25 = match_11070841;
      if (ConstSet51[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11090492 = Tmp25.mount.node();
      F.line = 319;
      var Tmp26 = match_11070841;
      if (ConstSet52[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp26.mount.update(converted_val_11090494, refresh_11070843);
      }
      
      L27: do {
        F.line = 322;
        var submatch_11090513 = null;
        F.line = 182;
        var colontmp__11162235 = null;
        F.line = 322;
        var Tmp28 = match_11070841;
        if (ConstSet53[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11162235 = Tmp28.matches;
        F.line = 184;
        var i_11162236 = 0;
        F.line = 185;
        var l_11162237 = (colontmp__11162235 != null ? colontmp__11162235.length : 0);
        L29: do {
          F.line = 186;
            L30: while (true) {
            if (!(i_11162236 < l_11162237)) break L30;
              F.line = 322;
              submatch_11090513 = colontmp__11162235[chckIndx(i_11162236, 0, (colontmp__11162235 != null ? colontmp__11162235.length : 0)+0-1)-0];
              F.line = 323;
              submatch_11090513.update(converted_val_11090494, refresh_11070843);
              F.line = 188;
              i_11162236 = addInt(i_11162236, 1);
              if (!(((colontmp__11162235 != null ? colontmp__11162235.length : 0) == l_11162237))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L31: do {
        F.line = 326;
        var refresh_proc_11090520 = null;
        F.line = 184;
        var i_11162240 = 0;
        F.line = 185;
        var l_11162241 = (match_11070841.refresh != null ? match_11070841.refresh.length : 0);
        L32: do {
          F.line = 186;
            L33: while (true) {
            if (!(i_11162240 < l_11162241)) break L33;
              F.line = 326;
              refresh_proc_11090520 = match_11070841.refresh[chckIndx(i_11162240, 0, (match_11070841.refresh != null ? match_11070841.refresh.length : 0)+0-1)-0];
              F.line = 327;
              refresh_proc_11090520(node_11090492, converted_val_11090494);
              F.line = 188;
              i_11162240 = addInt(i_11162240, 1);
              if (!(((match_11070841.refresh != null ? match_11070841.refresh.length : 0) == l_11162241))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11070796(match_11070801) {
    function HEX3Aanonymous_11070808(data_11070810, refresh_11070811) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 369;
        update_11070836(match_11070801, data_11070810, refresh_11070811);
      framePtr = F.prev;

      
    }

  var result_11070803 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 368;
    result_11070803 = {update: HEX3Aanonymous_11070808};
  framePtr = F.prev;

  return result_11070803;

}
function compile_11052470(cfg_11052475, node_11052476) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
                var Tmp16;
                var Tmp17;

  var result_11052529 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 205;
    var matched_node_11052530 = node_11052476.querySelector(toJSStr(cfg_11052475.selector));
    if ((matched_node_11052530 == null)) {
    F.line = 207;
    var selector_11052539 = nimCopy(null, cfg_11052475.selector, NTI112);
    F.line = 208;
    var fmt_res_11052543 = [mnewString(0)];
    F.line = 208;
    if (fmt_res_11052543[0] != null) { fmt_res_11052543[0] = (fmt_res_11052543[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11052543[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 208;
    format_value_9790080(fmt_res_11052543, 0, selector_11052539, []);
    F.line = 208;
    if (fmt_res_11052543[0] != null) { fmt_res_11052543[0] = (fmt_res_11052543[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11052543[0] = makeNimstrLit("\'"); };
    F.line = 208;
    raiseException({message: nimCopy(null, fmt_res_11052543[0], NTI112), parent: null, m_type: NTI9881015, name: null, trace: null, up: null}, "CompileError");
    }
    
    F.line = 210;
    var match_11060009 = {refresh: nimCopy(null, cfg_11052475.refresh, NTI11051870), iter: cfg_11052475.iter, node: matched_node_11052530, oldValue: null, convert: null, mount: null, matches: null, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 214;
    match_11060009.node = matched_node_11052530;
    if (match_11060009.iter) {
    var Tmp1 = match_11060009;
    if (ConstSet54[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 216;
    var Tmp2 = cfg_11052475;
    if (ConstSet55[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11060009;
    if (ConstSet56[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 217;
    Tmp3.anchor = matched_node_11052530.ownerDocument.createComment(matched_node_11052530.outerHTML);
    var Tmp4 = match_11060009;
    if (ConstSet57[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 218;
    Tmp4.mount_template = cfg_11052475.mount;
    var Tmp5 = match_11060009;
    if (ConstSet58[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 219;
    Tmp5.match_templates = nimCopy(null, cfg_11052475.matches, NTI11051875);
    var Tmp6 = match_11060009;
    if (ConstSet59[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 220;
    Tmp6.items = nimCopy(null, [], NTI11060030);
    F.line = 221;
    var Tmp7 = match_11060009;
    if (ConstSet60[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11052530.parentNode.replaceChild(Tmp7.anchor, matched_node_11052530);
    }
    else {
      var Tmp8 = match_11060009;
      if (ConstSet61[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 223;
      var Tmp9 = cfg_11052475;
      if (ConstSet62[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11060009;
      if (ConstSet63[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 224;
      Tmp10.matches = nimCopy(null, [], NTI11060049);
      if (!((cfg_11052475.mount == null))) {
      var Tmp11 = match_11060009;
      if (ConstSet64[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 226;
      Tmp11.mount = cfg_11052475.mount.clone();
      F.line = 227;
      var Tmp12 = match_11060009;
      if (ConstSet65[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      matched_node_11052530.parentNode.replaceChild(Tmp12.mount.node(), matched_node_11052530);
      }
      else {
        L13: do {
          F.line = 229;
          var submatch_11070214 = null;
          F.line = 184;
          var i_11162247 = 0;
          F.line = 185;
          var l_11162248 = (cfg_11052475.matches != null ? cfg_11052475.matches.length : 0);
          L14: do {
            F.line = 186;
              L15: while (true) {
              if (!(i_11162247 < l_11162248)) break L15;
                F.line = 229;
                submatch_11070214 = cfg_11052475.matches[chckIndx(i_11162247, 0, (cfg_11052475.matches != null ? cfg_11052475.matches.length : 0)+0-1)-0];
                F.line = 230;
                var Tmp16 = match_11060009;
                if (ConstSet66[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp17 = Tmp16.matches, Tmp17) != null) { Tmp17.push(submatch_11070214.compile(matched_node_11052530)); } else { Tmp17 = [submatch_11070214.compile(matched_node_11052530)]; };
                F.line = 188;
                i_11162247 = addInt(i_11162247, 1);
                if (!(((cfg_11052475.matches != null ? cfg_11052475.matches.length : 0) == l_11162248))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 231;
    result_11052529 = match_11060009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11052529;

}
function as_interface_11052333(config_11052338) {
    function HEX3Aanonymous_11052345(node_11052347) {
      var result_11052352 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 374;
        result_11052352 = as_interface_11070796(compile_11052470(config_11052338, node_11052347));
      framePtr = F.prev;

      return result_11052352;

    }

  var result_11052340 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 373;
    result_11052340 = {compile: HEX3Aanonymous_11052345};
  framePtr = F.prev;

  return result_11052340;

}
function match_11051946(c_11051952, selector_11051953, convert_11051955, actions_11051961) {
  var result_11051963 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 128;
    result_11051963 = {selector: nimCopy(null, selector_11051953, NTI112), refresh: [], mount: null, iter: false, convert: convert_11051955, matches: null, iterate: null};
    F.line = 134;
    if (c_11051952.matches != null) { c_11051952.matches.push(as_interface_11052333(result_11051963)); } else { c_11051952.matches = [as_interface_11052333(result_11051963)]; };
    if (!((actions_11051961 == null))) {
    F.line = 136;
    actions_11051961(result_11051963);
    }
    
  framePtr = F.prev;

  return result_11051963;

}
function id_11051921(data_11051924) {
  var result_11051925 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 108;
    result_11051925 = nimCopy(null, data_11051924, NTI112);
  framePtr = F.prev;

  return result_11051925;

}
function match_11051900(c_11051905, selector_11051906, actions_11051912) {
  var result_11051914 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 156;
    result_11051914 = match_11051946(c_11051905, selector_11051906, id_11051921, actions_11051912);
  framePtr = F.prev;

  return result_11051914;

}
function match_11051846(c_11051851, selector_11051852, refresh_proc_11051854) {
  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 162;
    refresh_11090794(match_11051900(c_11051851, selector_11051852, null), refresh_proc_11051854);
  framePtr = F.prev;

  
}
function new_11161380() {
  var result_11161384 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11161401 = null;
    F.line = 851;
    r_11161401 = {config: null, matches: null, node: null, original_node: null};
    F.line = 852;
    result_11161384 = r_11161401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11161384;

}
function compile_11130848(cfgs_11130853, node_11130854) {
  var result_11130857 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 234;
    result_11130857 = nimCopy(null, [], NTI11130872);
    L1: do {
      F.line = 235;
      var cfg_11130879 = null;
      F.line = 184;
      var i_11162253 = 0;
      F.line = 185;
      var l_11162254 = (cfgs_11130853 != null ? cfgs_11130853.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11162253 < l_11162254)) break L3;
            F.line = 235;
            cfg_11130879 = cfgs_11130853[chckIndx(i_11162253, 0, (cfgs_11130853 != null ? cfgs_11130853.length : 0)+0-1)-0];
            F.line = 236;
            if (result_11130857 != null) { result_11130857.push(cfg_11130879.compile(node_11130854)); } else { result_11130857 = [cfg_11130879.compile(node_11130854)]; };
            F.line = 188;
            i_11162253 = addInt(i_11162253, 1);
            if (!(((cfgs_11130853 != null ? cfgs_11130853.length : 0) == l_11162254))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11130857;

}
function compile_11161366(cfg_11161370, node_11161371) {
  var result_11161373 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 239;
    result_11161373 = new_11161380();
    F.line = 240;
    result_11161373.config = cfg_11161370;
    F.line = 241;
    result_11161373.original_node = node_11161371;
    F.line = 242;
    result_11161373.node = node_11161371.cloneNode(true);
    F.line = 243;
    result_11161373.matches = nimCopy(null, compile_11130848(cfg_11161370.matches, result_11161373.node), NTI11130855);
  framePtr = F.prev;

  return result_11161373;

}
function new_11161100() {
  var result_11161104 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11161201 = null;
    F.line = 851;
    r_11161201 = {matches: null};
    F.line = 852;
    result_11161104 = r_11161201;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11161104;

}
function create_11161081(configurator_11161091) {
  var result_11161093 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 124;
    result_11161093 = new_11161100();
    F.line = 125;
    configurator_11161091(result_11161093);
  framePtr = F.prev;

  return result_11161093;

}
function compile_11161065(node_11161070, configurator_11161076) {
  var result_11161078 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 343;
    result_11161078 = compile_11161366(create_11161081(configurator_11161076), node_11161070);
  framePtr = F.prev;

  return result_11161078;

}
function refresh_11150824(c_11150829, refresh_11150831) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 150;
    if (c_11150829.refresh != null) { c_11150829.refresh.push(refresh_11150831); } else { c_11150829.refresh = [refresh_11150831]; };
  framePtr = F.prev;

  
}
function create_iter_item_11130797(match_11130802, parent_node_11130803) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11130805 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 251;
    var comp_11130810 = null;
    F.line = 252;
    var node_11130811 = null;
      var Tmp1 = match_11130802;
      if (ConstSet71[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 254;
    var Tmp2 = match_11130802;
    if (ConstSet72[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11130810 = Tmp2.mount_template.clone();
    F.line = 255;
    node_11130811 = comp_11130810.node();
    }
    else {
      F.line = 257;
      node_11130811 = match_11130802.node.cloneNode(true);
    }
    
    F.line = 258;
    var Tmp3 = match_11130802;
    if (ConstSet73[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11130805 = {mount: comp_11130810, node: node_11130811, matches: compile_11130848(Tmp3.match_templates, node_11130811)};
    F.line = 262;
    var Tmp4 = match_11130802;
    if (ConstSet74[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11130803.insertBefore(node_11130811, Tmp4.anchor);
  framePtr = F.prev;

  return result_11130805;

}
function detach_11150473(iter_item_11150477, parent_node_11150478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 266;
    parent_node_11150478.removeChild(iter_item_11150477.node);
  framePtr = F.prev;

  
}
function pop_11150222(s_11150227, s_11150227_Idx) {
  var result_11150228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11150234 = subInt((s_11150227[s_11150227_Idx] != null ? s_11150227[s_11150227_Idx].length : 0), 1);
    F.line = 1784;
    result_11150228 = s_11150227[s_11150227_Idx][chckIndx(l_11150234, 0, (s_11150227[s_11150227_Idx] != null ? s_11150227[s_11150227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11150227[s_11150227_Idx] === null) s_11150227[s_11150227_Idx] = [];
               if (s_11150227[s_11150227_Idx].length < chckRange(l_11150234, 0, 2147483647)) { for (var i=s_11150227[s_11150227_Idx].length;i<chckRange(l_11150234, 0, 2147483647);++i) s_11150227[s_11150227_Idx].push(null); }
               else { s_11150227[s_11150227_Idx].length = chckRange(l_11150234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11150228;

}
function update_11130756(match_11130761, val_11130762, refresh_11130763) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp20;
          var Tmp21;
          var Tmp22;
      var Tmp23;
        var Tmp24;
      var Tmp25;
      var Tmp26;
        var Tmp28;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11130763)) Tmp1 = false; else {        Tmp1 = (val_11130762 == match_11130761.oldValue);      }    if (Tmp1) {
    F.line = 271;
    break BeforeRet;
    }
    
    F.line = 273;
    match_11130761.oldValue = val_11130762;
    if (match_11130761.iter) {
    F.line = 275;
    var i_11130772 = 0;
    F.line = 276;
    var Tmp2 = match_11130761;
    if (ConstSet67[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11130774 = Tmp2.anchor.parentNode;
    F.line = 277;
    var Tmp3 = match_11130761;
    if (ConstSet68[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11130776 = Tmp3.iterate(val_11130762);
    L4: do {
      F.line = 278;
        L5: while (true) {
        if (!true) break L5;
          F.line = 279;
          var it_11130777 = itf_11130776();
          if ((it_11130777["Field0"] == false)) {
          F.line = 280;
          break L4;
          }
          
          F.line = 281;
          var item_11130778 = it_11130777["Field1"];
          if ((10 < i_11130772)) {
          F.line = 284;
          break L4;
          }
          
          F.line = 286;
          var iter_item_11130783 = null;
            var Tmp6 = match_11130761;
            if (ConstSet69[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11130772 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 290;
          var Tmp8 = match_11130761;
          if (ConstSet70[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11130783 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11130772, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          }
          else {
            F.line = 292;
            iter_item_11130783 = create_iter_item_11130797(match_11130761, parent_node_11130774);
            F.line = 293;
            var Tmp10 = match_11130761;
            if (ConstSet75[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11130783); } else { Tmp11 = [iter_item_11130783]; };
          }
          
          if (!((iter_item_11130783.mount == null))) {
          F.line = 297;
          iter_item_11130783.mount.update(item_11130778, refresh_11130763);
          }
          
          L12: do {
            F.line = 300;
            var submatch_11140214 = null;
            F.line = 184;
            var i_11162263 = 0;
            F.line = 185;
            var l_11162264 = (iter_item_11130783.matches != null ? iter_item_11130783.matches.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11162263 < l_11162264)) break L14;
                  F.line = 300;
                  submatch_11140214 = iter_item_11130783.matches[chckIndx(i_11162263, 0, (iter_item_11130783.matches != null ? iter_item_11130783.matches.length : 0)+0-1)-0];
                  F.line = 301;
                  submatch_11140214.update(item_11130778, refresh_11130763);
                  F.line = 188;
                  i_11162263 = addInt(i_11162263, 1);
                  if (!(((iter_item_11130783.matches != null ? iter_item_11130783.matches.length : 0) == l_11162264))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L15: do {
            F.line = 304;
            var refresh_proc_11150214 = null;
            F.line = 184;
            var i_11162268 = 0;
            F.line = 185;
            var l_11162269 = (match_11130761.refresh != null ? match_11130761.refresh.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11162268 < l_11162269)) break L17;
                  F.line = 304;
                  refresh_proc_11150214 = match_11130761.refresh[chckIndx(i_11162268, 0, (match_11130761.refresh != null ? match_11130761.refresh.length : 0)+0-1)-0];
                  F.line = 305;
                  refresh_proc_11150214(iter_item_11130783.node, item_11130778);
                  F.line = 188;
                  i_11162268 = addInt(i_11162268, 1);
                  if (!(((match_11130761.refresh != null ? match_11130761.refresh.length : 0) == l_11162269))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 307;
          i_11130772 = addInt(i_11130772, 1);
        }
    } while(false);
    L18: do {
      F.line = 310;
        L19: while (true) {
          var Tmp20 = match_11130761;
          if (ConstSet76[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11130772 < ((Tmp21 = Tmp20.items, Tmp21) != null ? Tmp21.length : 0))) break L19;
          F.line = 311;
          var Tmp22 = match_11130761;
          if (ConstSet77[Tmp22.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11150473(pop_11150222(Tmp22, "items"), parent_node_11130774);
        }
    } while(false);
    }
    else {
      F.line = 313;
      var node_11150492 = match_11130761.node;
      F.line = 314;
      var Tmp23 = match_11130761;
      if (ConstSet78[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11150494 = Tmp23.convert(val_11130762);
        var Tmp24 = match_11130761;
        if (ConstSet79[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp24.mount == null))) {
      F.line = 318;
      var Tmp25 = match_11130761;
      if (ConstSet80[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11150492 = Tmp25.mount.node();
      F.line = 319;
      var Tmp26 = match_11130761;
      if (ConstSet81[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp26.mount.update(converted_val_11150494, refresh_11130763);
      }
      
      L27: do {
        F.line = 322;
        var submatch_11150513 = null;
        F.line = 182;
        var colontmp__11162273 = null;
        F.line = 322;
        var Tmp28 = match_11130761;
        if (ConstSet82[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11162273 = Tmp28.matches;
        F.line = 184;
        var i_11162274 = 0;
        F.line = 185;
        var l_11162275 = (colontmp__11162273 != null ? colontmp__11162273.length : 0);
        L29: do {
          F.line = 186;
            L30: while (true) {
            if (!(i_11162274 < l_11162275)) break L30;
              F.line = 322;
              submatch_11150513 = colontmp__11162273[chckIndx(i_11162274, 0, (colontmp__11162273 != null ? colontmp__11162273.length : 0)+0-1)-0];
              F.line = 323;
              submatch_11150513.update(converted_val_11150494, refresh_11130763);
              F.line = 188;
              i_11162274 = addInt(i_11162274, 1);
              if (!(((colontmp__11162273 != null ? colontmp__11162273.length : 0) == l_11162275))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L31: do {
        F.line = 326;
        var refresh_proc_11150520 = null;
        F.line = 184;
        var i_11162278 = 0;
        F.line = 185;
        var l_11162279 = (match_11130761.refresh != null ? match_11130761.refresh.length : 0);
        L32: do {
          F.line = 186;
            L33: while (true) {
            if (!(i_11162278 < l_11162279)) break L33;
              F.line = 326;
              refresh_proc_11150520 = match_11130761.refresh[chckIndx(i_11162278, 0, (match_11130761.refresh != null ? match_11130761.refresh.length : 0)+0-1)-0];
              F.line = 327;
              refresh_proc_11150520(node_11150492, converted_val_11150494);
              F.line = 188;
              i_11162278 = addInt(i_11162278, 1);
              if (!(((match_11130761.refresh != null ? match_11130761.refresh.length : 0) == l_11162279))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11130736(match_11130741) {
    function HEX3Aanonymous_11130748(data_11130750, refresh_11130751) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 369;
        update_11130756(match_11130741, data_11130750, refresh_11130751);
      framePtr = F.prev;

      
    }

  var result_11130743 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 368;
    result_11130743 = {update: HEX3Aanonymous_11130748};
  framePtr = F.prev;

  return result_11130743;

}
function compile_11111598(cfg_11111603, node_11111604) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
                var Tmp16;
                var Tmp17;

  var result_11111657 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 205;
    var matched_node_11111658 = node_11111604.querySelector(toJSStr(cfg_11111603.selector));
    if ((matched_node_11111658 == null)) {
    F.line = 207;
    var selector_11111667 = nimCopy(null, cfg_11111603.selector, NTI112);
    F.line = 208;
    var fmt_res_11111668 = [mnewString(0)];
    F.line = 208;
    if (fmt_res_11111668[0] != null) { fmt_res_11111668[0] = (fmt_res_11111668[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11111668[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 208;
    format_value_9790080(fmt_res_11111668, 0, selector_11111667, []);
    F.line = 208;
    if (fmt_res_11111668[0] != null) { fmt_res_11111668[0] = (fmt_res_11111668[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11111668[0] = makeNimstrLit("\'"); };
    F.line = 208;
    raiseException({message: nimCopy(null, fmt_res_11111668[0], NTI112), parent: null, m_type: NTI9881015, name: null, trace: null, up: null}, "CompileError");
    }
    
    F.line = 210;
    var match_11120009 = {refresh: nimCopy(null, cfg_11111603.refresh, NTI11110785), iter: cfg_11111603.iter, node: matched_node_11111658, oldValue: null, convert: null, mount: null, matches: null, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 214;
    match_11120009.node = matched_node_11111658;
    if (match_11120009.iter) {
    var Tmp1 = match_11120009;
    if (ConstSet83[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 216;
    var Tmp2 = cfg_11111603;
    if (ConstSet84[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11120009;
    if (ConstSet85[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 217;
    Tmp3.anchor = matched_node_11111658.ownerDocument.createComment(matched_node_11111658.outerHTML);
    var Tmp4 = match_11120009;
    if (ConstSet86[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 218;
    Tmp4.mount_template = cfg_11111603.mount;
    var Tmp5 = match_11120009;
    if (ConstSet87[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 219;
    Tmp5.match_templates = nimCopy(null, cfg_11111603.matches, NTI11110790);
    var Tmp6 = match_11120009;
    if (ConstSet88[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 220;
    Tmp6.items = nimCopy(null, [], NTI11120030);
    F.line = 221;
    var Tmp7 = match_11120009;
    if (ConstSet89[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11111658.parentNode.replaceChild(Tmp7.anchor, matched_node_11111658);
    }
    else {
      var Tmp8 = match_11120009;
      if (ConstSet90[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 223;
      var Tmp9 = cfg_11111603;
      if (ConstSet91[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11120009;
      if (ConstSet92[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 224;
      Tmp10.matches = nimCopy(null, [], NTI11120049);
      if (!((cfg_11111603.mount == null))) {
      var Tmp11 = match_11120009;
      if (ConstSet93[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 226;
      Tmp11.mount = cfg_11111603.mount.clone();
      F.line = 227;
      var Tmp12 = match_11120009;
      if (ConstSet94[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      matched_node_11111658.parentNode.replaceChild(Tmp12.mount.node(), matched_node_11111658);
      }
      else {
        L13: do {
          F.line = 229;
          var submatch_11130214 = null;
          F.line = 184;
          var i_11162285 = 0;
          F.line = 185;
          var l_11162286 = (cfg_11111603.matches != null ? cfg_11111603.matches.length : 0);
          L14: do {
            F.line = 186;
              L15: while (true) {
              if (!(i_11162285 < l_11162286)) break L15;
                F.line = 229;
                submatch_11130214 = cfg_11111603.matches[chckIndx(i_11162285, 0, (cfg_11111603.matches != null ? cfg_11111603.matches.length : 0)+0-1)-0];
                F.line = 230;
                var Tmp16 = match_11120009;
                if (ConstSet95[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp17 = Tmp16.matches, Tmp17) != null) { Tmp17.push(submatch_11130214.compile(matched_node_11111658)); } else { Tmp17 = [submatch_11130214.compile(matched_node_11111658)]; };
                F.line = 188;
                i_11162285 = addInt(i_11162285, 1);
                if (!(((cfg_11111603.matches != null ? cfg_11111603.matches.length : 0) == l_11162286))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 231;
    result_11111657 = match_11120009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11111657;

}
function as_interface_11111461(config_11111466) {
    function HEX3Aanonymous_11111473(node_11111475) {
      var result_11111480 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 374;
        result_11111480 = as_interface_11130736(compile_11111598(config_11111466, node_11111475));
      framePtr = F.prev;

      return result_11111480;

    }

  var result_11111468 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 373;
    result_11111468 = {compile: HEX3Aanonymous_11111473};
  framePtr = F.prev;

  return result_11111468;

}
function match_11111075(c_11111080, selector_11111081, convert_11111083, actions_11111089) {
  var result_11111091 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 139;
    result_11111091 = {selector: nimCopy(null, selector_11111081, NTI112), refresh: [], mount: null, iter: false, convert: convert_11111083, matches: null, iterate: null};
    F.line = 145;
    if (c_11111080.matches != null) { c_11111080.matches.push(as_interface_11111461(result_11111091)); } else { c_11111080.matches = [as_interface_11111461(result_11111091)]; };
    if (!((actions_11111089 == null))) {
    F.line = 147;
    actions_11111089(result_11111091);
    }
    
  framePtr = F.prev;

  return result_11111091;

}
function id_11111036(data_11111039) {
  var result_11111040 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 108;
    result_11111040 = data_11111039;
  framePtr = F.prev;

  return result_11111040;

}
function match_11111016(c_11111020, selector_11111021, actions_11111027) {
  var result_11111029 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 153;
    result_11111029 = match_11111075(c_11111020, selector_11111021, id_11111036, actions_11111027);
  framePtr = F.prev;

  return result_11111029;

}
function match_11110677(c_11110681, selector_11110682, refresh_proc_11110684) {
  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 159;
    refresh_11150824(match_11111016(c_11110681, selector_11110682, null), refresh_proc_11110684);
  framePtr = F.prev;

  
}
function update_11152128(t_11152132, data_11152133, refresh_11152134) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 350;
      var match_11160214 = null;
      F.line = 184;
      var i_11162291 = 0;
      F.line = 185;
      var l_11162292 = (t_11152132.matches != null ? t_11152132.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11162291 < l_11162292)) break L3;
            F.line = 350;
            match_11160214 = t_11152132.matches[chckIndx(i_11162291, 0, (t_11152132.matches != null ? t_11152132.matches.length : 0)+0-1)-0];
            F.line = 351;
            match_11160214.update(data_11152133, refresh_11152134);
            F.line = 188;
            i_11162291 = addInt(i_11162291, 1);
            if (!(((t_11152132.matches != null ? t_11152132.matches.length : 0) == l_11162292))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function clone_11151445(comp_11151449) {
  var result_11151451 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 346;
    result_11151451 = compile_11101366(comp_11151449.config, comp_11151449.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11151451;

}
function as_interface_11151886(comp_11151891, convert_11151893) {
    function HEX3Aanonymous_11151900() {
      var result_11151902 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 389;
        result_11151902 = comp_11151891.node;
      framePtr = F.prev;

      return result_11151902;

    }
    function HEX3Aanonymous_11151916(data_11151918, refresh_11151919) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 391;
        update_11152128(comp_11151891, convert_11151893(data_11151918), refresh_11151919);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11160242() {
      var result_11160248 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 393;
        result_11160248 = as_interface_11151886(clone_11151445(comp_11151891), convert_11151893);
      framePtr = F.prev;

      return result_11160248;

    }

  var result_11151895 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 387;
    result_11151895 = {node: HEX3Aanonymous_11151900, update: HEX3Aanonymous_11151916, clone: HEX3Aanonymous_11160242};
  framePtr = F.prev;

  return result_11151895;

}
function mount_11151432(c_11151438, comp_11151440, convert_11151442) {
  var F={procname:"mount.mount",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 174;
    c_11151438.mount = as_interface_11151886(clone_11151445(comp_11151440), convert_11151442);
  framePtr = F.prev;

  
}
function to_comp2_11051307(d_11051309) {
  var result_11051310 = null;

  var F={procname:"sample3.toComp2",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_11051310 = d_11051309.comp2;
  framePtr = F.prev;

  return result_11051310;

}
function update_11161946(t_11161950, data_11161951, refresh_11161952) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 350;
      var match_11161959 = null;
      F.line = 184;
      var i_11162295 = 0;
      F.line = 185;
      var l_11162296 = (t_11161950.matches != null ? t_11161950.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11162295 < l_11162296)) break L3;
            F.line = 350;
            match_11161959 = t_11161950.matches[chckIndx(i_11162295, 0, (t_11161950.matches != null ? t_11161950.matches.length : 0)+0-1)-0];
            F.line = 351;
            match_11161959.update(data_11161951, refresh_11161952);
            F.line = 188;
            i_11162295 = addInt(i_11162295, 1);
            if (!(((t_11161950.matches != null ? t_11161950.matches.length : 0) == l_11162296))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function attach_11161730(t_11161734, target_11161735, anchor_11161736, data_11161737) {
  var F={procname:"attach.attach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 354;
    update_11161946(t_11161734, data_11161737, true);
    F.line = 355;
    target_11161735.insertBefore(t_11161734.node, anchor_11161736);
  framePtr = F.prev;

  
}
function clone_11161526(comp_11161530) {
  var result_11161532 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 346;
    result_11161532 = compile_11161366(comp_11161530.config, comp_11161530.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11161532;

}
function HEX3Aanonymous_11051340(t_11051347) {
    function HEX3Aanonymous_11051394(name_11051472) {
        function HEX3Aanonymous_11051565(node_11051568, data_11051569) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
          framePtr = F;
            F.line = 24;
            node_11051568.textContent = toJSStr(data_11051569);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 23;
        match_11051846(name_11051472, makeNimstrLit(".name"), HEX3Aanonymous_11051565);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    iter_11090957(t_11051347, makeNimstrLit("ul li"), iter_names_11051110, HEX3Aanonymous_11051394);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_11110293(t_11110300) {
    function HEX3Aanonymous_11110420(node_11110423, data_11110424) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 28;
        node_11110423.textContent = toJSStr(data_11110424.name);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11150982(t_11151017) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 30;
        mount_11151432(t_11151017, comp2_11051081[0], to_comp2_11051307);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 27;
    match_11110677(t_11110300, makeNimstrLit("h1 .name"), HEX3Aanonymous_11110420);
    match_11111016(t_11110300, makeNimstrLit("div.insert"), HEX3Aanonymous_11150982);
  framePtr = F.prev;

  
}
comp2_11051081[0] = compile_11100983(document.querySelector("template#comp2").content, HEX3Aanonymous_11051340);
comp1_11051278[0] = compile_11161065(document.querySelector("template#comp1").content, HEX3Aanonymous_11110293);
if (true) {
attach_11161730(clone_11161526(comp1_11051278[0]), document.body, null, {name: makeNimstrLit("Hello comp1"), comp2: {names: [makeNimstrLit("brian"), makeNimstrLit("zoe"), makeNimstrLit("ashley")]}});
}

