/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11190049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11181786 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11181779 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11181773 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11181772 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11182571 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11182566 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11182565 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11190030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11181768 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11181759 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11181763 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11181750 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11181754 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11200913 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11200930 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051429 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051404 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051403 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051399 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051414 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051409 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051408 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051439 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051395 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9881019 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051282 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051273 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11150049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11101042 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11101035 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11101029 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11101028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11141008 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11141003 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11141002 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11150030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11101024 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11101015 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11101019 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11101006 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11101010 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11060049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11060030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051882 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051877 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051872 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051153 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051036 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051030 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051033 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051031 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051144 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11180049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051746 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051739 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881222 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051733 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051732 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11052866 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11052861 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11052860 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11180030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051723 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051707 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051728 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051697 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051701 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051688 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051692 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9881017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4180232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4435011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051717 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051712 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11071025 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11120649 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI11120666 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051081 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051072 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051056 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051055 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051077 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051051 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI9852537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI9852390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051066 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051060 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051091 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051047 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI11051061 = {kind: 1, offset: "update", len: 0, typ: NTI11051066, name: "update", sons: null};
NTI11051061.node = NNI11051061;
NTI11051060.base = NTI11051061;
NTI11051091.base = NTI11051060;
NTI9852386.base = NTI9852033;
NTI9852388.base = NTI9852033;
NTI9852390.base = NTI9852033;
var NNI9852031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI9852031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI9852031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI9852031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI9852031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI9852031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI9852031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI9852031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI9852031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI9852031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI9852031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI9852031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI9852031, name: "NotationNode", len: 0, sons: null}}};
NTI9852031.node = NNI9852031;
var NNI9852029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9852029.node = NNI9852029;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI9852029.base = NTI6008;
NTI9852027.base = NTI9852029;
NTI9852537.base = NTI9852041;
var NNI9852083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI9852537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI9852083.node = NNI9852083;
NTI9852083.base = NTI9852043;
NTI9852081.base = NTI9852083;
var NNI9852079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI9852079.node = NNI9852079;
NTI9852079.base = NTI9852043;
NTI9852077.base = NTI9852079;
NTI9852443.base = NTI9852077;
NTI9852445.base = NTI9852077;
var NNI9852043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI9852027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI9852081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI9852443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI9852445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI9852043.node = NNI9852043;
NTI9852043.base = NTI9852035;
NTI9852041.base = NTI9852043;
var NNI9852075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852075.node = NNI9852075;
NTI9852075.base = NTI9852043;
NTI9852073.base = NTI9852075;
NTI9852423.base = NTI9852073;
NTI9852425.base = NTI9852081;
var NNI9852087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI9852087.node = NNI9852087;
NTI9852087.base = NTI9852043;
NTI9852085.base = NTI9852087;
NTI9852427.base = NTI9852085;
NTI9852429.base = NTI9852041;
var NNI9852071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI9852071.node = NNI9852071;
NTI9852071.base = NTI9852043;
NTI9852069.base = NTI9852071;
NTI9852431.base = NTI9852069;
var NNI9852067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852067.node = NNI9852067;
NTI9852067.base = NTI9852043;
NTI9852065.base = NTI9852067;
NTI9852433.base = NTI9852065;
var NNI9852039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI9852041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI9852041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI9852041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI9852423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI9852425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI9852427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI9852429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI9852431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI9852433, name: "links", sons: null}]};
NTI9852039.node = NNI9852039;
NTI9852039.base = NTI9852035;
NTI9852037.base = NTI9852039;
var NNI9852091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI9852091.node = NNI9852091;
NTI9852091.base = NTI6008;
NTI9852089.base = NTI9852091;
var NNI9852035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI9852386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI9852388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI9852390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI9852033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI9852033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI9852033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI9852031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI9852033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI9852033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI9852033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI9852037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI9852089, name: "style", sons: null}]};
NTI9852035.node = NNI9852035;
var NNI9852005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI9852180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI9852184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI9852188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI9852192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI9852196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI9852200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI9852204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI9852208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI9852212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI9852216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI9852220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI9852224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI9852228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI9852232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI9852236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI9852240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI9852244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI9852248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI9852252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI9852256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI9852260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI9852264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI9852268, name: "onloadend", sons: null}]};
NTI9852005.node = NNI9852005;
NTI9852005.base = NTI6008;
NTI9852035.base = NTI9852005;
NTI9852033.base = NTI9852035;
var NNI11051047 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI11051091, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI9852033, name: "original_node", sons: null}]};
NTI11051047.node = NNI11051047;
var NNI11051056 = {kind: 1, offset: "compile", len: 0, typ: NTI11051072, name: "compile", sons: null};
NTI11051056.node = NNI11051056;
NTI11051055.base = NTI11051056;
NTI11051077.base = NTI11051055;
var NNI11051051 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI11051077, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI11051081, name: "config", sons: null}]};
NTI11051051.node = NNI11051051;
NTI11051051.base = NTI6008;
NTI11051047.base = NTI11051051;
NTI11120666.base = NTI11051060;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6249.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
NTI6241.base = NTI6219;
NTI11120649.base = NTI11051060;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI11051712 = {kind: 1, offset: "update", len: 0, typ: NTI11051717, name: "update", sons: null};
NTI11051712.node = NNI11051712;
NTI11051711.base = NTI11051712;
NTI11071025.base = NTI11051711;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4435011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4180232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4435011.node = NNI4435011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI9881017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881017.node = NNI9881017;
var NNI9881015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881015.node = NNI9881015;
NTI9881015.base = NTI6221;
NTI9881017.base = NTI9881015;
NTI11051692.base = NTI11051688;
NTI11051701.base = NTI11051697;
var NNI11051707 = {kind: 1, offset: "compile", len: 0, typ: NTI11051723, name: "compile", sons: null};
NTI11051707.node = NNI11051707;
NTI11051706.base = NTI11051707;
NTI11051728.base = NTI11051706;
NTI11052866.base = NTI11051711;
var NNI11051733 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881222, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11051739, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11051746, name: "clone", sons: null}]};
NTI11051733.node = NNI11051733;
NTI11051732.base = NTI11051733;
var NNI11052861 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11052866, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11051732, name: "mount", sons: null}]};
NTI11052861.node = NNI11052861;
NTI11052860.base = NTI11052861;
NTI11180030.base = NTI11052860;
NTI11180049.base = NTI11051711;
NTI11051037.base = NTI11051028;
var NNI11051036 = {kind: 1, offset: "names", len: 0, typ: NTI11051037, name: "names", sons: null};
NTI11051036.node = NNI11051036;
NTI11051030.base = NTI11051036;
NTI11051033.base = NTI11051030;
var NNI11051031 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI11051033, name: "children", sons: null}]};
NTI11051031.node = NNI11051031;
NTI11051028.base = NTI11051031;
NTI11051144.base = NTI11051028;
var NNI11051153 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051028, name: "Field1", sons: null}]};
NTI11051153.node = NNI11051153;
NTI11051872.base = NTI11051688;
NTI11051877.base = NTI11051697;
NTI11051882.base = NTI11051706;
NTI11060030.base = NTI11052860;
NTI11060049.base = NTI11051711;
NTI11101010.base = NTI11101006;
NTI11101019.base = NTI11101015;
NTI11101024.base = NTI11051055;
NTI11141008.base = NTI11051060;
var NNI11101029 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881222, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11101035, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11101042, name: "clone", sons: null}]};
NTI11101029.node = NNI11101029;
NTI11101028.base = NTI11101029;
var NNI11141003 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11141008, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11101028, name: "mount", sons: null}]};
NTI11141003.node = NNI11141003;
NTI11141002.base = NTI11141003;
NTI11150030.base = NTI11141002;
NTI11150049.base = NTI11051060;
NTI11051273.base = NTI11051030;
var NNI11051282 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051030, name: "Field1", sons: null}]};
NTI11051282.node = NNI11051282;
var NNI9881019 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881019.node = NNI9881019;
NTI9881019.base = NTI9881015;
var NNI11051409 = {kind: 1, offset: "update", len: 0, typ: NTI11051414, name: "update", sons: null};
NTI11051409.node = NNI11051409;
NTI11051408.base = NTI11051409;
NTI11051439.base = NTI11051408;
var NNI11051395 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI11051439, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI9852033, name: "original_node", sons: null}]};
NTI11051395.node = NNI11051395;
var NNI11051404 = {kind: 1, offset: "compile", len: 0, typ: NTI11051420, name: "compile", sons: null};
NTI11051404.node = NNI11051404;
NTI11051403.base = NTI11051404;
NTI11051425.base = NTI11051403;
var NNI11051399 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI11051425, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI11051429, name: "config", sons: null}]};
NTI11051399.node = NNI11051399;
NTI11051399.base = NTI6008;
NTI11051395.base = NTI11051399;
NTI11200930.base = NTI11051408;
NTI11200913.base = NTI11051408;
NTI11181754.base = NTI11181750;
NTI11181763.base = NTI11181759;
NTI11181768.base = NTI11051403;
NTI11182571.base = NTI11051408;
var NNI11181773 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881222, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11181779, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11181786, name: "clone", sons: null}]};
NTI11181773.node = NNI11181773;
NTI11181772.base = NTI11181773;
var NNI11182566 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11182571, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11181772, name: "mount", sons: null}]};
NTI11182566.node = NNI11182566;
NTI11182565.base = NTI11182566;
NTI11190030.base = NTI11182565;
NTI11190049.base = NTI11051408;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(true);
var ConstSet4 = setConstr(true);
var ConstSet5 = setConstr(true);
var ConstSet6 = setConstr(true);
var ConstSet7 = setConstr(true);
var ConstSet8 = setConstr(true);
var ConstSet9 = setConstr(true);
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(false);
var ConstSet14 = setConstr(false);
var ConstSet15 = setConstr(false);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
var ConstSet18 = setConstr(false);
var ConstSet19 = setConstr(false);
var ConstSet20 = setConstr(false);
var ConstSet21 = setConstr(false);
var ConstSet22 = setConstr(false);
var ConstSet23 = setConstr(false);
var ConstSet24 = setConstr(false);
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet25 = setConstr(60, 62, 94);
var ConstSet26 = setConstr(60, 62, 94);
var ConstSet27 = setConstr(45, 43, 32);
var ConstSet28 = setConstr([48, 57]);
var ConstSet29 = setConstr([48, 57]);
var ConstSet30 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet31 = setConstr([65, 90], [97, 122]);
var ConstSet32 = setConstr(true);
var ConstSet33 = setConstr(true);
var ConstSet34 = setConstr(true);
var ConstSet35 = setConstr(true);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(true);
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(false);
var ConstSet40 = setConstr(false);
var ConstSet41 = setConstr(false);
var ConstSet42 = setConstr(false);
var ConstSet43 = setConstr(false);
var ConstSet44 = setConstr(false);
var ConstSet45 = setConstr(false);
var ConstSet46 = setConstr(true);
var ConstSet47 = setConstr(true);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(true);
var ConstSet50 = setConstr(true);
var ConstSet51 = setConstr(true);
var ConstSet52 = setConstr(true);
var ConstSet53 = setConstr(true);
var ConstSet54 = setConstr(true);
var ConstSet55 = setConstr(true);
var ConstSet56 = setConstr(true);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(false);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(false);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(false);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(false);
var ConstSet67 = setConstr(false);
var ConstSet68 = setConstr(false);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(true);
var ConstSet71 = setConstr(true);
var ConstSet72 = setConstr(true);
var ConstSet73 = setConstr(true);
var ConstSet74 = setConstr(true);
var ConstSet75 = setConstr(true);
var ConstSet76 = setConstr(false);
var ConstSet77 = setConstr(false);
var ConstSet78 = setConstr(false);
var ConstSet79 = setConstr(false);
var ConstSet80 = setConstr(false);
var ConstSet81 = setConstr(false);
var ConstSet82 = setConstr(false);
var ConstSet83 = setConstr(true);
var ConstSet84 = setConstr(true);
var ConstSet85 = setConstr(true);
var ConstSet86 = setConstr(true);
var ConstSet87 = setConstr(true);
var ConstSet88 = setConstr(true);
var ConstSet89 = setConstr(true);
var ConstSet90 = setConstr(true);
var ConstSet91 = setConstr(true);
var ConstSet92 = setConstr(true);
var ConstSet93 = setConstr(true);
var ConstSet94 = setConstr(false);
var ConstSet95 = setConstr(false);
var ConstSet96 = setConstr(false);
var ConstSet97 = setConstr(false);
var ConstSet98 = setConstr(false);
var ConstSet99 = setConstr(false);
var ConstSet100 = setConstr(false);
var ConstSet101 = setConstr(false);
var ConstSet102 = setConstr(false);
var ConstSet103 = setConstr(false);
var ConstSet104 = setConstr(false);
var ConstSet105 = setConstr(false);
var ConstSet106 = setConstr(true);
var ConstSet107 = setConstr(true);
var ConstSet108 = setConstr(true);
var ConstSet109 = setConstr(true);
var ConstSet110 = setConstr(true);
var ConstSet111 = setConstr(true);
var ConstSet112 = setConstr(true);
var ConstSet113 = setConstr(false);
var ConstSet114 = setConstr(false);
var ConstSet115 = setConstr(false);
var ConstSet116 = setConstr(false);
var ConstSet117 = setConstr(false);
var ConstSet118 = setConstr(false);
var ConstSet119 = setConstr(false);
var ConstSet120 = setConstr(true);
var ConstSet121 = setConstr(true);
var ConstSet122 = setConstr(true);
var ConstSet123 = setConstr(true);
var ConstSet124 = setConstr(true);
var ConstSet125 = setConstr(true);
var ConstSet126 = setConstr(true);
var ConstSet127 = setConstr(true);
var ConstSet128 = setConstr(true);
var ConstSet129 = setConstr(true);
var ConstSet130 = setConstr(true);
var ConstSet131 = setConstr(false);
var ConstSet132 = setConstr(false);
var ConstSet133 = setConstr(false);
var ConstSet134 = setConstr(false);
var ConstSet135 = setConstr(false);
var ConstSet136 = setConstr(false);
var ConstSet137 = setConstr(false);
var ConstSet138 = setConstr(false);
var ConstSet139 = setConstr(false);
var ConstSet140 = setConstr(false);
var ConstSet141 = setConstr(false);
var ConstSet142 = setConstr(false);
var ConstSet143 = setConstr(true);
var ConstSet144 = setConstr(true);
var ConstSet145 = setConstr(true);
var ConstSet146 = setConstr(true);
var ConstSet147 = setConstr(true);
var ConstSet148 = setConstr(true);
var ConstSet149 = setConstr(true);
var ConstSet150 = setConstr(false);
var ConstSet151 = setConstr(false);
var ConstSet152 = setConstr(false);
var ConstSet153 = setConstr(false);
var ConstSet154 = setConstr(false);
var ConstSet155 = setConstr(false);
var ConstSet156 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_9885031 = [0];
var comp2_11051095 = [null];
var comp1_11051443 = [null];
function new_11120528() {
  var result_11120532 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11120601 = null;
    F.line = 851;
    r_11120601 = {m_type: NTI11051047, matches: null, node: null, original_node: null, cmatches: null, config: null};
    F.line = 852;
    result_11120532 = r_11120601;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11120532;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__11243150 = 0;
      colontmp__11243150 = (i_160051 - 1);
      var res_11243155 = colontmp__11243150;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11243155)) break L8;
            j_175236 = res_11243155;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_11243155 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function compile_11120642(cfgs_11120647, node_11120648) {
  var result_11120651 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 320;
    result_11120651 = nimCopy(null, [], NTI11120666);
    L1: do {
      F.line = 321;
      var cfg_11130214 = null;
      F.line = 184;
      var i_11243135 = 0;
      F.line = 185;
      var l_11243136 = (cfgs_11120647 != null ? cfgs_11120647.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11243135 < l_11243136)) break L3;
            F.line = 321;
            cfg_11130214 = cfgs_11120647[chckIndx(i_11243135, 0, (cfgs_11120647 != null ? cfgs_11120647.length : 0)+0-1)-0];
            F.line = 322;
            if (result_11120651 != null) { result_11120651.push(cfg_11130214.compile(node_11120648)); } else { result_11120651 = [cfg_11130214.compile(node_11120648)]; };
            F.line = 188;
            i_11243135 = addInt(i_11243135, 1);
            if (!(((cfgs_11120647 != null ? cfgs_11120647.length : 0) == l_11243136))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11120651;

}
function compile_11120514(cfg_11120518, node_11120519) {
  var result_11120521 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 327;
    result_11120521 = new_11120528();
    F.line = 328;
    result_11120521.config = cfg_11120518.config;
    F.line = 329;
    result_11120521.original_node = node_11120519;
    F.line = 330;
    result_11120521.node = node_11120519.cloneNode(true);
    F.line = 332;
    result_11120521.config(result_11120521);
    F.line = 333;
    result_11120521.matches = nimCopy(null, compile_11120642(cfg_11120518.cmatches, result_11120521.node), NTI11120649);
  framePtr = F.prev;

  return result_11120521;

}
function new_11181119() {
  var result_11181123 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11181201 = null;
    F.line = 851;
    r_11181201 = {m_type: NTI11051051, cmatches: null, config: null};
    F.line = 852;
    result_11181123 = r_11181201;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11181123;

}
function create_11181104(config_11181110) {
  var result_11181112 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 173;
    result_11181112 = new_11181119();
    F.line = 174;
    result_11181112.config = config_11181110;
  framePtr = F.prev;

  return result_11181112;

}
function compile_11181036(node_11181041, configurator_11181047) {
  var result_11181049 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 453;
    result_11181049 = compile_11120514(create_11181104(configurator_11181047), node_11181041);
  framePtr = F.prev;

  return result_11181049;

}
function compile_11071001(cfgs_11071006, node_11071007) {
  var result_11071010 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 320;
    result_11071010 = nimCopy(null, [], NTI11071025);
    L1: do {
      F.line = 321;
      var cfg_11071032 = null;
      F.line = 184;
      var i_11243203 = 0;
      F.line = 185;
      var l_11243204 = (cfgs_11071006 != null ? cfgs_11071006.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11243203 < l_11243204)) break L3;
            F.line = 321;
            cfg_11071032 = cfgs_11071006[chckIndx(i_11243203, 0, (cfgs_11071006 != null ? cfgs_11071006.length : 0)+0-1)-0];
            F.line = 322;
            if (result_11071010 != null) { result_11071010.push(cfg_11071032.compile(node_11071007)); } else { result_11071010 = [cfg_11071032.compile(node_11071007)]; };
            F.line = 188;
            i_11243203 = addInt(i_11243203, 1);
            if (!(((cfgs_11071006 != null ? cfgs_11071006.length : 0) == l_11243204))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11071010;

}
function create_iter_item_11180603(match_11180608, parent_node_11180609) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11180611 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 341;
    var comp_11180616 = null;
    F.line = 342;
    var node_11180617 = null;
      var Tmp1 = match_11180608;
      if (ConstSet6[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 344;
    var Tmp2 = match_11180608;
    if (ConstSet7[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11180616 = Tmp2.mount_template.clone();
    F.line = 345;
    node_11180617 = comp_11180616.node();
    }
    else {
      F.line = 347;
      node_11180617 = match_11180608.node.cloneNode(true);
    }
    
    F.line = 348;
    var Tmp3 = match_11180608;
    if (ConstSet8[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11180611 = {mount: comp_11180616, node: node_11180617, matches: compile_11071001(Tmp3.match_templates, node_11180617)};
    F.line = 352;
    var Tmp4 = match_11180608;
    if (ConstSet9[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11180609.insertBefore(node_11180617, Tmp4.anchor);
  framePtr = F.prev;

  return result_11180611;

}
function detach_11100473(iter_item_11100477, parent_node_11100478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 356;
    parent_node_11100478.removeChild(iter_item_11100477.node);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function pop_11100222(s_11100227, s_11100227_Idx) {
  var result_11100228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11100234 = subInt((s_11100227[s_11100227_Idx] != null ? s_11100227[s_11100227_Idx].length : 0), 1);
    F.line = 1784;
    result_11100228 = s_11100227[s_11100227_Idx][chckIndx(l_11100234, 0, (s_11100227[s_11100227_Idx] != null ? s_11100227[s_11100227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11100227[s_11100227_Idx] === null) s_11100227[s_11100227_Idx] = [];
               if (s_11100227[s_11100227_Idx].length < chckRange(l_11100234, 0, 2147483647)) { for (var i=s_11100227[s_11100227_Idx].length;i<chckRange(l_11100234, 0, 2147483647);++i) s_11100227[s_11100227_Idx].push(null); }
               else { s_11100227[s_11100227_Idx].length = chckRange(l_11100234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11100228;

}
function update_11180561(match_11180566, val_11180567, refresh_11180568) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
          var Tmp29;
      var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp33;
      var Tmp37;
        var Tmp38;
      var Tmp39;
      var Tmp40;
        var Tmp42;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11180568)) Tmp1 = false; else {        Tmp1 = (val_11180567 == match_11180566.oldValue);      }    if (Tmp1) {
    F.line = 361;
    break BeforeRet;
    }
    
    F.line = 363;
    match_11180566.oldValue = val_11180567;
    if (match_11180566.iter) {
    F.line = 365;
    var i_11180577 = 0;
    F.line = 366;
    var Tmp2 = match_11180566;
    if (ConstSet2[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11180579 = Tmp2.anchor.parentNode;
    F.line = 367;
    var Tmp3 = match_11180566;
    if (ConstSet3[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11180581 = Tmp3.iterate(val_11180567);
    L4: do {
      F.line = 368;
        L5: while (true) {
        if (!true) break L5;
          F.line = 369;
          var it_11180582 = itf_11180581();
          if ((it_11180582["Field0"] == false)) {
          F.line = 370;
          break L4;
          }
          
          F.line = 371;
          var item_11180583 = it_11180582["Field1"];
          if ((10 < i_11180577)) {
          F.line = 374;
          break L4;
          }
          
          F.line = 376;
          var iter_item_11180588 = null;
          F.line = 377;
          var inited_11180589 = false;
            var Tmp6 = match_11180566;
            if (ConstSet4[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11180577 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 381;
          var Tmp8 = match_11180566;
          if (ConstSet5[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11180588 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11180577, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 382;
          inited_11180589 = true;
          }
          else {
            F.line = 384;
            iter_item_11180588 = create_iter_item_11180603(match_11180566, parent_node_11180579);
            F.line = 385;
            var Tmp10 = match_11180566;
            if (ConstSet10[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11180588); } else { Tmp11 = [iter_item_11180588]; };
            F.line = 386;
            inited_11180589 = false;
          }
          
          if (!(inited_11180589)) {
          L12: do {
            F.line = 390;
            var init_proc_11180693 = null;
            F.line = 184;
            var i_11243172 = 0;
            F.line = 185;
            var l_11243173 = (match_11180566.init != null ? match_11180566.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11243172 < l_11243173)) break L14;
                  F.line = 390;
                  init_proc_11180693 = match_11180566.init[chckIndx(i_11243172, 0, (match_11180566.init != null ? match_11180566.init.length : 0)+0-1)-0];
                  F.line = 391;
                  init_proc_11180693(iter_item_11180588.node, item_11180583);
                  F.line = 188;
                  i_11243172 = addInt(i_11243172, 1);
                  if (!(((match_11180566.init != null ? match_11180566.init.length : 0) == l_11243173))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11180588.mount == null))) {
          F.line = 395;
          iter_item_11180588.mount.update(item_11180583, refresh_11180568);
          }
          
          L15: do {
            F.line = 398;
            var submatch_11180708 = null;
            F.line = 184;
            var i_11243177 = 0;
            F.line = 185;
            var l_11243178 = (iter_item_11180588.matches != null ? iter_item_11180588.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11243177 < l_11243178)) break L17;
                  F.line = 398;
                  submatch_11180708 = iter_item_11180588.matches[chckIndx(i_11243177, 0, (iter_item_11180588.matches != null ? iter_item_11180588.matches.length : 0)+0-1)-0];
                  F.line = 399;
                  submatch_11180708.update(item_11180583, refresh_11180568);
                  F.line = 188;
                  i_11243177 = addInt(i_11243177, 1);
                  if (!(((iter_item_11180588.matches != null ? iter_item_11180588.matches.length : 0) == l_11243178))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 402;
            var refresh_proc_11180715 = null;
            F.line = 184;
            var i_11243182 = 0;
            F.line = 185;
            var l_11243183 = (match_11180566.refresh != null ? match_11180566.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_11243182 < l_11243183)) break L20;
                  F.line = 402;
                  refresh_proc_11180715 = match_11180566.refresh[chckIndx(i_11243182, 0, (match_11180566.refresh != null ? match_11180566.refresh.length : 0)+0-1)-0];
                  F.line = 403;
                  refresh_proc_11180715(iter_item_11180588.node, item_11180583);
                  F.line = 188;
                  i_11243182 = addInt(i_11243182, 1);
                  if (!(((match_11180566.refresh != null ? match_11180566.refresh.length : 0) == l_11243183))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 405;
          i_11180577 = addInt(i_11180577, 1);
        }
    } while(false);
    L21: do {
      F.line = 408;
        L22: while (true) {
          var Tmp23 = match_11180566;
          if (ConstSet11[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11180577 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 409;
          var Tmp25 = match_11180566;
          if (ConstSet12[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11100473(pop_11100222(Tmp25, "items"), parent_node_11180579);
        }
    } while(false);
    }
    else {
      F.line = 411;
      var node_11180787 = match_11180566.node;
      F.line = 412;
      var Tmp26 = match_11180566;
      if (ConstSet13[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11180789 = Tmp26.convert(val_11180567);
        var Tmp28 = match_11180566;
        if (ConstSet14[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp28.mount == null)) Tmp27 = false; else {          var Tmp29 = match_11180566;
          if (ConstSet15[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp27 = !((Tmp29.mount_source == null));        }      if (Tmp27) {
      var Tmp30 = match_11180566;
      if (ConstSet16[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 416;
      var Tmp31 = match_11180566;
      if (ConstSet17[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp30.mount = Tmp31.mount_source.clone();
      F.line = 417;
      var Tmp32 = match_11180566;
      if (ConstSet18[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11180787.parentNode.replaceChild(Tmp32.mount.node(), node_11180787);
      }
      
        var Tmp33 = match_11180566;
        if (ConstSet19[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp33.inited)) {
      L34: do {
        F.line = 421;
        var init_proc_11180818 = null;
        F.line = 184;
        var i_11243187 = 0;
        F.line = 185;
        var l_11243188 = (match_11180566.init != null ? match_11180566.init.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11243187 < l_11243188)) break L36;
              F.line = 421;
              init_proc_11180818 = match_11180566.init[chckIndx(i_11243187, 0, (match_11180566.init != null ? match_11180566.init.length : 0)+0-1)-0];
              F.line = 422;
              init_proc_11180818(node_11180787, converted_val_11180789);
              F.line = 188;
              i_11243187 = addInt(i_11243187, 1);
              if (!(((match_11180566.init != null ? match_11180566.init.length : 0) == l_11243188))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp37 = match_11180566;
      if (ConstSet20[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 423;
      Tmp37.inited = true;
      }
      
        var Tmp38 = match_11180566;
        if (ConstSet21[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp38.mount == null))) {
      F.line = 427;
      var Tmp39 = match_11180566;
      if (ConstSet22[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11180787 = Tmp39.mount.node();
      F.line = 428;
      var Tmp40 = match_11180566;
      if (ConstSet23[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp40.mount.update(converted_val_11180789, refresh_11180568);
      }
      
      L41: do {
        F.line = 431;
        var submatch_11180838 = null;
        F.line = 182;
        var colontmp__11243191 = null;
        F.line = 431;
        var Tmp42 = match_11180566;
        if (ConstSet24[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11243191 = Tmp42.matches;
        F.line = 184;
        var i_11243192 = 0;
        F.line = 185;
        var l_11243193 = (colontmp__11243191 != null ? colontmp__11243191.length : 0);
        L43: do {
          F.line = 186;
            L44: while (true) {
            if (!(i_11243192 < l_11243193)) break L44;
              F.line = 431;
              submatch_11180838 = colontmp__11243191[chckIndx(i_11243192, 0, (colontmp__11243191 != null ? colontmp__11243191.length : 0)+0-1)-0];
              F.line = 432;
              submatch_11180838.update(converted_val_11180789, refresh_11180568);
              F.line = 188;
              i_11243192 = addInt(i_11243192, 1);
              if (!(((colontmp__11243191 != null ? colontmp__11243191.length : 0) == l_11243193))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L45: do {
        F.line = 435;
        var refresh_proc_11180845 = null;
        F.line = 184;
        var i_11243196 = 0;
        F.line = 185;
        var l_11243197 = (match_11180566.refresh != null ? match_11180566.refresh.length : 0);
        L46: do {
          F.line = 186;
            L47: while (true) {
            if (!(i_11243196 < l_11243197)) break L47;
              F.line = 435;
              refresh_proc_11180845 = match_11180566.refresh[chckIndx(i_11243196, 0, (match_11180566.refresh != null ? match_11180566.refresh.length : 0)+0-1)-0];
              F.line = 436;
              refresh_proc_11180845(node_11180787, converted_val_11180789);
              F.line = 188;
              i_11243196 = addInt(i_11243196, 1);
              if (!(((match_11180566.refresh != null ? match_11180566.refresh.length : 0) == l_11243197))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11180541(match_11180546) {
    function HEX3Aanonymous_11180553(data_11180555, refresh_11180556) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 488;
        update_11180561(match_11180546, data_11180555, refresh_11180556);
      framePtr = F.prev;

      
    }

  var result_11180548 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 487;
    result_11180548 = {update: HEX3Aanonymous_11180553};
  framePtr = F.prev;

  return result_11180548;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1025017(s_1025019, b_1025021, b_1025021_Idx, start_1025022) {
      var Tmp1;
          var Tmp4;

  var result_1025024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1025025 = start_1025022;
    if (((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1025025 = addInt(i_1025025, 1);
    }
    
      if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet29[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1025021[b_1025021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet30[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1035016 = subInt(s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0], 48);
          if ((b_1025021[b_1025021_Idx] <= divInt(subInt(2147483647, c_1035016), 10))) {
          F.line = 483;
          b_1025021[b_1025021_Idx] = addInt(mulInt(b_1025021[b_1025021_Idx], 10), c_1035016);
          }
          else {
            F.line = 485;
            b_1025021[b_1025021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1025025 = addInt(i_1025025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1025025 = addInt(i_1025025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1025024 = subInt(i_1025025, start_1025022);
    }
    
  framePtr = F.prev;

  return result_1025024;

}
function HEX5BHEX5D_4435068(s_4435072, x_4435074) {
  var result_4435075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4435201 = x_4435074.a;
    F.line = 2437;
    var l_4435401 = addInt(subInt(subInt((s_4435072 != null ? s_4435072.length : 0), x_4435074.b), a_4435201), 1);
    F.line = 2438;
    result_4435075 = nimCopy(null, mnewString(chckRange(l_4435401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4435409 = 0;
      F.line = 106;
      var i_11243227 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11243227 < l_4435401)) break L3;
            F.line = 2439;
            i_4435409 = i_11243227;
            F.line = 2439;
            result_4435075[chckIndx(i_4435409, 0, (result_4435075 != null ? result_4435075.length : 0)+0-1)-0] = s_4435072[chckIndx(addInt(i_4435409, a_4435201), 0, (s_4435072 != null ? s_4435072.length : 0)+0-1)-0];
            F.line = 109;
            i_11243227 = addInt(i_11243227, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4435075;

}
function HEX2EHEX2E_4435001(a_4435006, b_4435008) {
  var result_4435014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4435014, {a: a_4435006, b: b_4435008}, NTI4435011);
  framePtr = F.prev;

  return result_4435014;

}
function parse_standard_format_specifier_9745322(s_9745324, start_9745325, ignore_unknown_suffix_9745327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9745328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9745328.fill = 32;
    F.line = 380;
    result_9745328.align = 0;
    F.line = 381;
    result_9745328.sign = 45;
    F.line = 382;
    var i_9745331 = start_9745325;
    if (((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet25[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9745328.fill = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 385;
    result_9745328.align = s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 386;
    i_9745331 = addInt(i_9745331, 2);
    }
    else {
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet26[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9745328.align = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 389;
    i_9745331 = addInt(i_9745331, 1);
    }
    }
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet27[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9745328.sign = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 393;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9745328.alternateForm = true;
    F.line = 397;
    i_9745331 = addInt(i_9745331, 1);
    }
    
      if (!((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet28[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9745328.padWithZero = true;
    F.line = 401;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 403;
    var parsed_length_9765015 = parse_saturated_natural_1025017(s_9745324, result_9745328, "minimumWidth", i_9745331);
    F.line = 404;
    i_9745331 = addInt(i_9745331, parsed_length_9765015);
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9745331 = addInt(i_9745331, 1);
    F.line = 407;
    var parsed_length_b_9765029 = parse_saturated_natural_1025017(s_9745324, result_9745328, "precision", i_9745331);
    F.line = 408;
    i_9745331 = addInt(i_9745331, parsed_length_b_9765029);
    }
    else {
      F.line = 410;
      result_9745328.precision = -1;
    }
    
      if (!(i_9745331 < (s_9745324 != null ? s_9745324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet31[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9745328.typ = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 414;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 415;
    result_9745328.endPosition = i_9745331;
      if (!!((i_9745331 == (s_9745324 != null ? s_9745324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9745327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4435068(s_9745324, HEX2EHEX2E_4435001(i_9745331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9745328;

}
function nucruneLen(s_1106829) {
  var result_1106830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1106832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1106832 < (s_1106829 != null ? s_1106829.length : 0))) break L2;
          if ((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1106832 = addInt(i_1106832, 1);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1106832 = addInt(i_1106832, 2);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1106832 = addInt(i_1106832, 3);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1106832 = addInt(i_1106832, 4);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1106832 = addInt(i_1106832, 5);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1106832 = addInt(i_1106832, 6);
          }
          else {
            F.line = 49;
          i_1106832 = addInt(i_1106832, 1);
          }
          }}}}}
          F.line = 50;
          result_1106830 = addInt(result_1106830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1106830;

}
function rune_len_at_1106932(s_1106934, i_1106935) {
  var result_1106936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1106936 = 1;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1106936 = 2;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1106936 = 3;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1106936 = 4;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1106936 = 5;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1106936 = 6;
    }
    else {
      F.line = 68;
      result_1106936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1106936;

}
function rune_offset_1730244(s_1730246, pos_1730247, start_1730248) {
  var result_1730249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1730251 = 0;
    F.line = 320;
    var o_1730252 = start_1730248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1730251 < pos_1730247)) break L2;
          F.line = 322;
          o_1730252 = addInt(o_1730252, chckRange(rune_len_at_1106932(s_1730246, o_1730252), 0, 2147483647));
          if (((s_1730246 != null ? s_1730246.length : 0) <= o_1730252)) {
          F.line = 324;
          result_1730249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1730251 = addInt(i_1730251, 1);
        }
    } while(false);
    F.line = 326;
    result_1730249 = o_1730252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1730249;

}
function validate_utf8_1350229(s_1350231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1350232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1350234 = 0;
    F.line = 173;
    var l_1350235 = (s_1350231 != null ? s_1350231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1350234 < l_1350235)) break L2;
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1350234 = addInt(i_1350234, 1);
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1350232 = i_1350234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1350234, 1) < l_1350235)) Tmp3 = false; else {              Tmp3 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1350234 = addInt(i_1350234, 2);
          }
          else {
            F.line = 180;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1350234, 2) < l_1350235)) Tmp5 = false; else {              Tmp5 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1350234 = addInt(i_1350234, 3);
          }
          else {
            F.line = 184;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1350234, 3) < l_1350235)) Tmp8 = false; else {              Tmp8 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1350231[chckIndx(addInt(i_1350234, 3), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1350234 = addInt(i_1350234, 4);
          }
          else {
            F.line = 190;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1350232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1350232;

}
function nsuRepeatChar(c_9290048, count_9290049) {
  var result_9290050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9290050 = nimCopy(null, mnewString(count_9290049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9290059 = 0;
      F.line = 66;
      var colontmp__11243258 = 0;
      F.line = 1283;
      colontmp__11243258 = subInt(count_9290049, 1);
      F.line = 77;
      var res_11243259 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11243259 <= colontmp__11243258)) break L3;
            F.line = 1283;
            i_9290059 = res_11243259;
            F.line = 1283;
            result_9290050[chckIndx(i_9290059, 0, (result_9290050 != null ? result_9290050.length : 0)+0-1)-0] = c_9290048;
            F.line = 80;
            res_11243259 = addInt(res_11243259, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9290050;

}
function align_string_9745222(s_9745224, minimum_width_9745225, align_9745226, fill_9745227) {
      var Tmp1;

  var result_9745228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9745225 == 0)) {
    F.line = 282;
    result_9745228 = nimCopy(null, s_9745224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1350229(s_9745224) == -1)) {
      Tmp1 = nucruneLen(s_9745224);
      }
      else {
      Tmp1 = (s_9745224 != null ? s_9745224.length : 0);
      }
      
      var s_rune_len_9745229 = Tmp1;
      F.line = 285;
      var to_fill_9745230 = subInt(minimum_width_9745225, s_rune_len_9745229);
      if ((to_fill_9745230 <= 0)) {
      F.line = 287;
      result_9745228 = nimCopy(null, s_9745224, NTI112);
      }
      else {
      if (((align_9745226 == 60) || (align_9745226 == 0))) {
      F.line = 289;
      result_9745228 = nimCopy(null, (s_9745224 || []).concat(nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9745226 == 94)) {
      F.line = 291;
      var half_9745231 = divInt(to_fill_9745230, 2);
      F.line = 292;
      result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(half_9745231, 0, 2147483647)) || []).concat(s_9745224 || [],nsuRepeatChar(fill_9745227, chckRange(subInt(to_fill_9745230, half_9745231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []).concat(s_9745224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9745228;

}
function format_value_9790080(result_9790083, result_9790083_Idx, value_9790084, specifier_9790085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9790086 = parse_standard_format_specifier_9745322(specifier_9790085, 0, false);
    F.line = 503;
    var value_9790087 = nimCopy(null, value_9790084, NTI112);
    F.line = 504;
    switch (spec_9790086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9790086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9790086.precision == -1))) {
    if ((spec_9790086.precision < nucruneLen(value_9790087))) {
    F.line = 512;
    (value_9790087 == null ? value_9790087 = mnewString(chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9790087.length = chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9790083[result_9790083_Idx] != null) { result_9790083[result_9790083_Idx] = (result_9790083[result_9790083_Idx]).concat(align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill)); } else { result_9790083[result_9790083_Idx] = align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill).slice(); };
  framePtr = F.prev;

  
}
function compile_11171410(cfg_11171415, node_11171416) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_11171466 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 289;
    var matched_node_11171467 = node_11171416.querySelector(toJSStr(cfg_11171415.selector));
    if ((matched_node_11171467 == null)) {
    F.line = 291;
    var selector_11171476 = nimCopy(null, cfg_11171415.selector, NTI112);
    F.line = 292;
    var fmt_res_11171477 = [mnewString(0)];
    F.line = 292;
    if (fmt_res_11171477[0] != null) { fmt_res_11171477[0] = (fmt_res_11171477[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11171477[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 292;
    format_value_9790080(fmt_res_11171477, 0, selector_11171476, []);
    F.line = 292;
    if (fmt_res_11171477[0] != null) { fmt_res_11171477[0] = (fmt_res_11171477[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11171477[0] = makeNimstrLit("\'"); };
    F.line = 292;
    raiseException({message: nimCopy(null, fmt_res_11171477[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 294;
    var match_11180009 = {refresh: nimCopy(null, cfg_11171415.refresh, NTI11051692), init: nimCopy(null, cfg_11171415.init, NTI11051701), iter: cfg_11171415.iter, node: matched_node_11171467, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 299;
    match_11180009.node = matched_node_11171467;
    if (match_11180009.iter) {
    var Tmp1 = match_11180009;
    if (ConstSet32[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 301;
    var Tmp2 = cfg_11171415;
    if (ConstSet33[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11180009;
    if (ConstSet34[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 302;
    Tmp3.anchor = matched_node_11171467.ownerDocument.createComment(matched_node_11171467.outerHTML);
    var Tmp4 = match_11180009;
    if (ConstSet35[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 303;
    Tmp4.mount_template = cfg_11171415.mount;
    var Tmp5 = match_11180009;
    if (ConstSet36[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 304;
    Tmp5.match_templates = nimCopy(null, cfg_11171415.cmatches, NTI11051728);
    var Tmp6 = match_11180009;
    if (ConstSet37[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 305;
    Tmp6.items = nimCopy(null, [], NTI11180030);
    F.line = 306;
    var Tmp7 = match_11180009;
    if (ConstSet38[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11171467.parentNode.replaceChild(Tmp7.anchor, matched_node_11171467);
    }
    else {
      var Tmp8 = match_11180009;
      if (ConstSet39[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 308;
      var Tmp9 = cfg_11171415;
      if (ConstSet40[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11180009;
      if (ConstSet41[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 309;
      Tmp10.matches = nimCopy(null, [], NTI11180049);
      var Tmp11 = match_11180009;
      if (ConstSet42[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 310;
      Tmp11.inited = false;
      var Tmp12 = match_11180009;
      if (ConstSet43[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 311;
      Tmp12.mount = null;
      if (!((cfg_11171415.mount == null))) {
      var Tmp13 = match_11180009;
      if (ConstSet44[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 313;
      Tmp13.mount_source = cfg_11171415.mount;
      }
      else {
        L14: do {
          F.line = 315;
          var submatch_11180067 = null;
          F.line = 184;
          var i_11243210 = 0;
          F.line = 185;
          var l_11243211 = (cfg_11171415.cmatches != null ? cfg_11171415.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_11243210 < l_11243211)) break L16;
                F.line = 315;
                submatch_11180067 = cfg_11171415.cmatches[chckIndx(i_11243210, 0, (cfg_11171415.cmatches != null ? cfg_11171415.cmatches.length : 0)+0-1)-0];
                F.line = 316;
                var Tmp17 = match_11180009;
                if (ConstSet45[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_11180067.compile(matched_node_11171467)); } else { Tmp18 = [submatch_11180067.compile(matched_node_11171467)]; };
                F.line = 188;
                i_11243210 = addInt(i_11243210, 1);
                if (!(((cfg_11171415.cmatches != null ? cfg_11171415.cmatches.length : 0) == l_11243211))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 317;
    result_11171466 = match_11180009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11171466;

}
function as_interface_11171232(config_11171237) {
    function HEX3Aanonymous_11171244(node_11171246) {
      var result_11171251 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 493;
        result_11171251 = as_interface_11180541(compile_11171410(config_11171237, node_11171246));
      framePtr = F.prev;

      return result_11171251;

    }

  var result_11171239 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 492;
    result_11171239 = {compile: HEX3Aanonymous_11171244};
  framePtr = F.prev;

  return result_11171239;

}
function iter_11170757(c_11170762, selector_11170763, iter_11170765, actions_11170771) {
  var result_11170773 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 272;
    result_11170773 = {selector: nimCopy(null, selector_11170763, NTI112), refresh: [], init: [], mount: null, iter: true, iterate: iter_11170765, cmatches: [], convert: null};
    F.line = 280;
    if (c_11170762.cmatches != null) { c_11170762.cmatches.push(as_interface_11171232(result_11170773)); } else { c_11170762.cmatches = [as_interface_11171232(result_11170773)]; };
    if (!((actions_11170771 == null))) {
    F.line = 282;
    actions_11170771(result_11170773);
    }
    
  framePtr = F.prev;

  return result_11170773;

}
function seq_iterator_11051141(arr_11051145) {
    arr_11051145 = nimCopy(null, arr_11051145, NTI11051144);
    function next_11051151() {
      var result_11051156 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"svelteutil.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_11051145 != null ? arr_11051145.length : 0) <= it_11051149)) {
        F.line = 32;
        var colontmp__11243264 = false;
        F.line = 32;
        var colontmp__11243265 = empty_11051150;
        F.line = 32;
        nimCopy(result_11051156, {Field0: colontmp__11243264, Field1: colontmp__11243265}, NTI11051153);
        break BeforeRet;
        }
        
        F.line = 33;
        var colontmp__11243266 = true;
        F.line = 33;
        var colontmp__11243267 = arr_11051145[chckIndx(it_11051149, 0, (arr_11051145 != null ? arr_11051145.length : 0)+0-1)-0];
        F.line = 33;
        nimCopy(result_11051156, {Field0: colontmp__11243266, Field1: colontmp__11243267}, NTI11051153);
        F.line = 34;
        it_11051149 = addInt(it_11051149, 1);
      } while (false);
      framePtr = F.prev;

      return result_11051156;

    }

  var result_11051147 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 25;
    var it_11051149 = 0;
    F.line = 26;
    var empty_11051150 = null;
    F.line = 36;
    result_11051147 = next_11051151;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11051147;

}
function iter_names_11051124(c2_11051126) {
  var result_11051140 = null;

  var F={procname:"sample3.iterNames",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 16;
    result_11051140 = seq_iterator_11051141(c2_11051126.names);
  framePtr = F.prev;

  return result_11051140;

}
function refresh_11100852(c_11100857, refresh_11100859) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 217;
    if (c_11100857.refresh != null) { c_11100857.refresh.push(refresh_11100859); } else { c_11100857.refresh = [refresh_11100859]; };
  framePtr = F.prev;

  
}
function create_iter_item_11070950(match_11070955, parent_node_11070956) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11070958 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 341;
    var comp_11070963 = null;
    F.line = 342;
    var node_11070964 = null;
      var Tmp1 = match_11070955;
      if (ConstSet50[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 344;
    var Tmp2 = match_11070955;
    if (ConstSet51[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11070963 = Tmp2.mount_template.clone();
    F.line = 345;
    node_11070964 = comp_11070963.node();
    }
    else {
      F.line = 347;
      node_11070964 = match_11070955.node.cloneNode(true);
    }
    
    F.line = 348;
    var Tmp3 = match_11070955;
    if (ConstSet52[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11070958 = {mount: comp_11070963, node: node_11070964, matches: compile_11071001(Tmp3.match_templates, node_11070964)};
    F.line = 352;
    var Tmp4 = match_11070955;
    if (ConstSet53[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11070956.insertBefore(node_11070964, Tmp4.anchor);
  framePtr = F.prev;

  return result_11070958;

}
function update_11070908(match_11070913, val_11070914, refresh_11070915) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
          var Tmp29;
      var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp33;
      var Tmp37;
        var Tmp38;
      var Tmp39;
      var Tmp40;
        var Tmp42;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11070915)) Tmp1 = false; else {        Tmp1 = (val_11070914 == match_11070913.oldValue);      }    if (Tmp1) {
    F.line = 361;
    break BeforeRet;
    }
    
    F.line = 363;
    match_11070913.oldValue = val_11070914;
    if (match_11070913.iter) {
    F.line = 365;
    var i_11070924 = 0;
    F.line = 366;
    var Tmp2 = match_11070913;
    if (ConstSet46[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11070926 = Tmp2.anchor.parentNode;
    F.line = 367;
    var Tmp3 = match_11070913;
    if (ConstSet47[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11070928 = Tmp3.iterate(val_11070914);
    L4: do {
      F.line = 368;
        L5: while (true) {
        if (!true) break L5;
          F.line = 369;
          var it_11070929 = itf_11070928();
          if ((it_11070929["Field0"] == false)) {
          F.line = 370;
          break L4;
          }
          
          F.line = 371;
          var item_11070930 = it_11070929["Field1"];
          if ((10 < i_11070924)) {
          F.line = 374;
          break L4;
          }
          
          F.line = 376;
          var iter_item_11070935 = null;
          F.line = 377;
          var inited_11070936 = false;
            var Tmp6 = match_11070913;
            if (ConstSet48[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11070924 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 381;
          var Tmp8 = match_11070913;
          if (ConstSet49[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11070935 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11070924, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 382;
          inited_11070936 = true;
          }
          else {
            F.line = 384;
            iter_item_11070935 = create_iter_item_11070950(match_11070913, parent_node_11070926);
            F.line = 385;
            var Tmp10 = match_11070913;
            if (ConstSet54[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11070935); } else { Tmp11 = [iter_item_11070935]; };
            F.line = 386;
            inited_11070936 = false;
          }
          
          if (!(inited_11070936)) {
          L12: do {
            F.line = 390;
            var init_proc_11080214 = null;
            F.line = 184;
            var i_11243273 = 0;
            F.line = 185;
            var l_11243274 = (match_11070913.init != null ? match_11070913.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11243273 < l_11243274)) break L14;
                  F.line = 390;
                  init_proc_11080214 = match_11070913.init[chckIndx(i_11243273, 0, (match_11070913.init != null ? match_11070913.init.length : 0)+0-1)-0];
                  F.line = 391;
                  init_proc_11080214(iter_item_11070935.node, item_11070930);
                  F.line = 188;
                  i_11243273 = addInt(i_11243273, 1);
                  if (!(((match_11070913.init != null ? match_11070913.init.length : 0) == l_11243274))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11070935.mount == null))) {
          F.line = 395;
          iter_item_11070935.mount.update(item_11070930, refresh_11070915);
          }
          
          L15: do {
            F.line = 398;
            var submatch_11090214 = null;
            F.line = 184;
            var i_11243277 = 0;
            F.line = 185;
            var l_11243278 = (iter_item_11070935.matches != null ? iter_item_11070935.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11243277 < l_11243278)) break L17;
                  F.line = 398;
                  submatch_11090214 = iter_item_11070935.matches[chckIndx(i_11243277, 0, (iter_item_11070935.matches != null ? iter_item_11070935.matches.length : 0)+0-1)-0];
                  F.line = 399;
                  submatch_11090214.update(item_11070930, refresh_11070915);
                  F.line = 188;
                  i_11243277 = addInt(i_11243277, 1);
                  if (!(((iter_item_11070935.matches != null ? iter_item_11070935.matches.length : 0) == l_11243278))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 402;
            var refresh_proc_11100214 = null;
            F.line = 184;
            var i_11243281 = 0;
            F.line = 185;
            var l_11243282 = (match_11070913.refresh != null ? match_11070913.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_11243281 < l_11243282)) break L20;
                  F.line = 402;
                  refresh_proc_11100214 = match_11070913.refresh[chckIndx(i_11243281, 0, (match_11070913.refresh != null ? match_11070913.refresh.length : 0)+0-1)-0];
                  F.line = 403;
                  refresh_proc_11100214(iter_item_11070935.node, item_11070930);
                  F.line = 188;
                  i_11243281 = addInt(i_11243281, 1);
                  if (!(((match_11070913.refresh != null ? match_11070913.refresh.length : 0) == l_11243282))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 405;
          i_11070924 = addInt(i_11070924, 1);
        }
    } while(false);
    L21: do {
      F.line = 408;
        L22: while (true) {
          var Tmp23 = match_11070913;
          if (ConstSet55[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11070924 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 409;
          var Tmp25 = match_11070913;
          if (ConstSet56[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11100473(pop_11100222(Tmp25, "items"), parent_node_11070926);
        }
    } while(false);
    }
    else {
      F.line = 411;
      var node_11100492 = match_11070913.node;
      F.line = 412;
      var Tmp26 = match_11070913;
      if (ConstSet57[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11100494 = Tmp26.convert(val_11070914);
        var Tmp28 = match_11070913;
        if (ConstSet58[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp28.mount == null)) Tmp27 = false; else {          var Tmp29 = match_11070913;
          if (ConstSet59[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp27 = !((Tmp29.mount_source == null));        }      if (Tmp27) {
      var Tmp30 = match_11070913;
      if (ConstSet60[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 416;
      var Tmp31 = match_11070913;
      if (ConstSet61[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp30.mount = Tmp31.mount_source.clone();
      F.line = 417;
      var Tmp32 = match_11070913;
      if (ConstSet62[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11100492.parentNode.replaceChild(Tmp32.mount.node(), node_11100492);
      }
      
        var Tmp33 = match_11070913;
        if (ConstSet63[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp33.inited)) {
      L34: do {
        F.line = 421;
        var init_proc_11100523 = null;
        F.line = 184;
        var i_11243286 = 0;
        F.line = 185;
        var l_11243287 = (match_11070913.init != null ? match_11070913.init.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11243286 < l_11243287)) break L36;
              F.line = 421;
              init_proc_11100523 = match_11070913.init[chckIndx(i_11243286, 0, (match_11070913.init != null ? match_11070913.init.length : 0)+0-1)-0];
              F.line = 422;
              init_proc_11100523(node_11100492, converted_val_11100494);
              F.line = 188;
              i_11243286 = addInt(i_11243286, 1);
              if (!(((match_11070913.init != null ? match_11070913.init.length : 0) == l_11243287))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp37 = match_11070913;
      if (ConstSet64[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 423;
      Tmp37.inited = true;
      }
      
        var Tmp38 = match_11070913;
        if (ConstSet65[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp38.mount == null))) {
      F.line = 427;
      var Tmp39 = match_11070913;
      if (ConstSet66[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11100492 = Tmp39.mount.node();
      F.line = 428;
      var Tmp40 = match_11070913;
      if (ConstSet67[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp40.mount.update(converted_val_11100494, refresh_11070915);
      }
      
      L41: do {
        F.line = 431;
        var submatch_11100543 = null;
        F.line = 182;
        var colontmp__11243290 = null;
        F.line = 431;
        var Tmp42 = match_11070913;
        if (ConstSet68[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11243290 = Tmp42.matches;
        F.line = 184;
        var i_11243291 = 0;
        F.line = 185;
        var l_11243292 = (colontmp__11243290 != null ? colontmp__11243290.length : 0);
        L43: do {
          F.line = 186;
            L44: while (true) {
            if (!(i_11243291 < l_11243292)) break L44;
              F.line = 431;
              submatch_11100543 = colontmp__11243290[chckIndx(i_11243291, 0, (colontmp__11243290 != null ? colontmp__11243290.length : 0)+0-1)-0];
              F.line = 432;
              submatch_11100543.update(converted_val_11100494, refresh_11070915);
              F.line = 188;
              i_11243291 = addInt(i_11243291, 1);
              if (!(((colontmp__11243290 != null ? colontmp__11243290.length : 0) == l_11243292))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L45: do {
        F.line = 435;
        var refresh_proc_11100550 = null;
        F.line = 184;
        var i_11243295 = 0;
        F.line = 185;
        var l_11243296 = (match_11070913.refresh != null ? match_11070913.refresh.length : 0);
        L46: do {
          F.line = 186;
            L47: while (true) {
            if (!(i_11243295 < l_11243296)) break L47;
              F.line = 435;
              refresh_proc_11100550 = match_11070913.refresh[chckIndx(i_11243295, 0, (match_11070913.refresh != null ? match_11070913.refresh.length : 0)+0-1)-0];
              F.line = 436;
              refresh_proc_11100550(node_11100492, converted_val_11100494);
              F.line = 188;
              i_11243295 = addInt(i_11243295, 1);
              if (!(((match_11070913.refresh != null ? match_11070913.refresh.length : 0) == l_11243296))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11070853(match_11070858) {
    function HEX3Aanonymous_11070865(data_11070867, refresh_11070868) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 488;
        update_11070908(match_11070858, data_11070867, refresh_11070868);
      framePtr = F.prev;

      
    }

  var result_11070860 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 487;
    result_11070860 = {update: HEX3Aanonymous_11070865};
  framePtr = F.prev;

  return result_11070860;

}
function compile_11052807(cfg_11052812, node_11052813) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_11052875 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 289;
    var matched_node_11052876 = node_11052813.querySelector(toJSStr(cfg_11052812.selector));
    if ((matched_node_11052876 == null)) {
    F.line = 291;
    var selector_11052885 = nimCopy(null, cfg_11052812.selector, NTI112);
    F.line = 292;
    var fmt_res_11052889 = [mnewString(0)];
    F.line = 292;
    if (fmt_res_11052889[0] != null) { fmt_res_11052889[0] = (fmt_res_11052889[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11052889[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 292;
    format_value_9790080(fmt_res_11052889, 0, selector_11052885, []);
    F.line = 292;
    if (fmt_res_11052889[0] != null) { fmt_res_11052889[0] = (fmt_res_11052889[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11052889[0] = makeNimstrLit("\'"); };
    F.line = 292;
    raiseException({message: nimCopy(null, fmt_res_11052889[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 294;
    var match_11060009 = {refresh: nimCopy(null, cfg_11052812.refresh, NTI11051872), init: nimCopy(null, cfg_11052812.init, NTI11051877), iter: cfg_11052812.iter, node: matched_node_11052876, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 299;
    match_11060009.node = matched_node_11052876;
    if (match_11060009.iter) {
    var Tmp1 = match_11060009;
    if (ConstSet69[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 301;
    var Tmp2 = cfg_11052812;
    if (ConstSet70[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11060009;
    if (ConstSet71[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 302;
    Tmp3.anchor = matched_node_11052876.ownerDocument.createComment(matched_node_11052876.outerHTML);
    var Tmp4 = match_11060009;
    if (ConstSet72[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 303;
    Tmp4.mount_template = cfg_11052812.mount;
    var Tmp5 = match_11060009;
    if (ConstSet73[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 304;
    Tmp5.match_templates = nimCopy(null, cfg_11052812.cmatches, NTI11051882);
    var Tmp6 = match_11060009;
    if (ConstSet74[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 305;
    Tmp6.items = nimCopy(null, [], NTI11060030);
    F.line = 306;
    var Tmp7 = match_11060009;
    if (ConstSet75[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11052876.parentNode.replaceChild(Tmp7.anchor, matched_node_11052876);
    }
    else {
      var Tmp8 = match_11060009;
      if (ConstSet76[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 308;
      var Tmp9 = cfg_11052812;
      if (ConstSet77[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11060009;
      if (ConstSet78[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 309;
      Tmp10.matches = nimCopy(null, [], NTI11060049);
      var Tmp11 = match_11060009;
      if (ConstSet79[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 310;
      Tmp11.inited = false;
      var Tmp12 = match_11060009;
      if (ConstSet80[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 311;
      Tmp12.mount = null;
      if (!((cfg_11052812.mount == null))) {
      var Tmp13 = match_11060009;
      if (ConstSet81[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 313;
      Tmp13.mount_source = cfg_11052812.mount;
      }
      else {
        L14: do {
          F.line = 315;
          var submatch_11070214 = null;
          F.line = 184;
          var i_11243302 = 0;
          F.line = 185;
          var l_11243303 = (cfg_11052812.cmatches != null ? cfg_11052812.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_11243302 < l_11243303)) break L16;
                F.line = 315;
                submatch_11070214 = cfg_11052812.cmatches[chckIndx(i_11243302, 0, (cfg_11052812.cmatches != null ? cfg_11052812.cmatches.length : 0)+0-1)-0];
                F.line = 316;
                var Tmp17 = match_11060009;
                if (ConstSet82[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_11070214.compile(matched_node_11052876)); } else { Tmp18 = [submatch_11070214.compile(matched_node_11052876)]; };
                F.line = 188;
                i_11243302 = addInt(i_11243302, 1);
                if (!(((cfg_11052812.cmatches != null ? cfg_11052812.cmatches.length : 0) == l_11243303))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 317;
    result_11052875 = match_11060009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11052875;

}
function as_interface_11052629(config_11052634) {
    function HEX3Aanonymous_11052641(node_11052643) {
      var result_11052648 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 493;
        result_11052648 = as_interface_11070853(compile_11052807(config_11052634, node_11052643));
      framePtr = F.prev;

      return result_11052648;

    }

  var result_11052636 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 492;
    result_11052636 = {compile: HEX3Aanonymous_11052641};
  framePtr = F.prev;

  return result_11052636;

}
function match_11052168(c_11052174, selector_11052175, convert_11052177, actions_11052183) {
  var result_11052185 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 181;
    result_11052185 = {selector: nimCopy(null, selector_11052175, NTI112), refresh: [], init: [], mount: null, iter: false, convert: convert_11052177, cmatches: null, iterate: null};
    F.line = 188;
    if (c_11052174.cmatches != null) { c_11052174.cmatches.push(as_interface_11052629(result_11052185)); } else { c_11052174.cmatches = [as_interface_11052629(result_11052185)]; };
    if (!((actions_11052183 == null))) {
    F.line = 190;
    actions_11052183(result_11052185);
    }
    
  framePtr = F.prev;

  return result_11052185;

}
function id_11052145(data_11052148) {
  var result_11052149 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11052149 = data_11052148;
  framePtr = F.prev;

  return result_11052149;

}
function match_11052124(c_11052129, selector_11052130, actions_11052136) {
  var result_11052138 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 206;
    result_11052138 = match_11052168(c_11052129, selector_11052130, id_11052145, actions_11052136);
  framePtr = F.prev;

  return result_11052138;

}
function create_iter_item_11150668(match_11150673, parent_node_11150674) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11150676 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 341;
    var comp_11150681 = null;
    F.line = 342;
    var node_11150682 = null;
      var Tmp1 = match_11150673;
      if (ConstSet87[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 344;
    var Tmp2 = match_11150673;
    if (ConstSet88[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11150681 = Tmp2.mount_template.clone();
    F.line = 345;
    node_11150682 = comp_11150681.node();
    }
    else {
      F.line = 347;
      node_11150682 = match_11150673.node.cloneNode(true);
    }
    
    F.line = 348;
    var Tmp3 = match_11150673;
    if (ConstSet89[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11150676 = {mount: comp_11150681, node: node_11150682, matches: compile_11120642(Tmp3.match_templates, node_11150682)};
    F.line = 352;
    var Tmp4 = match_11150673;
    if (ConstSet90[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11150674.insertBefore(node_11150682, Tmp4.anchor);
  framePtr = F.prev;

  return result_11150676;

}
function detach_11170473(iter_item_11170477, parent_node_11170478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 356;
    parent_node_11170478.removeChild(iter_item_11170477.node);
  framePtr = F.prev;

  
}
function pop_11170222(s_11170227, s_11170227_Idx) {
  var result_11170228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11170234 = subInt((s_11170227[s_11170227_Idx] != null ? s_11170227[s_11170227_Idx].length : 0), 1);
    F.line = 1784;
    result_11170228 = s_11170227[s_11170227_Idx][chckIndx(l_11170234, 0, (s_11170227[s_11170227_Idx] != null ? s_11170227[s_11170227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11170227[s_11170227_Idx] === null) s_11170227[s_11170227_Idx] = [];
               if (s_11170227[s_11170227_Idx].length < chckRange(l_11170234, 0, 2147483647)) { for (var i=s_11170227[s_11170227_Idx].length;i<chckRange(l_11170234, 0, 2147483647);++i) s_11170227[s_11170227_Idx].push(null); }
               else { s_11170227[s_11170227_Idx].length = chckRange(l_11170234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11170228;

}
function update_11150626(match_11150631, val_11150632, refresh_11150633) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
          var Tmp29;
      var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp33;
      var Tmp37;
        var Tmp38;
      var Tmp39;
      var Tmp40;
        var Tmp42;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11150633)) Tmp1 = false; else {        Tmp1 = (val_11150632 == match_11150631.oldValue);      }    if (Tmp1) {
    F.line = 361;
    break BeforeRet;
    }
    
    F.line = 363;
    match_11150631.oldValue = val_11150632;
    if (match_11150631.iter) {
    F.line = 365;
    var i_11150642 = 0;
    F.line = 366;
    var Tmp2 = match_11150631;
    if (ConstSet83[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11150644 = Tmp2.anchor.parentNode;
    F.line = 367;
    var Tmp3 = match_11150631;
    if (ConstSet84[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11150646 = Tmp3.iterate(val_11150632);
    L4: do {
      F.line = 368;
        L5: while (true) {
        if (!true) break L5;
          F.line = 369;
          var it_11150647 = itf_11150646();
          if ((it_11150647["Field0"] == false)) {
          F.line = 370;
          break L4;
          }
          
          F.line = 371;
          var item_11150648 = it_11150647["Field1"];
          if ((10 < i_11150642)) {
          F.line = 374;
          break L4;
          }
          
          F.line = 376;
          var iter_item_11150653 = null;
          F.line = 377;
          var inited_11150654 = false;
            var Tmp6 = match_11150631;
            if (ConstSet85[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11150642 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 381;
          var Tmp8 = match_11150631;
          if (ConstSet86[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11150653 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11150642, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 382;
          inited_11150654 = true;
          }
          else {
            F.line = 384;
            iter_item_11150653 = create_iter_item_11150668(match_11150631, parent_node_11150644);
            F.line = 385;
            var Tmp10 = match_11150631;
            if (ConstSet91[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11150653); } else { Tmp11 = [iter_item_11150653]; };
            F.line = 386;
            inited_11150654 = false;
          }
          
          if (!(inited_11150654)) {
          L12: do {
            F.line = 390;
            var init_proc_11160214 = null;
            F.line = 184;
            var i_11243311 = 0;
            F.line = 185;
            var l_11243312 = (match_11150631.init != null ? match_11150631.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11243311 < l_11243312)) break L14;
                  F.line = 390;
                  init_proc_11160214 = match_11150631.init[chckIndx(i_11243311, 0, (match_11150631.init != null ? match_11150631.init.length : 0)+0-1)-0];
                  F.line = 391;
                  init_proc_11160214(iter_item_11150653.node, item_11150648);
                  F.line = 188;
                  i_11243311 = addInt(i_11243311, 1);
                  if (!(((match_11150631.init != null ? match_11150631.init.length : 0) == l_11243312))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11150653.mount == null))) {
          F.line = 395;
          iter_item_11150653.mount.update(item_11150648, refresh_11150633);
          }
          
          L15: do {
            F.line = 398;
            var submatch_11160229 = null;
            F.line = 184;
            var i_11243316 = 0;
            F.line = 185;
            var l_11243317 = (iter_item_11150653.matches != null ? iter_item_11150653.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11243316 < l_11243317)) break L17;
                  F.line = 398;
                  submatch_11160229 = iter_item_11150653.matches[chckIndx(i_11243316, 0, (iter_item_11150653.matches != null ? iter_item_11150653.matches.length : 0)+0-1)-0];
                  F.line = 399;
                  submatch_11160229.update(item_11150648, refresh_11150633);
                  F.line = 188;
                  i_11243316 = addInt(i_11243316, 1);
                  if (!(((iter_item_11150653.matches != null ? iter_item_11150653.matches.length : 0) == l_11243317))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 402;
            var refresh_proc_11170214 = null;
            F.line = 184;
            var i_11243321 = 0;
            F.line = 185;
            var l_11243322 = (match_11150631.refresh != null ? match_11150631.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_11243321 < l_11243322)) break L20;
                  F.line = 402;
                  refresh_proc_11170214 = match_11150631.refresh[chckIndx(i_11243321, 0, (match_11150631.refresh != null ? match_11150631.refresh.length : 0)+0-1)-0];
                  F.line = 403;
                  refresh_proc_11170214(iter_item_11150653.node, item_11150648);
                  F.line = 188;
                  i_11243321 = addInt(i_11243321, 1);
                  if (!(((match_11150631.refresh != null ? match_11150631.refresh.length : 0) == l_11243322))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 405;
          i_11150642 = addInt(i_11150642, 1);
        }
    } while(false);
    L21: do {
      F.line = 408;
        L22: while (true) {
          var Tmp23 = match_11150631;
          if (ConstSet92[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11150642 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 409;
          var Tmp25 = match_11150631;
          if (ConstSet93[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11170473(pop_11170222(Tmp25, "items"), parent_node_11150644);
        }
    } while(false);
    }
    else {
      F.line = 411;
      var node_11170492 = match_11150631.node;
      F.line = 412;
      var Tmp26 = match_11150631;
      if (ConstSet94[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11170494 = Tmp26.convert(val_11150632);
        var Tmp28 = match_11150631;
        if (ConstSet95[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp28.mount == null)) Tmp27 = false; else {          var Tmp29 = match_11150631;
          if (ConstSet96[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp27 = !((Tmp29.mount_source == null));        }      if (Tmp27) {
      var Tmp30 = match_11150631;
      if (ConstSet97[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 416;
      var Tmp31 = match_11150631;
      if (ConstSet98[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp30.mount = Tmp31.mount_source.clone();
      F.line = 417;
      var Tmp32 = match_11150631;
      if (ConstSet99[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11170492.parentNode.replaceChild(Tmp32.mount.node(), node_11170492);
      }
      
        var Tmp33 = match_11150631;
        if (ConstSet100[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp33.inited)) {
      L34: do {
        F.line = 421;
        var init_proc_11170523 = null;
        F.line = 184;
        var i_11243326 = 0;
        F.line = 185;
        var l_11243327 = (match_11150631.init != null ? match_11150631.init.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11243326 < l_11243327)) break L36;
              F.line = 421;
              init_proc_11170523 = match_11150631.init[chckIndx(i_11243326, 0, (match_11150631.init != null ? match_11150631.init.length : 0)+0-1)-0];
              F.line = 422;
              init_proc_11170523(node_11170492, converted_val_11170494);
              F.line = 188;
              i_11243326 = addInt(i_11243326, 1);
              if (!(((match_11150631.init != null ? match_11150631.init.length : 0) == l_11243327))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp37 = match_11150631;
      if (ConstSet101[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 423;
      Tmp37.inited = true;
      }
      
        var Tmp38 = match_11150631;
        if (ConstSet102[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp38.mount == null))) {
      F.line = 427;
      var Tmp39 = match_11150631;
      if (ConstSet103[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11170492 = Tmp39.mount.node();
      F.line = 428;
      var Tmp40 = match_11150631;
      if (ConstSet104[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp40.mount.update(converted_val_11170494, refresh_11150633);
      }
      
      L41: do {
        F.line = 431;
        var submatch_11170543 = null;
        F.line = 182;
        var colontmp__11243330 = null;
        F.line = 431;
        var Tmp42 = match_11150631;
        if (ConstSet105[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11243330 = Tmp42.matches;
        F.line = 184;
        var i_11243331 = 0;
        F.line = 185;
        var l_11243332 = (colontmp__11243330 != null ? colontmp__11243330.length : 0);
        L43: do {
          F.line = 186;
            L44: while (true) {
            if (!(i_11243331 < l_11243332)) break L44;
              F.line = 431;
              submatch_11170543 = colontmp__11243330[chckIndx(i_11243331, 0, (colontmp__11243330 != null ? colontmp__11243330.length : 0)+0-1)-0];
              F.line = 432;
              submatch_11170543.update(converted_val_11170494, refresh_11150633);
              F.line = 188;
              i_11243331 = addInt(i_11243331, 1);
              if (!(((colontmp__11243330 != null ? colontmp__11243330.length : 0) == l_11243332))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L45: do {
        F.line = 435;
        var refresh_proc_11170550 = null;
        F.line = 184;
        var i_11243335 = 0;
        F.line = 185;
        var l_11243336 = (match_11150631.refresh != null ? match_11150631.refresh.length : 0);
        L46: do {
          F.line = 186;
            L47: while (true) {
            if (!(i_11243335 < l_11243336)) break L47;
              F.line = 435;
              refresh_proc_11170550 = match_11150631.refresh[chckIndx(i_11243335, 0, (match_11150631.refresh != null ? match_11150631.refresh.length : 0)+0-1)-0];
              F.line = 436;
              refresh_proc_11170550(node_11170492, converted_val_11170494);
              F.line = 188;
              i_11243335 = addInt(i_11243335, 1);
              if (!(((match_11150631.refresh != null ? match_11150631.refresh.length : 0) == l_11243336))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11150571(match_11150576) {
    function HEX3Aanonymous_11150583(data_11150585, refresh_11150586) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 488;
        update_11150626(match_11150576, data_11150585, refresh_11150586);
      framePtr = F.prev;

      
    }

  var result_11150578 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 487;
    result_11150578 = {update: HEX3Aanonymous_11150583};
  framePtr = F.prev;

  return result_11150578;

}
function compile_11140949(cfg_11140954, node_11140955) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_11141017 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 289;
    var matched_node_11141018 = node_11140955.querySelector(toJSStr(cfg_11140954.selector));
    if ((matched_node_11141018 == null)) {
    F.line = 291;
    var selector_11141027 = nimCopy(null, cfg_11140954.selector, NTI112);
    F.line = 292;
    var fmt_res_11141028 = [mnewString(0)];
    F.line = 292;
    if (fmt_res_11141028[0] != null) { fmt_res_11141028[0] = (fmt_res_11141028[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11141028[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 292;
    format_value_9790080(fmt_res_11141028, 0, selector_11141027, []);
    F.line = 292;
    if (fmt_res_11141028[0] != null) { fmt_res_11141028[0] = (fmt_res_11141028[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11141028[0] = makeNimstrLit("\'"); };
    F.line = 292;
    raiseException({message: nimCopy(null, fmt_res_11141028[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 294;
    var match_11150009 = {refresh: nimCopy(null, cfg_11140954.refresh, NTI11101010), init: nimCopy(null, cfg_11140954.init, NTI11101019), iter: cfg_11140954.iter, node: matched_node_11141018, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 299;
    match_11150009.node = matched_node_11141018;
    if (match_11150009.iter) {
    var Tmp1 = match_11150009;
    if (ConstSet106[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 301;
    var Tmp2 = cfg_11140954;
    if (ConstSet107[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11150009;
    if (ConstSet108[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 302;
    Tmp3.anchor = matched_node_11141018.ownerDocument.createComment(matched_node_11141018.outerHTML);
    var Tmp4 = match_11150009;
    if (ConstSet109[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 303;
    Tmp4.mount_template = cfg_11140954.mount;
    var Tmp5 = match_11150009;
    if (ConstSet110[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 304;
    Tmp5.match_templates = nimCopy(null, cfg_11140954.cmatches, NTI11101024);
    var Tmp6 = match_11150009;
    if (ConstSet111[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 305;
    Tmp6.items = nimCopy(null, [], NTI11150030);
    F.line = 306;
    var Tmp7 = match_11150009;
    if (ConstSet112[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11141018.parentNode.replaceChild(Tmp7.anchor, matched_node_11141018);
    }
    else {
      var Tmp8 = match_11150009;
      if (ConstSet113[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 308;
      var Tmp9 = cfg_11140954;
      if (ConstSet114[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11150009;
      if (ConstSet115[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 309;
      Tmp10.matches = nimCopy(null, [], NTI11150049);
      var Tmp11 = match_11150009;
      if (ConstSet116[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 310;
      Tmp11.inited = false;
      var Tmp12 = match_11150009;
      if (ConstSet117[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 311;
      Tmp12.mount = null;
      if (!((cfg_11140954.mount == null))) {
      var Tmp13 = match_11150009;
      if (ConstSet118[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 313;
      Tmp13.mount_source = cfg_11140954.mount;
      }
      else {
        L14: do {
          F.line = 315;
          var submatch_11150067 = null;
          F.line = 184;
          var i_11243342 = 0;
          F.line = 185;
          var l_11243343 = (cfg_11140954.cmatches != null ? cfg_11140954.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_11243342 < l_11243343)) break L16;
                F.line = 315;
                submatch_11150067 = cfg_11140954.cmatches[chckIndx(i_11243342, 0, (cfg_11140954.cmatches != null ? cfg_11140954.cmatches.length : 0)+0-1)-0];
                F.line = 316;
                var Tmp17 = match_11150009;
                if (ConstSet119[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_11150067.compile(matched_node_11141018)); } else { Tmp18 = [submatch_11150067.compile(matched_node_11141018)]; };
                F.line = 188;
                i_11243342 = addInt(i_11243342, 1);
                if (!(((cfg_11140954.cmatches != null ? cfg_11140954.cmatches.length : 0) == l_11243343))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 317;
    result_11141017 = match_11150009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11141017;

}
function as_interface_11140771(config_11140776) {
    function HEX3Aanonymous_11140783(node_11140785) {
      var result_11140790 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 493;
        result_11140790 = as_interface_11150571(compile_11140949(config_11140776, node_11140785));
      framePtr = F.prev;

      return result_11140790;

    }

  var result_11140778 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 492;
    result_11140778 = {compile: HEX3Aanonymous_11140783};
  framePtr = F.prev;

  return result_11140778;

}
function iter_11140295(c_11140301, selector_11140302, iter_11140304, actions_11140310) {
  var result_11140312 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 258;
    result_11140312 = {selector: nimCopy(null, selector_11140302, NTI112), refresh: [], init: [], mount: null, iter: true, iterate: iter_11140304, cmatches: [], convert: null};
    F.line = 266;
    if (c_11140301.cmatches != null) { c_11140301.cmatches.push(as_interface_11140771(result_11140312)); } else { c_11140301.cmatches = [as_interface_11140771(result_11140312)]; };
    if (!((actions_11140310 == null))) {
    F.line = 268;
    actions_11140310(result_11140312);
    }
    
  framePtr = F.prev;

  return result_11140312;

}
function seq_iterator_11051270(arr_11051274) {
    arr_11051274 = nimCopy(null, arr_11051274, NTI11051273);
    function next_11051280() {
      var result_11051285 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"svelteutil.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_11051274 != null ? arr_11051274.length : 0) <= it_11051278)) {
        F.line = 32;
        var colontmp__11243345 = false;
        F.line = 32;
        var colontmp__11243346 = empty_11051279;
        F.line = 32;
        nimCopy(result_11051285, {Field0: colontmp__11243345, Field1: colontmp__11243346}, NTI11051282);
        break BeforeRet;
        }
        
        F.line = 33;
        var colontmp__11243347 = true;
        F.line = 33;
        var colontmp__11243348 = arr_11051274[chckIndx(it_11051278, 0, (arr_11051274 != null ? arr_11051274.length : 0)+0-1)-0];
        F.line = 33;
        nimCopy(result_11051285, {Field0: colontmp__11243347, Field1: colontmp__11243348}, NTI11051282);
        F.line = 34;
        it_11051278 = addInt(it_11051278, 1);
      } while (false);
      framePtr = F.prev;

      return result_11051285;

    }

  var result_11051276 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 25;
    var it_11051278 = 0;
    F.line = 26;
    var empty_11051279 = null;
    F.line = 36;
    result_11051276 = next_11051280;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11051276;

}
function iter_children_11051253(c2_11051255) {
  var result_11051269 = null;

  var F={procname:"sample3.iterChildren",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_11051269 = seq_iterator_11051270(c2_11051255.children);
  framePtr = F.prev;

  return result_11051269;

}
function mount_11130926(c_11130931, comp_11130933) {
  var F={procname:"mount.mount",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    if (!(!((comp_11130933 == null)))) {
    F.line = 244;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nim-svelte/svelte.nim(244, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 245;
    c_11130931.mount = comp_11130933.clone();
  framePtr = F.prev;

  
}
function update_11110315(t_11110319, data_11110320, refresh_11110321) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 465;
      var match_11120214 = null;
      F.line = 184;
      var i_11243352 = 0;
      F.line = 185;
      var l_11243353 = (t_11110319.matches != null ? t_11110319.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11243352 < l_11243353)) break L3;
            F.line = 465;
            match_11120214 = t_11110319.matches[chckIndx(i_11243352, 0, (t_11110319.matches != null ? t_11110319.matches.length : 0)+0-1)-0];
            F.line = 466;
            match_11120214.update(data_11110320, refresh_11110321);
            F.line = 188;
            i_11243352 = addInt(i_11243352, 1);
            if (!(((t_11110319.matches != null ? t_11110319.matches.length : 0) == l_11243353))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function clone_11120348(comp_11120352) {
  var result_11120354 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 459;
    result_11120354 = compile_11120514(comp_11120352, comp_11120352.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11120354;

}
function late_11101243(late_comp_11101249) {
function resolve_comp_11101257() {
  var result_11101263 = null;

  var F={procname:"late.resolveComp",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((comp_11101256 == null)) {
    F.line = 528;
    var late_11101272 = late_comp_11101249();
    if (!((late_11101272 == null))) {
    F.line = 530;
    var fmt_res_11101281 = mnewString(0);
    F.line = 530;
    if (fmt_res_11101281 != null) { fmt_res_11101281 = (fmt_res_11101281).concat(makeNimstrLit("Late component not resolved in time")); } else { fmt_res_11101281 = makeNimstrLit("Late component not resolved in time"); };
    F.line = 530;
    raiseException({message: nimCopy(null, fmt_res_11101281, NTI112), parent: null, m_type: NTI9881019, name: null, trace: null, up: null}, "CompileLateError");
    }
    
    F.line = 531;
    comp_11101256 = late_11101272;
    }
    
    F.line = 532;
    result_11101263 = comp_11101256;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11101263;

}
    function HEX3Aanonymous_11110049() {
      var result_11110051 = null;

      var F={procname:"late.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 536;
        result_11110051 = resolve_comp_11101257().node;
      framePtr = F.prev;

      return result_11110051;

    }
    function HEX3Aanonymous_11110065(data_11110067, refresh_11110068) {
      var F={procname:"late.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 538;
        update_11110315(resolve_comp_11101257(), data_11110067, refresh_11110068);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11120272() {
        function HEX3Aanonymous_11120279() {
          var result_11120285 = null;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
          framePtr = F;
            F.line = 540;
            result_11120285 = clone_11120348(resolve_comp_11101257());
          framePtr = F.prev;

          return result_11120285;

        }

      var result_11120278 = null;

      var F={procname:"late.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 540;
        result_11120278 = late_11101243(HEX3Aanonymous_11120279);
      framePtr = F.prev;

      return result_11120278;

    }

  var result_11101251 = null;

  var F={procname:"late.late",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 524;
    var comp_11101256 = null;
    F.line = 534;
    result_11101251 = {node: HEX3Aanonymous_11110049, update: HEX3Aanonymous_11110065, clone: HEX3Aanonymous_11120272};
  framePtr = F.prev;

  return result_11101251;

}
function new_11242021() {
  var result_11242025 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11242201 = null;
    F.line = 851;
    r_11242201 = {m_type: NTI11051395, matches: null, node: null, original_node: null, cmatches: null, config: null};
    F.line = 852;
    result_11242025 = r_11242201;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11242025;

}
function compile_11200906(cfgs_11200911, node_11200912) {
  var result_11200915 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 320;
    result_11200915 = nimCopy(null, [], NTI11200930);
    L1: do {
      F.line = 321;
      var cfg_11200937 = null;
      F.line = 184;
      var i_11243358 = 0;
      F.line = 185;
      var l_11243359 = (cfgs_11200911 != null ? cfgs_11200911.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11243358 < l_11243359)) break L3;
            F.line = 321;
            cfg_11200937 = cfgs_11200911[chckIndx(i_11243358, 0, (cfgs_11200911 != null ? cfgs_11200911.length : 0)+0-1)-0];
            F.line = 322;
            if (result_11200915 != null) { result_11200915.push(cfg_11200937.compile(node_11200912)); } else { result_11200915 = [cfg_11200937.compile(node_11200912)]; };
            F.line = 188;
            i_11243358 = addInt(i_11243358, 1);
            if (!(((cfgs_11200911 != null ? cfgs_11200911.length : 0) == l_11243359))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11200915;

}
function compile_11242007(cfg_11242011, node_11242012) {
  var result_11242014 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 327;
    result_11242014 = new_11242021();
    F.line = 328;
    result_11242014.config = cfg_11242011.config;
    F.line = 329;
    result_11242014.original_node = node_11242012;
    F.line = 330;
    result_11242014.node = node_11242012.cloneNode(true);
    F.line = 332;
    result_11242014.config(result_11242014);
    F.line = 333;
    result_11242014.matches = nimCopy(null, compile_11200906(cfg_11242011.cmatches, result_11242014.node), NTI11200913);
  framePtr = F.prev;

  return result_11242014;

}
function new_11241623() {
  var result_11241627 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11241801 = null;
    F.line = 851;
    r_11241801 = {m_type: NTI11051399, cmatches: null, config: null};
    F.line = 852;
    result_11241627 = r_11241801;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11241627;

}
function create_11241608(config_11241614) {
  var result_11241616 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 173;
    result_11241616 = new_11241623();
    F.line = 174;
    result_11241616.config = config_11241614;
  framePtr = F.prev;

  return result_11241616;

}
function compile_11241540(node_11241545, configurator_11241551) {
  var result_11241553 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 453;
    result_11241553 = compile_11242007(create_11241608(configurator_11241551), node_11241545);
  framePtr = F.prev;

  return result_11241553;

}
function refresh_11230882(c_11230887, refresh_11230889) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 217;
    if (c_11230887.refresh != null) { c_11230887.refresh.push(refresh_11230889); } else { c_11230887.refresh = [refresh_11230889]; };
  framePtr = F.prev;

  
}
function create_iter_item_11200855(match_11200860, parent_node_11200861) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11200863 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 341;
    var comp_11200868 = null;
    F.line = 342;
    var node_11200869 = null;
      var Tmp1 = match_11200860;
      if (ConstSet124[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 344;
    var Tmp2 = match_11200860;
    if (ConstSet125[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11200868 = Tmp2.mount_template.clone();
    F.line = 345;
    node_11200869 = comp_11200868.node();
    }
    else {
      F.line = 347;
      node_11200869 = match_11200860.node.cloneNode(true);
    }
    
    F.line = 348;
    var Tmp3 = match_11200860;
    if (ConstSet126[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11200863 = {mount: comp_11200868, node: node_11200869, matches: compile_11200906(Tmp3.match_templates, node_11200869)};
    F.line = 352;
    var Tmp4 = match_11200860;
    if (ConstSet127[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11200861.insertBefore(node_11200869, Tmp4.anchor);
  framePtr = F.prev;

  return result_11200863;

}
function detach_11230473(iter_item_11230477, parent_node_11230478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 356;
    parent_node_11230478.removeChild(iter_item_11230477.node);
  framePtr = F.prev;

  
}
function pop_11230222(s_11230227, s_11230227_Idx) {
  var result_11230228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11230234 = subInt((s_11230227[s_11230227_Idx] != null ? s_11230227[s_11230227_Idx].length : 0), 1);
    F.line = 1784;
    result_11230228 = s_11230227[s_11230227_Idx][chckIndx(l_11230234, 0, (s_11230227[s_11230227_Idx] != null ? s_11230227[s_11230227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11230227[s_11230227_Idx] === null) s_11230227[s_11230227_Idx] = [];
               if (s_11230227[s_11230227_Idx].length < chckRange(l_11230234, 0, 2147483647)) { for (var i=s_11230227[s_11230227_Idx].length;i<chckRange(l_11230234, 0, 2147483647);++i) s_11230227[s_11230227_Idx].push(null); }
               else { s_11230227[s_11230227_Idx].length = chckRange(l_11230234, 0, 2147483647); };
  framePtr = F.prev;

  return result_11230228;

}
function update_11200813(match_11200818, val_11200819, refresh_11200820) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
          var Tmp29;
      var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp33;
      var Tmp37;
        var Tmp38;
      var Tmp39;
      var Tmp40;
        var Tmp42;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_11200820)) Tmp1 = false; else {        Tmp1 = (val_11200819 == match_11200818.oldValue);      }    if (Tmp1) {
    F.line = 361;
    break BeforeRet;
    }
    
    F.line = 363;
    match_11200818.oldValue = val_11200819;
    if (match_11200818.iter) {
    F.line = 365;
    var i_11200829 = 0;
    F.line = 366;
    var Tmp2 = match_11200818;
    if (ConstSet120[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11200831 = Tmp2.anchor.parentNode;
    F.line = 367;
    var Tmp3 = match_11200818;
    if (ConstSet121[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_11200833 = Tmp3.iterate(val_11200819);
    L4: do {
      F.line = 368;
        L5: while (true) {
        if (!true) break L5;
          F.line = 369;
          var it_11200834 = itf_11200833();
          if ((it_11200834["Field0"] == false)) {
          F.line = 370;
          break L4;
          }
          
          F.line = 371;
          var item_11200835 = it_11200834["Field1"];
          if ((10 < i_11200829)) {
          F.line = 374;
          break L4;
          }
          
          F.line = 376;
          var iter_item_11200840 = null;
          F.line = 377;
          var inited_11200841 = false;
            var Tmp6 = match_11200818;
            if (ConstSet122[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11200829 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 381;
          var Tmp8 = match_11200818;
          if (ConstSet123[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11200840 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_11200829, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 382;
          inited_11200841 = true;
          }
          else {
            F.line = 384;
            iter_item_11200840 = create_iter_item_11200855(match_11200818, parent_node_11200831);
            F.line = 385;
            var Tmp10 = match_11200818;
            if (ConstSet128[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_11200840); } else { Tmp11 = [iter_item_11200840]; };
            F.line = 386;
            inited_11200841 = false;
          }
          
          if (!(inited_11200841)) {
          L12: do {
            F.line = 390;
            var init_proc_11210214 = null;
            F.line = 184;
            var i_11243368 = 0;
            F.line = 185;
            var l_11243369 = (match_11200818.init != null ? match_11200818.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_11243368 < l_11243369)) break L14;
                  F.line = 390;
                  init_proc_11210214 = match_11200818.init[chckIndx(i_11243368, 0, (match_11200818.init != null ? match_11200818.init.length : 0)+0-1)-0];
                  F.line = 391;
                  init_proc_11210214(iter_item_11200840.node, item_11200835);
                  F.line = 188;
                  i_11243368 = addInt(i_11243368, 1);
                  if (!(((match_11200818.init != null ? match_11200818.init.length : 0) == l_11243369))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11200840.mount == null))) {
          F.line = 395;
          iter_item_11200840.mount.update(item_11200835, refresh_11200820);
          }
          
          L15: do {
            F.line = 398;
            var submatch_11220214 = null;
            F.line = 184;
            var i_11243373 = 0;
            F.line = 185;
            var l_11243374 = (iter_item_11200840.matches != null ? iter_item_11200840.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_11243373 < l_11243374)) break L17;
                  F.line = 398;
                  submatch_11220214 = iter_item_11200840.matches[chckIndx(i_11243373, 0, (iter_item_11200840.matches != null ? iter_item_11200840.matches.length : 0)+0-1)-0];
                  F.line = 399;
                  submatch_11220214.update(item_11200835, refresh_11200820);
                  F.line = 188;
                  i_11243373 = addInt(i_11243373, 1);
                  if (!(((iter_item_11200840.matches != null ? iter_item_11200840.matches.length : 0) == l_11243374))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 402;
            var refresh_proc_11230214 = null;
            F.line = 184;
            var i_11243378 = 0;
            F.line = 185;
            var l_11243379 = (match_11200818.refresh != null ? match_11200818.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_11243378 < l_11243379)) break L20;
                  F.line = 402;
                  refresh_proc_11230214 = match_11200818.refresh[chckIndx(i_11243378, 0, (match_11200818.refresh != null ? match_11200818.refresh.length : 0)+0-1)-0];
                  F.line = 403;
                  refresh_proc_11230214(iter_item_11200840.node, item_11200835);
                  F.line = 188;
                  i_11243378 = addInt(i_11243378, 1);
                  if (!(((match_11200818.refresh != null ? match_11200818.refresh.length : 0) == l_11243379))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 405;
          i_11200829 = addInt(i_11200829, 1);
        }
    } while(false);
    L21: do {
      F.line = 408;
        L22: while (true) {
          var Tmp23 = match_11200818;
          if (ConstSet129[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11200829 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 409;
          var Tmp25 = match_11200818;
          if (ConstSet130[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11230473(pop_11230222(Tmp25, "items"), parent_node_11200831);
        }
    } while(false);
    }
    else {
      F.line = 411;
      var node_11230492 = match_11200818.node;
      F.line = 412;
      var Tmp26 = match_11200818;
      if (ConstSet131[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_11230494 = Tmp26.convert(val_11200819);
        var Tmp28 = match_11200818;
        if (ConstSet132[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp28.mount == null)) Tmp27 = false; else {          var Tmp29 = match_11200818;
          if (ConstSet133[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp27 = !((Tmp29.mount_source == null));        }      if (Tmp27) {
      var Tmp30 = match_11200818;
      if (ConstSet134[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 416;
      var Tmp31 = match_11200818;
      if (ConstSet135[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp30.mount = Tmp31.mount_source.clone();
      F.line = 417;
      var Tmp32 = match_11200818;
      if (ConstSet136[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11230492.parentNode.replaceChild(Tmp32.mount.node(), node_11230492);
      }
      
        var Tmp33 = match_11200818;
        if (ConstSet137[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp33.inited)) {
      L34: do {
        F.line = 421;
        var init_proc_11230523 = null;
        F.line = 184;
        var i_11243383 = 0;
        F.line = 185;
        var l_11243384 = (match_11200818.init != null ? match_11200818.init.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_11243383 < l_11243384)) break L36;
              F.line = 421;
              init_proc_11230523 = match_11200818.init[chckIndx(i_11243383, 0, (match_11200818.init != null ? match_11200818.init.length : 0)+0-1)-0];
              F.line = 422;
              init_proc_11230523(node_11230492, converted_val_11230494);
              F.line = 188;
              i_11243383 = addInt(i_11243383, 1);
              if (!(((match_11200818.init != null ? match_11200818.init.length : 0) == l_11243384))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp37 = match_11200818;
      if (ConstSet138[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 423;
      Tmp37.inited = true;
      }
      
        var Tmp38 = match_11200818;
        if (ConstSet139[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp38.mount == null))) {
      F.line = 427;
      var Tmp39 = match_11200818;
      if (ConstSet140[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11230492 = Tmp39.mount.node();
      F.line = 428;
      var Tmp40 = match_11200818;
      if (ConstSet141[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp40.mount.update(converted_val_11230494, refresh_11200820);
      }
      
      L41: do {
        F.line = 431;
        var submatch_11230543 = null;
        F.line = 182;
        var colontmp__11243387 = null;
        F.line = 431;
        var Tmp42 = match_11200818;
        if (ConstSet142[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11243387 = Tmp42.matches;
        F.line = 184;
        var i_11243388 = 0;
        F.line = 185;
        var l_11243389 = (colontmp__11243387 != null ? colontmp__11243387.length : 0);
        L43: do {
          F.line = 186;
            L44: while (true) {
            if (!(i_11243388 < l_11243389)) break L44;
              F.line = 431;
              submatch_11230543 = colontmp__11243387[chckIndx(i_11243388, 0, (colontmp__11243387 != null ? colontmp__11243387.length : 0)+0-1)-0];
              F.line = 432;
              submatch_11230543.update(converted_val_11230494, refresh_11200820);
              F.line = 188;
              i_11243388 = addInt(i_11243388, 1);
              if (!(((colontmp__11243387 != null ? colontmp__11243387.length : 0) == l_11243389))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L45: do {
        F.line = 435;
        var refresh_proc_11230550 = null;
        F.line = 184;
        var i_11243392 = 0;
        F.line = 185;
        var l_11243393 = (match_11200818.refresh != null ? match_11200818.refresh.length : 0);
        L46: do {
          F.line = 186;
            L47: while (true) {
            if (!(i_11243392 < l_11243393)) break L47;
              F.line = 435;
              refresh_proc_11230550 = match_11200818.refresh[chckIndx(i_11243392, 0, (match_11200818.refresh != null ? match_11200818.refresh.length : 0)+0-1)-0];
              F.line = 436;
              refresh_proc_11230550(node_11230492, converted_val_11230494);
              F.line = 188;
              i_11243392 = addInt(i_11243392, 1);
              if (!(((match_11200818.refresh != null ? match_11200818.refresh.length : 0) == l_11243393))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_11200793(match_11200798) {
    function HEX3Aanonymous_11200805(data_11200807, refresh_11200808) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 488;
        update_11200813(match_11200798, data_11200807, refresh_11200808);
      framePtr = F.prev;

      
    }

  var result_11200800 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 487;
    result_11200800 = {update: HEX3Aanonymous_11200805};
  framePtr = F.prev;

  return result_11200800;

}
function compile_11182512(cfg_11182517, node_11182518) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_11182580 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 289;
    var matched_node_11182581 = node_11182518.querySelector(toJSStr(cfg_11182517.selector));
    if ((matched_node_11182581 == null)) {
    F.line = 291;
    var selector_11182590 = nimCopy(null, cfg_11182517.selector, NTI112);
    F.line = 292;
    var fmt_res_11182591 = [mnewString(0)];
    F.line = 292;
    if (fmt_res_11182591[0] != null) { fmt_res_11182591[0] = (fmt_res_11182591[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11182591[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 292;
    format_value_9790080(fmt_res_11182591, 0, selector_11182590, []);
    F.line = 292;
    if (fmt_res_11182591[0] != null) { fmt_res_11182591[0] = (fmt_res_11182591[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11182591[0] = makeNimstrLit("\'"); };
    F.line = 292;
    raiseException({message: nimCopy(null, fmt_res_11182591[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 294;
    var match_11190009 = {refresh: nimCopy(null, cfg_11182517.refresh, NTI11181754), init: nimCopy(null, cfg_11182517.init, NTI11181763), iter: cfg_11182517.iter, node: matched_node_11182581, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 299;
    match_11190009.node = matched_node_11182581;
    if (match_11190009.iter) {
    var Tmp1 = match_11190009;
    if (ConstSet143[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 301;
    var Tmp2 = cfg_11182517;
    if (ConstSet144[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_11190009;
    if (ConstSet145[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 302;
    Tmp3.anchor = matched_node_11182581.ownerDocument.createComment(matched_node_11182581.outerHTML);
    var Tmp4 = match_11190009;
    if (ConstSet146[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 303;
    Tmp4.mount_template = cfg_11182517.mount;
    var Tmp5 = match_11190009;
    if (ConstSet147[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 304;
    Tmp5.match_templates = nimCopy(null, cfg_11182517.cmatches, NTI11181768);
    var Tmp6 = match_11190009;
    if (ConstSet148[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 305;
    Tmp6.items = nimCopy(null, [], NTI11190030);
    F.line = 306;
    var Tmp7 = match_11190009;
    if (ConstSet149[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11182581.parentNode.replaceChild(Tmp7.anchor, matched_node_11182581);
    }
    else {
      var Tmp8 = match_11190009;
      if (ConstSet150[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 308;
      var Tmp9 = cfg_11182517;
      if (ConstSet151[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_11190009;
      if (ConstSet152[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 309;
      Tmp10.matches = nimCopy(null, [], NTI11190049);
      var Tmp11 = match_11190009;
      if (ConstSet153[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 310;
      Tmp11.inited = false;
      var Tmp12 = match_11190009;
      if (ConstSet154[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 311;
      Tmp12.mount = null;
      if (!((cfg_11182517.mount == null))) {
      var Tmp13 = match_11190009;
      if (ConstSet155[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 313;
      Tmp13.mount_source = cfg_11182517.mount;
      }
      else {
        L14: do {
          F.line = 315;
          var submatch_11200214 = null;
          F.line = 184;
          var i_11243399 = 0;
          F.line = 185;
          var l_11243400 = (cfg_11182517.cmatches != null ? cfg_11182517.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_11243399 < l_11243400)) break L16;
                F.line = 315;
                submatch_11200214 = cfg_11182517.cmatches[chckIndx(i_11243399, 0, (cfg_11182517.cmatches != null ? cfg_11182517.cmatches.length : 0)+0-1)-0];
                F.line = 316;
                var Tmp17 = match_11190009;
                if (ConstSet156[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_11200214.compile(matched_node_11182581)); } else { Tmp18 = [submatch_11200214.compile(matched_node_11182581)]; };
                F.line = 188;
                i_11243399 = addInt(i_11243399, 1);
                if (!(((cfg_11182517.cmatches != null ? cfg_11182517.cmatches.length : 0) == l_11243400))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 317;
    result_11182580 = match_11190009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11182580;

}
function as_interface_11182334(config_11182339) {
    function HEX3Aanonymous_11182346(node_11182348) {
      var result_11182353 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 493;
        result_11182353 = as_interface_11200793(compile_11182512(config_11182339, node_11182348));
      framePtr = F.prev;

      return result_11182353;

    }

  var result_11182341 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 492;
    result_11182341 = {compile: HEX3Aanonymous_11182346};
  framePtr = F.prev;

  return result_11182341;

}
function match_11181874(c_11181879, selector_11181880, convert_11181882, actions_11181888) {
  var result_11181890 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 194;
    result_11181890 = {selector: nimCopy(null, selector_11181880, NTI112), refresh: [], init: [], mount: null, iter: false, convert: convert_11181882, cmatches: null, iterate: null};
    F.line = 201;
    if (c_11181879.cmatches != null) { c_11181879.cmatches.push(as_interface_11182334(result_11181890)); } else { c_11181879.cmatches = [as_interface_11182334(result_11181890)]; };
    if (!((actions_11181888 == null))) {
    F.line = 203;
    actions_11181888(result_11181890);
    }
    
  framePtr = F.prev;

  return result_11181890;

}
function id_11181837(data_11181840) {
  var result_11181841 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_11181841 = data_11181840;
  framePtr = F.prev;

  return result_11181841;

}
function match_11181817(c_11181821, selector_11181822, actions_11181828) {
  var result_11181830 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_11181830 = match_11181874(c_11181821, selector_11181822, id_11181837, actions_11181828);
  framePtr = F.prev;

  return result_11181830;

}
function as_interface_11240552(comp_11240557, convert_11240559) {
    function HEX3Aanonymous_11240566() {
      var result_11240568 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 510;
        result_11240568 = comp_11240557.node;
      framePtr = F.prev;

      return result_11240568;

    }
    function HEX3Aanonymous_11240582(data_11240584, refresh_11240585) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 512;
        update_11110315(comp_11240557, convert_11240559(data_11240584), refresh_11240585);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11240852() {
      var result_11240858 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 514;
        result_11240858 = as_interface_11240552(clone_11120348(comp_11240557), convert_11240559);
      framePtr = F.prev;

      return result_11240858;

    }

  var result_11240561 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 508;
    result_11240561 = {node: HEX3Aanonymous_11240566, update: HEX3Aanonymous_11240582, clone: HEX3Aanonymous_11240852};
  framePtr = F.prev;

  return result_11240561;

}
function mount_11231696(c_11231702, comp_11231704, convert_11231706) {
  var F={procname:"mount.mount",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    if (!(!((comp_11231704 == null)))) {
    F.line = 251;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nim-svelte/svelte.nim(251, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 252;
    c_11231702.mount = as_interface_11240552(clone_11120348(comp_11231704), convert_11231706);
  framePtr = F.prev;

  
}
function to_comp2_11051472(d_11051474) {
  var result_11051475 = null;

  var F={procname:"sample3.toComp2",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_11051475 = d_11051474.comp2;
  framePtr = F.prev;

  return result_11051475;

}
function update_11242919(t_11242923, data_11242924, refresh_11242925) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    L1: do {
      F.line = 465;
      var match_11242932 = null;
      F.line = 184;
      var i_11243404 = 0;
      F.line = 185;
      var l_11243405 = (t_11242923.matches != null ? t_11242923.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11243404 < l_11243405)) break L3;
            F.line = 465;
            match_11242932 = t_11242923.matches[chckIndx(i_11243404, 0, (t_11242923.matches != null ? t_11242923.matches.length : 0)+0-1)-0];
            F.line = 466;
            match_11242932.update(data_11242924, refresh_11242925);
            F.line = 188;
            i_11243404 = addInt(i_11243404, 1);
            if (!(((t_11242923.matches != null ? t_11242923.matches.length : 0) == l_11243405))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function attach_11242665(t_11242669, target_11242670, anchor_11242671, data_11242672) {
  var F={procname:"attach.attach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 472;
    update_11242919(t_11242669, data_11242672, true);
    F.line = 473;
    target_11242670.insertBefore(t_11242669.node, anchor_11242671);
  framePtr = F.prev;

  
}
function clone_11242339(comp_11242343) {
  var result_11242345 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 459;
    result_11242345 = compile_11242007(comp_11242343, comp_11242343.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11242345;

}
function HEX3Aanonymous_11051490(t_11051497) {
    function HEX3Aanonymous_11051675(name_11051762) {
        function HEX3Aanonymous_11100833(node_11100836, data_11100837) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
          framePtr = F;
            F.line = 32;
            node_11100836.textContent = toJSStr(data_11100837.name);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_11100993(child_11101058) {
            function HEX3Aanonymous_11101158() {
              var result_11101164 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
              framePtr = F;
                F.line = 34;
                result_11101164 = comp2_11051095[0];
              framePtr = F.prev;

              return result_11101164;

            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
          framePtr = F;
            F.line = 34;
            mount_11130926(child_11101058, late_11101243(HEX3Aanonymous_11101158));
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 31;
        refresh_11100852(match_11052124(name_11051762, makeNimstrLit(".name"), null), HEX3Aanonymous_11100833);
        iter_11140295(name_11051762, makeNimstrLit(".child"), iter_children_11051253, HEX3Aanonymous_11100993);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    iter_11170757(t_11051497, makeNimstrLit("ul li"), iter_names_11051124, HEX3Aanonymous_11051675);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_11181413(t_11181420) {
    function HEX3Aanonymous_11230863(node_11230866, data_11230867) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 38;
        node_11230866.textContent = toJSStr(data_11230867.name);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11231166(t_11231236) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 40;
        mount_11231696(t_11231236, comp2_11051095[0], to_comp2_11051472);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 37;
    refresh_11230882(match_11181817(t_11181420, makeNimstrLit("h1 .name"), null), HEX3Aanonymous_11230863);
    match_11181817(t_11181420, makeNimstrLit("div.insert"), HEX3Aanonymous_11231166);
  framePtr = F.prev;

  
}
comp2_11051095[0] = compile_11181036(document.querySelector("template#comp2").content, HEX3Aanonymous_11051490);
comp1_11051443[0] = compile_11241540(document.querySelector("template#comp1").content, HEX3Aanonymous_11181413);
if (true) {
attach_11242665(clone_11242339(comp1_11051443[0]), document.body, null, {name: makeNimstrLit("Hello comp1"), comp2: {names: [{name: makeNimstrLit("brian"), children: [{names: [{name: makeNimstrLit("arthur"), children: []}]}]}, {name: makeNimstrLit("zoe"), children: []}, {name: makeNimstrLit("ashley"), children: []}]}});
}

