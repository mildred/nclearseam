/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11185062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11177278 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177271 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177265 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11177264 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11179887 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11179881 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11179880 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11185035 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11177260 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11177338 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177322 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177318 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11177250 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177254 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11195926 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11177303 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177296 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177290 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11177286 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11196061 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11196078 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051430 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051421 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051405 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051404 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051426 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051400 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051385 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051384 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051415 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051410 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051409 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051440 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051396 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9881019 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051283 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051274 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11155062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11106300 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106293 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106287 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106283 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11106275 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106262 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11106261 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11146942 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11146936 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11146935 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11155035 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11106257 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11106247 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106251 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11155757 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11106322 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106230 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11106315 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11065062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11065035 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11052777 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11052829 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11052821 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11052817 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11052771 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11076053 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11052802 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11052795 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11052789 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11052785 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051154 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051145 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11175062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051876 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051869 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051863 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881033 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11051859 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051851 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051844 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881313 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051838 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051837 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11055092 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11055086 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11055085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11175035 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051828 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051812 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051811 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051833 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881259 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051801 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051805 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9881017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4180232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4435011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051822 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051817 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051816 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11076190 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11175690 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051898 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051784 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881045 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11051891 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11125649 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11125666 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051081 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051072 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051056 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051055 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051077 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051051 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11051033 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI11051031 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051028 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051036 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051030 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI9852537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI9852390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051066 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11051061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11051060 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11051091 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11051047 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI11051061 = {kind: 1, offset: "update", len: 0, typ: NTI11051066, name: "update", sons: null};
NTI11051061.node = NNI11051061;
NTI11051060.base = NTI11051061;
NTI11051091.base = NTI11051060;
NTI9852386.base = NTI9852033;
NTI9852388.base = NTI9852033;
NTI9852390.base = NTI9852033;
var NNI9852031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI9852031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI9852031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI9852031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI9852031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI9852031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI9852031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI9852031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI9852031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI9852031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI9852031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI9852031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI9852031, name: "NotationNode", len: 0, sons: null}}};
NTI9852031.node = NNI9852031;
var NNI9852029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9852029.node = NNI9852029;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI9852029.base = NTI6008;
NTI9852027.base = NTI9852029;
NTI9852537.base = NTI9852041;
var NNI9852083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI9852537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI9852083.node = NNI9852083;
NTI9852083.base = NTI9852043;
NTI9852081.base = NTI9852083;
var NNI9852079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI9852079.node = NNI9852079;
NTI9852079.base = NTI9852043;
NTI9852077.base = NTI9852079;
NTI9852443.base = NTI9852077;
NTI9852445.base = NTI9852077;
var NNI9852043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI9852027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI9852081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI9852443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI9852445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI9852043.node = NNI9852043;
NTI9852043.base = NTI9852035;
NTI9852041.base = NTI9852043;
var NNI9852075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852075.node = NNI9852075;
NTI9852075.base = NTI9852043;
NTI9852073.base = NTI9852075;
NTI9852423.base = NTI9852073;
NTI9852425.base = NTI9852081;
var NNI9852087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI9852087.node = NNI9852087;
NTI9852087.base = NTI9852043;
NTI9852085.base = NTI9852087;
NTI9852427.base = NTI9852085;
NTI9852429.base = NTI9852041;
var NNI9852071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI9852071.node = NNI9852071;
NTI9852071.base = NTI9852043;
NTI9852069.base = NTI9852071;
NTI9852431.base = NTI9852069;
var NNI9852067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852067.node = NNI9852067;
NTI9852067.base = NTI9852043;
NTI9852065.base = NTI9852067;
NTI9852433.base = NTI9852065;
var NNI9852039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI9852041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI9852041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI9852041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI9852423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI9852425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI9852427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI9852429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI9852431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI9852433, name: "links", sons: null}]};
NTI9852039.node = NNI9852039;
NTI9852039.base = NTI9852035;
NTI9852037.base = NTI9852039;
var NNI9852091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI9852091.node = NNI9852091;
NTI9852091.base = NTI6008;
NTI9852089.base = NTI9852091;
var NNI9852035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI9852386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI9852388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI9852390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI9852033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI9852033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI9852033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI9852031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI9852033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI9852033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI9852033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI9852037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI9852089, name: "style", sons: null}]};
NTI9852035.node = NNI9852035;
var NNI9852005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI9852180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI9852184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI9852188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI9852192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI9852196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI9852200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI9852204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI9852208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI9852212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI9852216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI9852220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI9852224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI9852228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI9852232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI9852236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI9852240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI9852244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI9852248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI9852252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI9852256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI9852260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI9852264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI9852268, name: "onloadend", sons: null}]};
NTI9852005.node = NNI9852005;
NTI9852005.base = NTI6008;
NTI9852035.base = NTI9852005;
NTI9852033.base = NTI9852035;
NTI11051033.base = NTI11051030;
var NNI11051031 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI11051033, name: "children", sons: null}]};
NTI11051031.node = NNI11051031;
NTI11051028.base = NTI11051031;
NTI11051037.base = NTI11051028;
var NNI11051036 = {kind: 1, offset: "names", len: 0, typ: NTI11051037, name: "names", sons: null};
NTI11051036.node = NNI11051036;
NTI11051030.base = NTI11051036;
var NNI11051047 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI11051091, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI9852033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI11051030, name: "data", sons: null}]};
NTI11051047.node = NNI11051047;
var NNI11051056 = {kind: 1, offset: "compile", len: 0, typ: NTI11051072, name: "compile", sons: null};
NTI11051056.node = NNI11051056;
NTI11051055.base = NTI11051056;
NTI11051077.base = NTI11051055;
var NNI11051051 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI11051077, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI11051081, name: "config", sons: null}]};
NTI11051051.node = NNI11051051;
NTI11051051.base = NTI6008;
NTI11051047.base = NTI11051051;
NTI11125666.base = NTI11051060;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6249.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
NTI6241.base = NTI6219;
NTI11125649.base = NTI11051060;
var NNI9881045 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI9881045, name: "SimpleIterator", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI9881045, name: "SerialIterator", len: 0, sons: null}}};
NTI9881045.node = NNI9881045;
var NNI11051891 = {kind: 3, offset: "kind", len: 2, typ: NTI9881045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11051784, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11051898, name: "serial", sons: null}]]};
NTI11051891.node = NNI11051891;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI11175690 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051028, name: "Field1", sons: null}]};
NTI11175690.node = NNI11175690;
var NNI11051817 = {kind: 1, offset: "update", len: 0, typ: NTI11051822, name: "update", sons: null};
NTI11051817.node = NNI11051817;
NTI11051816.base = NTI11051817;
NTI11076190.base = NTI11051816;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4435011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4180232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4435011.node = NNI4435011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI9881017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881017.node = NNI9881017;
var NNI9881015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881015.node = NNI9881015;
NTI9881015.base = NTI6221;
NTI9881017.base = NTI9881015;
NTI11051805.base = NTI11051801;
NTI9881259.base = NTI9881408;
var NNI11051812 = {kind: 1, offset: "compile", len: 0, typ: NTI11051828, name: "compile", sons: null};
NTI11051812.node = NNI11051812;
NTI11051811.base = NTI11051812;
NTI11051833.base = NTI11051811;
NTI11055092.base = NTI11051816;
var NNI11051838 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881313, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11051844, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11051851, name: "clone", sons: null}]};
NTI11051838.node = NNI11051838;
NTI11051837.base = NTI11051838;
var NNI11055086 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11055092, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11051837, name: "mount", sons: null}]};
NTI11055086.node = NNI11055086;
NTI11055085.base = NTI11055086;
NTI11175035.base = NTI11055085;
var NNI9881033 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI9881033, name: "SimpleTypeSelector", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI9881033, name: "SerialTypeSelector", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI9881033, name: "CompareTypeSelector", len: 0, sons: null}}};
NTI9881033.node = NNI9881033;
var NNI11051859 = {kind: 3, offset: "kind", len: 3, typ: NTI9881033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11051863, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11051869, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11051876, name: "compare", sons: null}]]};
NTI11051859.node = NNI11051859;
NTI11175062.base = NTI11051816;
NTI11051145.base = NTI11051028;
var NNI11051154 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051028, name: "Field1", sons: null}]};
NTI11051154.node = NNI11051154;
var NNI11052785 = {kind: 3, offset: "kind", len: 3, typ: NTI9881033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11052789, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11052795, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11052802, name: "compare", sons: null}]]};
NTI11052785.node = NNI11052785;
var NNI11076053 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051028, name: "Field1", sons: null}]};
NTI11076053.node = NNI11076053;
NTI11052771.base = NTI11051801;
var NNI11052817 = {kind: 3, offset: "kind", len: 2, typ: NTI9881045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11052821, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11052829, name: "serial", sons: null}]]};
NTI11052817.node = NNI11052817;
NTI11052777.base = NTI11051811;
NTI11065035.base = NTI11055085;
NTI11065062.base = NTI11051816;
var NNI11106315 = {kind: 3, offset: "kind", len: 2, typ: NTI9881045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11106230, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11106322, name: "serial", sons: null}]]};
NTI11106315.node = NNI11106315;
var NNI11155757 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051030, name: "Field1", sons: null}]};
NTI11155757.node = NNI11155757;
NTI11106251.base = NTI11106247;
NTI11106257.base = NTI11051055;
NTI11146942.base = NTI11051060;
var NNI11106262 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881313, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11106268, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11106275, name: "clone", sons: null}]};
NTI11106262.node = NNI11106262;
NTI11106261.base = NTI11106262;
var NNI11146936 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11146942, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11106261, name: "mount", sons: null}]};
NTI11146936.node = NNI11146936;
NTI11146935.base = NTI11146936;
NTI11155035.base = NTI11146935;
var NNI11106283 = {kind: 3, offset: "kind", len: 3, typ: NTI9881033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11106287, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11106293, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11106300, name: "compare", sons: null}]]};
NTI11106283.node = NNI11106283;
NTI11155062.base = NTI11051060;
NTI11051274.base = NTI11051030;
var NNI11051283 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051030, name: "Field1", sons: null}]};
NTI11051283.node = NNI11051283;
var NNI9881019 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881019.node = NNI9881019;
NTI9881019.base = NTI9881015;
var NNI11051410 = {kind: 1, offset: "update", len: 0, typ: NTI11051415, name: "update", sons: null};
NTI11051410.node = NNI11051410;
NTI11051409.base = NTI11051410;
NTI11051440.base = NTI11051409;
var NNI11051385 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI112, name: "name", sons: null}, 
{kind: 1, offset: "comp2", len: 0, typ: NTI11051030, name: "comp2", sons: null}]};
NTI11051385.node = NNI11051385;
NTI11051384.base = NTI11051385;
var NNI11051396 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI11051440, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI9852033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI11051384, name: "data", sons: null}]};
NTI11051396.node = NNI11051396;
var NNI11051405 = {kind: 1, offset: "compile", len: 0, typ: NTI11051421, name: "compile", sons: null};
NTI11051405.node = NNI11051405;
NTI11051404.base = NTI11051405;
NTI11051426.base = NTI11051404;
var NNI11051400 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI11051426, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI11051430, name: "config", sons: null}]};
NTI11051400.node = NNI11051400;
NTI11051400.base = NTI6008;
NTI11051396.base = NTI11051400;
NTI11196078.base = NTI11051409;
NTI11196061.base = NTI11051409;
var NNI11177286 = {kind: 3, offset: "kind", len: 3, typ: NTI9881033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11177290, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11177296, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11177303, name: "compare", sons: null}]]};
NTI11177286.node = NNI11177286;
var NNI11195926 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11051384, name: "Field1", sons: null}]};
NTI11195926.node = NNI11195926;
NTI11177254.base = NTI11177250;
var NNI11177318 = {kind: 3, offset: "kind", len: 2, typ: NTI9881045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11177322, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11177338, name: "serial", sons: null}]]};
NTI11177318.node = NNI11177318;
NTI11177260.base = NTI11051404;
NTI11179887.base = NTI11051409;
var NNI11177265 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881313, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11177271, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11177278, name: "clone", sons: null}]};
NTI11177265.node = NNI11177265;
NTI11177264.base = NTI11177265;
var NNI11179881 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11179887, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11177264, name: "mount", sons: null}]};
NTI11179881.node = NNI11179881;
NTI11179880.base = NTI11179881;
NTI11185035.base = NTI11179880;
NTI11185062.base = NTI11051409;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(true);
var ConstSet4 = setConstr(0);
var ConstSet5 = setConstr(true);
var ConstSet6 = setConstr(1);
var ConstSet7 = setConstr(true);
var ConstSet8 = setConstr(true);
var ConstSet9 = setConstr(true);
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(true);
var ConstSet14 = setConstr(true);
var ConstSet15 = setConstr(true);
var ConstSet16 = setConstr(true);
var ConstSet17 = setConstr(true);
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var ConstSet18 = setConstr(true);
var ConstSet19 = setConstr(false);
var ConstSet20 = setConstr(0);
var ConstSet21 = setConstr(false);
var ConstSet22 = setConstr(1);
var ConstSet23 = setConstr(1);
var ConstSet24 = setConstr(false);
var ConstSet25 = setConstr(1);
var ConstSet26 = setConstr(2);
var ConstSet27 = setConstr(false);
var ConstSet28 = setConstr(2);
var ConstSet29 = setConstr(2);
var ConstSet30 = setConstr(false);
var ConstSet31 = setConstr(false);
var ConstSet32 = setConstr(false);
var ConstSet33 = setConstr(false);
var ConstSet34 = setConstr(false);
var ConstSet35 = setConstr(false);
var ConstSet36 = setConstr(false);
var ConstSet37 = setConstr(false);
var ConstSet38 = setConstr(false);
var ConstSet39 = setConstr(false);
var ConstSet40 = setConstr(false);
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet41 = setConstr(60, 62, 94);
var ConstSet42 = setConstr(60, 62, 94);
var ConstSet43 = setConstr(45, 43, 32);
var ConstSet44 = setConstr([48, 57]);
var ConstSet45 = setConstr([48, 57]);
var ConstSet46 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet47 = setConstr([65, 90], [97, 122]);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(true);
var ConstSet50 = setConstr(true);
var ConstSet51 = setConstr(true);
var ConstSet52 = setConstr(true);
var ConstSet53 = setConstr(true);
var ConstSet54 = setConstr(true);
var ConstSet55 = setConstr(false);
var ConstSet56 = setConstr(false);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(1);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(false);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(false);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(true);
var ConstSet67 = setConstr(true);
var ConstSet68 = setConstr(0);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(1);
var ConstSet71 = setConstr(true);
var ConstSet72 = setConstr(true);
var ConstSet73 = setConstr(true);
var ConstSet74 = setConstr(true);
var ConstSet75 = setConstr(true);
var ConstSet76 = setConstr(true);
var ConstSet77 = setConstr(true);
var ConstSet78 = setConstr(true);
var ConstSet79 = setConstr(true);
var ConstSet80 = setConstr(true);
var ConstSet81 = setConstr(true);
var ConstSet82 = setConstr(true);
var ConstSet83 = setConstr(false);
var ConstSet84 = setConstr(0);
var ConstSet85 = setConstr(false);
var ConstSet86 = setConstr(1);
var ConstSet87 = setConstr(1);
var ConstSet88 = setConstr(false);
var ConstSet89 = setConstr(1);
var ConstSet90 = setConstr(2);
var ConstSet91 = setConstr(false);
var ConstSet92 = setConstr(2);
var ConstSet93 = setConstr(2);
var ConstSet94 = setConstr(false);
var ConstSet95 = setConstr(false);
var ConstSet96 = setConstr(false);
var ConstSet97 = setConstr(false);
var ConstSet98 = setConstr(false);
var ConstSet99 = setConstr(false);
var ConstSet100 = setConstr(false);
var ConstSet101 = setConstr(false);
var ConstSet102 = setConstr(false);
var ConstSet103 = setConstr(false);
var ConstSet104 = setConstr(false);
var ConstSet105 = setConstr(true);
var ConstSet106 = setConstr(true);
var ConstSet107 = setConstr(true);
var ConstSet108 = setConstr(true);
var ConstSet109 = setConstr(true);
var ConstSet110 = setConstr(true);
var ConstSet111 = setConstr(true);
var ConstSet112 = setConstr(false);
var ConstSet113 = setConstr(false);
var ConstSet114 = setConstr(false);
var ConstSet115 = setConstr(1);
var ConstSet116 = setConstr(false);
var ConstSet117 = setConstr(false);
var ConstSet118 = setConstr(false);
var ConstSet119 = setConstr(false);
var ConstSet120 = setConstr(false);
var ConstSet121 = setConstr(false);
var ConstSet122 = setConstr(false);
var ConstSet123 = setConstr(true);
var ConstSet124 = setConstr(true);
var ConstSet125 = setConstr(0);
var ConstSet126 = setConstr(true);
var ConstSet127 = setConstr(1);
var ConstSet128 = setConstr(true);
var ConstSet129 = setConstr(true);
var ConstSet130 = setConstr(true);
var ConstSet131 = setConstr(true);
var ConstSet132 = setConstr(true);
var ConstSet133 = setConstr(true);
var ConstSet134 = setConstr(true);
var ConstSet135 = setConstr(true);
var ConstSet136 = setConstr(true);
var ConstSet137 = setConstr(true);
var ConstSet138 = setConstr(true);
var ConstSet139 = setConstr(true);
var ConstSet140 = setConstr(false);
var ConstSet141 = setConstr(0);
var ConstSet142 = setConstr(false);
var ConstSet143 = setConstr(1);
var ConstSet144 = setConstr(1);
var ConstSet145 = setConstr(false);
var ConstSet146 = setConstr(1);
var ConstSet147 = setConstr(2);
var ConstSet148 = setConstr(false);
var ConstSet149 = setConstr(2);
var ConstSet150 = setConstr(2);
var ConstSet151 = setConstr(false);
var ConstSet152 = setConstr(false);
var ConstSet153 = setConstr(false);
var ConstSet154 = setConstr(false);
var ConstSet155 = setConstr(false);
var ConstSet156 = setConstr(false);
var ConstSet157 = setConstr(false);
var ConstSet158 = setConstr(false);
var ConstSet159 = setConstr(false);
var ConstSet160 = setConstr(false);
var ConstSet161 = setConstr(false);
var ConstSet162 = setConstr(true);
var ConstSet163 = setConstr(true);
var ConstSet164 = setConstr(true);
var ConstSet165 = setConstr(true);
var ConstSet166 = setConstr(true);
var ConstSet167 = setConstr(true);
var ConstSet168 = setConstr(true);
var ConstSet169 = setConstr(false);
var ConstSet170 = setConstr(false);
var ConstSet171 = setConstr(false);
var ConstSet172 = setConstr(1);
var ConstSet173 = setConstr(false);
var ConstSet174 = setConstr(false);
var ConstSet175 = setConstr(false);
var ConstSet176 = setConstr(false);
var ConstSet177 = setConstr(false);
var ConstSet178 = setConstr(false);
var ConstSet179 = setConstr(false);
var ConstSet180 = setConstr(true);
var ConstSet181 = setConstr(true);
var ConstSet182 = setConstr(0);
var ConstSet183 = setConstr(true);
var ConstSet184 = setConstr(1);
var ConstSet185 = setConstr(true);
var ConstSet186 = setConstr(true);
var ConstSet187 = setConstr(true);
var ConstSet188 = setConstr(true);
var ConstSet189 = setConstr(true);
var ConstSet190 = setConstr(true);
var ConstSet191 = setConstr(true);
var ConstSet192 = setConstr(true);
var ConstSet193 = setConstr(true);
var ConstSet194 = setConstr(true);
var ConstSet195 = setConstr(true);
var ConstSet196 = setConstr(true);
var ConstSet197 = setConstr(false);
var ConstSet198 = setConstr(0);
var ConstSet199 = setConstr(false);
var ConstSet200 = setConstr(1);
var ConstSet201 = setConstr(1);
var ConstSet202 = setConstr(false);
var ConstSet203 = setConstr(1);
var ConstSet204 = setConstr(2);
var ConstSet205 = setConstr(false);
var ConstSet206 = setConstr(2);
var ConstSet207 = setConstr(2);
var ConstSet208 = setConstr(false);
var ConstSet209 = setConstr(false);
var ConstSet210 = setConstr(false);
var ConstSet211 = setConstr(false);
var ConstSet212 = setConstr(false);
var ConstSet213 = setConstr(false);
var ConstSet214 = setConstr(false);
var ConstSet215 = setConstr(false);
var ConstSet216 = setConstr(false);
var ConstSet217 = setConstr(false);
var ConstSet218 = setConstr(false);
var ConstSet219 = setConstr(true);
var ConstSet220 = setConstr(true);
var ConstSet221 = setConstr(true);
var ConstSet222 = setConstr(true);
var ConstSet223 = setConstr(true);
var ConstSet224 = setConstr(true);
var ConstSet225 = setConstr(true);
var ConstSet226 = setConstr(false);
var ConstSet227 = setConstr(false);
var ConstSet228 = setConstr(false);
var ConstSet229 = setConstr(1);
var ConstSet230 = setConstr(false);
var ConstSet231 = setConstr(false);
var ConstSet232 = setConstr(false);
var ConstSet233 = setConstr(false);
var ConstSet234 = setConstr(false);
var ConstSet235 = setConstr(false);
var ConstSet236 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_9885031 = [0];
var comp2_11051096 = [null];
var comp1_11051445 = [null];
function new_11125570() {
  var result_11125574 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11125601 = null;
    F.line = 851;
    r_11125601 = {m_type: NTI11051047, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_11125574 = r_11125601;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11125574;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__11228835 = 0;
      colontmp__11228835 = (i_160051 - 1);
      var res_11228840 = colontmp__11228835;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11228840)) break L8;
            j_175236 = res_11228840;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_11228840 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function compile_11125642(cfgs_11125647, node_11125648) {
  var result_11125651 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 462;
    result_11125651 = nimCopy(null, [], NTI11125666);
    L1: do {
      F.line = 463;
      var cfg_11135214 = null;
      F.line = 184;
      var i_11228820 = 0;
      F.line = 185;
      var l_11228821 = (cfgs_11125647 != null ? cfgs_11125647.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11228820 < l_11228821)) break L3;
            F.line = 463;
            cfg_11135214 = cfgs_11125647[chckIndx(i_11228820, 0, (cfgs_11125647 != null ? cfgs_11125647.length : 0)+0-1)-0];
            F.line = 464;
            if (result_11125651 != null) { result_11125651.push(cfg_11135214.compile(node_11125648)); } else { result_11125651 = [cfg_11135214.compile(node_11125648)]; };
            F.line = 188;
            i_11228820 = addInt(i_11228820, 1);
            if (!(((cfgs_11125647 != null ? cfgs_11125647.length : 0) == l_11228821))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11125651;

}
function compile_11125556(cfg_11125560, node_11125561) {
  var result_11125563 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 469;
    result_11125563 = new_11125570();
    F.line = 470;
    result_11125563.config = cfg_11125560.config;
    F.line = 471;
    result_11125563.original_node = node_11125561;
    F.line = 472;
    result_11125563.node = node_11125561.cloneNode(true);
    F.line = 474;
    result_11125563.config(result_11125563);
    F.line = 475;
    result_11125563.matches = nimCopy(null, compile_11125642(result_11125563.cmatches, result_11125563.node), NTI11125649);
  framePtr = F.prev;

  return result_11125563;

}
function new_11176335() {
  var result_11176339 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11176401 = null;
    F.line = 851;
    r_11176401 = {m_type: NTI11051051, cmatches: null, config: null};
    F.line = 852;
    result_11176339 = r_11176401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11176339;

}
function create_11176320(config_11176326) {
  var result_11176328 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 228;
    result_11176328 = new_11176335();
    F.line = 229;
    result_11176328.config = config_11176326;
  framePtr = F.prev;

  return result_11176328;

}
function compile_11176251(node_11176256, configurator_11176262) {
  var result_11176264 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 622;
    result_11176264 = compile_11125556(create_11176320(configurator_11176262), node_11176256);
  framePtr = F.prev;

  return result_11176264;

}
function compile_11076166(cfgs_11076171, node_11076172) {
  var result_11076175 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 462;
    result_11076175 = nimCopy(null, [], NTI11076190);
    L1: do {
      F.line = 463;
      var cfg_11076197 = null;
      F.line = 184;
      var i_11228889 = 0;
      F.line = 185;
      var l_11228890 = (cfgs_11076171 != null ? cfgs_11076171.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11228889 < l_11228890)) break L3;
            F.line = 463;
            cfg_11076197 = cfgs_11076171[chckIndx(i_11228889, 0, (cfgs_11076171 != null ? cfgs_11076171.length : 0)+0-1)-0];
            F.line = 464;
            if (result_11076175 != null) { result_11076175.push(cfg_11076197.compile(node_11076172)); } else { result_11076175 = [cfg_11076197.compile(node_11076172)]; };
            F.line = 188;
            i_11228889 = addInt(i_11228889, 1);
            if (!(((cfgs_11076171 != null ? cfgs_11076171.length : 0) == l_11228890))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11076175;

}
function create_iter_item_11175749(match_11175754, parent_node_11175755) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11175757 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 483;
    var comp_11175762 = null;
    F.line = 484;
    var node_11175763 = null;
      var Tmp1 = match_11175754;
      if (ConstSet12[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 486;
    var Tmp2 = match_11175754;
    if (ConstSet13[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11175762 = Tmp2.mount_template.clone();
    F.line = 487;
    node_11175763 = comp_11175762.node();
    }
    else {
      F.line = 489;
      node_11175763 = match_11175754.node.cloneNode(true);
    }
    
    F.line = 490;
    var Tmp3 = match_11175754;
    if (ConstSet14[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11175757 = {serial: 0, mount: comp_11175762, node: node_11175763, matches: compile_11076166(Tmp3.match_templates, node_11175763)};
    F.line = 495;
    var Tmp4 = match_11175754;
    if (ConstSet15[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11175755.insertBefore(node_11175763, Tmp4.anchor);
  framePtr = F.prev;

  return result_11175757;

}
function detach_11105474(iter_item_11105478, parent_node_11105479) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 499;
    parent_node_11105479.removeChild(iter_item_11105478.node);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function pop_11105224(s_11105229, s_11105229_Idx) {
  var result_11105230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11105236 = subInt((s_11105229[s_11105229_Idx] != null ? s_11105229[s_11105229_Idx].length : 0), 1);
    F.line = 1784;
    result_11105230 = s_11105229[s_11105229_Idx][chckIndx(l_11105236, 0, (s_11105229[s_11105229_Idx] != null ? s_11105229[s_11105229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11105229[s_11105229_Idx] === null) s_11105229[s_11105229_Idx] = [];
               if (s_11105229[s_11105229_Idx].length < chckRange(l_11105236, 0, 2147483647)) { for (var i=s_11105229[s_11105229_Idx].length;i<chckRange(l_11105236, 0, 2147483647);++i) s_11105229[s_11105229_Idx].push(null); }
               else { s_11105229[s_11105229_Idx].length = chckRange(l_11105236, 0, 2147483647); };
  framePtr = F.prev;

  return result_11105230;

}
function update_11175662(match_11175667, val_11175668, refresh_11175669) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11175686(s_11175689, s_11175689_Idx) {
        var result_11175693 = {Field0: false, Field1: null};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 511;
          nimCopy(result_11175693, itf_simple_11175685(), NTI11175690);
        framePtr = F.prev;

        return result_11175693;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11175667.iter) {
    F.line = 504;
    var i_11175671 = 0;
    F.line = 505;
    var Tmp1 = match_11175667;
    if (ConstSet2[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11175674 = Tmp1.anchor.parentNode;
    F.line = 506;
    var itf_11175679 = null;
    F.line = 507;
    var Tmp2 = match_11175667;
    if (ConstSet3[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 509;
      var Tmp3 = match_11175667;
      if (ConstSet5[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet4[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11175685 = Tmp4.simple(val_11175668);
      F.line = 510;
      itf_11175679 = HEX3Aanonymous_11175686;
      break;
    case 1:
      F.line = 513;
      var Tmp5 = match_11175667;
      if (ConstSet7[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet6[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11175679 = Tmp6.serial(val_11175668);
      break;
    }
    L7: do {
      F.line = 515;
        L8: while (true) {
        if (!true) break L8;
          F.line = 516;
            var Tmp10 = match_11175667;
            if (ConstSet8[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11175671 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11175667;
          if (ConstSet9[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11175671, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11175723 = [Tmp9];
          F.line = 517;
          var changed_11175724 = refresh_11175669;
          F.line = 518;
          var it_11175726 = itf_11175679(serial_11175723, 0);
          if ((it_11175726["Field0"] == false)) {
          F.line = 519;
          break L7;
          }
          
          F.line = 520;
          var item_11175727 = it_11175726["Field1"];
          F.line = 522;
          var iter_item_11175732 = null;
          F.line = 523;
          var inited_11175733 = false;
            var Tmp14 = match_11175667;
            if (ConstSet10[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11175671 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 527;
          var Tmp16 = match_11175667;
          if (ConstSet11[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11175732 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11175671, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 528;
          inited_11175733 = true;
          F.line = 529;
          changed_11175724 = true;
          }
          else {
            F.line = 531;
            iter_item_11175732 = create_iter_item_11175749(match_11175667, parent_node_11175674);
            F.line = 532;
            var Tmp18 = match_11175667;
            if (ConstSet16[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11175732); } else { Tmp19 = [iter_item_11175732]; };
            F.line = 533;
            inited_11175733 = false;
            if (!((serial_11175723[0] == iter_item_11175732.serial))) {
            F.line = 535;
            changed_11175724 = true;
            }
            
          }
          
          if (!(inited_11175733)) {
          L20: do {
            F.line = 539;
            var init_proc_11175844 = null;
            F.line = 184;
            var i_11228858 = 0;
            F.line = 185;
            var l_11228859 = (match_11175667.init != null ? match_11175667.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11228858 < l_11228859)) break L22;
                  F.line = 539;
                  init_proc_11175844 = match_11175667.init[chckIndx(i_11228858, 0, (match_11175667.init != null ? match_11175667.init.length : 0)+0-1)-0];
                  F.line = 540;
                  init_proc_11175844(iter_item_11175732.node);
                  F.line = 188;
                  i_11228858 = addInt(i_11228858, 1);
                  if (!(((match_11175667.init != null ? match_11175667.init.length : 0) == l_11228859))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11175732.mount == null))) {
          F.line = 544;
          iter_item_11175732.mount.update(item_11175727, refresh_11175669);
          }
          
          L23: do {
            F.line = 547;
            var submatch_11175859 = null;
            F.line = 184;
            var i_11228863 = 0;
            F.line = 185;
            var l_11228864 = (iter_item_11175732.matches != null ? iter_item_11175732.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11228863 < l_11228864)) break L25;
                  F.line = 547;
                  submatch_11175859 = iter_item_11175732.matches[chckIndx(i_11228863, 0, (iter_item_11175732.matches != null ? iter_item_11175732.matches.length : 0)+0-1)-0];
                  F.line = 548;
                  submatch_11175859.update(item_11175727, refresh_11175669);
                  F.line = 188;
                  i_11228863 = addInt(i_11228863, 1);
                  if (!(((iter_item_11175732.matches != null ? iter_item_11175732.matches.length : 0) == l_11228864))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 551;
            var refresh_proc_11175866 = null;
            F.line = 184;
            var i_11228868 = 0;
            F.line = 185;
            var l_11228869 = (match_11175667.refresh != null ? match_11175667.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11228868 < l_11228869)) break L28;
                  F.line = 551;
                  refresh_proc_11175866 = match_11175667.refresh[chckIndx(i_11228868, 0, (match_11175667.refresh != null ? match_11175667.refresh.length : 0)+0-1)-0];
                  F.line = 552;
                  refresh_proc_11175866(iter_item_11175732.node, item_11175727);
                  F.line = 188;
                  i_11228868 = addInt(i_11228868, 1);
                  if (!(((match_11175667.refresh != null ? match_11175667.refresh.length : 0) == l_11228869))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 554;
          i_11175671 = addInt(i_11175671, 1);
        }
    } while(false);
    L29: do {
      F.line = 557;
        L30: while (true) {
          var Tmp31 = match_11175667;
          if (ConstSet17[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11175671 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 558;
          var Tmp33 = match_11175667;
          if (ConstSet18[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11105474(pop_11105224(Tmp33, "items"), parent_node_11175674);
        }
    } while(false);
    }
    else {
      F.line = 560;
      var changed_11175941 = refresh_11175669;
      F.line = 561;
      var node_11175942 = match_11175667.node;
      F.line = 562;
      var converted_val_11175943 = null;
      F.line = 564;
      var Tmp34 = match_11175667;
      if (ConstSet19[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 566;
        var Tmp35 = match_11175667;
        if (ConstSet21[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet20[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11175943 = Tmp36.simple(val_11175668);
        F.line = 567;
        changed_11175941 = true;
        break;
      case 1:
        F.line = 569;
        var Tmp37 = match_11175667;
        if (ConstSet22[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11175951 = [Tmp37.serial];
        F.line = 570;
        var Tmp38 = match_11175667;
        if (ConstSet24[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet23[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11175943 = Tmp39.serial(val_11175668, serial_11175951, 0);
          var Tmp40 = match_11175667;
          if (ConstSet25[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11175951[0] == Tmp40.serial))) {
        F.line = 572;
        changed_11175941 = true;
        }
        
        break;
      case 2:
        F.line = 574;
        var Tmp41 = match_11175667;
        if (ConstSet27[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet26[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11175667;
        if (ConstSet28[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11175963 = Tmp42.compare(val_11175668, Tmp43.value);
        F.line = 575;
        converted_val_11175943 = res_11175963.Field0;
        var Tmp44 = match_11175667;
        if (ConstSet29[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 576;
        Tmp44.value = res_11175963.Field0;
        if (res_11175963.Field1) {
        F.line = 578;
        changed_11175941 = true;
        }
        
        break;
      }
        var Tmp46 = match_11175667;
        if (ConstSet30[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11175667;
          if (ConstSet31[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11175667;
      if (ConstSet32[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 582;
      var Tmp49 = match_11175667;
      if (ConstSet33[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 583;
      var Tmp50 = match_11175667;
      if (ConstSet34[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11175942.parentNode.replaceChild(Tmp50.mount.node(), node_11175942);
      }
      
        var Tmp51 = match_11175667;
        if (ConstSet35[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 587;
        var init_proc_11176000 = null;
        F.line = 184;
        var i_11228873 = 0;
        F.line = 185;
        var l_11228874 = (match_11175667.init != null ? match_11175667.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11228873 < l_11228874)) break L54;
              F.line = 587;
              init_proc_11176000 = match_11175667.init[chckIndx(i_11228873, 0, (match_11175667.init != null ? match_11175667.init.length : 0)+0-1)-0];
              F.line = 588;
              init_proc_11176000(node_11175942);
              F.line = 188;
              i_11228873 = addInt(i_11228873, 1);
              if (!(((match_11175667.init != null ? match_11175667.init.length : 0) == l_11228874))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11175667;
      if (ConstSet36[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 589;
      Tmp55.inited = true;
      F.line = 590;
      changed_11175941 = true;
      }
      
        if (!changed_11175941) Tmp56 = false; else {          var Tmp57 = match_11175667;
          if (ConstSet37[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 594;
      var Tmp58 = match_11175667;
      if (ConstSet38[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11175942 = Tmp58.mount.node();
      F.line = 595;
      var Tmp59 = match_11175667;
      if (ConstSet39[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11175943, refresh_11175669);
      }
      
      if (changed_11175941) {
      L60: do {
        F.line = 599;
        var submatch_11176025 = null;
        F.line = 182;
        var colontmp__11228877 = null;
        F.line = 599;
        var Tmp61 = match_11175667;
        if (ConstSet40[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11228877 = Tmp61.matches;
        F.line = 184;
        var i_11228878 = 0;
        F.line = 185;
        var l_11228879 = (colontmp__11228877 != null ? colontmp__11228877.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11228878 < l_11228879)) break L63;
              F.line = 599;
              submatch_11176025 = colontmp__11228877[chckIndx(i_11228878, 0, (colontmp__11228877 != null ? colontmp__11228877.length : 0)+0-1)-0];
              F.line = 600;
              submatch_11176025.update(converted_val_11175943, refresh_11175669);
              F.line = 188;
              i_11228878 = addInt(i_11228878, 1);
              if (!(((colontmp__11228877 != null ? colontmp__11228877.length : 0) == l_11228879))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11175941) {
      L64: do {
        F.line = 604;
        var refresh_proc_11176032 = null;
        F.line = 184;
        var i_11228882 = 0;
        F.line = 185;
        var l_11228883 = (match_11175667.refresh != null ? match_11175667.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11228882 < l_11228883)) break L66;
              F.line = 604;
              refresh_proc_11176032 = match_11175667.refresh[chckIndx(i_11228882, 0, (match_11175667.refresh != null ? match_11175667.refresh.length : 0)+0-1)-0];
              F.line = 605;
              refresh_proc_11176032(node_11175942, converted_val_11175943);
              F.line = 188;
              i_11228882 = addInt(i_11228882, 1);
              if (!(((match_11175667.refresh != null ? match_11175667.refresh.length : 0) == l_11228883))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11175642(match_11175647) {
    function HEX3Aanonymous_11175654(data_11175656, refresh_11175657) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 657;
        update_11175662(match_11175647, data_11175656, refresh_11175657);
      framePtr = F.prev;

      
    }

  var result_11175649 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 656;
    result_11175649 = {update: HEX3Aanonymous_11175654};
  framePtr = F.prev;

  return result_11175649;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1025017(s_1025019, b_1025021, b_1025021_Idx, start_1025022) {
      var Tmp1;
          var Tmp4;

  var result_1025024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1025025 = start_1025022;
    if (((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1025025 = addInt(i_1025025, 1);
    }
    
      if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet45[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1025021[b_1025021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet46[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1035016 = subInt(s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0], 48);
          if ((b_1025021[b_1025021_Idx] <= divInt(subInt(2147483647, c_1035016), 10))) {
          F.line = 483;
          b_1025021[b_1025021_Idx] = addInt(mulInt(b_1025021[b_1025021_Idx], 10), c_1035016);
          }
          else {
            F.line = 485;
            b_1025021[b_1025021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1025025 = addInt(i_1025025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1025025 = addInt(i_1025025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1025024 = subInt(i_1025025, start_1025022);
    }
    
  framePtr = F.prev;

  return result_1025024;

}
function HEX5BHEX5D_4435068(s_4435072, x_4435074) {
  var result_4435075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4435201 = x_4435074.a;
    F.line = 2437;
    var l_4435401 = addInt(subInt(subInt((s_4435072 != null ? s_4435072.length : 0), x_4435074.b), a_4435201), 1);
    F.line = 2438;
    result_4435075 = nimCopy(null, mnewString(chckRange(l_4435401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4435409 = 0;
      F.line = 106;
      var i_11228913 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11228913 < l_4435401)) break L3;
            F.line = 2439;
            i_4435409 = i_11228913;
            F.line = 2439;
            result_4435075[chckIndx(i_4435409, 0, (result_4435075 != null ? result_4435075.length : 0)+0-1)-0] = s_4435072[chckIndx(addInt(i_4435409, a_4435201), 0, (s_4435072 != null ? s_4435072.length : 0)+0-1)-0];
            F.line = 109;
            i_11228913 = addInt(i_11228913, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4435075;

}
function HEX2EHEX2E_4435001(a_4435006, b_4435008) {
  var result_4435014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4435014, {a: a_4435006, b: b_4435008}, NTI4435011);
  framePtr = F.prev;

  return result_4435014;

}
function parse_standard_format_specifier_9745322(s_9745324, start_9745325, ignore_unknown_suffix_9745327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9745328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9745328.fill = 32;
    F.line = 380;
    result_9745328.align = 0;
    F.line = 381;
    result_9745328.sign = 45;
    F.line = 382;
    var i_9745331 = start_9745325;
    if (((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet41[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9745328.fill = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 385;
    result_9745328.align = s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 386;
    i_9745331 = addInt(i_9745331, 2);
    }
    else {
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet42[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9745328.align = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 389;
    i_9745331 = addInt(i_9745331, 1);
    }
    }
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet43[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9745328.sign = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 393;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9745328.alternateForm = true;
    F.line = 397;
    i_9745331 = addInt(i_9745331, 1);
    }
    
      if (!((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet44[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9745328.padWithZero = true;
    F.line = 401;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 403;
    var parsed_length_9765015 = parse_saturated_natural_1025017(s_9745324, result_9745328, "minimumWidth", i_9745331);
    F.line = 404;
    i_9745331 = addInt(i_9745331, parsed_length_9765015);
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9745331 = addInt(i_9745331, 1);
    F.line = 407;
    var parsed_length_b_9765029 = parse_saturated_natural_1025017(s_9745324, result_9745328, "precision", i_9745331);
    F.line = 408;
    i_9745331 = addInt(i_9745331, parsed_length_b_9765029);
    }
    else {
      F.line = 410;
      result_9745328.precision = -1;
    }
    
      if (!(i_9745331 < (s_9745324 != null ? s_9745324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet47[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9745328.typ = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 414;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 415;
    result_9745328.endPosition = i_9745331;
      if (!!((i_9745331 == (s_9745324 != null ? s_9745324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9745327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4435068(s_9745324, HEX2EHEX2E_4435001(i_9745331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9745328;

}
function nucruneLen(s_1106829) {
  var result_1106830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1106832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1106832 < (s_1106829 != null ? s_1106829.length : 0))) break L2;
          if ((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1106832 = addInt(i_1106832, 1);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1106832 = addInt(i_1106832, 2);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1106832 = addInt(i_1106832, 3);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1106832 = addInt(i_1106832, 4);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1106832 = addInt(i_1106832, 5);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1106832 = addInt(i_1106832, 6);
          }
          else {
            F.line = 49;
          i_1106832 = addInt(i_1106832, 1);
          }
          }}}}}
          F.line = 50;
          result_1106830 = addInt(result_1106830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1106830;

}
function rune_len_at_1106932(s_1106934, i_1106935) {
  var result_1106936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1106936 = 1;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1106936 = 2;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1106936 = 3;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1106936 = 4;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1106936 = 5;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1106936 = 6;
    }
    else {
      F.line = 68;
      result_1106936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1106936;

}
function rune_offset_1730244(s_1730246, pos_1730247, start_1730248) {
  var result_1730249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1730251 = 0;
    F.line = 320;
    var o_1730252 = start_1730248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1730251 < pos_1730247)) break L2;
          F.line = 322;
          o_1730252 = addInt(o_1730252, chckRange(rune_len_at_1106932(s_1730246, o_1730252), 0, 2147483647));
          if (((s_1730246 != null ? s_1730246.length : 0) <= o_1730252)) {
          F.line = 324;
          result_1730249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1730251 = addInt(i_1730251, 1);
        }
    } while(false);
    F.line = 326;
    result_1730249 = o_1730252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1730249;

}
function validate_utf8_1350229(s_1350231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1350232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1350234 = 0;
    F.line = 173;
    var l_1350235 = (s_1350231 != null ? s_1350231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1350234 < l_1350235)) break L2;
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1350234 = addInt(i_1350234, 1);
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1350232 = i_1350234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1350234, 1) < l_1350235)) Tmp3 = false; else {              Tmp3 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1350234 = addInt(i_1350234, 2);
          }
          else {
            F.line = 180;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1350234, 2) < l_1350235)) Tmp5 = false; else {              Tmp5 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1350234 = addInt(i_1350234, 3);
          }
          else {
            F.line = 184;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1350234, 3) < l_1350235)) Tmp8 = false; else {              Tmp8 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1350231[chckIndx(addInt(i_1350234, 3), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1350234 = addInt(i_1350234, 4);
          }
          else {
            F.line = 190;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1350232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1350232;

}
function nsuRepeatChar(c_9290048, count_9290049) {
  var result_9290050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9290050 = nimCopy(null, mnewString(count_9290049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9290059 = 0;
      F.line = 66;
      var colontmp__11228944 = 0;
      F.line = 1283;
      colontmp__11228944 = subInt(count_9290049, 1);
      F.line = 77;
      var res_11228945 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11228945 <= colontmp__11228944)) break L3;
            F.line = 1283;
            i_9290059 = res_11228945;
            F.line = 1283;
            result_9290050[chckIndx(i_9290059, 0, (result_9290050 != null ? result_9290050.length : 0)+0-1)-0] = c_9290048;
            F.line = 80;
            res_11228945 = addInt(res_11228945, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9290050;

}
function align_string_9745222(s_9745224, minimum_width_9745225, align_9745226, fill_9745227) {
      var Tmp1;

  var result_9745228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9745225 == 0)) {
    F.line = 282;
    result_9745228 = nimCopy(null, s_9745224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1350229(s_9745224) == -1)) {
      Tmp1 = nucruneLen(s_9745224);
      }
      else {
      Tmp1 = (s_9745224 != null ? s_9745224.length : 0);
      }
      
      var s_rune_len_9745229 = Tmp1;
      F.line = 285;
      var to_fill_9745230 = subInt(minimum_width_9745225, s_rune_len_9745229);
      if ((to_fill_9745230 <= 0)) {
      F.line = 287;
      result_9745228 = nimCopy(null, s_9745224, NTI112);
      }
      else {
      if (((align_9745226 == 60) || (align_9745226 == 0))) {
      F.line = 289;
      result_9745228 = nimCopy(null, (s_9745224 || []).concat(nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9745226 == 94)) {
      F.line = 291;
      var half_9745231 = divInt(to_fill_9745230, 2);
      F.line = 292;
      result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(half_9745231, 0, 2147483647)) || []).concat(s_9745224 || [],nsuRepeatChar(fill_9745227, chckRange(subInt(to_fill_9745230, half_9745231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []).concat(s_9745224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9745228;

}
function format_value_9790080(result_9790083, result_9790083_Idx, value_9790084, specifier_9790085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9790086 = parse_standard_format_specifier_9745322(specifier_9790085, 0, false);
    F.line = 503;
    var value_9790087 = nimCopy(null, value_9790084, NTI112);
    F.line = 504;
    switch (spec_9790086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9790086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9790086.precision == -1))) {
    if ((spec_9790086.precision < nucruneLen(value_9790087))) {
    F.line = 512;
    (value_9790087 == null ? value_9790087 = mnewString(chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9790087.length = chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9790083[result_9790083_Idx] != null) { result_9790083[result_9790083_Idx] = (result_9790083[result_9790083_Idx]).concat(align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill)); } else { result_9790083[result_9790083_Idx] = align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill).slice(); };
  framePtr = F.prev;

  
}
function compile_11167439(cfg_11167444, node_11167445) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
        var Tmp11;
      var Tmp12;
      var Tmp13;
      var Tmp14;
      var Tmp15;
      var Tmp16;
      var Tmp17;
                var Tmp21;
                var Tmp22;

  var result_11167493 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 425;
    var matched_node_11167494 = node_11167445.querySelector(toJSStr(cfg_11167444.selector));
    if ((matched_node_11167494 == null)) {
    F.line = 427;
    var selector_11167503 = nimCopy(null, cfg_11167444.selector, NTI112);
    F.line = 428;
    var fmt_res_11167504 = [mnewString(0)];
    F.line = 428;
    if (fmt_res_11167504[0] != null) { fmt_res_11167504[0] = (fmt_res_11167504[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11167504[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 428;
    format_value_9790080(fmt_res_11167504, 0, selector_11167503, []);
    F.line = 428;
    if (fmt_res_11167504[0] != null) { fmt_res_11167504[0] = (fmt_res_11167504[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11167504[0] = makeNimstrLit("\'"); };
    F.line = 428;
    raiseException({message: nimCopy(null, fmt_res_11167504[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 430;
    var match_11175009 = {refresh: nimCopy(null, cfg_11167444.refresh, NTI11051805), init: nimCopy(null, cfg_11167444.init, NTI9881259), iter: cfg_11167444.iter, node: matched_node_11167494, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 435;
    match_11175009.node = matched_node_11167494;
    if (match_11175009.iter) {
    var Tmp1 = match_11175009;
    if (ConstSet48[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 437;
    var Tmp2 = cfg_11167444;
    if (ConstSet49[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    nimCopy(Tmp1.iterate, Tmp2.iterate, NTI11051891);
    var Tmp3 = match_11175009;
    if (ConstSet50[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 438;
    Tmp3.anchor = matched_node_11167494.ownerDocument.createComment(matched_node_11167494.outerHTML);
    var Tmp4 = match_11175009;
    if (ConstSet51[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 439;
    Tmp4.mount_template = cfg_11167444.mount;
    var Tmp5 = match_11175009;
    if (ConstSet52[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 440;
    Tmp5.match_templates = nimCopy(null, cfg_11167444.cmatches, NTI11051833);
    var Tmp6 = match_11175009;
    if (ConstSet53[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 441;
    Tmp6.items = nimCopy(null, [], NTI11175035);
    F.line = 442;
    var Tmp7 = match_11175009;
    if (ConstSet54[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11167494.parentNode.replaceChild(Tmp7.anchor, matched_node_11167494);
    }
    else {
      var Tmp8 = match_11175009;
      if (ConstSet55[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 444;
      var Tmp9 = cfg_11167444;
      if (ConstSet56[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.selectorKind = Tmp9.convert.kind;
      F.line = 445;
      var Tmp10 = match_11175009;
      if (ConstSet57[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp10.selectorKind) {
      case 1:
        var Tmp11 = match_11175009;
        if (ConstSet58[Tmp11.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 447;
        Tmp11.serial = 0;
        break;
      default: 
        break;
      }
      var Tmp12 = match_11175009;
      if (ConstSet59[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 450;
      var Tmp13 = cfg_11167444;
      if (ConstSet60[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp12.convert, Tmp13.convert, NTI11051859);
      var Tmp14 = match_11175009;
      if (ConstSet61[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 451;
      Tmp14.matches = nimCopy(null, [], NTI11175062);
      var Tmp15 = match_11175009;
      if (ConstSet62[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 452;
      Tmp15.inited = false;
      var Tmp16 = match_11175009;
      if (ConstSet63[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 453;
      Tmp16.mount = null;
      if (!((cfg_11167444.mount == null))) {
      var Tmp17 = match_11175009;
      if (ConstSet64[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 455;
      Tmp17.mount_source = cfg_11167444.mount;
      }
      else {
        L18: do {
          F.line = 457;
          var submatch_11175083 = null;
          F.line = 184;
          var i_11228896 = 0;
          F.line = 185;
          var l_11228897 = (cfg_11167444.cmatches != null ? cfg_11167444.cmatches.length : 0);
          L19: do {
            F.line = 186;
              L20: while (true) {
              if (!(i_11228896 < l_11228897)) break L20;
                F.line = 457;
                submatch_11175083 = cfg_11167444.cmatches[chckIndx(i_11228896, 0, (cfg_11167444.cmatches != null ? cfg_11167444.cmatches.length : 0)+0-1)-0];
                F.line = 458;
                var Tmp21 = match_11175009;
                if (ConstSet65[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp22 = Tmp21.matches, Tmp22) != null) { Tmp22.push(submatch_11175083.compile(matched_node_11167494)); } else { Tmp22 = [submatch_11175083.compile(matched_node_11167494)]; };
                F.line = 188;
                i_11228896 = addInt(i_11228896, 1);
                if (!(((cfg_11167444.cmatches != null ? cfg_11167444.cmatches.length : 0) == l_11228897))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 459;
    result_11167493 = match_11175009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11167493;

}
function as_interface_11167224(config_11167229) {
    function HEX3Aanonymous_11167236(node_11167238) {
      var result_11167243 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 662;
        result_11167243 = as_interface_11175642(compile_11167439(config_11167229, node_11167238));
      framePtr = F.prev;

      return result_11167243;

    }

  var result_11167231 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 661;
    result_11167231 = {compile: HEX3Aanonymous_11167236};
  framePtr = F.prev;

  return result_11167231;

}
function iter_11166670(c_11166675, selector_11166676, iter_11166678, actions_11166684) {
  var result_11166686 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 390;
    result_11166686 = {selector: nimCopy(null, selector_11166676, NTI112), refresh: [], init: [], mount: null, iter: true, iterate: nimCopy(null, iter_11166678, NTI11051891), cmatches: [], convert: {kind: 0, simple: null, serial: null, compare: null}};
    F.line = 398;
    if (c_11166675.cmatches != null) { c_11166675.cmatches.push(as_interface_11167224(result_11166686)); } else { c_11166675.cmatches = [as_interface_11167224(result_11166686)]; };
    if (!((actions_11166684 == null))) {
    F.line = 400;
    actions_11166684(result_11166686);
    }
    
  framePtr = F.prev;

  return result_11166686;

}
function iter_11165997(c_11166002, selector_11166003, it_11166005, actions_11166011) {
  var result_11166013 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 410;
    result_11166013 = iter_11166670(c_11166002, selector_11166003, {kind: 0, simple: it_11166005, serial: null}, actions_11166011);
  framePtr = F.prev;

  return result_11166013;

}
function seq_iterator_11051142(arr_11051146) {
    arr_11051146 = nimCopy(null, arr_11051146, NTI11051145);
    function next_11051152() {
      var result_11051157 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_11051146 != null ? arr_11051146.length : 0) <= it_11051150)) {
        F.line = 57;
        var colontmp__11228950 = false;
        F.line = 57;
        var colontmp__11228951 = empty_11051151;
        F.line = 57;
        nimCopy(result_11051157, {Field0: colontmp__11228950, Field1: colontmp__11228951}, NTI11051154);
        break BeforeRet;
        }
        
        F.line = 58;
        var colontmp__11228952 = true;
        F.line = 58;
        var colontmp__11228953 = arr_11051146[chckIndx(it_11051150, 0, (arr_11051146 != null ? arr_11051146.length : 0)+0-1)-0];
        F.line = 58;
        nimCopy(result_11051157, {Field0: colontmp__11228952, Field1: colontmp__11228953}, NTI11051154);
        F.line = 59;
        it_11051150 = addInt(it_11051150, 1);
      } while (false);
      framePtr = F.prev;

      return result_11051157;

    }

  var result_11051148 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 50;
    var it_11051150 = 0;
    F.line = 51;
    var empty_11051151 = null;
    F.line = 61;
    result_11051148 = next_11051152;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11051148;

}
function iter_names_11051125(c2_11051127) {
  var result_11051141 = null;

  var F={procname:"sample3.iterNames",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 16;
    result_11051141 = seq_iterator_11051142(c2_11051127.names);
  framePtr = F.prev;

  return result_11051141;

}
function refresh_11105995(c_11106000, refresh_11106002) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 339;
    if (c_11106000.refresh != null) { c_11106000.refresh.push(refresh_11106002); } else { c_11106000.refresh = [refresh_11106002]; };
  framePtr = F.prev;

  
}
function create_iter_item_11076112(match_11076117, parent_node_11076118) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11076120 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 483;
    var comp_11076125 = null;
    F.line = 484;
    var node_11076126 = null;
      var Tmp1 = match_11076117;
      if (ConstSet76[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 486;
    var Tmp2 = match_11076117;
    if (ConstSet77[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11076125 = Tmp2.mount_template.clone();
    F.line = 487;
    node_11076126 = comp_11076125.node();
    }
    else {
      F.line = 489;
      node_11076126 = match_11076117.node.cloneNode(true);
    }
    
    F.line = 490;
    var Tmp3 = match_11076117;
    if (ConstSet78[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11076120 = {serial: 0, mount: comp_11076125, node: node_11076126, matches: compile_11076166(Tmp3.match_templates, node_11076126)};
    F.line = 495;
    var Tmp4 = match_11076117;
    if (ConstSet79[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11076118.insertBefore(node_11076126, Tmp4.anchor);
  framePtr = F.prev;

  return result_11076120;

}
function update_11076025(match_11076030, val_11076031, refresh_11076032) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11076049(s_11076052, s_11076052_Idx) {
        var result_11076056 = {Field0: false, Field1: null};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 511;
          nimCopy(result_11076056, itf_simple_11076048(), NTI11076053);
        framePtr = F.prev;

        return result_11076056;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11076030.iter) {
    F.line = 504;
    var i_11076034 = 0;
    F.line = 505;
    var Tmp1 = match_11076030;
    if (ConstSet66[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11076037 = Tmp1.anchor.parentNode;
    F.line = 506;
    var itf_11076042 = null;
    F.line = 507;
    var Tmp2 = match_11076030;
    if (ConstSet67[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 509;
      var Tmp3 = match_11076030;
      if (ConstSet69[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet68[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11076048 = Tmp4.simple(val_11076031);
      F.line = 510;
      itf_11076042 = HEX3Aanonymous_11076049;
      break;
    case 1:
      F.line = 513;
      var Tmp5 = match_11076030;
      if (ConstSet71[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet70[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11076042 = Tmp6.serial(val_11076031);
      break;
    }
    L7: do {
      F.line = 515;
        L8: while (true) {
        if (!true) break L8;
          F.line = 516;
            var Tmp10 = match_11076030;
            if (ConstSet72[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11076034 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11076030;
          if (ConstSet73[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11076034, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11076086 = [Tmp9];
          F.line = 517;
          var changed_11076087 = refresh_11076032;
          F.line = 518;
          var it_11076089 = itf_11076042(serial_11076086, 0);
          if ((it_11076089["Field0"] == false)) {
          F.line = 519;
          break L7;
          }
          
          F.line = 520;
          var item_11076090 = it_11076089["Field1"];
          F.line = 522;
          var iter_item_11076095 = null;
          F.line = 523;
          var inited_11076096 = false;
            var Tmp14 = match_11076030;
            if (ConstSet74[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11076034 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 527;
          var Tmp16 = match_11076030;
          if (ConstSet75[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11076095 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11076034, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 528;
          inited_11076096 = true;
          F.line = 529;
          changed_11076087 = true;
          }
          else {
            F.line = 531;
            iter_item_11076095 = create_iter_item_11076112(match_11076030, parent_node_11076037);
            F.line = 532;
            var Tmp18 = match_11076030;
            if (ConstSet80[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11076095); } else { Tmp19 = [iter_item_11076095]; };
            F.line = 533;
            inited_11076096 = false;
            if (!((serial_11076086[0] == iter_item_11076095.serial))) {
            F.line = 535;
            changed_11076087 = true;
            }
            
          }
          
          if (!(inited_11076096)) {
          L20: do {
            F.line = 539;
            var init_proc_11085214 = null;
            F.line = 184;
            var i_11228960 = 0;
            F.line = 185;
            var l_11228961 = (match_11076030.init != null ? match_11076030.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11228960 < l_11228961)) break L22;
                  F.line = 539;
                  init_proc_11085214 = match_11076030.init[chckIndx(i_11228960, 0, (match_11076030.init != null ? match_11076030.init.length : 0)+0-1)-0];
                  F.line = 540;
                  init_proc_11085214(iter_item_11076095.node);
                  F.line = 188;
                  i_11228960 = addInt(i_11228960, 1);
                  if (!(((match_11076030.init != null ? match_11076030.init.length : 0) == l_11228961))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11076095.mount == null))) {
          F.line = 544;
          iter_item_11076095.mount.update(item_11076090, refresh_11076032);
          }
          
          L23: do {
            F.line = 547;
            var submatch_11095214 = null;
            F.line = 184;
            var i_11228964 = 0;
            F.line = 185;
            var l_11228965 = (iter_item_11076095.matches != null ? iter_item_11076095.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11228964 < l_11228965)) break L25;
                  F.line = 547;
                  submatch_11095214 = iter_item_11076095.matches[chckIndx(i_11228964, 0, (iter_item_11076095.matches != null ? iter_item_11076095.matches.length : 0)+0-1)-0];
                  F.line = 548;
                  submatch_11095214.update(item_11076090, refresh_11076032);
                  F.line = 188;
                  i_11228964 = addInt(i_11228964, 1);
                  if (!(((iter_item_11076095.matches != null ? iter_item_11076095.matches.length : 0) == l_11228965))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 551;
            var refresh_proc_11105214 = null;
            F.line = 184;
            var i_11228968 = 0;
            F.line = 185;
            var l_11228969 = (match_11076030.refresh != null ? match_11076030.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11228968 < l_11228969)) break L28;
                  F.line = 551;
                  refresh_proc_11105214 = match_11076030.refresh[chckIndx(i_11228968, 0, (match_11076030.refresh != null ? match_11076030.refresh.length : 0)+0-1)-0];
                  F.line = 552;
                  refresh_proc_11105214(iter_item_11076095.node, item_11076090);
                  F.line = 188;
                  i_11228968 = addInt(i_11228968, 1);
                  if (!(((match_11076030.refresh != null ? match_11076030.refresh.length : 0) == l_11228969))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 554;
          i_11076034 = addInt(i_11076034, 1);
        }
    } while(false);
    L29: do {
      F.line = 557;
        L30: while (true) {
          var Tmp31 = match_11076030;
          if (ConstSet81[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11076034 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 558;
          var Tmp33 = match_11076030;
          if (ConstSet82[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11105474(pop_11105224(Tmp33, "items"), parent_node_11076037);
        }
    } while(false);
    }
    else {
      F.line = 560;
      var changed_11105493 = refresh_11076032;
      F.line = 561;
      var node_11105494 = match_11076030.node;
      F.line = 562;
      var converted_val_11105495 = null;
      F.line = 564;
      var Tmp34 = match_11076030;
      if (ConstSet83[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 566;
        var Tmp35 = match_11076030;
        if (ConstSet85[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet84[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11105495 = Tmp36.simple(val_11076031);
        F.line = 567;
        changed_11105493 = true;
        break;
      case 1:
        F.line = 569;
        var Tmp37 = match_11076030;
        if (ConstSet86[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11105503 = [Tmp37.serial];
        F.line = 570;
        var Tmp38 = match_11076030;
        if (ConstSet88[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet87[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11105495 = Tmp39.serial(val_11076031, serial_11105503, 0);
          var Tmp40 = match_11076030;
          if (ConstSet89[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11105503[0] == Tmp40.serial))) {
        F.line = 572;
        changed_11105493 = true;
        }
        
        break;
      case 2:
        F.line = 574;
        var Tmp41 = match_11076030;
        if (ConstSet91[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet90[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11076030;
        if (ConstSet92[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11105515 = Tmp42.compare(val_11076031, Tmp43.value);
        F.line = 575;
        converted_val_11105495 = res_11105515.Field0;
        var Tmp44 = match_11076030;
        if (ConstSet93[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 576;
        Tmp44.value = res_11105515.Field0;
        if (res_11105515.Field1) {
        F.line = 578;
        changed_11105493 = true;
        }
        
        break;
      }
        var Tmp46 = match_11076030;
        if (ConstSet94[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11076030;
          if (ConstSet95[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11076030;
      if (ConstSet96[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 582;
      var Tmp49 = match_11076030;
      if (ConstSet97[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 583;
      var Tmp50 = match_11076030;
      if (ConstSet98[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11105494.parentNode.replaceChild(Tmp50.mount.node(), node_11105494);
      }
      
        var Tmp51 = match_11076030;
        if (ConstSet99[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 587;
        var init_proc_11105552 = null;
        F.line = 184;
        var i_11228973 = 0;
        F.line = 185;
        var l_11228974 = (match_11076030.init != null ? match_11076030.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11228973 < l_11228974)) break L54;
              F.line = 587;
              init_proc_11105552 = match_11076030.init[chckIndx(i_11228973, 0, (match_11076030.init != null ? match_11076030.init.length : 0)+0-1)-0];
              F.line = 588;
              init_proc_11105552(node_11105494);
              F.line = 188;
              i_11228973 = addInt(i_11228973, 1);
              if (!(((match_11076030.init != null ? match_11076030.init.length : 0) == l_11228974))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11076030;
      if (ConstSet100[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 589;
      Tmp55.inited = true;
      F.line = 590;
      changed_11105493 = true;
      }
      
        if (!changed_11105493) Tmp56 = false; else {          var Tmp57 = match_11076030;
          if (ConstSet101[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 594;
      var Tmp58 = match_11076030;
      if (ConstSet102[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11105494 = Tmp58.mount.node();
      F.line = 595;
      var Tmp59 = match_11076030;
      if (ConstSet103[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11105495, refresh_11076032);
      }
      
      if (changed_11105493) {
      L60: do {
        F.line = 599;
        var submatch_11105577 = null;
        F.line = 182;
        var colontmp__11228977 = null;
        F.line = 599;
        var Tmp61 = match_11076030;
        if (ConstSet104[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11228977 = Tmp61.matches;
        F.line = 184;
        var i_11228978 = 0;
        F.line = 185;
        var l_11228979 = (colontmp__11228977 != null ? colontmp__11228977.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11228978 < l_11228979)) break L63;
              F.line = 599;
              submatch_11105577 = colontmp__11228977[chckIndx(i_11228978, 0, (colontmp__11228977 != null ? colontmp__11228977.length : 0)+0-1)-0];
              F.line = 600;
              submatch_11105577.update(converted_val_11105495, refresh_11076032);
              F.line = 188;
              i_11228978 = addInt(i_11228978, 1);
              if (!(((colontmp__11228977 != null ? colontmp__11228977.length : 0) == l_11228979))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11105493) {
      L64: do {
        F.line = 604;
        var refresh_proc_11105584 = null;
        F.line = 184;
        var i_11228982 = 0;
        F.line = 185;
        var l_11228983 = (match_11076030.refresh != null ? match_11076030.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11228982 < l_11228983)) break L66;
              F.line = 604;
              refresh_proc_11105584 = match_11076030.refresh[chckIndx(i_11228982, 0, (match_11076030.refresh != null ? match_11076030.refresh.length : 0)+0-1)-0];
              F.line = 605;
              refresh_proc_11105584(node_11105494, converted_val_11105495);
              F.line = 188;
              i_11228982 = addInt(i_11228982, 1);
              if (!(((match_11076030.refresh != null ? match_11076030.refresh.length : 0) == l_11228983))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11075968(match_11075973) {
    function HEX3Aanonymous_11075980(data_11075982, refresh_11075983) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 657;
        update_11076025(match_11075973, data_11075982, refresh_11075983);
      framePtr = F.prev;

      
    }

  var result_11075975 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 656;
    result_11075975 = {update: HEX3Aanonymous_11075980};
  framePtr = F.prev;

  return result_11075975;

}
function compile_11055034(cfg_11055039, node_11055040) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
        var Tmp11;
      var Tmp12;
      var Tmp13;
      var Tmp14;
      var Tmp15;
      var Tmp16;
      var Tmp17;
                var Tmp21;
                var Tmp22;

  var result_11055101 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 425;
    var matched_node_11055102 = node_11055040.querySelector(toJSStr(cfg_11055039.selector));
    if ((matched_node_11055102 == null)) {
    F.line = 427;
    var selector_11055111 = nimCopy(null, cfg_11055039.selector, NTI112);
    F.line = 428;
    var fmt_res_11055115 = [mnewString(0)];
    F.line = 428;
    if (fmt_res_11055115[0] != null) { fmt_res_11055115[0] = (fmt_res_11055115[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11055115[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 428;
    format_value_9790080(fmt_res_11055115, 0, selector_11055111, []);
    F.line = 428;
    if (fmt_res_11055115[0] != null) { fmt_res_11055115[0] = (fmt_res_11055115[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11055115[0] = makeNimstrLit("\'"); };
    F.line = 428;
    raiseException({message: nimCopy(null, fmt_res_11055115[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 430;
    var match_11065009 = {refresh: nimCopy(null, cfg_11055039.refresh, NTI11052771), init: nimCopy(null, cfg_11055039.init, NTI9881259), iter: cfg_11055039.iter, node: matched_node_11055102, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 435;
    match_11065009.node = matched_node_11055102;
    if (match_11065009.iter) {
    var Tmp1 = match_11065009;
    if (ConstSet105[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 437;
    var Tmp2 = cfg_11055039;
    if (ConstSet106[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    nimCopy(Tmp1.iterate, Tmp2.iterate, NTI11052817);
    var Tmp3 = match_11065009;
    if (ConstSet107[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 438;
    Tmp3.anchor = matched_node_11055102.ownerDocument.createComment(matched_node_11055102.outerHTML);
    var Tmp4 = match_11065009;
    if (ConstSet108[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 439;
    Tmp4.mount_template = cfg_11055039.mount;
    var Tmp5 = match_11065009;
    if (ConstSet109[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 440;
    Tmp5.match_templates = nimCopy(null, cfg_11055039.cmatches, NTI11052777);
    var Tmp6 = match_11065009;
    if (ConstSet110[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 441;
    Tmp6.items = nimCopy(null, [], NTI11065035);
    F.line = 442;
    var Tmp7 = match_11065009;
    if (ConstSet111[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11055102.parentNode.replaceChild(Tmp7.anchor, matched_node_11055102);
    }
    else {
      var Tmp8 = match_11065009;
      if (ConstSet112[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 444;
      var Tmp9 = cfg_11055039;
      if (ConstSet113[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.selectorKind = Tmp9.convert.kind;
      F.line = 445;
      var Tmp10 = match_11065009;
      if (ConstSet114[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp10.selectorKind) {
      case 1:
        var Tmp11 = match_11065009;
        if (ConstSet115[Tmp11.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 447;
        Tmp11.serial = 0;
        break;
      default: 
        break;
      }
      var Tmp12 = match_11065009;
      if (ConstSet116[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 450;
      var Tmp13 = cfg_11055039;
      if (ConstSet117[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp12.convert, Tmp13.convert, NTI11052785);
      var Tmp14 = match_11065009;
      if (ConstSet118[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 451;
      Tmp14.matches = nimCopy(null, [], NTI11065062);
      var Tmp15 = match_11065009;
      if (ConstSet119[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 452;
      Tmp15.inited = false;
      var Tmp16 = match_11065009;
      if (ConstSet120[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 453;
      Tmp16.mount = null;
      if (!((cfg_11055039.mount == null))) {
      var Tmp17 = match_11065009;
      if (ConstSet121[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 455;
      Tmp17.mount_source = cfg_11055039.mount;
      }
      else {
        L18: do {
          F.line = 457;
          var submatch_11075214 = null;
          F.line = 184;
          var i_11228989 = 0;
          F.line = 185;
          var l_11228990 = (cfg_11055039.cmatches != null ? cfg_11055039.cmatches.length : 0);
          L19: do {
            F.line = 186;
              L20: while (true) {
              if (!(i_11228989 < l_11228990)) break L20;
                F.line = 457;
                submatch_11075214 = cfg_11055039.cmatches[chckIndx(i_11228989, 0, (cfg_11055039.cmatches != null ? cfg_11055039.cmatches.length : 0)+0-1)-0];
                F.line = 458;
                var Tmp21 = match_11065009;
                if (ConstSet122[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp22 = Tmp21.matches, Tmp22) != null) { Tmp22.push(submatch_11075214.compile(matched_node_11055102)); } else { Tmp22 = [submatch_11075214.compile(matched_node_11055102)]; };
                F.line = 188;
                i_11228989 = addInt(i_11228989, 1);
                if (!(((cfg_11055039.cmatches != null ? cfg_11055039.cmatches.length : 0) == l_11228990))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 459;
    result_11055101 = match_11065009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11055101;

}
function as_interface_11054819(config_11054824) {
    function HEX3Aanonymous_11054831(node_11054833) {
      var result_11054838 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 662;
        result_11054838 = as_interface_11075968(compile_11055034(config_11054824, node_11054833));
      framePtr = F.prev;

      return result_11054838;

    }

  var result_11054826 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 661;
    result_11054826 = {compile: HEX3Aanonymous_11054831};
  framePtr = F.prev;

  return result_11054826;

}
function match_11054279(c_11054285, selector_11054286, convert_11054288, actions_11054294) {
  var result_11054296 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 236;
    result_11054296 = {selector: nimCopy(null, selector_11054286, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_11054288, NTI11052785), cmatches: null, iterate: {kind: 0, simple: null, serial: null}};
    F.line = 243;
    if (c_11054285.cmatches != null) { c_11054285.cmatches.push(as_interface_11054819(result_11054296)); } else { c_11054285.cmatches = [as_interface_11054819(result_11054296)]; };
    if (!((actions_11054294 == null))) {
    F.line = 245;
    actions_11054294(result_11054296);
    }
    
  framePtr = F.prev;

  return result_11054296;

}
function match_11053026(c_11053032, selector_11053033, convert_11053035, actions_11053041) {
  var result_11053043 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 267;
    var type_selector_11053051 = {kind: 0, simple: convert_11053035, serial: null, compare: null};
    F.line = 270;
    result_11053043 = match_11054279(c_11053032, selector_11053033, type_selector_11053051, actions_11053041);
  framePtr = F.prev;

  return result_11053043;

}
function id_11052994(data_11052997) {
  var result_11052998 = null;

  var F={procname:"id.id",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 199;
    result_11052998 = data_11052997;
  framePtr = F.prev;

  return result_11052998;

}
function match_11052973(c_11052978, selector_11052979, actions_11052985) {
  var result_11052987 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 328;
    result_11052987 = match_11053026(c_11052978, selector_11052979, id_11052994, actions_11052985);
  framePtr = F.prev;

  return result_11052987;

}
function create_iter_item_11155816(match_11155821, parent_node_11155822) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11155824 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 483;
    var comp_11155829 = null;
    F.line = 484;
    var node_11155830 = null;
      var Tmp1 = match_11155821;
      if (ConstSet133[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 486;
    var Tmp2 = match_11155821;
    if (ConstSet134[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11155829 = Tmp2.mount_template.clone();
    F.line = 487;
    node_11155830 = comp_11155829.node();
    }
    else {
      F.line = 489;
      node_11155830 = match_11155821.node.cloneNode(true);
    }
    
    F.line = 490;
    var Tmp3 = match_11155821;
    if (ConstSet135[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11155824 = {serial: 0, mount: comp_11155829, node: node_11155830, matches: compile_11125642(Tmp3.match_templates, node_11155830)};
    F.line = 495;
    var Tmp4 = match_11155821;
    if (ConstSet136[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11155822.insertBefore(node_11155830, Tmp4.anchor);
  framePtr = F.prev;

  return result_11155824;

}
function detach_11165474(iter_item_11165478, parent_node_11165479) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 499;
    parent_node_11165479.removeChild(iter_item_11165478.node);
  framePtr = F.prev;

  
}
function pop_11165224(s_11165229, s_11165229_Idx) {
  var result_11165230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11165236 = subInt((s_11165229[s_11165229_Idx] != null ? s_11165229[s_11165229_Idx].length : 0), 1);
    F.line = 1784;
    result_11165230 = s_11165229[s_11165229_Idx][chckIndx(l_11165236, 0, (s_11165229[s_11165229_Idx] != null ? s_11165229[s_11165229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11165229[s_11165229_Idx] === null) s_11165229[s_11165229_Idx] = [];
               if (s_11165229[s_11165229_Idx].length < chckRange(l_11165236, 0, 2147483647)) { for (var i=s_11165229[s_11165229_Idx].length;i<chckRange(l_11165236, 0, 2147483647);++i) s_11165229[s_11165229_Idx].push(null); }
               else { s_11165229[s_11165229_Idx].length = chckRange(l_11165236, 0, 2147483647); };
  framePtr = F.prev;

  return result_11165230;

}
function update_11155729(match_11155734, val_11155735, refresh_11155736) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11155753(s_11155756, s_11155756_Idx) {
        var result_11155760 = {Field0: false, Field1: null};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 511;
          nimCopy(result_11155760, itf_simple_11155752(), NTI11155757);
        framePtr = F.prev;

        return result_11155760;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11155734.iter) {
    F.line = 504;
    var i_11155738 = 0;
    F.line = 505;
    var Tmp1 = match_11155734;
    if (ConstSet123[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11155741 = Tmp1.anchor.parentNode;
    F.line = 506;
    var itf_11155746 = null;
    F.line = 507;
    var Tmp2 = match_11155734;
    if (ConstSet124[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 509;
      var Tmp3 = match_11155734;
      if (ConstSet126[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet125[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11155752 = Tmp4.simple(val_11155735);
      F.line = 510;
      itf_11155746 = HEX3Aanonymous_11155753;
      break;
    case 1:
      F.line = 513;
      var Tmp5 = match_11155734;
      if (ConstSet128[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet127[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11155746 = Tmp6.serial(val_11155735);
      break;
    }
    L7: do {
      F.line = 515;
        L8: while (true) {
        if (!true) break L8;
          F.line = 516;
            var Tmp10 = match_11155734;
            if (ConstSet129[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11155738 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11155734;
          if (ConstSet130[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11155738, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11155790 = [Tmp9];
          F.line = 517;
          var changed_11155791 = refresh_11155736;
          F.line = 518;
          var it_11155793 = itf_11155746(serial_11155790, 0);
          if ((it_11155793["Field0"] == false)) {
          F.line = 519;
          break L7;
          }
          
          F.line = 520;
          var item_11155794 = it_11155793["Field1"];
          F.line = 522;
          var iter_item_11155799 = null;
          F.line = 523;
          var inited_11155800 = false;
            var Tmp14 = match_11155734;
            if (ConstSet131[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11155738 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 527;
          var Tmp16 = match_11155734;
          if (ConstSet132[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11155799 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11155738, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 528;
          inited_11155800 = true;
          F.line = 529;
          changed_11155791 = true;
          }
          else {
            F.line = 531;
            iter_item_11155799 = create_iter_item_11155816(match_11155734, parent_node_11155741);
            F.line = 532;
            var Tmp18 = match_11155734;
            if (ConstSet137[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11155799); } else { Tmp19 = [iter_item_11155799]; };
            F.line = 533;
            inited_11155800 = false;
            if (!((serial_11155790[0] == iter_item_11155799.serial))) {
            F.line = 535;
            changed_11155791 = true;
            }
            
          }
          
          if (!(inited_11155800)) {
          L20: do {
            F.line = 539;
            var init_proc_11155926 = null;
            F.line = 184;
            var i_11228998 = 0;
            F.line = 185;
            var l_11228999 = (match_11155734.init != null ? match_11155734.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11228998 < l_11228999)) break L22;
                  F.line = 539;
                  init_proc_11155926 = match_11155734.init[chckIndx(i_11228998, 0, (match_11155734.init != null ? match_11155734.init.length : 0)+0-1)-0];
                  F.line = 540;
                  init_proc_11155926(iter_item_11155799.node);
                  F.line = 188;
                  i_11228998 = addInt(i_11228998, 1);
                  if (!(((match_11155734.init != null ? match_11155734.init.length : 0) == l_11228999))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11155799.mount == null))) {
          F.line = 544;
          iter_item_11155799.mount.update(item_11155794, refresh_11155736);
          }
          
          L23: do {
            F.line = 547;
            var submatch_11155941 = null;
            F.line = 184;
            var i_11229003 = 0;
            F.line = 185;
            var l_11229004 = (iter_item_11155799.matches != null ? iter_item_11155799.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11229003 < l_11229004)) break L25;
                  F.line = 547;
                  submatch_11155941 = iter_item_11155799.matches[chckIndx(i_11229003, 0, (iter_item_11155799.matches != null ? iter_item_11155799.matches.length : 0)+0-1)-0];
                  F.line = 548;
                  submatch_11155941.update(item_11155794, refresh_11155736);
                  F.line = 188;
                  i_11229003 = addInt(i_11229003, 1);
                  if (!(((iter_item_11155799.matches != null ? iter_item_11155799.matches.length : 0) == l_11229004))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 551;
            var refresh_proc_11165214 = null;
            F.line = 184;
            var i_11229008 = 0;
            F.line = 185;
            var l_11229009 = (match_11155734.refresh != null ? match_11155734.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11229008 < l_11229009)) break L28;
                  F.line = 551;
                  refresh_proc_11165214 = match_11155734.refresh[chckIndx(i_11229008, 0, (match_11155734.refresh != null ? match_11155734.refresh.length : 0)+0-1)-0];
                  F.line = 552;
                  refresh_proc_11165214(iter_item_11155799.node, item_11155794);
                  F.line = 188;
                  i_11229008 = addInt(i_11229008, 1);
                  if (!(((match_11155734.refresh != null ? match_11155734.refresh.length : 0) == l_11229009))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 554;
          i_11155738 = addInt(i_11155738, 1);
        }
    } while(false);
    L29: do {
      F.line = 557;
        L30: while (true) {
          var Tmp31 = match_11155734;
          if (ConstSet138[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11155738 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 558;
          var Tmp33 = match_11155734;
          if (ConstSet139[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11165474(pop_11165224(Tmp33, "items"), parent_node_11155741);
        }
    } while(false);
    }
    else {
      F.line = 560;
      var changed_11165493 = refresh_11155736;
      F.line = 561;
      var node_11165494 = match_11155734.node;
      F.line = 562;
      var converted_val_11165495 = null;
      F.line = 564;
      var Tmp34 = match_11155734;
      if (ConstSet140[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 566;
        var Tmp35 = match_11155734;
        if (ConstSet142[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet141[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11165495 = Tmp36.simple(val_11155735);
        F.line = 567;
        changed_11165493 = true;
        break;
      case 1:
        F.line = 569;
        var Tmp37 = match_11155734;
        if (ConstSet143[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11165503 = [Tmp37.serial];
        F.line = 570;
        var Tmp38 = match_11155734;
        if (ConstSet145[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet144[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11165495 = Tmp39.serial(val_11155735, serial_11165503, 0);
          var Tmp40 = match_11155734;
          if (ConstSet146[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11165503[0] == Tmp40.serial))) {
        F.line = 572;
        changed_11165493 = true;
        }
        
        break;
      case 2:
        F.line = 574;
        var Tmp41 = match_11155734;
        if (ConstSet148[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet147[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11155734;
        if (ConstSet149[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11165515 = Tmp42.compare(val_11155735, Tmp43.value);
        F.line = 575;
        converted_val_11165495 = res_11165515.Field0;
        var Tmp44 = match_11155734;
        if (ConstSet150[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 576;
        Tmp44.value = res_11165515.Field0;
        if (res_11165515.Field1) {
        F.line = 578;
        changed_11165493 = true;
        }
        
        break;
      }
        var Tmp46 = match_11155734;
        if (ConstSet151[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11155734;
          if (ConstSet152[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11155734;
      if (ConstSet153[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 582;
      var Tmp49 = match_11155734;
      if (ConstSet154[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 583;
      var Tmp50 = match_11155734;
      if (ConstSet155[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11165494.parentNode.replaceChild(Tmp50.mount.node(), node_11165494);
      }
      
        var Tmp51 = match_11155734;
        if (ConstSet156[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 587;
        var init_proc_11165552 = null;
        F.line = 184;
        var i_11229013 = 0;
        F.line = 185;
        var l_11229014 = (match_11155734.init != null ? match_11155734.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11229013 < l_11229014)) break L54;
              F.line = 587;
              init_proc_11165552 = match_11155734.init[chckIndx(i_11229013, 0, (match_11155734.init != null ? match_11155734.init.length : 0)+0-1)-0];
              F.line = 588;
              init_proc_11165552(node_11165494);
              F.line = 188;
              i_11229013 = addInt(i_11229013, 1);
              if (!(((match_11155734.init != null ? match_11155734.init.length : 0) == l_11229014))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11155734;
      if (ConstSet157[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 589;
      Tmp55.inited = true;
      F.line = 590;
      changed_11165493 = true;
      }
      
        if (!changed_11165493) Tmp56 = false; else {          var Tmp57 = match_11155734;
          if (ConstSet158[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 594;
      var Tmp58 = match_11155734;
      if (ConstSet159[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11165494 = Tmp58.mount.node();
      F.line = 595;
      var Tmp59 = match_11155734;
      if (ConstSet160[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11165495, refresh_11155736);
      }
      
      if (changed_11165493) {
      L60: do {
        F.line = 599;
        var submatch_11165577 = null;
        F.line = 182;
        var colontmp__11229017 = null;
        F.line = 599;
        var Tmp61 = match_11155734;
        if (ConstSet161[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11229017 = Tmp61.matches;
        F.line = 184;
        var i_11229018 = 0;
        F.line = 185;
        var l_11229019 = (colontmp__11229017 != null ? colontmp__11229017.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11229018 < l_11229019)) break L63;
              F.line = 599;
              submatch_11165577 = colontmp__11229017[chckIndx(i_11229018, 0, (colontmp__11229017 != null ? colontmp__11229017.length : 0)+0-1)-0];
              F.line = 600;
              submatch_11165577.update(converted_val_11165495, refresh_11155736);
              F.line = 188;
              i_11229018 = addInt(i_11229018, 1);
              if (!(((colontmp__11229017 != null ? colontmp__11229017.length : 0) == l_11229019))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11165493) {
      L64: do {
        F.line = 604;
        var refresh_proc_11165584 = null;
        F.line = 184;
        var i_11229022 = 0;
        F.line = 185;
        var l_11229023 = (match_11155734.refresh != null ? match_11155734.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11229022 < l_11229023)) break L66;
              F.line = 604;
              refresh_proc_11165584 = match_11155734.refresh[chckIndx(i_11229022, 0, (match_11155734.refresh != null ? match_11155734.refresh.length : 0)+0-1)-0];
              F.line = 605;
              refresh_proc_11165584(node_11165494, converted_val_11165495);
              F.line = 188;
              i_11229022 = addInt(i_11229022, 1);
              if (!(((match_11155734.refresh != null ? match_11155734.refresh.length : 0) == l_11229023))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11155672(match_11155677) {
    function HEX3Aanonymous_11155684(data_11155686, refresh_11155687) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 657;
        update_11155729(match_11155677, data_11155686, refresh_11155687);
      framePtr = F.prev;

      
    }

  var result_11155679 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 656;
    result_11155679 = {update: HEX3Aanonymous_11155684};
  framePtr = F.prev;

  return result_11155679;

}
function compile_11146884(cfg_11146889, node_11146890) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
        var Tmp11;
      var Tmp12;
      var Tmp13;
      var Tmp14;
      var Tmp15;
      var Tmp16;
      var Tmp17;
                var Tmp21;
                var Tmp22;

  var result_11146951 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 425;
    var matched_node_11146952 = node_11146890.querySelector(toJSStr(cfg_11146889.selector));
    if ((matched_node_11146952 == null)) {
    F.line = 427;
    var selector_11146961 = nimCopy(null, cfg_11146889.selector, NTI112);
    F.line = 428;
    var fmt_res_11146962 = [mnewString(0)];
    F.line = 428;
    if (fmt_res_11146962[0] != null) { fmt_res_11146962[0] = (fmt_res_11146962[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11146962[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 428;
    format_value_9790080(fmt_res_11146962, 0, selector_11146961, []);
    F.line = 428;
    if (fmt_res_11146962[0] != null) { fmt_res_11146962[0] = (fmt_res_11146962[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11146962[0] = makeNimstrLit("\'"); };
    F.line = 428;
    raiseException({message: nimCopy(null, fmt_res_11146962[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 430;
    var match_11155009 = {refresh: nimCopy(null, cfg_11146889.refresh, NTI11106251), init: nimCopy(null, cfg_11146889.init, NTI9881259), iter: cfg_11146889.iter, node: matched_node_11146952, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 435;
    match_11155009.node = matched_node_11146952;
    if (match_11155009.iter) {
    var Tmp1 = match_11155009;
    if (ConstSet162[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 437;
    var Tmp2 = cfg_11146889;
    if (ConstSet163[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    nimCopy(Tmp1.iterate, Tmp2.iterate, NTI11106315);
    var Tmp3 = match_11155009;
    if (ConstSet164[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 438;
    Tmp3.anchor = matched_node_11146952.ownerDocument.createComment(matched_node_11146952.outerHTML);
    var Tmp4 = match_11155009;
    if (ConstSet165[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 439;
    Tmp4.mount_template = cfg_11146889.mount;
    var Tmp5 = match_11155009;
    if (ConstSet166[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 440;
    Tmp5.match_templates = nimCopy(null, cfg_11146889.cmatches, NTI11106257);
    var Tmp6 = match_11155009;
    if (ConstSet167[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 441;
    Tmp6.items = nimCopy(null, [], NTI11155035);
    F.line = 442;
    var Tmp7 = match_11155009;
    if (ConstSet168[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11146952.parentNode.replaceChild(Tmp7.anchor, matched_node_11146952);
    }
    else {
      var Tmp8 = match_11155009;
      if (ConstSet169[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 444;
      var Tmp9 = cfg_11146889;
      if (ConstSet170[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.selectorKind = Tmp9.convert.kind;
      F.line = 445;
      var Tmp10 = match_11155009;
      if (ConstSet171[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp10.selectorKind) {
      case 1:
        var Tmp11 = match_11155009;
        if (ConstSet172[Tmp11.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 447;
        Tmp11.serial = 0;
        break;
      default: 
        break;
      }
      var Tmp12 = match_11155009;
      if (ConstSet173[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 450;
      var Tmp13 = cfg_11146889;
      if (ConstSet174[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp12.convert, Tmp13.convert, NTI11106283);
      var Tmp14 = match_11155009;
      if (ConstSet175[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 451;
      Tmp14.matches = nimCopy(null, [], NTI11155062);
      var Tmp15 = match_11155009;
      if (ConstSet176[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 452;
      Tmp15.inited = false;
      var Tmp16 = match_11155009;
      if (ConstSet177[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 453;
      Tmp16.mount = null;
      if (!((cfg_11146889.mount == null))) {
      var Tmp17 = match_11155009;
      if (ConstSet178[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 455;
      Tmp17.mount_source = cfg_11146889.mount;
      }
      else {
        L18: do {
          F.line = 457;
          var submatch_11155083 = null;
          F.line = 184;
          var i_11229029 = 0;
          F.line = 185;
          var l_11229030 = (cfg_11146889.cmatches != null ? cfg_11146889.cmatches.length : 0);
          L19: do {
            F.line = 186;
              L20: while (true) {
              if (!(i_11229029 < l_11229030)) break L20;
                F.line = 457;
                submatch_11155083 = cfg_11146889.cmatches[chckIndx(i_11229029, 0, (cfg_11146889.cmatches != null ? cfg_11146889.cmatches.length : 0)+0-1)-0];
                F.line = 458;
                var Tmp21 = match_11155009;
                if (ConstSet179[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp22 = Tmp21.matches, Tmp22) != null) { Tmp22.push(submatch_11155083.compile(matched_node_11146952)); } else { Tmp22 = [submatch_11155083.compile(matched_node_11146952)]; };
                F.line = 188;
                i_11229029 = addInt(i_11229029, 1);
                if (!(((cfg_11146889.cmatches != null ? cfg_11146889.cmatches.length : 0) == l_11229030))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 459;
    result_11146951 = match_11155009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11146951;

}
function as_interface_11146669(config_11146674) {
    function HEX3Aanonymous_11146681(node_11146683) {
      var result_11146688 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 662;
        result_11146688 = as_interface_11155672(compile_11146884(config_11146674, node_11146683));
      framePtr = F.prev;

      return result_11146688;

    }

  var result_11146676 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 661;
    result_11146676 = {compile: HEX3Aanonymous_11146681};
  framePtr = F.prev;

  return result_11146676;

}
function iter_11146114(c_11146120, selector_11146121, iter_11146123, actions_11146129) {
  var result_11146131 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 377;
    result_11146131 = {selector: nimCopy(null, selector_11146121, NTI112), refresh: [], init: [], mount: null, iter: true, iterate: nimCopy(null, iter_11146123, NTI11106315), cmatches: [], convert: {kind: 0, simple: null, serial: null, compare: null}};
    F.line = 385;
    if (c_11146120.cmatches != null) { c_11146120.cmatches.push(as_interface_11146669(result_11146131)); } else { c_11146120.cmatches = [as_interface_11146669(result_11146131)]; };
    if (!((actions_11146129 == null))) {
    F.line = 387;
    actions_11146129(result_11146131);
    }
    
  framePtr = F.prev;

  return result_11146131;

}
function iter_11145440(c_11145446, selector_11145447, it_11145449, actions_11145455) {
  var result_11145457 = null;

  var F={procname:"iter.iter",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 406;
    result_11145457 = iter_11146114(c_11145446, selector_11145447, {kind: 0, simple: it_11145449, serial: null}, actions_11145455);
  framePtr = F.prev;

  return result_11145457;

}
function seq_iterator_11051271(arr_11051275) {
    arr_11051275 = nimCopy(null, arr_11051275, NTI11051274);
    function next_11051281() {
      var result_11051286 = {Field0: false, Field1: null};

      var F={procname:"seqIterator.next",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        if (((arr_11051275 != null ? arr_11051275.length : 0) <= it_11051279)) {
        F.line = 57;
        var colontmp__11229032 = false;
        F.line = 57;
        var colontmp__11229033 = empty_11051280;
        F.line = 57;
        nimCopy(result_11051286, {Field0: colontmp__11229032, Field1: colontmp__11229033}, NTI11051283);
        break BeforeRet;
        }
        
        F.line = 58;
        var colontmp__11229034 = true;
        F.line = 58;
        var colontmp__11229035 = arr_11051275[chckIndx(it_11051279, 0, (arr_11051275 != null ? arr_11051275.length : 0)+0-1)-0];
        F.line = 58;
        nimCopy(result_11051286, {Field0: colontmp__11229034, Field1: colontmp__11229035}, NTI11051283);
        F.line = 59;
        it_11051279 = addInt(it_11051279, 1);
      } while (false);
      framePtr = F.prev;

      return result_11051286;

    }

  var result_11051277 = null;

  var F={procname:"seqIterator.seqIterator",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 50;
    var it_11051279 = 0;
    F.line = 51;
    var empty_11051280 = null;
    F.line = 61;
    result_11051277 = next_11051281;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11051277;

}
function iter_children_11051254(c2_11051256) {
  var result_11051270 = null;

  var F={procname:"sample3.iterChildren",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_11051270 = seq_iterator_11051271(c2_11051256.children);
  framePtr = F.prev;

  return result_11051270;

}
function mount_11136038(c_11136043, comp_11136045) {
  var F={procname:"mount.mount",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((comp_11136045 == null)))) {
    F.line = 366;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nim-svelte/src/nclearseam.nim(366, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 367;
    c_11136043.mount = comp_11136045.clone();
  framePtr = F.prev;

  
}
function update_11115356(t_11115360, data_11115361, refresh_11115362) {
  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 633;
    t_11115360.data = data_11115361;
    L1: do {
      F.line = 634;
      var match_11125214 = null;
      F.line = 184;
      var i_11229039 = 0;
      F.line = 185;
      var l_11229040 = (t_11115360.matches != null ? t_11115360.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11229039 < l_11229040)) break L3;
            F.line = 634;
            match_11125214 = t_11115360.matches[chckIndx(i_11229039, 0, (t_11115360.matches != null ? t_11115360.matches.length : 0)+0-1)-0];
            F.line = 635;
            match_11125214.update(data_11115361, refresh_11115362);
            F.line = 188;
            i_11229039 = addInt(i_11229039, 1);
            if (!(((t_11115360.matches != null ? t_11115360.matches.length : 0) == l_11229040))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function clone_11125350(comp_11125354) {
  var result_11125356 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 628;
    result_11125356 = compile_11125556({config: comp_11125354.config, m_type: NTI11051051, cmatches: null}, comp_11125354.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11125356;

}
function late_11106563(late_comp_11106569) {
function resolve_comp_11106577() {
  var result_11106583 = null;

  var F={procname:"late.resolveComp",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((comp_11106576 == null)) {
    F.line = 697;
    var late_11106592 = late_comp_11106569();
    if (!((late_11106592 == null))) {
    F.line = 699;
    var fmt_res_11106601 = mnewString(0);
    F.line = 699;
    if (fmt_res_11106601 != null) { fmt_res_11106601 = (fmt_res_11106601).concat(makeNimstrLit("Late component not resolved in time")); } else { fmt_res_11106601 = makeNimstrLit("Late component not resolved in time"); };
    F.line = 699;
    raiseException({message: nimCopy(null, fmt_res_11106601, NTI112), parent: null, m_type: NTI9881019, name: null, trace: null, up: null}, "CompileLateError");
    }
    
    F.line = 700;
    comp_11106576 = late_11106592;
    }
    
    F.line = 701;
    result_11106583 = comp_11106576;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11106583;

}
    function HEX3Aanonymous_11115049() {
      var result_11115051 = null;

      var F={procname:"late.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 705;
        result_11115051 = resolve_comp_11106577().node;
      framePtr = F.prev;

      return result_11115051;

    }
    function HEX3Aanonymous_11115065(data_11115067, refresh_11115068) {
      var F={procname:"late.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 707;
        update_11115356(resolve_comp_11106577(), data_11115067, refresh_11115068);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11125272() {
        function HEX3Aanonymous_11125279() {
          var result_11125285 = null;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 709;
            result_11125285 = clone_11125350(resolve_comp_11106577());
          framePtr = F.prev;

          return result_11125285;

        }

      var result_11125278 = null;

      var F={procname:"late.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 709;
        result_11125278 = late_11106563(HEX3Aanonymous_11125279);
      framePtr = F.prev;

      return result_11125278;

    }

  var result_11106571 = null;

  var F={procname:"late.late",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 693;
    var comp_11106576 = null;
    F.line = 703;
    result_11106571 = {node: HEX3Aanonymous_11115049, update: HEX3Aanonymous_11115065, clone: HEX3Aanonymous_11125272};
  framePtr = F.prev;

  return result_11106571;

}
function new_11227658() {
  var result_11227662 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11227801 = null;
    F.line = 851;
    r_11227801 = {m_type: NTI11051396, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_11227662 = r_11227801;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11227662;

}
function compile_11196054(cfgs_11196059, node_11196060) {
  var result_11196063 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 462;
    result_11196063 = nimCopy(null, [], NTI11196078);
    L1: do {
      F.line = 463;
      var cfg_11196085 = null;
      F.line = 184;
      var i_11229046 = 0;
      F.line = 185;
      var l_11229047 = (cfgs_11196059 != null ? cfgs_11196059.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11229046 < l_11229047)) break L3;
            F.line = 463;
            cfg_11196085 = cfgs_11196059[chckIndx(i_11229046, 0, (cfgs_11196059 != null ? cfgs_11196059.length : 0)+0-1)-0];
            F.line = 464;
            if (result_11196063 != null) { result_11196063.push(cfg_11196085.compile(node_11196060)); } else { result_11196063 = [cfg_11196085.compile(node_11196060)]; };
            F.line = 188;
            i_11229046 = addInt(i_11229046, 1);
            if (!(((cfgs_11196059 != null ? cfgs_11196059.length : 0) == l_11229047))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11196063;

}
function compile_11227644(cfg_11227648, node_11227649) {
  var result_11227651 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 469;
    result_11227651 = new_11227658();
    F.line = 470;
    result_11227651.config = cfg_11227648.config;
    F.line = 471;
    result_11227651.original_node = node_11227649;
    F.line = 472;
    result_11227651.node = node_11227649.cloneNode(true);
    F.line = 474;
    result_11227651.config(result_11227651);
    F.line = 475;
    result_11227651.matches = nimCopy(null, compile_11196054(result_11227651.cmatches, result_11227651.node), NTI11196061);
  framePtr = F.prev;

  return result_11227651;

}
function new_11227222() {
  var result_11227226 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11227401 = null;
    F.line = 851;
    r_11227401 = {m_type: NTI11051400, cmatches: null, config: null};
    F.line = 852;
    result_11227226 = r_11227401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11227226;

}
function create_11227207(config_11227213) {
  var result_11227215 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 228;
    result_11227215 = new_11227222();
    F.line = 229;
    result_11227215.config = config_11227213;
  framePtr = F.prev;

  return result_11227215;

}
function compile_11227138(node_11227143, configurator_11227149) {
  var result_11227151 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 622;
    result_11227151 = compile_11227644(create_11227207(configurator_11227149), node_11227143);
  framePtr = F.prev;

  return result_11227151;

}
function refresh_11215995(c_11216000, refresh_11216002) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 339;
    if (c_11216000.refresh != null) { c_11216000.refresh.push(refresh_11216002); } else { c_11216000.refresh = [refresh_11216002]; };
  framePtr = F.prev;

  
}
function create_iter_item_11196000(match_11196005, parent_node_11196006) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11196008 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 483;
    var comp_11196013 = null;
    F.line = 484;
    var node_11196014 = null;
      var Tmp1 = match_11196005;
      if (ConstSet190[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 486;
    var Tmp2 = match_11196005;
    if (ConstSet191[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11196013 = Tmp2.mount_template.clone();
    F.line = 487;
    node_11196014 = comp_11196013.node();
    }
    else {
      F.line = 489;
      node_11196014 = match_11196005.node.cloneNode(true);
    }
    
    F.line = 490;
    var Tmp3 = match_11196005;
    if (ConstSet192[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11196008 = {serial: 0, mount: comp_11196013, node: node_11196014, matches: compile_11196054(Tmp3.match_templates, node_11196014)};
    F.line = 495;
    var Tmp4 = match_11196005;
    if (ConstSet193[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11196006.insertBefore(node_11196014, Tmp4.anchor);
  framePtr = F.prev;

  return result_11196008;

}
function detach_11215474(iter_item_11215478, parent_node_11215479) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 499;
    parent_node_11215479.removeChild(iter_item_11215478.node);
  framePtr = F.prev;

  
}
function pop_11215224(s_11215229, s_11215229_Idx) {
  var result_11215230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11215236 = subInt((s_11215229[s_11215229_Idx] != null ? s_11215229[s_11215229_Idx].length : 0), 1);
    F.line = 1784;
    result_11215230 = s_11215229[s_11215229_Idx][chckIndx(l_11215236, 0, (s_11215229[s_11215229_Idx] != null ? s_11215229[s_11215229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11215229[s_11215229_Idx] === null) s_11215229[s_11215229_Idx] = [];
               if (s_11215229[s_11215229_Idx].length < chckRange(l_11215236, 0, 2147483647)) { for (var i=s_11215229[s_11215229_Idx].length;i<chckRange(l_11215236, 0, 2147483647);++i) s_11215229[s_11215229_Idx].push(null); }
               else { s_11215229[s_11215229_Idx].length = chckRange(l_11215236, 0, 2147483647); };
  framePtr = F.prev;

  return result_11215230;

}
function update_11195898(match_11195903, val_11195904, refresh_11195905) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11195922(s_11195925, s_11195925_Idx) {
        var result_11195929 = {Field0: false, Field1: null};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 511;
          nimCopy(result_11195929, itf_simple_11195921(), NTI11195926);
        framePtr = F.prev;

        return result_11195929;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11195903.iter) {
    F.line = 504;
    var i_11195907 = 0;
    F.line = 505;
    var Tmp1 = match_11195903;
    if (ConstSet180[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11195910 = Tmp1.anchor.parentNode;
    F.line = 506;
    var itf_11195915 = null;
    F.line = 507;
    var Tmp2 = match_11195903;
    if (ConstSet181[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 509;
      var Tmp3 = match_11195903;
      if (ConstSet183[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet182[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11195921 = Tmp4.simple(val_11195904);
      F.line = 510;
      itf_11195915 = HEX3Aanonymous_11195922;
      break;
    case 1:
      F.line = 513;
      var Tmp5 = match_11195903;
      if (ConstSet185[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet184[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11195915 = Tmp6.serial(val_11195904);
      break;
    }
    L7: do {
      F.line = 515;
        L8: while (true) {
        if (!true) break L8;
          F.line = 516;
            var Tmp10 = match_11195903;
            if (ConstSet186[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11195907 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11195903;
          if (ConstSet187[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11195907, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11195974 = [Tmp9];
          F.line = 517;
          var changed_11195975 = refresh_11195905;
          F.line = 518;
          var it_11195977 = itf_11195915(serial_11195974, 0);
          if ((it_11195977["Field0"] == false)) {
          F.line = 519;
          break L7;
          }
          
          F.line = 520;
          var item_11195978 = it_11195977["Field1"];
          F.line = 522;
          var iter_item_11195983 = null;
          F.line = 523;
          var inited_11195984 = false;
            var Tmp14 = match_11195903;
            if (ConstSet188[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11195907 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 527;
          var Tmp16 = match_11195903;
          if (ConstSet189[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11195983 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11195907, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 528;
          inited_11195984 = true;
          F.line = 529;
          changed_11195975 = true;
          }
          else {
            F.line = 531;
            iter_item_11195983 = create_iter_item_11196000(match_11195903, parent_node_11195910);
            F.line = 532;
            var Tmp18 = match_11195903;
            if (ConstSet194[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11195983); } else { Tmp19 = [iter_item_11195983]; };
            F.line = 533;
            inited_11195984 = false;
            if (!((serial_11195974[0] == iter_item_11195983.serial))) {
            F.line = 535;
            changed_11195975 = true;
            }
            
          }
          
          if (!(inited_11195984)) {
          L20: do {
            F.line = 539;
            var init_proc_11196154 = null;
            F.line = 184;
            var i_11229056 = 0;
            F.line = 185;
            var l_11229057 = (match_11195903.init != null ? match_11195903.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11229056 < l_11229057)) break L22;
                  F.line = 539;
                  init_proc_11196154 = match_11195903.init[chckIndx(i_11229056, 0, (match_11195903.init != null ? match_11195903.init.length : 0)+0-1)-0];
                  F.line = 540;
                  init_proc_11196154(iter_item_11195983.node);
                  F.line = 188;
                  i_11229056 = addInt(i_11229056, 1);
                  if (!(((match_11195903.init != null ? match_11195903.init.length : 0) == l_11229057))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11195983.mount == null))) {
          F.line = 544;
          iter_item_11195983.mount.update(item_11195978, refresh_11195905);
          }
          
          L23: do {
            F.line = 547;
            var submatch_11205214 = null;
            F.line = 184;
            var i_11229061 = 0;
            F.line = 185;
            var l_11229062 = (iter_item_11195983.matches != null ? iter_item_11195983.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11229061 < l_11229062)) break L25;
                  F.line = 547;
                  submatch_11205214 = iter_item_11195983.matches[chckIndx(i_11229061, 0, (iter_item_11195983.matches != null ? iter_item_11195983.matches.length : 0)+0-1)-0];
                  F.line = 548;
                  submatch_11205214.update(item_11195978, refresh_11195905);
                  F.line = 188;
                  i_11229061 = addInt(i_11229061, 1);
                  if (!(((iter_item_11195983.matches != null ? iter_item_11195983.matches.length : 0) == l_11229062))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 551;
            var refresh_proc_11215214 = null;
            F.line = 184;
            var i_11229066 = 0;
            F.line = 185;
            var l_11229067 = (match_11195903.refresh != null ? match_11195903.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11229066 < l_11229067)) break L28;
                  F.line = 551;
                  refresh_proc_11215214 = match_11195903.refresh[chckIndx(i_11229066, 0, (match_11195903.refresh != null ? match_11195903.refresh.length : 0)+0-1)-0];
                  F.line = 552;
                  refresh_proc_11215214(iter_item_11195983.node, item_11195978);
                  F.line = 188;
                  i_11229066 = addInt(i_11229066, 1);
                  if (!(((match_11195903.refresh != null ? match_11195903.refresh.length : 0) == l_11229067))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 554;
          i_11195907 = addInt(i_11195907, 1);
        }
    } while(false);
    L29: do {
      F.line = 557;
        L30: while (true) {
          var Tmp31 = match_11195903;
          if (ConstSet195[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11195907 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 558;
          var Tmp33 = match_11195903;
          if (ConstSet196[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11215474(pop_11215224(Tmp33, "items"), parent_node_11195910);
        }
    } while(false);
    }
    else {
      F.line = 560;
      var changed_11215493 = refresh_11195905;
      F.line = 561;
      var node_11215494 = match_11195903.node;
      F.line = 562;
      var converted_val_11215495 = null;
      F.line = 564;
      var Tmp34 = match_11195903;
      if (ConstSet197[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 566;
        var Tmp35 = match_11195903;
        if (ConstSet199[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet198[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11215495 = Tmp36.simple(val_11195904);
        F.line = 567;
        changed_11215493 = true;
        break;
      case 1:
        F.line = 569;
        var Tmp37 = match_11195903;
        if (ConstSet200[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11215503 = [Tmp37.serial];
        F.line = 570;
        var Tmp38 = match_11195903;
        if (ConstSet202[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet201[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11215495 = Tmp39.serial(val_11195904, serial_11215503, 0);
          var Tmp40 = match_11195903;
          if (ConstSet203[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11215503[0] == Tmp40.serial))) {
        F.line = 572;
        changed_11215493 = true;
        }
        
        break;
      case 2:
        F.line = 574;
        var Tmp41 = match_11195903;
        if (ConstSet205[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet204[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11195903;
        if (ConstSet206[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11215515 = Tmp42.compare(val_11195904, Tmp43.value);
        F.line = 575;
        converted_val_11215495 = res_11215515.Field0;
        var Tmp44 = match_11195903;
        if (ConstSet207[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 576;
        Tmp44.value = res_11215515.Field0;
        if (res_11215515.Field1) {
        F.line = 578;
        changed_11215493 = true;
        }
        
        break;
      }
        var Tmp46 = match_11195903;
        if (ConstSet208[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11195903;
          if (ConstSet209[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11195903;
      if (ConstSet210[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 582;
      var Tmp49 = match_11195903;
      if (ConstSet211[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 583;
      var Tmp50 = match_11195903;
      if (ConstSet212[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11215494.parentNode.replaceChild(Tmp50.mount.node(), node_11215494);
      }
      
        var Tmp51 = match_11195903;
        if (ConstSet213[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 587;
        var init_proc_11215552 = null;
        F.line = 184;
        var i_11229071 = 0;
        F.line = 185;
        var l_11229072 = (match_11195903.init != null ? match_11195903.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11229071 < l_11229072)) break L54;
              F.line = 587;
              init_proc_11215552 = match_11195903.init[chckIndx(i_11229071, 0, (match_11195903.init != null ? match_11195903.init.length : 0)+0-1)-0];
              F.line = 588;
              init_proc_11215552(node_11215494);
              F.line = 188;
              i_11229071 = addInt(i_11229071, 1);
              if (!(((match_11195903.init != null ? match_11195903.init.length : 0) == l_11229072))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11195903;
      if (ConstSet214[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 589;
      Tmp55.inited = true;
      F.line = 590;
      changed_11215493 = true;
      }
      
        if (!changed_11215493) Tmp56 = false; else {          var Tmp57 = match_11195903;
          if (ConstSet215[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 594;
      var Tmp58 = match_11195903;
      if (ConstSet216[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11215494 = Tmp58.mount.node();
      F.line = 595;
      var Tmp59 = match_11195903;
      if (ConstSet217[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11215495, refresh_11195905);
      }
      
      if (changed_11215493) {
      L60: do {
        F.line = 599;
        var submatch_11215577 = null;
        F.line = 182;
        var colontmp__11229075 = null;
        F.line = 599;
        var Tmp61 = match_11195903;
        if (ConstSet218[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11229075 = Tmp61.matches;
        F.line = 184;
        var i_11229076 = 0;
        F.line = 185;
        var l_11229077 = (colontmp__11229075 != null ? colontmp__11229075.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11229076 < l_11229077)) break L63;
              F.line = 599;
              submatch_11215577 = colontmp__11229075[chckIndx(i_11229076, 0, (colontmp__11229075 != null ? colontmp__11229075.length : 0)+0-1)-0];
              F.line = 600;
              submatch_11215577.update(converted_val_11215495, refresh_11195905);
              F.line = 188;
              i_11229076 = addInt(i_11229076, 1);
              if (!(((colontmp__11229075 != null ? colontmp__11229075.length : 0) == l_11229077))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11215493) {
      L64: do {
        F.line = 604;
        var refresh_proc_11215584 = null;
        F.line = 184;
        var i_11229080 = 0;
        F.line = 185;
        var l_11229081 = (match_11195903.refresh != null ? match_11195903.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11229080 < l_11229081)) break L66;
              F.line = 604;
              refresh_proc_11215584 = match_11195903.refresh[chckIndx(i_11229080, 0, (match_11195903.refresh != null ? match_11195903.refresh.length : 0)+0-1)-0];
              F.line = 605;
              refresh_proc_11215584(node_11215494, converted_val_11215495);
              F.line = 188;
              i_11229080 = addInt(i_11229080, 1);
              if (!(((match_11195903.refresh != null ? match_11195903.refresh.length : 0) == l_11229081))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11195878(match_11195883) {
    function HEX3Aanonymous_11195890(data_11195892, refresh_11195893) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 657;
        update_11195898(match_11195883, data_11195892, refresh_11195893);
      framePtr = F.prev;

      
    }

  var result_11195885 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 656;
    result_11195885 = {update: HEX3Aanonymous_11195890};
  framePtr = F.prev;

  return result_11195885;

}
function compile_11179829(cfg_11179834, node_11179835) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
        var Tmp11;
      var Tmp12;
      var Tmp13;
      var Tmp14;
      var Tmp15;
      var Tmp16;
      var Tmp17;
                var Tmp21;
                var Tmp22;

  var result_11179896 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 425;
    var matched_node_11179897 = node_11179835.querySelector(toJSStr(cfg_11179834.selector));
    if ((matched_node_11179897 == null)) {
    F.line = 427;
    var selector_11179906 = nimCopy(null, cfg_11179834.selector, NTI112);
    F.line = 428;
    var fmt_res_11179907 = [mnewString(0)];
    F.line = 428;
    if (fmt_res_11179907[0] != null) { fmt_res_11179907[0] = (fmt_res_11179907[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11179907[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 428;
    format_value_9790080(fmt_res_11179907, 0, selector_11179906, []);
    F.line = 428;
    if (fmt_res_11179907[0] != null) { fmt_res_11179907[0] = (fmt_res_11179907[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11179907[0] = makeNimstrLit("\'"); };
    F.line = 428;
    raiseException({message: nimCopy(null, fmt_res_11179907[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 430;
    var match_11185009 = {refresh: nimCopy(null, cfg_11179834.refresh, NTI11177254), init: nimCopy(null, cfg_11179834.init, NTI9881259), iter: cfg_11179834.iter, node: matched_node_11179897, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 435;
    match_11185009.node = matched_node_11179897;
    if (match_11185009.iter) {
    var Tmp1 = match_11185009;
    if (ConstSet219[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 437;
    var Tmp2 = cfg_11179834;
    if (ConstSet220[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    nimCopy(Tmp1.iterate, Tmp2.iterate, NTI11177318);
    var Tmp3 = match_11185009;
    if (ConstSet221[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 438;
    Tmp3.anchor = matched_node_11179897.ownerDocument.createComment(matched_node_11179897.outerHTML);
    var Tmp4 = match_11185009;
    if (ConstSet222[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 439;
    Tmp4.mount_template = cfg_11179834.mount;
    var Tmp5 = match_11185009;
    if (ConstSet223[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 440;
    Tmp5.match_templates = nimCopy(null, cfg_11179834.cmatches, NTI11177260);
    var Tmp6 = match_11185009;
    if (ConstSet224[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 441;
    Tmp6.items = nimCopy(null, [], NTI11185035);
    F.line = 442;
    var Tmp7 = match_11185009;
    if (ConstSet225[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11179897.parentNode.replaceChild(Tmp7.anchor, matched_node_11179897);
    }
    else {
      var Tmp8 = match_11185009;
      if (ConstSet226[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 444;
      var Tmp9 = cfg_11179834;
      if (ConstSet227[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.selectorKind = Tmp9.convert.kind;
      F.line = 445;
      var Tmp10 = match_11185009;
      if (ConstSet228[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp10.selectorKind) {
      case 1:
        var Tmp11 = match_11185009;
        if (ConstSet229[Tmp11.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 447;
        Tmp11.serial = 0;
        break;
      default: 
        break;
      }
      var Tmp12 = match_11185009;
      if (ConstSet230[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 450;
      var Tmp13 = cfg_11179834;
      if (ConstSet231[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp12.convert, Tmp13.convert, NTI11177286);
      var Tmp14 = match_11185009;
      if (ConstSet232[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 451;
      Tmp14.matches = nimCopy(null, [], NTI11185062);
      var Tmp15 = match_11185009;
      if (ConstSet233[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 452;
      Tmp15.inited = false;
      var Tmp16 = match_11185009;
      if (ConstSet234[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 453;
      Tmp16.mount = null;
      if (!((cfg_11179834.mount == null))) {
      var Tmp17 = match_11185009;
      if (ConstSet235[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 455;
      Tmp17.mount_source = cfg_11179834.mount;
      }
      else {
        L18: do {
          F.line = 457;
          var submatch_11195214 = null;
          F.line = 184;
          var i_11229087 = 0;
          F.line = 185;
          var l_11229088 = (cfg_11179834.cmatches != null ? cfg_11179834.cmatches.length : 0);
          L19: do {
            F.line = 186;
              L20: while (true) {
              if (!(i_11229087 < l_11229088)) break L20;
                F.line = 457;
                submatch_11195214 = cfg_11179834.cmatches[chckIndx(i_11229087, 0, (cfg_11179834.cmatches != null ? cfg_11179834.cmatches.length : 0)+0-1)-0];
                F.line = 458;
                var Tmp21 = match_11185009;
                if (ConstSet236[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp22 = Tmp21.matches, Tmp22) != null) { Tmp22.push(submatch_11195214.compile(matched_node_11179897)); } else { Tmp22 = [submatch_11195214.compile(matched_node_11179897)]; };
                F.line = 188;
                i_11229087 = addInt(i_11229087, 1);
                if (!(((cfg_11179834.cmatches != null ? cfg_11179834.cmatches.length : 0) == l_11229088))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 459;
    result_11179896 = match_11185009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11179896;

}
function as_interface_11179614(config_11179619) {
    function HEX3Aanonymous_11179626(node_11179628) {
      var result_11179633 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 662;
        result_11179633 = as_interface_11195878(compile_11179829(config_11179619, node_11179628));
      framePtr = F.prev;

      return result_11179633;

    }

  var result_11179621 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 661;
    result_11179621 = {compile: HEX3Aanonymous_11179626};
  framePtr = F.prev;

  return result_11179621;

}
function match_11179075(c_11179080, selector_11179081, convert_11179083, actions_11179089) {
  var result_11179091 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 249;
    result_11179091 = {selector: nimCopy(null, selector_11179081, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_11179083, NTI11177286), cmatches: null, iterate: {kind: 0, simple: null, serial: null}};
    F.line = 256;
    if (c_11179080.cmatches != null) { c_11179080.cmatches.push(as_interface_11179614(result_11179091)); } else { c_11179080.cmatches = [as_interface_11179614(result_11179091)]; };
    if (!((actions_11179089 == null))) {
    F.line = 258;
    actions_11179089(result_11179091);
    }
    
  framePtr = F.prev;

  return result_11179091;

}
function match_11177823(c_11177828, selector_11177829, convert_11177831, actions_11177837) {
  var result_11177839 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 274;
    var type_selector_11177847 = {kind: 0, simple: convert_11177831, serial: null, compare: null};
    F.line = 277;
    result_11177839 = match_11179075(c_11177828, selector_11177829, type_selector_11177847, actions_11177837);
  framePtr = F.prev;

  return result_11177839;

}
function id_11177777(data_11177780) {
  var result_11177781 = null;

  var F={procname:"id.id",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 199;
    result_11177781 = data_11177780;
  framePtr = F.prev;

  return result_11177781;

}
function match_11177757(c_11177761, selector_11177762, actions_11177768) {
  var result_11177770 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 332;
    result_11177770 = match_11177823(c_11177761, selector_11177762, id_11177777, actions_11177768);
  framePtr = F.prev;

  return result_11177770;

}
function as_interface_11225629(comp_11225634, convert_11225636) {
    function HEX3Aanonymous_11225643() {
      var result_11225645 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 679;
        result_11225645 = comp_11225634.node;
      framePtr = F.prev;

      return result_11225645;

    }
    function HEX3Aanonymous_11225659(data_11225661, refresh_11225662) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 681;
        update_11115356(comp_11225634, convert_11225636(data_11225661), refresh_11225662);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11225970() {
      var result_11225976 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 683;
        result_11225976 = as_interface_11225629(clone_11125350(comp_11225634), convert_11225636);
      framePtr = F.prev;

      return result_11225976;

    }

  var result_11225638 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 677;
    result_11225638 = {node: HEX3Aanonymous_11225643, update: HEX3Aanonymous_11225659, clone: HEX3Aanonymous_11225970};
  framePtr = F.prev;

  return result_11225638;

}
function mount_11217219(c_11217225, comp_11217227, convert_11217229) {
  var F={procname:"mount.mount",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((comp_11217227 == null)))) {
    F.line = 373;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nim-svelte/src/nclearseam.nim(373, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 374;
    c_11217225.mount = as_interface_11225629(clone_11125350(comp_11217227), convert_11217229);
  framePtr = F.prev;

  
}
function to_comp2_11051474(d_11051476) {
  var result_11051477 = null;

  var F={procname:"sample3.toComp2",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_11051477 = d_11051476.comp2;
  framePtr = F.prev;

  return result_11051477;

}
function update_11228604(t_11228608, data_11228609, refresh_11228610) {
  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 633;
    t_11228608.data = data_11228609;
    L1: do {
      F.line = 634;
      var match_11228617 = null;
      F.line = 184;
      var i_11229092 = 0;
      F.line = 185;
      var l_11229093 = (t_11228608.matches != null ? t_11228608.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11229092 < l_11229093)) break L3;
            F.line = 634;
            match_11228617 = t_11228608.matches[chckIndx(i_11229092, 0, (t_11228608.matches != null ? t_11228608.matches.length : 0)+0-1)-0];
            F.line = 635;
            match_11228617.update(data_11228609, refresh_11228610);
            F.line = 188;
            i_11229092 = addInt(i_11229092, 1);
            if (!(((t_11228608.matches != null ? t_11228608.matches.length : 0) == l_11229093))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function attach_11228309(t_11228313, target_11228314, anchor_11228315, data_11228316) {
  var F={procname:"attach.attach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 641;
    update_11228604(t_11228313, data_11228316, true);
    F.line = 642;
    target_11228314.insertBefore(t_11228313.node, anchor_11228315);
  framePtr = F.prev;

  
}
function clone_11227941(comp_11227945) {
  var result_11227947 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 628;
    result_11227947 = compile_11227644({config: comp_11227945.config, m_type: NTI11051400, cmatches: null}, comp_11227945.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11227947;

}
function HEX3Aanonymous_11051492(t_11051499) {
    function HEX3Aanonymous_11051788(name_11051916) {
        function HEX3Aanonymous_11105976(node_11105979, data_11105980) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
          framePtr = F;
            F.line = 32;
            node_11105979.textContent = toJSStr(data_11105980.name);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_11106234(child_11106340) {
            function HEX3Aanonymous_11106476() {
              var result_11106482 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
              framePtr = F;
                F.line = 34;
                result_11106482 = comp2_11051096[0];
              framePtr = F.prev;

              return result_11106482;

            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
          framePtr = F;
            F.line = 34;
            mount_11136038(child_11106340, late_11106563(HEX3Aanonymous_11106476));
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 31;
        refresh_11105995(match_11052973(name_11051916, makeNimstrLit(".name"), null), HEX3Aanonymous_11105976);
        iter_11145440(name_11051916, makeNimstrLit(".child"), iter_children_11051254, HEX3Aanonymous_11106234);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    iter_11165997(t_11051499, makeNimstrLit("ul li"), iter_names_11051125, HEX3Aanonymous_11051788);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_11176650(t_11176657) {
    function HEX3Aanonymous_11215976(node_11215979, data_11215980) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 38;
        node_11215979.textContent = toJSStr(data_11215980.name);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_11216086(t_11216613) {
      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
      framePtr = F;
        F.line = 40;
        mount_11217219(t_11216613, comp2_11051096[0], to_comp2_11051474);
      framePtr = F.prev;

      
    }

  var F={procname:"sample3.:anonymous",prev:framePtr,filename:"sample3.nim",line:0};
  framePtr = F;
    F.line = 37;
    refresh_11215995(match_11177757(t_11176657, makeNimstrLit("h1 .name"), null), HEX3Aanonymous_11215976);
    match_11177757(t_11176657, makeNimstrLit("div.insert"), HEX3Aanonymous_11216086);
  framePtr = F.prev;

  
}
comp2_11051096[0] = compile_11176251(document.querySelector("template#comp2").content, HEX3Aanonymous_11051492);
comp1_11051445[0] = compile_11227138(document.querySelector("template#comp1").content, HEX3Aanonymous_11176650);
if (true) {
attach_11228309(clone_11227941(comp1_11051445[0]), document.body, null, {name: makeNimstrLit("Hello comp1"), comp2: {names: [{name: makeNimstrLit("brian"), children: [{names: [{name: makeNimstrLit("arthur"), children: []}]}]}, {name: makeNimstrLit("zoe"), children: []}, {name: makeNimstrLit("ashley"), children: []}]}});
}

