/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI9945049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9936260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9936253 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9936247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9936246 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9937010 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9937005 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9937004 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9945030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9936242 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9936232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9936236 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9895049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885414 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885407 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885400 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9886182 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9886177 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9886176 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9895030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885391 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885375 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885374 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885396 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881308 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881162 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885364 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885368 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9881017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4180232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4435011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9885385 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885380 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885379 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9906007 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9955871 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI9955888 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885081 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885072 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885056 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885055 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885077 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885051 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9885016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI9852537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI9852390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885066 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885060 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885091 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885047 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI9885061 = {kind: 1, offset: "update", len: 0, typ: NTI9885066, name: "update", sons: null};
NTI9885061.node = NNI9885061;
NTI9885060.base = NTI9885061;
NTI9885091.base = NTI9885060;
NTI9852386.base = NTI9852033;
NTI9852388.base = NTI9852033;
NTI9852390.base = NTI9852033;
var NNI9852031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI9852031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI9852031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI9852031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI9852031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI9852031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI9852031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI9852031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI9852031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI9852031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI9852031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI9852031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI9852031, name: "NotationNode", len: 0, sons: null}}};
NTI9852031.node = NNI9852031;
var NNI9852029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9852029.node = NNI9852029;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI9852029.base = NTI6008;
NTI9852027.base = NTI9852029;
NTI9852537.base = NTI9852041;
var NNI9852083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI9852537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI9852083.node = NNI9852083;
NTI9852083.base = NTI9852043;
NTI9852081.base = NTI9852083;
var NNI9852079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI9852079.node = NNI9852079;
NTI9852079.base = NTI9852043;
NTI9852077.base = NTI9852079;
NTI9852443.base = NTI9852077;
NTI9852445.base = NTI9852077;
var NNI9852043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI9852027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI9852081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI9852443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI9852445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI9852043.node = NNI9852043;
NTI9852043.base = NTI9852035;
NTI9852041.base = NTI9852043;
var NNI9852075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852075.node = NNI9852075;
NTI9852075.base = NTI9852043;
NTI9852073.base = NTI9852075;
NTI9852423.base = NTI9852073;
NTI9852425.base = NTI9852081;
var NNI9852087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI9852087.node = NNI9852087;
NTI9852087.base = NTI9852043;
NTI9852085.base = NTI9852087;
NTI9852427.base = NTI9852085;
NTI9852429.base = NTI9852041;
var NNI9852071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI9852071.node = NNI9852071;
NTI9852071.base = NTI9852043;
NTI9852069.base = NTI9852071;
NTI9852431.base = NTI9852069;
var NNI9852067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852067.node = NNI9852067;
NTI9852067.base = NTI9852043;
NTI9852065.base = NTI9852067;
NTI9852433.base = NTI9852065;
var NNI9852039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI9852041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI9852041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI9852041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI9852423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI9852425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI9852427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI9852429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI9852431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI9852433, name: "links", sons: null}]};
NTI9852039.node = NNI9852039;
NTI9852039.base = NTI9852035;
NTI9852037.base = NTI9852039;
var NNI9852091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI9852091.node = NNI9852091;
NTI9852091.base = NTI6008;
NTI9852089.base = NTI9852091;
var NNI9852035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI9852386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI9852388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI9852390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI9852033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI9852033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI9852033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI9852031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI9852033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI9852033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI9852033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI9852037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI9852089, name: "style", sons: null}]};
NTI9852035.node = NNI9852035;
var NNI9852005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI9852180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI9852184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI9852188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI9852192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI9852196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI9852200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI9852204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI9852208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI9852212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI9852216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI9852220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI9852224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI9852228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI9852232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI9852236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI9852240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI9852244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI9852248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI9852252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI9852256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI9852260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI9852264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI9852268, name: "onloadend", sons: null}]};
NTI9852005.node = NNI9852005;
NTI9852005.base = NTI6008;
NTI9852035.base = NTI9852005;
NTI9852033.base = NTI9852035;
var NNI9885016 = {kind: 1, offset: "times", len: 0, typ: NTI143, name: "times", sons: null};
NTI9885016.node = NNI9885016;
NTI9885015.base = NTI9885016;
var NNI9885047 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI9885091, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI9852033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI9885015, name: "data", sons: null}]};
NTI9885047.node = NNI9885047;
var NNI9885056 = {kind: 1, offset: "compile", len: 0, typ: NTI9885072, name: "compile", sons: null};
NTI9885056.node = NNI9885056;
NTI9885055.base = NTI9885056;
NTI9885077.base = NTI9885055;
var NNI9885051 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI9885077, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI9885081, name: "config", sons: null}]};
NTI9885051.node = NNI9885051;
NTI9885051.base = NTI6008;
NTI9885047.base = NTI9885051;
NTI9955888.base = NTI9885060;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6249.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
NTI6241.base = NTI6219;
NTI9955871.base = NTI9885060;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI9885380 = {kind: 1, offset: "update", len: 0, typ: NTI9885385, name: "update", sons: null};
NTI9885380.node = NNI9885380;
NTI9885379.base = NTI9885380;
NTI9906007.base = NTI9885379;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4435011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4180232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4435011.node = NNI4435011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI9881017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881017.node = NNI9881017;
var NNI9881015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881015.node = NNI9881015;
NTI9881015.base = NTI6221;
NTI9881017.base = NTI9881015;
NTI9885368.base = NTI9885364;
NTI9881162.base = NTI9881308;
var NNI9885375 = {kind: 1, offset: "compile", len: 0, typ: NTI9885391, name: "compile", sons: null};
NTI9885375.node = NNI9885375;
NTI9885374.base = NTI9885375;
NTI9885396.base = NTI9885374;
NTI9886182.base = NTI9885379;
var NNI9885401 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881216, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI9885407, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI9885414, name: "clone", sons: null}]};
NTI9885401.node = NNI9885401;
NTI9885400.base = NTI9885401;
var NNI9886177 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI9886182, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI9885400, name: "mount", sons: null}]};
NTI9886177.node = NNI9886177;
NTI9886176.base = NTI9886177;
NTI9895030.base = NTI9886176;
NTI9895049.base = NTI9885379;
NTI9936236.base = NTI9936232;
NTI9936242.base = NTI9885055;
NTI9937010.base = NTI9885060;
var NNI9936247 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881216, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI9936253, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI9936260, name: "clone", sons: null}]};
NTI9936247.node = NNI9936247;
NTI9936246.base = NTI9936247;
var NNI9937005 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI9937010, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI9936246, name: "mount", sons: null}]};
NTI9937005.node = NNI9937005;
NTI9937004.base = NTI9937005;
NTI9945030.base = NTI9937004;
NTI9945049.base = NTI9885060;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(true);
var ConstSet4 = setConstr(true);
var ConstSet5 = setConstr(true);
var ConstSet6 = setConstr(true);
var ConstSet7 = setConstr(true);
var ConstSet8 = setConstr(true);
var ConstSet9 = setConstr(true);
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(false);
var ConstSet14 = setConstr(false);
var ConstSet15 = setConstr(false);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
var ConstSet18 = setConstr(false);
var ConstSet19 = setConstr(false);
var ConstSet20 = setConstr(false);
var ConstSet21 = setConstr(false);
var ConstSet22 = setConstr(false);
var ConstSet23 = setConstr(false);
var ConstSet24 = setConstr(false);
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet25 = setConstr(60, 62, 94);
var ConstSet26 = setConstr(60, 62, 94);
var ConstSet27 = setConstr(45, 43, 32);
var ConstSet28 = setConstr([48, 57]);
var ConstSet29 = setConstr([48, 57]);
var ConstSet30 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet31 = setConstr([65, 90], [97, 122]);
var ConstSet32 = setConstr(true);
var ConstSet33 = setConstr(true);
var ConstSet34 = setConstr(true);
var ConstSet35 = setConstr(true);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(true);
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(false);
var ConstSet40 = setConstr(false);
var ConstSet41 = setConstr(false);
var ConstSet42 = setConstr(false);
var ConstSet43 = setConstr(false);
var ConstSet44 = setConstr(false);
var ConstSet45 = setConstr(false);
var ConstSet46 = setConstr(true);
var ConstSet47 = setConstr(true);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(true);
var ConstSet50 = setConstr(true);
var ConstSet51 = setConstr(true);
var ConstSet52 = setConstr(true);
var ConstSet53 = setConstr(true);
var ConstSet54 = setConstr(true);
var ConstSet55 = setConstr(true);
var ConstSet56 = setConstr(true);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(false);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(false);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(false);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(false);
var ConstSet67 = setConstr(false);
var ConstSet68 = setConstr(false);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(true);
var ConstSet71 = setConstr(true);
var ConstSet72 = setConstr(true);
var ConstSet73 = setConstr(true);
var ConstSet74 = setConstr(true);
var ConstSet75 = setConstr(true);
var ConstSet76 = setConstr(false);
var ConstSet77 = setConstr(false);
var ConstSet78 = setConstr(false);
var ConstSet79 = setConstr(false);
var ConstSet80 = setConstr(false);
var ConstSet81 = setConstr(false);
var ConstSet82 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

function new_9976615() {
  var result_9976619 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_9976801 = null;
    F.line = 851;
    r_9976801 = {m_type: NTI9885047, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_9976619 = r_9976801;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9976619;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__9977669 = 0;
      colontmp__9977669 = (i_160051 - 1);
      var res_9977674 = colontmp__9977669;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_9977674)) break L8;
            j_175236 = res_9977674;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_9977674 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function compile_9955864(cfgs_9955869, node_9955870) {
  var result_9955873 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 321;
    result_9955873 = nimCopy(null, [], NTI9955888);
    L1: do {
      F.line = 322;
      var cfg_9955895 = null;
      F.line = 184;
      var i_9977654 = 0;
      F.line = 185;
      var l_9977655 = (cfgs_9955869 != null ? cfgs_9955869.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_9977654 < l_9977655)) break L3;
            F.line = 322;
            cfg_9955895 = cfgs_9955869[chckIndx(i_9977654, 0, (cfgs_9955869 != null ? cfgs_9955869.length : 0)+0-1)-0];
            F.line = 323;
            if (result_9955873 != null) { result_9955873.push(cfg_9955895.compile(node_9955870)); } else { result_9955873 = [cfg_9955895.compile(node_9955870)]; };
            F.line = 188;
            i_9977654 = addInt(i_9977654, 1);
            if (!(((cfgs_9955869 != null ? cfgs_9955869.length : 0) == l_9977655))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9955873;

}
function compile_9976601(cfg_9976605, node_9976606) {
  var result_9976608 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 328;
    result_9976608 = new_9976615();
    F.line = 329;
    result_9976608.config = cfg_9976605.config;
    F.line = 330;
    result_9976608.original_node = node_9976606;
    F.line = 331;
    result_9976608.node = node_9976606.cloneNode(true);
    F.line = 333;
    result_9976608.config(result_9976608);
    F.line = 334;
    result_9976608.matches = nimCopy(null, compile_9955864(result_9976608.cmatches, result_9976608.node), NTI9955871);
  framePtr = F.prev;

  return result_9976608;

}
function new_9976358() {
  var result_9976362 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_9976401 = null;
    F.line = 851;
    r_9976401 = {m_type: NTI9885051, cmatches: null, config: null};
    F.line = 852;
    result_9976362 = r_9976401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9976362;

}
function create_9976343(config_9976349) {
  var result_9976351 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 174;
    result_9976351 = new_9976358();
    F.line = 175;
    result_9976351.config = config_9976349;
  framePtr = F.prev;

  return result_9976351;

}
function compile_9976274(node_9976279, configurator_9976285) {
  var result_9976287 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 454;
    result_9976287 = compile_9976601(create_9976343(configurator_9976285), node_9976279);
  framePtr = F.prev;

  return result_9976287;

}
function refresh_9935889(c_9935894, refresh_9935896) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 218;
    if (c_9935894.refresh != null) { c_9935894.refresh.push(refresh_9935896); } else { c_9935894.refresh = [refresh_9935896]; };
  framePtr = F.prev;

  
}
function changed_9905886(val1_9905889, val2_9905890) {
  var result_9905891 = false;

  var F={procname:"changed.changed",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_9905891 = true;
  framePtr = F.prev;

  return result_9905891;

}
function compile_9905983(cfgs_9905988, node_9905989) {
  var result_9905992 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 321;
    result_9905992 = nimCopy(null, [], NTI9906007);
    L1: do {
      F.line = 322;
      var cfg_9906014 = null;
      F.line = 184;
      var i_9977722 = 0;
      F.line = 185;
      var l_9977723 = (cfgs_9905988 != null ? cfgs_9905988.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_9977722 < l_9977723)) break L3;
            F.line = 322;
            cfg_9906014 = cfgs_9905988[chckIndx(i_9977722, 0, (cfgs_9905988 != null ? cfgs_9905988.length : 0)+0-1)-0];
            F.line = 323;
            if (result_9905992 != null) { result_9905992.push(cfg_9906014.compile(node_9905989)); } else { result_9905992 = [cfg_9906014.compile(node_9905989)]; };
            F.line = 188;
            i_9977722 = addInt(i_9977722, 1);
            if (!(((cfgs_9905988 != null ? cfgs_9905988.length : 0) == l_9977723))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9905992;

}
function create_iter_item_9905932(match_9905937, parent_node_9905938) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_9905940 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 342;
    var comp_9905945 = null;
    F.line = 343;
    var node_9905946 = null;
      var Tmp1 = match_9905937;
      if (ConstSet6[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 345;
    var Tmp2 = match_9905937;
    if (ConstSet7[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_9905945 = Tmp2.mount_template.clone();
    F.line = 346;
    node_9905946 = comp_9905945.node();
    }
    else {
      F.line = 348;
      node_9905946 = match_9905937.node.cloneNode(true);
    }
    
    F.line = 349;
    var Tmp3 = match_9905937;
    if (ConstSet8[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_9905940 = {mount: comp_9905945, node: node_9905946, matches: compile_9905983(Tmp3.match_templates, node_9905946)};
    F.line = 353;
    var Tmp4 = match_9905937;
    if (ConstSet9[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_9905938.insertBefore(node_9905946, Tmp4.anchor);
  framePtr = F.prev;

  return result_9905940;

}
function detach_9935473(iter_item_9935477, parent_node_9935478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 357;
    parent_node_9935478.removeChild(iter_item_9935477.node);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function pop_9935222(s_9935227, s_9935227_Idx) {
  var result_9935228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_9935234 = subInt((s_9935227[s_9935227_Idx] != null ? s_9935227[s_9935227_Idx].length : 0), 1);
    F.line = 1784;
    result_9935228 = s_9935227[s_9935227_Idx][chckIndx(l_9935234, 0, (s_9935227[s_9935227_Idx] != null ? s_9935227[s_9935227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_9935227[s_9935227_Idx] === null) s_9935227[s_9935227_Idx] = [];
               if (s_9935227[s_9935227_Idx].length < chckRange(l_9935234, 0, 2147483647)) { for (var i=s_9935227[s_9935227_Idx].length;i<chckRange(l_9935234, 0, 2147483647);++i) s_9935227[s_9935227_Idx].push(null); }
               else { s_9935227[s_9935227_Idx].length = chckRange(l_9935234, 0, 2147483647); };
  framePtr = F.prev;

  return result_9935228;

}
function update_9905878(match_9905883, val_9905884, refresh_9905885) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
          var Tmp29;
      var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp33;
      var Tmp37;
        var Tmp38;
      var Tmp39;
      var Tmp40;
        var Tmp42;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_9905885)) Tmp1 = false; else {        Tmp1 = !(changed_9905886(match_9905883.oldValue, val_9905884));      }    if (Tmp1) {
    F.line = 362;
    break BeforeRet;
    }
    
    F.line = 364;
    match_9905883.oldValue = val_9905884;
    if (match_9905883.iter) {
    F.line = 366;
    var i_9905906 = 0;
    F.line = 367;
    var Tmp2 = match_9905883;
    if (ConstSet2[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_9905908 = Tmp2.anchor.parentNode;
    F.line = 368;
    var Tmp3 = match_9905883;
    if (ConstSet3[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_9905910 = Tmp3.iterate(val_9905884);
    L4: do {
      F.line = 369;
        L5: while (true) {
        if (!true) break L5;
          F.line = 370;
          var it_9905911 = itf_9905910();
          if ((it_9905911["Field0"] == false)) {
          F.line = 371;
          break L4;
          }
          
          F.line = 372;
          var item_9905912 = nimCopy(null, it_9905911["Field1"], NTI112);
          if ((10 < i_9905906)) {
          F.line = 375;
          break L4;
          }
          
          F.line = 377;
          var iter_item_9905917 = null;
          F.line = 378;
          var inited_9905918 = false;
            var Tmp6 = match_9905883;
            if (ConstSet4[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_9905906 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 382;
          var Tmp8 = match_9905883;
          if (ConstSet5[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_9905917 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_9905906, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 383;
          inited_9905918 = true;
          }
          else {
            F.line = 385;
            iter_item_9905917 = create_iter_item_9905932(match_9905883, parent_node_9905908);
            F.line = 386;
            var Tmp10 = match_9905883;
            if (ConstSet10[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_9905917); } else { Tmp11 = [iter_item_9905917]; };
            F.line = 387;
            inited_9905918 = false;
          }
          
          if (!(inited_9905918)) {
          L12: do {
            F.line = 391;
            var init_proc_9915214 = null;
            F.line = 184;
            var i_9977691 = 0;
            F.line = 185;
            var l_9977692 = (match_9905883.init != null ? match_9905883.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_9977691 < l_9977692)) break L14;
                  F.line = 391;
                  init_proc_9915214 = match_9905883.init[chckIndx(i_9977691, 0, (match_9905883.init != null ? match_9905883.init.length : 0)+0-1)-0];
                  F.line = 392;
                  init_proc_9915214(iter_item_9905917.node);
                  F.line = 188;
                  i_9977691 = addInt(i_9977691, 1);
                  if (!(((match_9905883.init != null ? match_9905883.init.length : 0) == l_9977692))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_9905917.mount == null))) {
          F.line = 396;
          iter_item_9905917.mount.update(item_9905912, refresh_9905885);
          }
          
          L15: do {
            F.line = 399;
            var submatch_9925214 = null;
            F.line = 184;
            var i_9977696 = 0;
            F.line = 185;
            var l_9977697 = (iter_item_9905917.matches != null ? iter_item_9905917.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_9977696 < l_9977697)) break L17;
                  F.line = 399;
                  submatch_9925214 = iter_item_9905917.matches[chckIndx(i_9977696, 0, (iter_item_9905917.matches != null ? iter_item_9905917.matches.length : 0)+0-1)-0];
                  F.line = 400;
                  submatch_9925214.update(item_9905912, refresh_9905885);
                  F.line = 188;
                  i_9977696 = addInt(i_9977696, 1);
                  if (!(((iter_item_9905917.matches != null ? iter_item_9905917.matches.length : 0) == l_9977697))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 403;
            var refresh_proc_9935214 = null;
            F.line = 184;
            var i_9977701 = 0;
            F.line = 185;
            var l_9977702 = (match_9905883.refresh != null ? match_9905883.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_9977701 < l_9977702)) break L20;
                  F.line = 403;
                  refresh_proc_9935214 = match_9905883.refresh[chckIndx(i_9977701, 0, (match_9905883.refresh != null ? match_9905883.refresh.length : 0)+0-1)-0];
                  F.line = 404;
                  refresh_proc_9935214(iter_item_9905917.node, item_9905912);
                  F.line = 188;
                  i_9977701 = addInt(i_9977701, 1);
                  if (!(((match_9905883.refresh != null ? match_9905883.refresh.length : 0) == l_9977702))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 406;
          i_9905906 = addInt(i_9905906, 1);
        }
    } while(false);
    L21: do {
      F.line = 409;
        L22: while (true) {
          var Tmp23 = match_9905883;
          if (ConstSet11[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_9905906 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 410;
          var Tmp25 = match_9905883;
          if (ConstSet12[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_9935473(pop_9935222(Tmp25, "items"), parent_node_9905908);
        }
    } while(false);
    }
    else {
      F.line = 412;
      var node_9935492 = match_9905883.node;
      F.line = 413;
      var Tmp26 = match_9905883;
      if (ConstSet13[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_9935494 = Tmp26.convert(val_9905884);
        var Tmp28 = match_9905883;
        if (ConstSet14[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp28.mount == null)) Tmp27 = false; else {          var Tmp29 = match_9905883;
          if (ConstSet15[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp27 = !((Tmp29.mount_source == null));        }      if (Tmp27) {
      var Tmp30 = match_9905883;
      if (ConstSet16[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 417;
      var Tmp31 = match_9905883;
      if (ConstSet17[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp30.mount = Tmp31.mount_source.clone();
      F.line = 418;
      var Tmp32 = match_9905883;
      if (ConstSet18[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9935492.parentNode.replaceChild(Tmp32.mount.node(), node_9935492);
      }
      
        var Tmp33 = match_9905883;
        if (ConstSet19[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp33.inited)) {
      L34: do {
        F.line = 422;
        var init_proc_9935523 = null;
        F.line = 184;
        var i_9977706 = 0;
        F.line = 185;
        var l_9977707 = (match_9905883.init != null ? match_9905883.init.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_9977706 < l_9977707)) break L36;
              F.line = 422;
              init_proc_9935523 = match_9905883.init[chckIndx(i_9977706, 0, (match_9905883.init != null ? match_9905883.init.length : 0)+0-1)-0];
              F.line = 423;
              init_proc_9935523(node_9935492);
              F.line = 188;
              i_9977706 = addInt(i_9977706, 1);
              if (!(((match_9905883.init != null ? match_9905883.init.length : 0) == l_9977707))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp37 = match_9905883;
      if (ConstSet20[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 424;
      Tmp37.inited = true;
      }
      
        var Tmp38 = match_9905883;
        if (ConstSet21[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp38.mount == null))) {
      F.line = 428;
      var Tmp39 = match_9905883;
      if (ConstSet22[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9935492 = Tmp39.mount.node();
      F.line = 429;
      var Tmp40 = match_9905883;
      if (ConstSet23[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp40.mount.update(converted_val_9935494, refresh_9905885);
      }
      
      L41: do {
        F.line = 432;
        var submatch_9935543 = null;
        F.line = 182;
        var colontmp__9977710 = null;
        F.line = 432;
        var Tmp42 = match_9905883;
        if (ConstSet24[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__9977710 = Tmp42.matches;
        F.line = 184;
        var i_9977711 = 0;
        F.line = 185;
        var l_9977712 = (colontmp__9977710 != null ? colontmp__9977710.length : 0);
        L43: do {
          F.line = 186;
            L44: while (true) {
            if (!(i_9977711 < l_9977712)) break L44;
              F.line = 432;
              submatch_9935543 = colontmp__9977710[chckIndx(i_9977711, 0, (colontmp__9977710 != null ? colontmp__9977710.length : 0)+0-1)-0];
              F.line = 433;
              submatch_9935543.update(converted_val_9935494, refresh_9905885);
              F.line = 188;
              i_9977711 = addInt(i_9977711, 1);
              if (!(((colontmp__9977710 != null ? colontmp__9977710.length : 0) == l_9977712))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L45: do {
        F.line = 436;
        var refresh_proc_9935550 = null;
        F.line = 184;
        var i_9977715 = 0;
        F.line = 185;
        var l_9977716 = (match_9905883.refresh != null ? match_9905883.refresh.length : 0);
        L46: do {
          F.line = 186;
            L47: while (true) {
            if (!(i_9977715 < l_9977716)) break L47;
              F.line = 436;
              refresh_proc_9935550 = match_9905883.refresh[chckIndx(i_9977715, 0, (match_9905883.refresh != null ? match_9905883.refresh.length : 0)+0-1)-0];
              F.line = 437;
              refresh_proc_9935550(node_9935492, converted_val_9935494);
              F.line = 188;
              i_9977715 = addInt(i_9977715, 1);
              if (!(((match_9905883.refresh != null ? match_9905883.refresh.length : 0) == l_9977716))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_9905858(match_9905863) {
    function HEX3Aanonymous_9905870(data_9905872, refresh_9905873) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 490;
        update_9905878(match_9905863, data_9905872, refresh_9905873);
      framePtr = F.prev;

      
    }

  var result_9905865 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 489;
    result_9905865 = {update: HEX3Aanonymous_9905870};
  framePtr = F.prev;

  return result_9905865;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1025017(s_1025019, b_1025021, b_1025021_Idx, start_1025022) {
      var Tmp1;
          var Tmp4;

  var result_1025024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1025025 = start_1025022;
    if (((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1025025 = addInt(i_1025025, 1);
    }
    
      if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet29[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1025021[b_1025021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet30[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1035016 = subInt(s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0], 48);
          if ((b_1025021[b_1025021_Idx] <= divInt(subInt(2147483647, c_1035016), 10))) {
          F.line = 483;
          b_1025021[b_1025021_Idx] = addInt(mulInt(b_1025021[b_1025021_Idx], 10), c_1035016);
          }
          else {
            F.line = 485;
            b_1025021[b_1025021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1025025 = addInt(i_1025025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1025025 = addInt(i_1025025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1025024 = subInt(i_1025025, start_1025022);
    }
    
  framePtr = F.prev;

  return result_1025024;

}
function HEX5BHEX5D_4435068(s_4435072, x_4435074) {
  var result_4435075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4435201 = x_4435074.a;
    F.line = 2437;
    var l_4435401 = addInt(subInt(subInt((s_4435072 != null ? s_4435072.length : 0), x_4435074.b), a_4435201), 1);
    F.line = 2438;
    result_4435075 = nimCopy(null, mnewString(chckRange(l_4435401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4435409 = 0;
      F.line = 106;
      var i_9977746 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_9977746 < l_4435401)) break L3;
            F.line = 2439;
            i_4435409 = i_9977746;
            F.line = 2439;
            result_4435075[chckIndx(i_4435409, 0, (result_4435075 != null ? result_4435075.length : 0)+0-1)-0] = s_4435072[chckIndx(addInt(i_4435409, a_4435201), 0, (s_4435072 != null ? s_4435072.length : 0)+0-1)-0];
            F.line = 109;
            i_9977746 = addInt(i_9977746, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4435075;

}
function HEX2EHEX2E_4435001(a_4435006, b_4435008) {
  var result_4435014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4435014, {a: a_4435006, b: b_4435008}, NTI4435011);
  framePtr = F.prev;

  return result_4435014;

}
function parse_standard_format_specifier_9745322(s_9745324, start_9745325, ignore_unknown_suffix_9745327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9745328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9745328.fill = 32;
    F.line = 380;
    result_9745328.align = 0;
    F.line = 381;
    result_9745328.sign = 45;
    F.line = 382;
    var i_9745331 = start_9745325;
    if (((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet25[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9745328.fill = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 385;
    result_9745328.align = s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 386;
    i_9745331 = addInt(i_9745331, 2);
    }
    else {
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet26[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9745328.align = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 389;
    i_9745331 = addInt(i_9745331, 1);
    }
    }
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet27[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9745328.sign = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 393;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9745328.alternateForm = true;
    F.line = 397;
    i_9745331 = addInt(i_9745331, 1);
    }
    
      if (!((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet28[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9745328.padWithZero = true;
    F.line = 401;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 403;
    var parsed_length_9765015 = parse_saturated_natural_1025017(s_9745324, result_9745328, "minimumWidth", i_9745331);
    F.line = 404;
    i_9745331 = addInt(i_9745331, parsed_length_9765015);
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9745331 = addInt(i_9745331, 1);
    F.line = 407;
    var parsed_length_b_9765029 = parse_saturated_natural_1025017(s_9745324, result_9745328, "precision", i_9745331);
    F.line = 408;
    i_9745331 = addInt(i_9745331, parsed_length_b_9765029);
    }
    else {
      F.line = 410;
      result_9745328.precision = -1;
    }
    
      if (!(i_9745331 < (s_9745324 != null ? s_9745324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet31[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9745328.typ = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 414;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 415;
    result_9745328.endPosition = i_9745331;
      if (!!((i_9745331 == (s_9745324 != null ? s_9745324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9745327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4435068(s_9745324, HEX2EHEX2E_4435001(i_9745331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9745328;

}
function nucruneLen(s_1106829) {
  var result_1106830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1106832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1106832 < (s_1106829 != null ? s_1106829.length : 0))) break L2;
          if ((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1106832 = addInt(i_1106832, 1);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1106832 = addInt(i_1106832, 2);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1106832 = addInt(i_1106832, 3);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1106832 = addInt(i_1106832, 4);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1106832 = addInt(i_1106832, 5);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1106832 = addInt(i_1106832, 6);
          }
          else {
            F.line = 49;
          i_1106832 = addInt(i_1106832, 1);
          }
          }}}}}
          F.line = 50;
          result_1106830 = addInt(result_1106830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1106830;

}
function rune_len_at_1106932(s_1106934, i_1106935) {
  var result_1106936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1106936 = 1;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1106936 = 2;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1106936 = 3;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1106936 = 4;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1106936 = 5;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1106936 = 6;
    }
    else {
      F.line = 68;
      result_1106936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1106936;

}
function rune_offset_1730244(s_1730246, pos_1730247, start_1730248) {
  var result_1730249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1730251 = 0;
    F.line = 320;
    var o_1730252 = start_1730248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1730251 < pos_1730247)) break L2;
          F.line = 322;
          o_1730252 = addInt(o_1730252, chckRange(rune_len_at_1106932(s_1730246, o_1730252), 0, 2147483647));
          if (((s_1730246 != null ? s_1730246.length : 0) <= o_1730252)) {
          F.line = 324;
          result_1730249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1730251 = addInt(i_1730251, 1);
        }
    } while(false);
    F.line = 326;
    result_1730249 = o_1730252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1730249;

}
function validate_utf8_1350229(s_1350231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1350232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1350234 = 0;
    F.line = 173;
    var l_1350235 = (s_1350231 != null ? s_1350231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1350234 < l_1350235)) break L2;
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1350234 = addInt(i_1350234, 1);
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1350232 = i_1350234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1350234, 1) < l_1350235)) Tmp3 = false; else {              Tmp3 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1350234 = addInt(i_1350234, 2);
          }
          else {
            F.line = 180;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1350234, 2) < l_1350235)) Tmp5 = false; else {              Tmp5 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1350234 = addInt(i_1350234, 3);
          }
          else {
            F.line = 184;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1350234, 3) < l_1350235)) Tmp8 = false; else {              Tmp8 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1350231[chckIndx(addInt(i_1350234, 3), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1350234 = addInt(i_1350234, 4);
          }
          else {
            F.line = 190;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1350232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1350232;

}
function nsuRepeatChar(c_9290048, count_9290049) {
  var result_9290050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9290050 = nimCopy(null, mnewString(count_9290049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9290059 = 0;
      F.line = 66;
      var colontmp__9977777 = 0;
      F.line = 1283;
      colontmp__9977777 = subInt(count_9290049, 1);
      F.line = 77;
      var res_9977778 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_9977778 <= colontmp__9977777)) break L3;
            F.line = 1283;
            i_9290059 = res_9977778;
            F.line = 1283;
            result_9290050[chckIndx(i_9290059, 0, (result_9290050 != null ? result_9290050.length : 0)+0-1)-0] = c_9290048;
            F.line = 80;
            res_9977778 = addInt(res_9977778, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9290050;

}
function align_string_9745222(s_9745224, minimum_width_9745225, align_9745226, fill_9745227) {
      var Tmp1;

  var result_9745228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9745225 == 0)) {
    F.line = 282;
    result_9745228 = nimCopy(null, s_9745224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1350229(s_9745224) == -1)) {
      Tmp1 = nucruneLen(s_9745224);
      }
      else {
      Tmp1 = (s_9745224 != null ? s_9745224.length : 0);
      }
      
      var s_rune_len_9745229 = Tmp1;
      F.line = 285;
      var to_fill_9745230 = subInt(minimum_width_9745225, s_rune_len_9745229);
      if ((to_fill_9745230 <= 0)) {
      F.line = 287;
      result_9745228 = nimCopy(null, s_9745224, NTI112);
      }
      else {
      if (((align_9745226 == 60) || (align_9745226 == 0))) {
      F.line = 289;
      result_9745228 = nimCopy(null, (s_9745224 || []).concat(nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9745226 == 94)) {
      F.line = 291;
      var half_9745231 = divInt(to_fill_9745230, 2);
      F.line = 292;
      result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(half_9745231, 0, 2147483647)) || []).concat(s_9745224 || [],nsuRepeatChar(fill_9745227, chckRange(subInt(to_fill_9745230, half_9745231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []).concat(s_9745224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9745228;

}
function format_value_9790080(result_9790083, result_9790083_Idx, value_9790084, specifier_9790085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9790086 = parse_standard_format_specifier_9745322(specifier_9790085, 0, false);
    F.line = 503;
    var value_9790087 = nimCopy(null, value_9790084, NTI112);
    F.line = 504;
    switch (spec_9790086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9790086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9790086.precision == -1))) {
    if ((spec_9790086.precision < nucruneLen(value_9790087))) {
    F.line = 512;
    (value_9790087 == null ? value_9790087 = mnewString(chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9790087.length = chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9790083[result_9790083_Idx] != null) { result_9790083[result_9790083_Idx] = (result_9790083[result_9790083_Idx]).concat(align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill)); } else { result_9790083[result_9790083_Idx] = align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill).slice(); };
  framePtr = F.prev;

  
}
function compile_9886127(cfg_9886132, node_9886133) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_9886191 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 290;
    var matched_node_9886192 = node_9886133.querySelector(toJSStr(cfg_9886132.selector));
    if ((matched_node_9886192 == null)) {
    F.line = 292;
    var selector_9886201 = nimCopy(null, cfg_9886132.selector, NTI112);
    F.line = 293;
    var fmt_res_9886205 = [mnewString(0)];
    F.line = 293;
    if (fmt_res_9886205[0] != null) { fmt_res_9886205[0] = (fmt_res_9886205[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_9886205[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 293;
    format_value_9790080(fmt_res_9886205, 0, selector_9886201, []);
    F.line = 293;
    if (fmt_res_9886205[0] != null) { fmt_res_9886205[0] = (fmt_res_9886205[0]).concat(makeNimstrLit("\'")); } else { fmt_res_9886205[0] = makeNimstrLit("\'"); };
    F.line = 293;
    raiseException({message: nimCopy(null, fmt_res_9886205[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 295;
    var match_9895009 = {refresh: nimCopy(null, cfg_9886132.refresh, NTI9885368), init: nimCopy(null, cfg_9886132.init, NTI9881162), iter: cfg_9886132.iter, node: matched_node_9886192, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 300;
    match_9895009.node = matched_node_9886192;
    if (match_9895009.iter) {
    var Tmp1 = match_9895009;
    if (ConstSet32[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 302;
    var Tmp2 = cfg_9886132;
    if (ConstSet33[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_9895009;
    if (ConstSet34[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 303;
    Tmp3.anchor = matched_node_9886192.ownerDocument.createComment(matched_node_9886192.outerHTML);
    var Tmp4 = match_9895009;
    if (ConstSet35[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 304;
    Tmp4.mount_template = cfg_9886132.mount;
    var Tmp5 = match_9895009;
    if (ConstSet36[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 305;
    Tmp5.match_templates = nimCopy(null, cfg_9886132.cmatches, NTI9885396);
    var Tmp6 = match_9895009;
    if (ConstSet37[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 306;
    Tmp6.items = nimCopy(null, [], NTI9895030);
    F.line = 307;
    var Tmp7 = match_9895009;
    if (ConstSet38[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_9886192.parentNode.replaceChild(Tmp7.anchor, matched_node_9886192);
    }
    else {
      var Tmp8 = match_9895009;
      if (ConstSet39[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 309;
      var Tmp9 = cfg_9886132;
      if (ConstSet40[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_9895009;
      if (ConstSet41[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 310;
      Tmp10.matches = nimCopy(null, [], NTI9895049);
      var Tmp11 = match_9895009;
      if (ConstSet42[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 311;
      Tmp11.inited = false;
      var Tmp12 = match_9895009;
      if (ConstSet43[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 312;
      Tmp12.mount = null;
      if (!((cfg_9886132.mount == null))) {
      var Tmp13 = match_9895009;
      if (ConstSet44[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 314;
      Tmp13.mount_source = cfg_9886132.mount;
      }
      else {
        L14: do {
          F.line = 316;
          var submatch_9905214 = null;
          F.line = 184;
          var i_9977729 = 0;
          F.line = 185;
          var l_9977730 = (cfg_9886132.cmatches != null ? cfg_9886132.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_9977729 < l_9977730)) break L16;
                F.line = 316;
                submatch_9905214 = cfg_9886132.cmatches[chckIndx(i_9977729, 0, (cfg_9886132.cmatches != null ? cfg_9886132.cmatches.length : 0)+0-1)-0];
                F.line = 317;
                var Tmp17 = match_9895009;
                if (ConstSet45[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_9905214.compile(matched_node_9886192)); } else { Tmp18 = [submatch_9905214.compile(matched_node_9886192)]; };
                F.line = 188;
                i_9977729 = addInt(i_9977729, 1);
                if (!(((cfg_9886132.cmatches != null ? cfg_9886132.cmatches.length : 0) == l_9977730))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 318;
    result_9886191 = match_9895009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9886191;

}
function as_interface_9885955(config_9885960) {
    function HEX3Aanonymous_9885967(node_9885969) {
      var result_9885974 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 495;
        result_9885974 = as_interface_9905858(compile_9886127(config_9885960, node_9885969));
      framePtr = F.prev;

      return result_9885974;

    }

  var result_9885962 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 494;
    result_9885962 = {compile: HEX3Aanonymous_9885967};
  framePtr = F.prev;

  return result_9885962;

}
function match_9885505(c_9885510, selector_9885511, convert_9885513, actions_9885519) {
  var result_9885521 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 195;
    result_9885521 = {selector: nimCopy(null, selector_9885511, NTI112), refresh: [], init: [], mount: null, iter: false, convert: convert_9885513, cmatches: null, iterate: null};
    F.line = 202;
    if (c_9885510.cmatches != null) { c_9885510.cmatches.push(as_interface_9885955(result_9885521)); } else { c_9885510.cmatches = [as_interface_9885955(result_9885521)]; };
    if (!((actions_9885519 == null))) {
    F.line = 204;
    actions_9885519(result_9885521);
    }
    
  framePtr = F.prev;

  return result_9885521;

}
function times_9885019(d_9885021) {
  var result_9885022 = null;

  var F={procname:"button.times",prev:framePtr,filename:"button.nim",line:0};
  framePtr = F;
    F.line = 9;
    result_9885022 = nimCopy(null, cstrToNimstr((d_9885021.times)+""), NTI112);
  framePtr = F.prev;

  return result_9885022;

}
function set_text_9883108(node_9883111, text_9883112) {
  var F={procname:"svelteutil.setText",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
    F.line = 41;
    node_9883111.textContent = toJSStr(text_9883112);
  framePtr = F.prev;

  
}
function init_9976155(c_9976160, init_9976161) {
  var F={procname:"init.init",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 223;
    if (c_9976160.init != null) { c_9976160.init.push(init_9976161); } else { c_9976160.init = [init_9976161]; };
  framePtr = F.prev;

  
}
function add_event_listener_9976025(c_9976030, event_9976031, cb_9976032, use_capture_9976033) {
    event_9976031 = nimCopy(null, event_9976031, NTI112);
    function HEX3Aanonymous_9976124(node_9976126) {
      var F={procname:"addEventListener.:anonymous",prev:framePtr,filename:"svelteutil.nim",line:0};
      framePtr = F;
        F.line = 29;
        node_9976126.addEventListener(toJSStr(event_9976031), cb_9976032, use_capture_9976033);
      framePtr = F.prev;

      
    }

  var F={procname:"addEventListener.addEventListener",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
    F.line = 28;
    init_9976155(c_9976030, HEX3Aanonymous_9976124);
  framePtr = F.prev;

  
}
function create_iter_item_9955813(match_9955818, parent_node_9955819) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_9955821 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 342;
    var comp_9955826 = null;
    F.line = 343;
    var node_9955827 = null;
      var Tmp1 = match_9955818;
      if (ConstSet50[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 345;
    var Tmp2 = match_9955818;
    if (ConstSet51[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_9955826 = Tmp2.mount_template.clone();
    F.line = 346;
    node_9955827 = comp_9955826.node();
    }
    else {
      F.line = 348;
      node_9955827 = match_9955818.node.cloneNode(true);
    }
    
    F.line = 349;
    var Tmp3 = match_9955818;
    if (ConstSet52[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_9955821 = {mount: comp_9955826, node: node_9955827, matches: compile_9955864(Tmp3.match_templates, node_9955827)};
    F.line = 353;
    var Tmp4 = match_9955818;
    if (ConstSet53[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_9955819.insertBefore(node_9955827, Tmp4.anchor);
  framePtr = F.prev;

  return result_9955821;

}
function detach_9975473(iter_item_9975477, parent_node_9975478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 357;
    parent_node_9975478.removeChild(iter_item_9975477.node);
  framePtr = F.prev;

  
}
function pop_9975222(s_9975227, s_9975227_Idx) {
  var result_9975228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_9975234 = subInt((s_9975227[s_9975227_Idx] != null ? s_9975227[s_9975227_Idx].length : 0), 1);
    F.line = 1784;
    result_9975228 = s_9975227[s_9975227_Idx][chckIndx(l_9975234, 0, (s_9975227[s_9975227_Idx] != null ? s_9975227[s_9975227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_9975227[s_9975227_Idx] === null) s_9975227[s_9975227_Idx] = [];
               if (s_9975227[s_9975227_Idx].length < chckRange(l_9975234, 0, 2147483647)) { for (var i=s_9975227[s_9975227_Idx].length;i<chckRange(l_9975234, 0, 2147483647);++i) s_9975227[s_9975227_Idx].push(null); }
               else { s_9975227[s_9975227_Idx].length = chckRange(l_9975234, 0, 2147483647); };
  framePtr = F.prev;

  return result_9975228;

}
function update_9955773(match_9955778, val_9955779, refresh_9955780) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
          var Tmp29;
      var Tmp30;
      var Tmp31;
      var Tmp32;
        var Tmp33;
      var Tmp37;
        var Tmp38;
      var Tmp39;
      var Tmp40;
        var Tmp42;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_9955780)) Tmp1 = false; else {        Tmp1 = !(changed_9905886(match_9955778.oldValue, val_9955779));      }    if (Tmp1) {
    F.line = 362;
    break BeforeRet;
    }
    
    F.line = 364;
    match_9955778.oldValue = val_9955779;
    if (match_9955778.iter) {
    F.line = 366;
    var i_9955787 = 0;
    F.line = 367;
    var Tmp2 = match_9955778;
    if (ConstSet46[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_9955789 = Tmp2.anchor.parentNode;
    F.line = 368;
    var Tmp3 = match_9955778;
    if (ConstSet47[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_9955791 = Tmp3.iterate(val_9955779);
    L4: do {
      F.line = 369;
        L5: while (true) {
        if (!true) break L5;
          F.line = 370;
          var it_9955792 = itf_9955791();
          if ((it_9955792["Field0"] == false)) {
          F.line = 371;
          break L4;
          }
          
          F.line = 372;
          var item_9955793 = it_9955792["Field1"];
          if ((10 < i_9955787)) {
          F.line = 375;
          break L4;
          }
          
          F.line = 377;
          var iter_item_9955798 = null;
          F.line = 378;
          var inited_9955799 = false;
            var Tmp6 = match_9955778;
            if (ConstSet48[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_9955787 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 382;
          var Tmp8 = match_9955778;
          if (ConstSet49[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_9955798 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_9955787, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 383;
          inited_9955799 = true;
          }
          else {
            F.line = 385;
            iter_item_9955798 = create_iter_item_9955813(match_9955778, parent_node_9955789);
            F.line = 386;
            var Tmp10 = match_9955778;
            if (ConstSet54[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_9955798); } else { Tmp11 = [iter_item_9955798]; };
            F.line = 387;
            inited_9955799 = false;
          }
          
          if (!(inited_9955799)) {
          L12: do {
            F.line = 391;
            var init_proc_9955962 = null;
            F.line = 184;
            var i_9977788 = 0;
            F.line = 185;
            var l_9977789 = (match_9955778.init != null ? match_9955778.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_9977788 < l_9977789)) break L14;
                  F.line = 391;
                  init_proc_9955962 = match_9955778.init[chckIndx(i_9977788, 0, (match_9955778.init != null ? match_9955778.init.length : 0)+0-1)-0];
                  F.line = 392;
                  init_proc_9955962(iter_item_9955798.node);
                  F.line = 188;
                  i_9977788 = addInt(i_9977788, 1);
                  if (!(((match_9955778.init != null ? match_9955778.init.length : 0) == l_9977789))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_9955798.mount == null))) {
          F.line = 396;
          iter_item_9955798.mount.update(item_9955793, refresh_9955780);
          }
          
          L15: do {
            F.line = 399;
            var submatch_9965214 = null;
            F.line = 184;
            var i_9977793 = 0;
            F.line = 185;
            var l_9977794 = (iter_item_9955798.matches != null ? iter_item_9955798.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_9977793 < l_9977794)) break L17;
                  F.line = 399;
                  submatch_9965214 = iter_item_9955798.matches[chckIndx(i_9977793, 0, (iter_item_9955798.matches != null ? iter_item_9955798.matches.length : 0)+0-1)-0];
                  F.line = 400;
                  submatch_9965214.update(item_9955793, refresh_9955780);
                  F.line = 188;
                  i_9977793 = addInt(i_9977793, 1);
                  if (!(((iter_item_9955798.matches != null ? iter_item_9955798.matches.length : 0) == l_9977794))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 403;
            var refresh_proc_9975214 = null;
            F.line = 184;
            var i_9977798 = 0;
            F.line = 185;
            var l_9977799 = (match_9955778.refresh != null ? match_9955778.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_9977798 < l_9977799)) break L20;
                  F.line = 403;
                  refresh_proc_9975214 = match_9955778.refresh[chckIndx(i_9977798, 0, (match_9955778.refresh != null ? match_9955778.refresh.length : 0)+0-1)-0];
                  F.line = 404;
                  refresh_proc_9975214(iter_item_9955798.node, item_9955793);
                  F.line = 188;
                  i_9977798 = addInt(i_9977798, 1);
                  if (!(((match_9955778.refresh != null ? match_9955778.refresh.length : 0) == l_9977799))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 406;
          i_9955787 = addInt(i_9955787, 1);
        }
    } while(false);
    L21: do {
      F.line = 409;
        L22: while (true) {
          var Tmp23 = match_9955778;
          if (ConstSet55[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_9955787 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 410;
          var Tmp25 = match_9955778;
          if (ConstSet56[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_9975473(pop_9975222(Tmp25, "items"), parent_node_9955789);
        }
    } while(false);
    }
    else {
      F.line = 412;
      var node_9975492 = match_9955778.node;
      F.line = 413;
      var Tmp26 = match_9955778;
      if (ConstSet57[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var converted_val_9975494 = Tmp26.convert(val_9955779);
        var Tmp28 = match_9955778;
        if (ConstSet58[Tmp28.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp28.mount == null)) Tmp27 = false; else {          var Tmp29 = match_9955778;
          if (ConstSet59[Tmp29.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp27 = !((Tmp29.mount_source == null));        }      if (Tmp27) {
      var Tmp30 = match_9955778;
      if (ConstSet60[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 417;
      var Tmp31 = match_9955778;
      if (ConstSet61[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp30.mount = Tmp31.mount_source.clone();
      F.line = 418;
      var Tmp32 = match_9955778;
      if (ConstSet62[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9975492.parentNode.replaceChild(Tmp32.mount.node(), node_9975492);
      }
      
        var Tmp33 = match_9955778;
        if (ConstSet63[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp33.inited)) {
      L34: do {
        F.line = 422;
        var init_proc_9975523 = null;
        F.line = 184;
        var i_9977803 = 0;
        F.line = 185;
        var l_9977804 = (match_9955778.init != null ? match_9955778.init.length : 0);
        L35: do {
          F.line = 186;
            L36: while (true) {
            if (!(i_9977803 < l_9977804)) break L36;
              F.line = 422;
              init_proc_9975523 = match_9955778.init[chckIndx(i_9977803, 0, (match_9955778.init != null ? match_9955778.init.length : 0)+0-1)-0];
              F.line = 423;
              init_proc_9975523(node_9975492);
              F.line = 188;
              i_9977803 = addInt(i_9977803, 1);
              if (!(((match_9955778.init != null ? match_9955778.init.length : 0) == l_9977804))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp37 = match_9955778;
      if (ConstSet64[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 424;
      Tmp37.inited = true;
      }
      
        var Tmp38 = match_9955778;
        if (ConstSet65[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp38.mount == null))) {
      F.line = 428;
      var Tmp39 = match_9955778;
      if (ConstSet66[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9975492 = Tmp39.mount.node();
      F.line = 429;
      var Tmp40 = match_9955778;
      if (ConstSet67[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp40.mount.update(converted_val_9975494, refresh_9955780);
      }
      
      L41: do {
        F.line = 432;
        var submatch_9975543 = null;
        F.line = 182;
        var colontmp__9977807 = null;
        F.line = 432;
        var Tmp42 = match_9955778;
        if (ConstSet68[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__9977807 = Tmp42.matches;
        F.line = 184;
        var i_9977808 = 0;
        F.line = 185;
        var l_9977809 = (colontmp__9977807 != null ? colontmp__9977807.length : 0);
        L43: do {
          F.line = 186;
            L44: while (true) {
            if (!(i_9977808 < l_9977809)) break L44;
              F.line = 432;
              submatch_9975543 = colontmp__9977807[chckIndx(i_9977808, 0, (colontmp__9977807 != null ? colontmp__9977807.length : 0)+0-1)-0];
              F.line = 433;
              submatch_9975543.update(converted_val_9975494, refresh_9955780);
              F.line = 188;
              i_9977808 = addInt(i_9977808, 1);
              if (!(((colontmp__9977807 != null ? colontmp__9977807.length : 0) == l_9977809))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L45: do {
        F.line = 436;
        var refresh_proc_9975550 = null;
        F.line = 184;
        var i_9977812 = 0;
        F.line = 185;
        var l_9977813 = (match_9955778.refresh != null ? match_9955778.refresh.length : 0);
        L46: do {
          F.line = 186;
            L47: while (true) {
            if (!(i_9977812 < l_9977813)) break L47;
              F.line = 436;
              refresh_proc_9975550 = match_9955778.refresh[chckIndx(i_9977812, 0, (match_9955778.refresh != null ? match_9955778.refresh.length : 0)+0-1)-0];
              F.line = 437;
              refresh_proc_9975550(node_9975492, converted_val_9975494);
              F.line = 188;
              i_9977812 = addInt(i_9977812, 1);
              if (!(((match_9955778.refresh != null ? match_9955778.refresh.length : 0) == l_9977813))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_9955753(match_9955758) {
    function HEX3Aanonymous_9955765(data_9955767, refresh_9955768) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 490;
        update_9955773(match_9955758, data_9955767, refresh_9955768);
      framePtr = F.prev;

      
    }

  var result_9955760 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 489;
    result_9955760 = {update: HEX3Aanonymous_9955765};
  framePtr = F.prev;

  return result_9955760;

}
function compile_9936955(cfg_9936960, node_9936961) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_9937019 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 290;
    var matched_node_9937020 = node_9936961.querySelector(toJSStr(cfg_9936960.selector));
    if ((matched_node_9937020 == null)) {
    F.line = 292;
    var selector_9937029 = nimCopy(null, cfg_9936960.selector, NTI112);
    F.line = 293;
    var fmt_res_9937030 = [mnewString(0)];
    F.line = 293;
    if (fmt_res_9937030[0] != null) { fmt_res_9937030[0] = (fmt_res_9937030[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_9937030[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 293;
    format_value_9790080(fmt_res_9937030, 0, selector_9937029, []);
    F.line = 293;
    if (fmt_res_9937030[0] != null) { fmt_res_9937030[0] = (fmt_res_9937030[0]).concat(makeNimstrLit("\'")); } else { fmt_res_9937030[0] = makeNimstrLit("\'"); };
    F.line = 293;
    raiseException({message: nimCopy(null, fmt_res_9937030[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 295;
    var match_9945009 = {refresh: nimCopy(null, cfg_9936960.refresh, NTI9936236), init: nimCopy(null, cfg_9936960.init, NTI9881162), iter: cfg_9936960.iter, node: matched_node_9937020, oldValue: null, convert: null, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 300;
    match_9945009.node = matched_node_9937020;
    if (match_9945009.iter) {
    var Tmp1 = match_9945009;
    if (ConstSet69[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 302;
    var Tmp2 = cfg_9936960;
    if (ConstSet70[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_9945009;
    if (ConstSet71[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 303;
    Tmp3.anchor = matched_node_9937020.ownerDocument.createComment(matched_node_9937020.outerHTML);
    var Tmp4 = match_9945009;
    if (ConstSet72[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 304;
    Tmp4.mount_template = cfg_9936960.mount;
    var Tmp5 = match_9945009;
    if (ConstSet73[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 305;
    Tmp5.match_templates = nimCopy(null, cfg_9936960.cmatches, NTI9936242);
    var Tmp6 = match_9945009;
    if (ConstSet74[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 306;
    Tmp6.items = nimCopy(null, [], NTI9945030);
    F.line = 307;
    var Tmp7 = match_9945009;
    if (ConstSet75[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_9937020.parentNode.replaceChild(Tmp7.anchor, matched_node_9937020);
    }
    else {
      var Tmp8 = match_9945009;
      if (ConstSet76[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 309;
      var Tmp9 = cfg_9936960;
      if (ConstSet77[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.convert = Tmp9.convert;
      var Tmp10 = match_9945009;
      if (ConstSet78[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 310;
      Tmp10.matches = nimCopy(null, [], NTI9945049);
      var Tmp11 = match_9945009;
      if (ConstSet79[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 311;
      Tmp11.inited = false;
      var Tmp12 = match_9945009;
      if (ConstSet80[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 312;
      Tmp12.mount = null;
      if (!((cfg_9936960.mount == null))) {
      var Tmp13 = match_9945009;
      if (ConstSet81[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 314;
      Tmp13.mount_source = cfg_9936960.mount;
      }
      else {
        L14: do {
          F.line = 316;
          var submatch_9955214 = null;
          F.line = 184;
          var i_9977819 = 0;
          F.line = 185;
          var l_9977820 = (cfg_9936960.cmatches != null ? cfg_9936960.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_9977819 < l_9977820)) break L16;
                F.line = 316;
                submatch_9955214 = cfg_9936960.cmatches[chckIndx(i_9977819, 0, (cfg_9936960.cmatches != null ? cfg_9936960.cmatches.length : 0)+0-1)-0];
                F.line = 317;
                var Tmp17 = match_9945009;
                if (ConstSet82[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_9955214.compile(matched_node_9937020)); } else { Tmp18 = [submatch_9955214.compile(matched_node_9937020)]; };
                F.line = 188;
                i_9977819 = addInt(i_9977819, 1);
                if (!(((cfg_9936960.cmatches != null ? cfg_9936960.cmatches.length : 0) == l_9977820))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 318;
    result_9937019 = match_9945009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9937019;

}
function as_interface_9936783(config_9936788) {
    function HEX3Aanonymous_9936795(node_9936797) {
      var result_9936802 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 495;
        result_9936802 = as_interface_9955753(compile_9936955(config_9936788, node_9936797));
      framePtr = F.prev;

      return result_9936802;

    }

  var result_9936790 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 494;
    result_9936790 = {compile: HEX3Aanonymous_9936795};
  framePtr = F.prev;

  return result_9936790;

}
function match_9936333(c_9936338, selector_9936339, convert_9936341, actions_9936347) {
  var result_9936349 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 195;
    result_9936349 = {selector: nimCopy(null, selector_9936339, NTI112), refresh: [], init: [], mount: null, iter: false, convert: convert_9936341, cmatches: null, iterate: null};
    F.line = 202;
    if (c_9936338.cmatches != null) { c_9936338.cmatches.push(as_interface_9936783(result_9936349)); } else { c_9936338.cmatches = [as_interface_9936783(result_9936349)]; };
    if (!((actions_9936347 == null))) {
    F.line = 204;
    actions_9936347(result_9936349);
    }
    
  framePtr = F.prev;

  return result_9936349;

}
function id_9936311(data_9936314) {
  var result_9936315 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 145;
    result_9936315 = data_9936314;
  framePtr = F.prev;

  return result_9936315;

}
function match_9936291(c_9936295, selector_9936296, actions_9936302) {
  var result_9936304 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 211;
    result_9936304 = match_9936333(c_9936295, selector_9936296, id_9936311, actions_9936302);
  framePtr = F.prev;

  return result_9936304;

}
function update_9975894(t_9975898, data_9975899, refresh_9975900) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 466;
    t_9975898.data = data_9975899;
    L1: do {
      F.line = 467;
      var match_9975907 = null;
      F.line = 184;
      var i_9977823 = 0;
      F.line = 185;
      var l_9977824 = (t_9975898.matches != null ? t_9975898.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_9977823 < l_9977824)) break L3;
            F.line = 467;
            match_9975907 = t_9975898.matches[chckIndx(i_9977823, 0, (t_9975898.matches != null ? t_9975898.matches.length : 0)+0-1)-0];
            F.line = 468;
            match_9975907.update(data_9975899, refresh_9975900);
            F.line = 188;
            i_9977823 = addInt(i_9977823, 1);
            if (!(((t_9975898.matches != null ? t_9975898.matches.length : 0) == l_9977824))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_button_9885036(node_9885039) {
    function HEX3Aanonymous_9885098(b_9885105) {
        function HEX3Aanonymous_9975827(event_9975829) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"button.nim",line:0};
          framePtr = F;
            F.line = 15;
            b_9885105.data.times = addInt(b_9885105.data.times, 1);
            F.line = 16;
            console.log("button clicked", b_9885105.data.times);
            F.line = 17;
            update_9975894(b_9885105, b_9885105.data, false);
          framePtr = F.prev;

          
        }

      var F={procname:"compileButton.:anonymous",prev:framePtr,filename:"button.nim",line:0};
      framePtr = F;
        F.line = 13;
        refresh_9935889(match_9885505(b_9885105, makeNimstrLit(".times"), times_9885019, null), set_text_9883108);
        F.line = 14;
        add_event_listener_9976025(match_9936291(b_9885105, makeNimstrLit("button"), null), makeNimstrLit("click"), HEX3Aanonymous_9975827, false);
      framePtr = F.prev;

      
    }

  var result_9885096 = null;

  var F={procname:"button.compileButton",prev:framePtr,filename:"button.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_9885096 = compile_9976274(node_9885039, HEX3Aanonymous_9885098);
  framePtr = F.prev;

  return result_9885096;

}
function attach_9977352(t_9977356, target_9977357, anchor_9977358, data_9977359) {
  var F={procname:"attach.attach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 474;
    update_9975894(t_9977356, data_9977359, true);
    F.line = 475;
    target_9977357.insertBefore(t_9977356.node, anchor_9977358);
  framePtr = F.prev;

  
}
function clone_9977105(comp_9977109) {
  var result_9977111 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 460;
    result_9977111 = compile_9976601({config: comp_9977109.config, m_type: NTI9885051, cmatches: null}, comp_9977109.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9977111;

}
var button_9977040 = [compile_button_9885036(document.querySelector("template#button").content)];
if (true) {
attach_9977352(clone_9977105(button_9977040[0]), document.body, null, {times: 0});
}

