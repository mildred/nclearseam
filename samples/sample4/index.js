/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11325765 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11305069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11305042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11296715 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11296709 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11299443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11299437 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11299436 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11299449 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11299431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11296793 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11296777 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11296773 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11299419 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11296733 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11296726 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11296720 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11296719 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11296705 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11299399 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11299395 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11299394 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11299467 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11299180 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11296758 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11296751 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11296745 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11296741 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11265921 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11265765 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11245069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11245042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11235361 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10216259 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11235329 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10216015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10216017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11238334 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11238328 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11238327 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11238340 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11235354 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11235336 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11235335 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11238322 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11235436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11235420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216045 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11235416 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11235347 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11235342 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11235341 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11238310 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11235379 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11235372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216314 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11235366 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11235365 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10216409 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216340 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11235325 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11238290 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11238286 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11238285 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11238358 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11238071 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11235401 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11235394 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11235292 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216033 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11235387 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11236171 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11325904 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11325921 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231090 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231079 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231060 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11231086 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231056 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11231042 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI10187029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10187390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11231072 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231066 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11231100 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231052 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4600232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4855011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4855011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4600232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4855011.node = NNI4855011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI11231067 = {kind: 1, offset: "update", len: 0, typ: NTI11231072, name: "update", sons: null};
NTI11231067.node = NNI11231067;
NTI11231066.base = NTI11231067;
NTI11231100.base = NTI11231066;
NTI10187386.base = NTI10187033;
NTI10187388.base = NTI10187033;
NTI10187390.base = NTI10187033;
var NNI10187031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI10187031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10187031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10187031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10187031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10187031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10187031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI10187031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI10187031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI10187031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI10187031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI10187031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI10187031, name: "NotationNode", len: 0, sons: null}}};
NTI10187031.node = NNI10187031;
var NNI10187029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10187029.node = NNI10187029;
NTI10187029.base = NTI6008;
NTI10187027.base = NTI10187029;
NTI10187537.base = NTI10187041;
var NNI10187083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI10187537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI10187083.node = NNI10187083;
NTI10187083.base = NTI10187043;
NTI10187081.base = NTI10187083;
var NNI10187079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI10187079.node = NNI10187079;
NTI10187079.base = NTI10187043;
NTI10187077.base = NTI10187079;
NTI10187443.base = NTI10187077;
NTI10187445.base = NTI10187077;
var NNI10187043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI10187027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI10187081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI10187443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI10187445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI10187043.node = NNI10187043;
NTI10187043.base = NTI10187035;
NTI10187041.base = NTI10187043;
var NNI10187075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10187075.node = NNI10187075;
NTI10187075.base = NTI10187043;
NTI10187073.base = NTI10187075;
NTI10187423.base = NTI10187073;
NTI10187425.base = NTI10187081;
var NNI10187087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI10187087.node = NNI10187087;
NTI10187087.base = NTI10187043;
NTI10187085.base = NTI10187087;
NTI10187427.base = NTI10187085;
NTI10187429.base = NTI10187041;
var NNI10187071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI10187071.node = NNI10187071;
NTI10187071.base = NTI10187043;
NTI10187069.base = NTI10187071;
NTI10187431.base = NTI10187069;
var NNI10187067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10187067.node = NNI10187067;
NTI10187067.base = NTI10187043;
NTI10187065.base = NTI10187067;
NTI10187433.base = NTI10187065;
var NNI10187039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI10187041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI10187041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI10187041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI10187423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI10187425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI10187427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI10187429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI10187431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI10187433, name: "links", sons: null}]};
NTI10187039.node = NNI10187039;
NTI10187039.base = NTI10187035;
NTI10187037.base = NTI10187039;
var NNI10187091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI10187091.node = NNI10187091;
NTI10187091.base = NTI6008;
NTI10187089.base = NTI10187091;
var NNI10187035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI10187386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI10187388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10187390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI10187033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI10187033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI10187033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI10187031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI10187033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI10187033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI10187033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI10187037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI10187089, name: "style", sons: null}]};
NTI10187035.node = NNI10187035;
var NNI10187005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI10187180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI10187184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI10187188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI10187192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI10187196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI10187200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI10187204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI10187208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI10187212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI10187216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI10187220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI10187224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI10187228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI10187232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI10187236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI10187240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI10187244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI10187248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI10187252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI10187256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI10187260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI10187264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI10187268, name: "onloadend", sons: null}]};
NTI10187005.node = NNI10187005;
NTI10187005.base = NTI6008;
NTI10187035.base = NTI10187005;
NTI10187033.base = NTI10187035;
var NNI11231042 = {kind: 1, offset: "times", len: 0, typ: NTI143, name: "times", sons: null};
NTI11231042.node = NNI11231042;
NTI11231041.base = NTI11231042;
var NNI11231052 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI11231100, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI10187033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI11231041, name: "data", sons: null}]};
NTI11231052.node = NNI11231052;
var NNI11231061 = {kind: 1, offset: "compile", len: 0, typ: NTI11231079, name: "compile", sons: null};
NTI11231061.node = NNI11231061;
NTI11231060.base = NTI11231061;
NTI11231086.base = NTI11231060;
var NNI11231056 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI11231086, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI11231090, name: "config", sons: null}]};
NTI11231056.node = NNI11231056;
NTI11231056.base = NTI6008;
NTI11231052.base = NTI11231056;
NTI11325921.base = NTI11231066;
NTI11325904.base = NTI11231066;
var NNI11236171 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI163, name: "Field1", sons: null}]};
NTI11236171.node = NNI11236171;
var NNI10216033 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI10216033, name: "SimpleTypeSelector", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10216033, name: "SerialTypeSelector", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10216033, name: "CompareTypeSelector", len: 0, sons: null}}};
NTI10216033.node = NNI10216033;
var NNI11235387 = {kind: 3, offset: "kind", len: 3, typ: NTI10216033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11235292, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11235394, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11235401, name: "compare", sons: null}]]};
NTI11235387.node = NNI11235387;
NTI11238071.base = NTI11231066;
NTI11238290.base = NTI11235325;
NTI10216340.base = NTI10216409;
var NNI11235366 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10216314, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11235372, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11235379, name: "clone", sons: null}]};
NTI11235366.node = NNI11235366;
NTI11235365.base = NTI11235366;
var NNI11235342 = {kind: 1, offset: "update", len: 0, typ: NTI11235347, name: "update", sons: null};
NTI11235342.node = NNI11235342;
NTI11235341.base = NTI11235342;
NTI11238310.base = NTI11235341;
var NNI10216045 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI10216045, name: "SimpleIterator", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10216045, name: "SerialIterator", len: 0, sons: null}}};
NTI10216045.node = NNI10216045;
var NNI11235416 = {kind: 3, offset: "kind", len: 2, typ: NTI10216045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11235420, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11235436, name: "serial", sons: null}]]};
NTI11235416.node = NNI11235416;
var NNI11235336 = {kind: 1, offset: "compile", len: 0, typ: NTI11235354, name: "compile", sons: null};
NTI11235336.node = NNI11235336;
NTI11235335.base = NTI11235336;
NTI11238322.base = NTI11235335;
NTI11238334.base = NTI11235341;
var NNI11238328 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11238334, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11235365, name: "mount", sons: null}]};
NTI11238328.node = NNI11238328;
NTI11238327.base = NTI11238328;
NTI11238340.base = NTI11238327;
var NNI11238286 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI11238290, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10216340, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 3, typ: NTI10216033, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "value", len: 0, typ: NTI143, name: "value", sons: null}], 
[setConstr(3), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI11235387, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI11235365, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11235365, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11238310, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI11235416, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI11235365, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI11238322, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI11238340, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10187033, name: "anchor", sons: null}]}]]}]};
NTI11238286.node = NNI11238286;
NTI11238285.base = NTI11238286;
NTI11238358.base = NTI11238285;
var NNI10216017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10216017.node = NNI10216017;
var NNI10216015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10216015.node = NNI10216015;
NTI10216015.base = NTI6221;
NTI10216017.base = NTI10216015;
NTI11235329.base = NTI11235325;
NTI10216259.base = NTI10216409;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
NTI11235361.base = NTI11235335;
NTI11245042.base = NTI11238327;
NTI11245069.base = NTI11235341;
var NNI11265765 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI11265765.node = NNI11265765;
NTI11265921.base = NTI11235341;
var NNI11296741 = {kind: 3, offset: "kind", len: 3, typ: NTI10216033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11296745, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11296751, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11296758, name: "compare", sons: null}]]};
NTI11296741.node = NNI11296741;
NTI11299180.base = NTI11231066;
NTI11299399.base = NTI11296705;
var NNI11296720 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10216314, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11296726, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11296733, name: "clone", sons: null}]};
NTI11296720.node = NNI11296720;
NTI11296719.base = NTI11296720;
NTI11299419.base = NTI11231066;
var NNI11296773 = {kind: 3, offset: "kind", len: 2, typ: NTI10216045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11296777, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11296793, name: "serial", sons: null}]]};
NTI11296773.node = NNI11296773;
NTI11299431.base = NTI11231060;
NTI11299443.base = NTI11231066;
var NNI11299437 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11299443, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11296719, name: "mount", sons: null}]};
NTI11299437.node = NNI11299437;
NTI11299436.base = NTI11299437;
NTI11299449.base = NTI11299436;
var NNI11299395 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI11299399, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10216340, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 3, typ: NTI10216033, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "value", len: 0, typ: NTI11231041, name: "value", sons: null}], 
[setConstr(3), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI11296741, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI11296719, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11296719, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11299419, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI11296773, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI11296719, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI11299431, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI11299449, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10187033, name: "anchor", sons: null}]}]]}]};
NTI11299395.node = NNI11299395;
NTI11299394.base = NTI11299395;
NTI11299467.base = NTI11299394;
NTI11296709.base = NTI11296705;
NTI11296715.base = NTI11231060;
NTI11305042.base = NTI11299436;
NTI11305069.base = NTI11231066;
var NNI11325765 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11231041, name: "Field1", sons: null}]};
NTI11325765.node = NNI11325765;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function nimMax(a_230821, b_230822) {
    var Tmp1;

  var result_230823 = 0;

  BeforeRet: do {
    if ((b_230822 <= a_230821)) {
    Tmp1 = a_230821;
    }
    else {
    Tmp1 = b_230822;
    }
    
    result_230823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230823;

}
function nimMin(a_230803, b_230804) {
    var Tmp1;

  var result_230805 = 0;

  BeforeRet: do {
    if ((a_230803 <= b_230804)) {
    Tmp1 = a_230803;
    }
    else {
    Tmp1 = b_230804;
    }
    
    result_230805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230805;

}
var ConstSet9 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(true);
var ConstSet14 = setConstr(true);
var ConstSet15 = setConstr(true);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
var ConstSet18 = setConstr(false);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(false);
var ConstSet21 = setConstr(false);
var ConstSet22 = setConstr(false);
var ConstSet23 = setConstr(false);
var ConstSet24 = setConstr(false);
var ConstSet25 = setConstr(false);
var ConstSet26 = setConstr(false);
var ConstSet27 = setConstr(true);
var ConstSet28 = setConstr(true);
var ConstSet29 = setConstr(0);
var ConstSet30 = setConstr(true);
var ConstSet31 = setConstr(1);
var ConstSet32 = setConstr(true);
var ConstSet33 = setConstr(true);
var ConstSet34 = setConstr(true);
var ConstSet35 = setConstr(true);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(true);
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(true);
var ConstSet40 = setConstr(true);
var ConstSet41 = setConstr(true);
var ConstSet42 = setConstr(true);
var ConstSet43 = setConstr(true);
var ConstSet44 = setConstr(false);
var ConstSet45 = setConstr(0);
var ConstSet46 = setConstr(false);
var ConstSet47 = setConstr(1);
var ConstSet48 = setConstr(1);
var ConstSet49 = setConstr(false);
var ConstSet50 = setConstr(1);
var ConstSet51 = setConstr(2);
var ConstSet52 = setConstr(false);
var ConstSet53 = setConstr(2);
var ConstSet54 = setConstr(2);
var ConstSet55 = setConstr(false);
var ConstSet56 = setConstr(false);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(false);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(false);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(false);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(true);
var ConstSet67 = setConstr(true);
var ConstSet68 = setConstr(true);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(true);
var ConstSet71 = setConstr(true);
var ConstSet72 = setConstr(true);
var ConstSet73 = setConstr(false);
var ConstSet74 = setConstr(false);
var ConstSet75 = setConstr(false);
var ConstSet76 = setConstr(1);
var ConstSet77 = setConstr(false);
var ConstSet78 = setConstr(false);
var ConstSet79 = setConstr(false);
var ConstSet80 = setConstr(false);
var ConstSet81 = setConstr(false);
var ConstSet82 = setConstr(false);
var ConstSet83 = setConstr(false);
var ConstSet84 = setConstr(true);
var ConstSet85 = setConstr(true);
var ConstSet86 = setConstr(0);
var ConstSet87 = setConstr(true);
var ConstSet88 = setConstr(1);
var ConstSet89 = setConstr(true);
var ConstSet90 = setConstr(true);
var ConstSet91 = setConstr(true);
var ConstSet92 = setConstr(true);
var ConstSet93 = setConstr(true);
var ConstSet94 = setConstr(true);
var ConstSet95 = setConstr(true);
var ConstSet96 = setConstr(true);
var ConstSet97 = setConstr(true);
var ConstSet98 = setConstr(true);
var ConstSet99 = setConstr(true);
var ConstSet100 = setConstr(true);
var ConstSet101 = setConstr(false);
var ConstSet102 = setConstr(0);
var ConstSet103 = setConstr(false);
var ConstSet104 = setConstr(1);
var ConstSet105 = setConstr(1);
var ConstSet106 = setConstr(false);
var ConstSet107 = setConstr(1);
var ConstSet108 = setConstr(2);
var ConstSet109 = setConstr(false);
var ConstSet110 = setConstr(2);
var ConstSet111 = setConstr(2);
var ConstSet112 = setConstr(false);
var ConstSet113 = setConstr(false);
var ConstSet114 = setConstr(false);
var ConstSet115 = setConstr(false);
var ConstSet116 = setConstr(false);
var ConstSet117 = setConstr(false);
var ConstSet118 = setConstr(false);
var ConstSet119 = setConstr(false);
var ConstSet120 = setConstr(false);
var ConstSet121 = setConstr(false);
var ConstSet122 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_850031 = [0];
var components_10218124 = [{Field0: null}];
var state_10244005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_10575231 = [null];
var local_instance_10575232 = [null];
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__11103098 = 0;
      colontmp__11103098 = (i_160051 - 1);
      var res_11103103 = colontmp__11103098;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11103103)) break L8;
            j_175236 = res_11103103;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_11103103 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function rotl_10244230(x_10244232, k_10244233) {
  var result_10244234 = 0;

  var F={procname:"random.rotl",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 122;
    result_10244234 = ((x_10244232 << k_10244233) | ((x_10244232 >>> 0) >>> ((64 - k_10244233) >>> 0)));
  framePtr = F.prev;

  return result_10244234;

}
function next_10244258(r_10244261) {
  var result_10244262 = 0;

  var F={procname:"random.next",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 139;
    var s0_10244263 = r_10244261.a0;
    F.line = 140;
    var s1_10244264 = r_10244261.a1;
    F.line = 141;
    result_10244262 = ((s0_10244263 + s1_10244264) >>> 0);
    F.line = 142;
    s1_10244264 = (s1_10244264 ^ s0_10244263);
    F.line = 143;
    r_10244261.a0 = ((rotl_10244230(s0_10244263, 55) ^ s1_10244264) ^ (s1_10244264 << 14));
    F.line = 144;
    r_10244261.a1 = rotl_10244230(s1_10244264, 36);
  framePtr = F.prev;

  return result_10244262;

}
function init_rand_10245612(seed_10245614) {
  var result_10245615 = [{a0: 0, a1: 0}];

  var F={procname:"random.initRand",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    if (!(!((seed_10245614 == 0)))) {
    F.line = 572;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/random.nim(572, 12) `seed != 0` "));
    }
    
    F.line = 573;
    result_10245615[0].a0 = (seed_10245614 >> 16);
    F.line = 574;
    result_10245615[0].a1 = (seed_10245614 & 65535);
    F.line = 575;
    next_10244258(result_10245615[0]);
  framePtr = F.prev;

  return result_10245615[0];

}
var rand_11103079 = [init_rand_10245612(1)];
async function init_comp_11365601(component_11365606, component_11365606_Idx, node_11365608, creator_11365610) {
  var result_11365612 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 19;
    var n_11365634 = (await node_11365608);
    F.line = 20;
    component_11365606[component_11365606_Idx] = creator_11365610(n_11365634);
    F.line = 131;
    result_11365612 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11365612;

}
function declare_11365583(registry_11365586, component_11365589, component_11365589_Idx, node_11365591, creator_11365593) {
    function HEX3Aanonymous_11365594() {
      var result_11365599 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 23;
        result_11365599 = init_comp_11365601(component_11365589, component_11365589_Idx, node_11365591, creator_11365593);
      framePtr = F.prev;

      return result_11365599;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 23;
    if (registry_11365586.Field0 != null) { registry_11365586.Field0.push(HEX3Aanonymous_11365594); } else { registry_11365586.Field0 = [HEX3Aanonymous_11365594]; };
  framePtr = F.prev;

  
}
async function fetch_template_11170001(rel_path_11170003) {
  var result_11170008 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 9;
    var response_11195032 = (await (window.fetch((toJSStr(rel_path_11170003)))));
    F.line = 10;
    var text_11200026 = (await (response_11195032.text()));
    F.line = 11;
    result_11170008 = (window.document.createRange().createContextualFragment((text_11200026)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11170008;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function nsuToHex(x_9450243, len_9450244) {
  var result_9450245 = null;

  var F={procname:"strutils.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 936;
    var n_9450247 = x_9450243;
    F.line = 937;
    result_9450245 = nimCopy(null, mnewString(len_9450244), NTI112);
    L1: do {
      F.line = 938;
      var j_9450254 = 0;
      F.line = 6;
      var colontmp__11365741 = 0;
      F.line = 938;
      colontmp__11365741 = subInt(len_9450244, 1);
      F.line = 28;
      var res_11365742 = colontmp__11365741;
      L2: do {
        F.line = 29;
          L3: while (true) {
          if (!(0 <= res_11365742)) break L3;
            F.line = 938;
            j_9450254 = res_11365742;
            F.line = 939;
            result_9450245[chckIndx(j_9450254, 0, (result_9450245 != null ? result_9450245.length : 0)+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9450247 & 15), 0, (makeNimstrLit("0123456789ABCDEF") != null ? makeNimstrLit("0123456789ABCDEF").length : 0)+0-1)-0];
            F.line = 940;
            n_9450247 = (n_9450247 >> 4);
            if (((n_9450247 == 0) && (x_9450243 < 0))) {
            F.line = 942;
            n_9450247 = -1;
            }
            
            F.line = 31;
            res_11365742 = subInt(res_11365742, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9450245;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function to_hex_11103115(x_11103118) {
  var result_11103119 = null;

  var F={procname:"toHex.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 945;
    result_11103119 = nimCopy(null, nsuToHex(chckRange(x_11103118, -9223372036854775808, 9223372036854775807), 16), NTI112);
  framePtr = F.prev;

  return result_11103119;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1445017(s_1445019, b_1445021, b_1445021_Idx, start_1445022) {
      var Tmp1;
          var Tmp4;

  var result_1445024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1445025 = start_1445022;
    if (((i_1445025 < (s_1445019 != null ? s_1445019.length : 0)) && (s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1445025 = addInt(i_1445025, 1);
    }
    
      if (!(i_1445025 < (s_1445019 != null ? s_1445019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1445021[b_1445021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1445025 < (s_1445019 != null ? s_1445019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1455016 = subInt(s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0], 48);
          if ((b_1445021[b_1445021_Idx] <= divInt(subInt(2147483647, c_1455016), 10))) {
          F.line = 483;
          b_1445021[b_1445021_Idx] = addInt(mulInt(b_1445021[b_1445021_Idx], 10), c_1455016);
          }
          else {
            F.line = 485;
            b_1445021[b_1445021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1445025 = addInt(i_1445025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1445025 < (s_1445019 != null ? s_1445019.length : 0)) && (s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1445025 = addInt(i_1445025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1445024 = subInt(i_1445025, start_1445022);
    }
    
  framePtr = F.prev;

  return result_1445024;

}
function HEX5BHEX5D_4855068(s_4855072, x_4855074) {
  var result_4855075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4855201 = x_4855074.a;
    F.line = 2437;
    var l_4855401 = addInt(subInt(subInt((s_4855072 != null ? s_4855072.length : 0), x_4855074.b), a_4855201), 1);
    F.line = 2438;
    result_4855075 = nimCopy(null, mnewString(chckRange(l_4855401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4855409 = 0;
      F.line = 106;
      var i_11365772 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11365772 < l_4855401)) break L3;
            F.line = 2439;
            i_4855409 = i_11365772;
            F.line = 2439;
            result_4855075[chckIndx(i_4855409, 0, (result_4855075 != null ? result_4855075.length : 0)+0-1)-0] = s_4855072[chckIndx(addInt(i_4855409, a_4855201), 0, (s_4855072 != null ? s_4855072.length : 0)+0-1)-0];
            F.line = 109;
            i_11365772 = addInt(i_11365772, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4855075;

}
function HEX2EHEX2E_4855001(a_4855006, b_4855008) {
  var result_4855014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4855014, {a: a_4855006, b: b_4855008}, NTI4855011);
  framePtr = F.prev;

  return result_4855014;

}
function parse_standard_format_specifier_10080322(s_10080324, start_10080325, ignore_unknown_suffix_10080327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10080328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_10080328.fill = 32;
    F.line = 380;
    result_10080328.align = 0;
    F.line = 381;
    result_10080328.sign = 45;
    F.line = 382;
    var i_10080331 = start_10080325;
    if (((addInt(i_10080331, 1) < (s_10080324 != null ? s_10080324.length : 0)) && (ConstSet2[s_10080324[chckIndx(addInt(i_10080331, 1), 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_10080328.fill = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 385;
    result_10080328.align = s_10080324[chckIndx(addInt(i_10080331, 1), 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 386;
    i_10080331 = addInt(i_10080331, 2);
    }
    else {
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (ConstSet3[s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_10080328.align = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 389;
    i_10080331 = addInt(i_10080331, 1);
    }
    }
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (ConstSet4[s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_10080328.sign = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 393;
    i_10080331 = addInt(i_10080331, 1);
    }
    
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_10080328.alternateForm = true;
    F.line = 397;
    i_10080331 = addInt(i_10080331, 1);
    }
    
      if (!((addInt(i_10080331, 1) < (s_10080324 != null ? s_10080324.length : 0)) && (s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_10080324[chckIndx(addInt(i_10080331, 1), 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_10080328.padWithZero = true;
    F.line = 401;
    i_10080331 = addInt(i_10080331, 1);
    }
    
    F.line = 403;
    var parsed_length_10100015 = parse_saturated_natural_1445017(s_10080324, result_10080328, "minimumWidth", i_10080331);
    F.line = 404;
    i_10080331 = addInt(i_10080331, parsed_length_10100015);
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_10080331 = addInt(i_10080331, 1);
    F.line = 407;
    var parsed_length_b_10100029 = parse_saturated_natural_1445017(s_10080324, result_10080328, "precision", i_10080331);
    F.line = 408;
    i_10080331 = addInt(i_10080331, parsed_length_b_10100029);
    }
    else {
      F.line = 410;
      result_10080328.precision = -1;
    }
    
      if (!(i_10080331 < (s_10080324 != null ? s_10080324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_10080328.typ = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 414;
    i_10080331 = addInt(i_10080331, 1);
    }
    
    F.line = 415;
    result_10080328.endPosition = i_10080331;
      if (!!((i_10080331 == (s_10080324 != null ? s_10080324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_10080327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4855068(s_10080324, HEX2EHEX2E_4855001(i_10080331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_10080328;

}
function nucruneLen(s_1526829) {
  var result_1526830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1526832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1526832 < (s_1526829 != null ? s_1526829.length : 0))) break L2;
          if ((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1526832 = addInt(i_1526832, 1);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1526832 = addInt(i_1526832, 2);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1526832 = addInt(i_1526832, 3);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1526832 = addInt(i_1526832, 4);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1526832 = addInt(i_1526832, 5);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1526832 = addInt(i_1526832, 6);
          }
          else {
            F.line = 49;
          i_1526832 = addInt(i_1526832, 1);
          }
          }}}}}
          F.line = 50;
          result_1526830 = addInt(result_1526830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1526830;

}
function rune_len_at_1526931(s_1526933, i_1526934) {
  var result_1526935 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1526935 = 1;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1526935 = 2;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1526935 = 3;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1526935 = 4;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1526935 = 5;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1526935 = 6;
    }
    else {
      F.line = 68;
      result_1526935 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1526935;

}
function rune_offset_2150244(s_2150246, pos_2150247, start_2150248) {
  var result_2150249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_2150251 = 0;
    F.line = 320;
    var o_2150252 = start_2150248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_2150251 < pos_2150247)) break L2;
          F.line = 322;
          o_2150252 = addInt(o_2150252, chckRange(rune_len_at_1526931(s_2150246, o_2150252), 0, 2147483647));
          if (((s_2150246 != null ? s_2150246.length : 0) <= o_2150252)) {
          F.line = 324;
          result_2150249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_2150251 = addInt(i_2150251, 1);
        }
    } while(false);
    F.line = 326;
    result_2150249 = o_2150252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_2150249;

}
function validate_utf8_1770229(s_1770231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1770232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1770234 = 0;
    F.line = 173;
    var l_1770235 = (s_1770231 != null ? s_1770231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1770234 < l_1770235)) break L2;
          if ((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1770234 = addInt(i_1770234, 1);
          }
          else {
          if ((((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1770232 = i_1770234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1770234, 1) < l_1770235)) Tmp3 = false; else {              Tmp3 = (((s_1770231[chckIndx(addInt(i_1770234, 1), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1770234 = addInt(i_1770234, 2);
          }
          else {
            F.line = 180;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1770234, 2) < l_1770235)) Tmp5 = false; else {              Tmp5 = (((s_1770231[chckIndx(addInt(i_1770234, 1), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1770231[chckIndx(addInt(i_1770234, 2), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1770234 = addInt(i_1770234, 3);
          }
          else {
            F.line = 184;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1770234, 3) < l_1770235)) Tmp8 = false; else {              Tmp8 = (((s_1770231[chckIndx(addInt(i_1770234, 1), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1770231[chckIndx(addInt(i_1770234, 2), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1770231[chckIndx(addInt(i_1770234, 3), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1770234 = addInt(i_1770234, 4);
          }
          else {
            F.line = 190;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1770232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1770232;

}
function nsuRepeatChar(c_9625048, count_9625049) {
  var result_9625050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9625050 = nimCopy(null, mnewString(count_9625049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9625059 = 0;
      F.line = 66;
      var colontmp__11365803 = 0;
      F.line = 1283;
      colontmp__11365803 = subInt(count_9625049, 1);
      F.line = 77;
      var res_11365804 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11365804 <= colontmp__11365803)) break L3;
            F.line = 1283;
            i_9625059 = res_11365804;
            F.line = 1283;
            result_9625050[chckIndx(i_9625059, 0, (result_9625050 != null ? result_9625050.length : 0)+0-1)-0] = c_9625048;
            F.line = 80;
            res_11365804 = addInt(res_11365804, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9625050;

}
function align_string_10080222(s_10080224, minimum_width_10080225, align_10080226, fill_10080227) {
      var Tmp1;

  var result_10080228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_10080225 == 0)) {
    F.line = 282;
    result_10080228 = nimCopy(null, s_10080224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1770229(s_10080224) == -1)) {
      Tmp1 = nucruneLen(s_10080224);
      }
      else {
      Tmp1 = (s_10080224 != null ? s_10080224.length : 0);
      }
      
      var s_rune_len_10080229 = Tmp1;
      F.line = 285;
      var to_fill_10080230 = subInt(minimum_width_10080225, s_rune_len_10080229);
      if ((to_fill_10080230 <= 0)) {
      F.line = 287;
      result_10080228 = nimCopy(null, s_10080224, NTI112);
      }
      else {
      if (((align_10080226 == 60) || (align_10080226 == 0))) {
      F.line = 289;
      result_10080228 = nimCopy(null, (s_10080224 || []).concat(nsuRepeatChar(fill_10080227, chckRange(to_fill_10080230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_10080226 == 94)) {
      F.line = 291;
      var half_10080231 = divInt(to_fill_10080230, 2);
      F.line = 292;
      result_10080228 = nimCopy(null, (nsuRepeatChar(fill_10080227, chckRange(half_10080231, 0, 2147483647)) || []).concat(s_10080224 || [],nsuRepeatChar(fill_10080227, chckRange(subInt(to_fill_10080230, half_10080231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_10080228 = nimCopy(null, (nsuRepeatChar(fill_10080227, chckRange(to_fill_10080230, 0, 2147483647)) || []).concat(s_10080224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_10080228;

}
function format_value_10125080(result_10125083, result_10125083_Idx, value_10125084, specifier_10125085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_10125086 = parse_standard_format_specifier_10080322(specifier_10125085, 0, false);
    F.line = 503;
    var value_10125087 = nimCopy(null, value_10125084, NTI112);
    F.line = 504;
    switch (spec_10125086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10125086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_10125086.precision == -1))) {
    if ((spec_10125086.precision < nucruneLen(value_10125087))) {
    F.line = 512;
    (value_10125087 == null ? value_10125087 = mnewString(chckRange(rune_offset_2150244(value_10125087, chckRange(spec_10125086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_10125087.length = chckRange(rune_offset_2150244(value_10125087, chckRange(spec_10125086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_10125083[result_10125083_Idx] != null) { result_10125083[result_10125083_Idx] = (result_10125083[result_10125083_Idx]).concat(align_string_10080222(value_10125087, spec_10125086.minimumWidth, spec_10125086.align, spec_10125086.fill)); } else { result_10125083[result_10125083_Idx] = align_string_10080222(value_10125087, spec_10125086.minimumWidth, spec_10125086.align, spec_10125086.fill).slice(); };
  framePtr = F.prev;

  
}
function nsuFindChar(s_9770216, sub_9770217, start_9770218, last_9770219) {
    var Tmp1;

  var result_9770221 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    if ((last_9770219 == 0)) {
    Tmp1 = (s_9770216 != null ? (s_9770216.length-1) : -1);
    }
    else {
    Tmp1 = last_9770219;
    }
    
    var last_9770223 = Tmp1;
    L2: do {
      F.line = 1867;
      var i_9770606 = 0;
      F.line = 66;
      var colontmp__11365821 = 0;
      F.line = 1867;
      colontmp__11365821 = start_9770218;
      F.line = 77;
      var res_11365822 = colontmp__11365821;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_11365822 <= last_9770223)) break L4;
            F.line = 1867;
            i_9770606 = res_11365822;
            if ((sub_9770217 == s_9770216[chckIndx(i_9770606, 0, (s_9770216 != null ? s_9770216.length : 0)+0-1)-0])) {
            F.line = 1868;
            result_9770221 = i_9770606;
            break BeforeRet;
            }
            
            F.line = 80;
            res_11365822 = addInt(res_11365822, 1);
          }
      } while(false);
    } while(false);
    F.line = 1869;
    result_9770221 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9770221;

}
function substr_341022(s_341024, first_341025, last_341026) {
  var result_341027 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2943;
    var first_341028 = nimMax(first_341025, 0);
    F.line = 2944;
    var l_341030 = nimMax(addInt(subInt(nimMin(last_341026, (s_341024 != null ? (s_341024.length-1) : -1)), first_341028), 1), 0);
    F.line = 2945;
    result_341027 = nimCopy(null, mnewString(chckRange(l_341030, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2946;
      var i_341039 = 0;
      F.line = 66;
      var colontmp__11365828 = 0;
      F.line = 2946;
      colontmp__11365828 = subInt(l_341030, 1);
      F.line = 77;
      var res_11365829 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11365829 <= colontmp__11365828)) break L3;
            F.line = 2946;
            i_341039 = res_11365829;
            F.line = 2947;
            result_341027[chckIndx(i_341039, 0, (result_341027 != null ? result_341027.length : 0)+0-1)-0] = s_341024[chckIndx(addInt(i_341039, first_341028), 0, (s_341024 != null ? s_341024.length : 0)+0-1)-0];
            F.line = 80;
            res_11365829 = addInt(res_11365829, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_341027;

}
function substr_341053(s_341055, first_341056) {
  var result_341058 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2950;
    result_341058 = nimCopy(null, substr_341022(s_341055, first_341056, (s_341055 != null ? (s_341055.length-1) : -1)), NTI112);
  framePtr = F.prev;

  return result_341058;

}
function nsuInitSkipTable(a_9765081, sub_9765082) {
  var F={procname:"strutils.initSkipTable",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1791;
    var m_9765083 = (sub_9765082 != null ? sub_9765082.length : 0);
    F.line = 1792;
    var i_9765085 = 0;
    L1: do {
      F.line = 1793;
        L2: while (true) {
        if (!(i_9765085 <= 248)) break L2;
          F.line = 1794;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 0), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1795;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 1), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1796;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 2), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1797;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 3), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1798;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 4), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1799;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 5), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1800;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 6), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1801;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 7), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1802;
          i_9765085 = addInt(i_9765085, 8);
        }
    } while(false);
    L3: do {
      F.line = 1804;
      var i_9765101 = 0;
      F.line = 104;
      var colontmp__11365836 = 0;
      F.line = 1804;
      colontmp__11365836 = subInt(m_9765083, 1);
      F.line = 106;
      var i_11365837 = 0;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_11365837 < colontmp__11365836)) break L5;
            F.line = 1804;
            i_9765101 = i_11365837;
            F.line = 1805;
            a_9765081[chckIndx(sub_9765082[chckIndx(i_9765101, 0, (sub_9765082 != null ? sub_9765082.length : 0)+0-1)-0], 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = subInt(subInt(m_9765083, 1), i_9765101);
            F.line = 109;
            i_11365837 = addInt(i_11365837, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function nsuFindStrA(a_9765117, s_9765118, sub_9765119, start_9765120, last_9765121) {
    var Tmp1;

  var result_9765123 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1815;
    if ((last_9765121 == 0)) {
    Tmp1 = (s_9765118 != null ? (s_9765118.length-1) : -1);
    }
    else {
    Tmp1 = last_9765121;
    }
    
    var last_9765125 = Tmp1;
    F.line = 1816;
    var sub_last_9765126 = subInt((sub_9765119 != null ? sub_9765119.length : 0), 1);
    if ((sub_last_9765126 == -1)) {
    F.line = 1821;
    result_9765123 = start_9765120;
    break BeforeRet;
    }
    
    F.line = 1825;
    var skip_9765127 = start_9765120;
    L2: do {
      F.line = 1827;
        L3: while (true) {
        if (!(sub_last_9765126 <= subInt(last_9765125, skip_9765127))) break L3;
          F.line = 1828;
          var i_9770001 = sub_last_9765126;
          L4: do {
            F.line = 1829;
              L5: while (true) {
              if (!(s_9765118[chckIndx(addInt(skip_9765127, i_9770001), 0, (s_9765118 != null ? s_9765118.length : 0)+0-1)-0] == sub_9765119[chckIndx(i_9770001, 0, (sub_9765119 != null ? sub_9765119.length : 0)+0-1)-0])) break L5;
                if ((i_9770001 == 0)) {
                F.line = 1831;
                result_9765123 = skip_9765127;
                break BeforeRet;
                }
                
                F.line = 1832;
                i_9770001 = subInt(i_9770001, 1);
              }
          } while(false);
          F.line = 1833;
          skip_9765127 = addInt(skip_9765127, a_9765117[chckIndx(s_9765118[chckIndx(addInt(skip_9765127, sub_last_9765126), 0, (s_9765118 != null ? s_9765118.length : 0)+0-1)-0], 0, (a_9765117 != null ? a_9765117.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 1834;
    result_9765123 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9765123;

}
function nsuReplaceStr(s_9840016, sub_9840017, by_9840018) {
  var result_9840019 = null;

  var F={procname:"strutils.replace",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2056;
    result_9840019 = nimCopy(null, [], NTI112);
    F.line = 2057;
    var sub_len_9840020 = (sub_9840017 != null ? sub_9840017.length : 0);
    if ((sub_len_9840020 == 0)) {
    F.line = 2059;
    result_9840019 = nimCopy(null, s_9840016, NTI112);
    }
    else {
    if ((sub_len_9840020 == 1)) {
    F.line = 2063;
    var c_9840021 = sub_9840017[chckIndx(0, 0, (sub_9840017 != null ? sub_9840017.length : 0)+0-1)-0];
    F.line = 2064;
    var last_9840023 = (s_9840016 != null ? (s_9840016.length-1) : -1);
    F.line = 2065;
    var i_9840025 = 0;
    L1: do {
      F.line = 2066;
        L2: while (true) {
        if (!true) break L2;
          F.line = 2067;
          var j_9840026 = nsuFindChar(s_9840016, c_9840021, chckRange(i_9840025, 0, 2147483647), last_9840023);
          if ((j_9840026 < 0)) {
          F.line = 2068;
          break L1;
          }
          
          F.line = 2069;
          if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341022(s_9840016, i_9840025, subInt(j_9840026, 1))); } else { result_9840019 = substr_341022(s_9840016, i_9840025, subInt(j_9840026, 1)).slice(); };
          F.line = 2070;
          if (result_9840019 != null) { result_9840019 = (result_9840019).concat(by_9840018); } else { result_9840019 = by_9840018.slice(); };
          F.line = 2071;
          i_9840025 = addInt(j_9840026, sub_len_9840020);
        }
    } while(false);
    F.line = 2073;
    if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341053(s_9840016, i_9840025)); } else { result_9840019 = substr_341053(s_9840016, i_9840025).slice(); };
    }
    else {
      F.line = 2075;
      var a_9840027 = [new Int32Array(256)];
      F.line = 2076;
      nsuInitSkipTable(a_9840027[0], sub_9840017);
      F.line = 2077;
      var last_9840030 = (s_9840016 != null ? (s_9840016.length-1) : -1);
      F.line = 2078;
      var i_9840032 = 0;
      L3: do {
        F.line = 2079;
          L4: while (true) {
          if (!true) break L4;
            F.line = 2080;
            var j_9840033 = nsuFindStrA(a_9840027[0], s_9840016, sub_9840017, chckRange(i_9840032, 0, 2147483647), last_9840030);
            if ((j_9840033 < 0)) {
            F.line = 2081;
            break L3;
            }
            
            F.line = 2082;
            if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341022(s_9840016, i_9840032, subInt(j_9840033, 1))); } else { result_9840019 = substr_341022(s_9840016, i_9840032, subInt(j_9840033, 1)).slice(); };
            F.line = 2083;
            if (result_9840019 != null) { result_9840019 = (result_9840019).concat(by_9840018); } else { result_9840019 = by_9840018.slice(); };
            F.line = 2084;
            i_9840032 = addInt(j_9840033, sub_len_9840020);
          }
      } while(false);
      F.line = 2086;
      if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341053(s_9840016, i_9840032)); } else { result_9840019 = substr_341053(s_9840016, i_9840032).slice(); };
    }
    }
  framePtr = F.prev;

  return result_9840019;

}
function scope_11103110(node_11103113) {
  var F={procname:"css.scope",prev:framePtr,filename:"css.nim",line:0};
  framePtr = F;
    F.line = 11;
    var comp_11103138 = to_hex_11103115(next_10244258(rand_11103079[0]));
    L1: do {
      F.line = 12;
      var element_11110214 = null;
      F.line = 182;
      var colontmp__11365730 = null;
      F.line = 12;
      colontmp__11365730 = node_11103113.querySelectorAll("*");
      F.line = 184;
      var i_11365732 = 0;
      F.line = 185;
      var l_11365733 = (colontmp__11365730 != null ? colontmp__11365730.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11365732 < l_11365733)) break L3;
            F.line = 12;
            element_11110214 = colontmp__11365730[chckIndx(i_11365732, 0, (colontmp__11365730 != null ? colontmp__11365730.length : 0)+0-1)-0];
            F.line = 13;
            F.line = 13;
            var fmt_res_11110218 = [mnewString(0)];
            F.line = 13;
            if (fmt_res_11110218[0] != null) { fmt_res_11110218[0] = (fmt_res_11110218[0]).concat(makeNimstrLit("component-")); } else { fmt_res_11110218[0] = makeNimstrLit("component-"); };
            F.line = 13;
            format_value_10125080(fmt_res_11110218, 0, comp_11103138, []);
            element_11110214.classList.add(toJSStr(fmt_res_11110218[0]));
            F.line = 188;
            i_11365732 = addInt(i_11365732, 1);
            if (!(((colontmp__11365730 != null ? colontmp__11365730.length : 0) == l_11365733))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 14;
      var style_11115008 = null;
      F.line = 182;
      var colontmp__11365736 = null;
      F.line = 14;
      colontmp__11365736 = node_11103113.querySelectorAll("style[scope]");
      F.line = 184;
      var i_11365737 = 0;
      F.line = 185;
      var l_11365738 = (colontmp__11365736 != null ? colontmp__11365736.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_11365737 < l_11365738)) break L6;
            F.line = 14;
            style_11115008 = colontmp__11365736[chckIndx(i_11365737, 0, (colontmp__11365736 != null ? colontmp__11365736.length : 0)+0-1)-0];
            F.line = 15;
            var scope_11115014 = to_hex_11103115(next_10244258(rand_11103079[0]));
            F.line = 16;
            var fmt_res_11120004 = [mnewString(0)];
            F.line = 16;
            if (fmt_res_11120004[0] != null) { fmt_res_11120004[0] = (fmt_res_11120004[0]).concat(makeNimstrLit("scope-")); } else { fmt_res_11120004[0] = makeNimstrLit("scope-"); };
            F.line = 16;
            format_value_10125080(fmt_res_11120004, 0, scope_11115014, []);
            (style_11115008.parentNode).classList.add((toJSStr(fmt_res_11120004[0])));
            F.line = 21;
            F.line = 20;
            var fmt_res_11150005 = [mnewString(0)];
            F.line = 20;
            if (fmt_res_11150005[0] != null) { fmt_res_11150005[0] = (fmt_res_11150005[0]).concat(makeNimstrLit(".scope-")); } else { fmt_res_11150005[0] = makeNimstrLit(".scope-"); };
            F.line = 20;
            format_value_10125080(fmt_res_11150005, 0, scope_11115014, []);
            F.line = 21;
            var fmt_res_11155002 = [mnewString(0)];
            F.line = 21;
            if (fmt_res_11155002[0] != null) { fmt_res_11155002[0] = (fmt_res_11155002[0]).concat(makeNimstrLit(".component-")); } else { fmt_res_11155002[0] = makeNimstrLit(".component-"); };
            F.line = 21;
            format_value_10125080(fmt_res_11155002, 0, comp_11103138, []);
            style_11115008.textContent = toJSStr(nsuReplaceStr(nsuReplaceStr(cstrToNimstr(style_11115008.textContent), makeNimstrLit(":scope"), fmt_res_11150005[0]), makeNimstrLit(":component"), fmt_res_11155002[0]));
            F.line = 188;
            i_11365737 = addInt(i_11365737, 1);
            if (!(((colontmp__11365736 != null ? colontmp__11365736.length : 0) == l_11365738))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
async function fetch_template_11230001(rel_path_11230003, template_selector_11230004, css_11230005) {
  var result_11230010 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 14;
    var tmpl_11230035 = (await fetch_template_11170001(rel_path_11230003));
    F.line = 15;
    var node_11230036 = tmpl_11230035.querySelector(toJSStr(template_selector_11230004)).content;
    if (css_11230005) {
    F.line = 17;
    scope_11103110(node_11230036);
    }
    
    F.line = 18;
    result_11230010 = node_11230036;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11230010;

}
function new_11365207() {
  var result_11365211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11365401 = null;
    F.line = 851;
    r_11365401 = {m_type: NTI11231052, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_11365211 = r_11365401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11365211;

}
function add_11315218(x_11315223, x_11315223_Idx, y_11315225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_11315231 = (x_11315223[x_11315223_Idx] != null ? x_11315223[x_11315223_Idx].length : 0);
    F.line = 1209;
    if (x_11315223[x_11315223_Idx] === null) x_11315223[x_11315223_Idx] = [];
               if (x_11315223[x_11315223_Idx].length < (Tmp1 = chckRange(addInt(xl_11315231, (y_11315225 != null ? y_11315225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_11315223[x_11315223_Idx].length;i<Tmp1;++i) x_11315223[x_11315223_Idx].push(null); }
               else { x_11315223[x_11315223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_11315256 = 0;
      F.line = 66;
      var colontmp__11365849 = 0;
      F.line = 1210;
      colontmp__11365849 = (y_11315225 != null ? (y_11315225.length-1) : -1);
      F.line = 77;
      var res_11365850 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_11365850 <= colontmp__11365849)) break L4;
            F.line = 1210;
            i_11315256 = res_11365850;
            F.line = 1210;
            x_11315223[x_11315223_Idx][chckIndx(addInt(xl_11315231, i_11315256), 0, (x_11315223[x_11315223_Idx] != null ? x_11315223[x_11315223_Idx].length : 0)+0-1)-0] = y_11315225[chckIndx(i_11315256, 0, (y_11315225 != null ? y_11315225.length : 0)+0-1)-0];
            F.line = 80;
            res_11365850 = addInt(res_11365850, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_11325897(cfgs_11325902, node_11325903) {
  var result_11325906 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 465;
    result_11325906[0] = nimCopy(null, [], NTI11325921);
    L1: do {
      F.line = 466;
      var cfg_11325928 = null;
      F.line = 184;
      var i_11365845 = 0;
      F.line = 185;
      var l_11365846 = (cfgs_11325902 != null ? cfgs_11325902.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11365845 < l_11365846)) break L3;
            F.line = 466;
            cfg_11325928 = cfgs_11325902[chckIndx(i_11365845, 0, (cfgs_11325902 != null ? cfgs_11325902.length : 0)+0-1)-0];
            F.line = 467;
            add_11315218(result_11325906, 0, cfg_11325928.compile(node_11325903));
            F.line = 188;
            i_11365845 = addInt(i_11365845, 1);
            if (!(((cfgs_11325902 != null ? cfgs_11325902.length : 0) == l_11365846))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11325906[0];

}
function compile_11355652(cfg_11355656, node_11355657) {
  var result_11355659 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_11355657 == null)))) {
    F.line = 472;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(472, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 473;
    result_11355659 = new_11365207();
    F.line = 474;
    result_11355659.config = cfg_11355656.config;
    F.line = 475;
    result_11355659.original_node = node_11355657;
    F.line = 476;
    result_11355659.node = node_11355657.cloneNode(true);
    F.line = 478;
    result_11355659.config(result_11355659);
    F.line = 479;
    result_11355659.matches = nimCopy(null, compile_11325897(result_11355659.cmatches, result_11355659.node), NTI11325904);
  framePtr = F.prev;

  return result_11355659;

}
function new_11355275() {
  var result_11355279 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11355401 = null;
    F.line = 851;
    r_11355401 = {m_type: NTI11231056, cmatches: null, config: null};
    F.line = 852;
    result_11355279 = r_11355401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11355279;

}
function create_11355260(config_11355266) {
  var result_11355268 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_11355268 = new_11355275();
    F.line = 230;
    result_11355268.config = config_11355266;
  framePtr = F.prev;

  return result_11355268;

}
function compile_11346534(node_11346539, configurator_11346545) {
  var result_11346547 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 627;
    if (!(!((node_11346539 == null)))) {
    F.line = 629;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(629, 10) `\x0Anot (node == nil)` "));
    }
    
    result_11346547 = compile_11355652(create_11355260(configurator_11346545), node_11346539);
  framePtr = F.prev;

  return result_11346547;

}
function refresh_11296059(c_11296064, refresh_11296066) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 340;
    if (c_11296064.refresh != null) { c_11296064.refresh.push(refresh_11296066); } else { c_11296064.refresh = [refresh_11296066]; };
  framePtr = F.prev;

  
}
function add_11255218(x_11255223, x_11255223_Idx, y_11255225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_11255231 = (x_11255223[x_11255223_Idx] != null ? x_11255223[x_11255223_Idx].length : 0);
    F.line = 1209;
    if (x_11255223[x_11255223_Idx] === null) x_11255223[x_11255223_Idx] = [];
               if (x_11255223[x_11255223_Idx].length < (Tmp1 = chckRange(addInt(xl_11255231, (y_11255225 != null ? y_11255225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_11255223[x_11255223_Idx].length;i<Tmp1;++i) x_11255223[x_11255223_Idx].push(null); }
               else { x_11255223[x_11255223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_11255256 = 0;
      F.line = 66;
      var colontmp__11365881 = 0;
      F.line = 1210;
      colontmp__11365881 = (y_11255225 != null ? (y_11255225.length-1) : -1);
      F.line = 77;
      var res_11365882 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_11365882 <= colontmp__11365881)) break L4;
            F.line = 1210;
            i_11255256 = res_11365882;
            F.line = 1210;
            x_11255223[x_11255223_Idx][chckIndx(addInt(xl_11255231, i_11255256), 0, (x_11255223[x_11255223_Idx] != null ? x_11255223[x_11255223_Idx].length : 0)+0-1)-0] = y_11255225[chckIndx(i_11255256, 0, (y_11255225 != null ? y_11255225.length : 0)+0-1)-0];
            F.line = 80;
            res_11365882 = addInt(res_11365882, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_11238275(cfg_11238280, node_11238281) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_11238343 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 426;
    result_11238343 = nimCopy(null, [], NTI11238358);
    F.line = 427;
    var matched_nodes_11238359 = node_11238281.querySelectorAll(toJSStr(cfg_11238280.selector));
    if (((matched_nodes_11238359 != null ? matched_nodes_11238359.length : 0) == 0)) {
    F.line = 429;
    var selector_11238365 = nimCopy(null, cfg_11238280.selector, NTI112);
    F.line = 430;
    var fmt_res_11238366 = [mnewString(0)];
    F.line = 430;
    if (fmt_res_11238366[0] != null) { fmt_res_11238366[0] = (fmt_res_11238366[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11238366[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 430;
    format_value_10125080(fmt_res_11238366, 0, selector_11238365, []);
    F.line = 430;
    if (fmt_res_11238366[0] != null) { fmt_res_11238366[0] = (fmt_res_11238366[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11238366[0] = makeNimstrLit("\'"); };
    F.line = 430;
    raiseException({message: nimCopy(null, fmt_res_11238366[0], NTI112), parent: null, m_type: NTI10216017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 432;
      var matched_node_11245008 = null;
      F.line = 184;
      var i_11365876 = 0;
      F.line = 185;
      var l_11365877 = (matched_nodes_11238359 != null ? matched_nodes_11238359.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11365876 < l_11365877)) break L3;
            F.line = 432;
            matched_node_11245008 = matched_nodes_11238359[chckIndx(i_11365876, 0, (matched_nodes_11238359 != null ? matched_nodes_11238359.length : 0)+0-1)-0];
            F.line = 433;
            var match_11245016 = {refresh: nimCopy(null, cfg_11238280.refresh, NTI11235329), init: nimCopy(null, cfg_11238280.init, NTI10216259), iter: cfg_11238280.iter, node: matched_node_11245008, selectorKind: 0, serial: 0, value: 0, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 438;
            match_11245016.node = matched_node_11245008;
            if (match_11245016.iter) {
            var Tmp4 = match_11245016;
            if (ConstSet9[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 440;
            var Tmp5 = cfg_11238280;
            if (ConstSet10[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI11235416);
            var Tmp6 = match_11245016;
            if (ConstSet11[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 441;
            Tmp6.anchor = matched_node_11245008.ownerDocument.createComment(matched_node_11245008.outerHTML);
            var Tmp7 = match_11245016;
            if (ConstSet12[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 442;
            Tmp7.mount_template = cfg_11238280.mount;
            var Tmp8 = match_11245016;
            if (ConstSet13[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 443;
            Tmp8.match_templates = nimCopy(null, cfg_11238280.cmatches, NTI11235361);
            var Tmp9 = match_11245016;
            if (ConstSet14[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 444;
            Tmp9.items = nimCopy(null, [], NTI11245042);
            F.line = 445;
            var Tmp10 = match_11245016;
            if (ConstSet15[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_11245008.parentNode.replaceChild(Tmp10.anchor, matched_node_11245008);
            }
            else {
              var Tmp11 = match_11245016;
              if (ConstSet16[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 447;
              var Tmp12 = cfg_11238280;
              if (ConstSet17[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 448;
              var Tmp13 = match_11245016;
              if (ConstSet18[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_11245016;
                if (ConstSet19[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 450;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_11245016;
              if (ConstSet20[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 453;
              var Tmp16 = cfg_11238280;
              if (ConstSet21[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI11235387);
              var Tmp17 = match_11245016;
              if (ConstSet22[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 454;
              Tmp17.matches = nimCopy(null, [], NTI11245069);
              var Tmp18 = match_11245016;
              if (ConstSet23[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 455;
              Tmp18.inited = false;
              var Tmp19 = match_11245016;
              if (ConstSet24[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 456;
              Tmp19.mount = null;
              if (!((cfg_11238280.mount == null))) {
              var Tmp20 = match_11245016;
              if (ConstSet25[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 458;
              Tmp20.mount_source = cfg_11238280.mount;
              }
              else {
                L21: do {
                  F.line = 460;
                  var submatch_11255214 = null;
                  F.line = 184;
                  var i_11365873 = 0;
                  F.line = 185;
                  var l_11365874 = (cfg_11238280.cmatches != null ? cfg_11238280.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_11365873 < l_11365874)) break L23;
                        F.line = 460;
                        submatch_11255214 = cfg_11238280.cmatches[chckIndx(i_11365873, 0, (cfg_11238280.cmatches != null ? cfg_11238280.cmatches.length : 0)+0-1)-0];
                        F.line = 461;
                        var Tmp24 = match_11245016;
                        if (ConstSet26[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_11255218(Tmp24, "matches", submatch_11255214.compile(matched_node_11245008));
                        F.line = 188;
                        i_11365873 = addInt(i_11365873, 1);
                        if (!(((cfg_11238280.cmatches != null ? cfg_11238280.cmatches.length : 0) == l_11365874))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 462;
            if (result_11238343 != null) { result_11238343.push(match_11245016); } else { result_11238343 = [match_11245016]; };
            F.line = 188;
            i_11365876 = addInt(i_11365876, 1);
            if (!(((matched_nodes_11238359 != null ? matched_nodes_11238359.length : 0) == l_11365877))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11238343;

}
function compile_11265897(cfgs_11265902, node_11265903) {
  var result_11265906 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 465;
    result_11265906[0] = nimCopy(null, [], NTI11265921);
    L1: do {
      F.line = 466;
      var cfg_11265928 = null;
      F.line = 184;
      var i_11365920 = 0;
      F.line = 185;
      var l_11365921 = (cfgs_11265902 != null ? cfgs_11265902.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11365920 < l_11365921)) break L3;
            F.line = 466;
            cfg_11265928 = cfgs_11265902[chckIndx(i_11365920, 0, (cfgs_11265902 != null ? cfgs_11265902.length : 0)+0-1)-0];
            F.line = 467;
            add_11255218(result_11265906, 0, cfg_11265928.compile(node_11265903));
            F.line = 188;
            i_11365920 = addInt(i_11365920, 1);
            if (!(((cfgs_11265902 != null ? cfgs_11265902.length : 0) == l_11365921))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11265906[0];

}
function create_iter_item_11265839(match_11265844, parent_node_11265845) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11265847 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 487;
    var comp_11265852 = null;
    F.line = 488;
    var node_11265853 = null;
      var Tmp1 = match_11265844;
      if (ConstSet37[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 490;
    var Tmp2 = match_11265844;
    if (ConstSet38[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11265852 = Tmp2.mount_template.clone();
    F.line = 491;
    node_11265853 = comp_11265852.node();
    }
    else {
      F.line = 493;
      node_11265853 = match_11265844.node.cloneNode(true);
    }
    
    F.line = 494;
    var Tmp3 = match_11265844;
    if (ConstSet39[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11265847 = {serial: 0, mount: comp_11265852, node: node_11265853, matches: compile_11265897(Tmp3.match_templates, node_11265853)};
    F.line = 499;
    var Tmp4 = match_11265844;
    if (ConstSet40[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11265845.insertBefore(node_11265853, Tmp4.anchor);
  framePtr = F.prev;

  return result_11265847;

}
function detach_11295474(iter_item_11295478, parent_node_11295479) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 503;
    parent_node_11295479.removeChild(iter_item_11295478.node);
  framePtr = F.prev;

  
}
function pop_11295224(s_11295229, s_11295229_Idx) {
  var result_11295230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11295236 = subInt((s_11295229[s_11295229_Idx] != null ? s_11295229[s_11295229_Idx].length : 0), 1);
    F.line = 1784;
    result_11295230 = s_11295229[s_11295229_Idx][chckIndx(l_11295236, 0, (s_11295229[s_11295229_Idx] != null ? s_11295229[s_11295229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11295229[s_11295229_Idx] === null) s_11295229[s_11295229_Idx] = [];
               if (s_11295229[s_11295229_Idx].length < chckRange(l_11295236, 0, 2147483647)) { for (var i=s_11295229[s_11295229_Idx].length;i<chckRange(l_11295236, 0, 2147483647);++i) s_11295229[s_11295229_Idx].push(null); }
               else { s_11295229[s_11295229_Idx].length = chckRange(l_11295236, 0, 2147483647); };
  framePtr = F.prev;

  return result_11295230;

}
function update_11265737(match_11265742, val_11265743, refresh_11265744) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11265761(s_11265764, s_11265764_Idx) {
        var result_11265768 = {Field0: false, Field1: 0};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 515;
          nimCopy(result_11265768, itf_simple_11265760(), NTI11265765);
        framePtr = F.prev;

        return result_11265768;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11265742.iter) {
    F.line = 508;
    var i_11265746 = 0;
    F.line = 509;
    var Tmp1 = match_11265742;
    if (ConstSet27[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11265749 = Tmp1.anchor.parentNode;
    F.line = 510;
    var itf_11265754 = null;
    F.line = 511;
    var Tmp2 = match_11265742;
    if (ConstSet28[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 513;
      var Tmp3 = match_11265742;
      if (ConstSet30[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet29[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11265760 = Tmp4.simple(val_11265743);
      F.line = 514;
      itf_11265754 = HEX3Aanonymous_11265761;
      break;
    case 1:
      F.line = 517;
      var Tmp5 = match_11265742;
      if (ConstSet32[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet31[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11265754 = Tmp6.serial(val_11265743);
      break;
    }
    L7: do {
      F.line = 519;
        L8: while (true) {
        if (!true) break L8;
          F.line = 520;
            var Tmp10 = match_11265742;
            if (ConstSet33[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11265746 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11265742;
          if (ConstSet34[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11265746, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11265813 = [Tmp9];
          F.line = 521;
          var changed_11265814 = refresh_11265744;
          F.line = 522;
          var it_11265816 = itf_11265754(serial_11265813, 0);
          if ((it_11265816["Field0"] == false)) {
          F.line = 523;
          break L7;
          }
          
          F.line = 524;
          var item_11265817 = it_11265816["Field1"];
          F.line = 526;
          var iter_item_11265822 = null;
          F.line = 527;
          var inited_11265823 = false;
            var Tmp14 = match_11265742;
            if (ConstSet35[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11265746 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 531;
          var Tmp16 = match_11265742;
          if (ConstSet36[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11265822 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11265746, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 532;
          inited_11265823 = true;
          F.line = 533;
          changed_11265814 = true;
          }
          else {
            F.line = 535;
            iter_item_11265822 = create_iter_item_11265839(match_11265742, parent_node_11265749);
            F.line = 536;
            var Tmp18 = match_11265742;
            if (ConstSet41[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11265822); } else { Tmp19 = [iter_item_11265822]; };
            F.line = 537;
            inited_11265823 = false;
            if (!((serial_11265813[0] == iter_item_11265822.serial))) {
            F.line = 539;
            changed_11265814 = true;
            }
            
          }
          
          if (!(inited_11265823)) {
          L20: do {
            F.line = 543;
            var init_proc_11275214 = null;
            F.line = 184;
            var i_11365891 = 0;
            F.line = 185;
            var l_11365892 = (match_11265742.init != null ? match_11265742.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11365891 < l_11365892)) break L22;
                  F.line = 543;
                  init_proc_11275214 = match_11265742.init[chckIndx(i_11365891, 0, (match_11265742.init != null ? match_11265742.init.length : 0)+0-1)-0];
                  F.line = 544;
                  init_proc_11275214(iter_item_11265822.node);
                  F.line = 188;
                  i_11365891 = addInt(i_11365891, 1);
                  if (!(((match_11265742.init != null ? match_11265742.init.length : 0) == l_11365892))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11265822.mount == null))) {
          F.line = 548;
          iter_item_11265822.mount.update(item_11265817, refresh_11265744);
          }
          
          L23: do {
            F.line = 551;
            var submatch_11285214 = null;
            F.line = 184;
            var i_11365896 = 0;
            F.line = 185;
            var l_11365897 = (iter_item_11265822.matches != null ? iter_item_11265822.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11365896 < l_11365897)) break L25;
                  F.line = 551;
                  submatch_11285214 = iter_item_11265822.matches[chckIndx(i_11365896, 0, (iter_item_11265822.matches != null ? iter_item_11265822.matches.length : 0)+0-1)-0];
                  F.line = 552;
                  submatch_11285214.update(item_11265817, refresh_11265744);
                  F.line = 188;
                  i_11365896 = addInt(i_11365896, 1);
                  if (!(((iter_item_11265822.matches != null ? iter_item_11265822.matches.length : 0) == l_11365897))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 555;
            var refresh_proc_11295214 = null;
            F.line = 184;
            var i_11365901 = 0;
            F.line = 185;
            var l_11365902 = (match_11265742.refresh != null ? match_11265742.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11365901 < l_11365902)) break L28;
                  F.line = 555;
                  refresh_proc_11295214 = match_11265742.refresh[chckIndx(i_11365901, 0, (match_11265742.refresh != null ? match_11265742.refresh.length : 0)+0-1)-0];
                  F.line = 556;
                  refresh_proc_11295214(iter_item_11265822.node, item_11265817);
                  F.line = 188;
                  i_11365901 = addInt(i_11365901, 1);
                  if (!(((match_11265742.refresh != null ? match_11265742.refresh.length : 0) == l_11365902))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 558;
          i_11265746 = addInt(i_11265746, 1);
        }
    } while(false);
    L29: do {
      F.line = 561;
        L30: while (true) {
          var Tmp31 = match_11265742;
          if (ConstSet42[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11265746 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 562;
          var Tmp33 = match_11265742;
          if (ConstSet43[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11295474(pop_11295224(Tmp33, "items"), parent_node_11265749);
        }
    } while(false);
    }
    else {
      F.line = 564;
      var changed_11295493 = refresh_11265744;
      F.line = 565;
      var node_11295494 = match_11265742.node;
      F.line = 566;
      var converted_val_11295495 = 0;
      F.line = 568;
      var Tmp34 = match_11265742;
      if (ConstSet44[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 570;
        var Tmp35 = match_11265742;
        if (ConstSet46[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet45[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11295495 = Tmp36.simple(val_11265743);
        F.line = 571;
        changed_11295493 = true;
        break;
      case 1:
        F.line = 573;
        var Tmp37 = match_11265742;
        if (ConstSet47[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11295503 = [Tmp37.serial];
        F.line = 574;
        var Tmp38 = match_11265742;
        if (ConstSet49[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet48[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11295495 = Tmp39.serial(val_11265743, serial_11295503, 0);
          var Tmp40 = match_11265742;
          if (ConstSet50[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11295503[0] == Tmp40.serial))) {
        F.line = 576;
        changed_11295493 = true;
        }
        
        break;
      case 2:
        F.line = 578;
        var Tmp41 = match_11265742;
        if (ConstSet52[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet51[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11265742;
        if (ConstSet53[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11295515 = Tmp42.compare(val_11265743, Tmp43.value);
        F.line = 579;
        converted_val_11295495 = res_11295515.Field0;
        var Tmp44 = match_11265742;
        if (ConstSet54[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 580;
        Tmp44.value = res_11295515.Field0;
        if (res_11295515.Field1) {
        F.line = 582;
        changed_11295493 = true;
        }
        
        break;
      }
        var Tmp46 = match_11265742;
        if (ConstSet55[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11265742;
          if (ConstSet56[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11265742;
      if (ConstSet57[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 586;
      var Tmp49 = match_11265742;
      if (ConstSet58[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 587;
      var Tmp50 = match_11265742;
      if (ConstSet59[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11295494.parentNode.replaceChild(Tmp50.mount.node(), node_11295494);
      }
      
        var Tmp51 = match_11265742;
        if (ConstSet60[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 591;
        var init_proc_11295552 = null;
        F.line = 184;
        var i_11365906 = 0;
        F.line = 185;
        var l_11365907 = (match_11265742.init != null ? match_11265742.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11365906 < l_11365907)) break L54;
              F.line = 591;
              init_proc_11295552 = match_11265742.init[chckIndx(i_11365906, 0, (match_11265742.init != null ? match_11265742.init.length : 0)+0-1)-0];
              F.line = 592;
              init_proc_11295552(node_11295494);
              F.line = 188;
              i_11365906 = addInt(i_11365906, 1);
              if (!(((match_11265742.init != null ? match_11265742.init.length : 0) == l_11365907))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11265742;
      if (ConstSet61[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 593;
      Tmp55.inited = true;
      F.line = 594;
      changed_11295493 = true;
      }
      
        if (!changed_11295493) Tmp56 = false; else {          var Tmp57 = match_11265742;
          if (ConstSet62[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 598;
      var Tmp58 = match_11265742;
      if (ConstSet63[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11295494 = Tmp58.mount.node();
      F.line = 599;
      var Tmp59 = match_11265742;
      if (ConstSet64[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11295495, refresh_11265744);
      }
      
      if (changed_11295493) {
      L60: do {
        F.line = 603;
        var submatch_11295577 = null;
        F.line = 182;
        var colontmp__11365910 = null;
        F.line = 603;
        var Tmp61 = match_11265742;
        if (ConstSet65[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11365910 = Tmp61.matches;
        F.line = 184;
        var i_11365911 = 0;
        F.line = 185;
        var l_11365912 = (colontmp__11365910 != null ? colontmp__11365910.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11365911 < l_11365912)) break L63;
              F.line = 603;
              submatch_11295577 = colontmp__11365910[chckIndx(i_11365911, 0, (colontmp__11365910 != null ? colontmp__11365910.length : 0)+0-1)-0];
              F.line = 604;
              submatch_11295577.update(converted_val_11295495, refresh_11265744);
              F.line = 188;
              i_11365911 = addInt(i_11365911, 1);
              if (!(((colontmp__11365910 != null ? colontmp__11365910.length : 0) == l_11365912))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11295493) {
      L64: do {
        F.line = 608;
        var refresh_proc_11295584 = null;
        F.line = 184;
        var i_11365915 = 0;
        F.line = 185;
        var l_11365916 = (match_11265742.refresh != null ? match_11265742.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11365915 < l_11365916)) break L66;
              F.line = 608;
              refresh_proc_11295584 = match_11265742.refresh[chckIndx(i_11365915, 0, (match_11265742.refresh != null ? match_11265742.refresh.length : 0)+0-1)-0];
              F.line = 609;
              refresh_proc_11295584(node_11295494, converted_val_11295495);
              F.line = 188;
              i_11365915 = addInt(i_11365915, 1);
              if (!(((match_11265742.refresh != null ? match_11265742.refresh.length : 0) == l_11365916))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11265717(match_11265722) {
    function HEX3Aanonymous_11265729(data_11265731, refresh_11265732) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 663;
        update_11265737(match_11265722, data_11265731, refresh_11265732);
      framePtr = F.prev;

      
    }

  var result_11265724 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 662;
    result_11265724 = {update: HEX3Aanonymous_11265729};
  framePtr = F.prev;

  return result_11265724;

}
function as_interface_11238036(config_11238041) {
    function HEX3Aanonymous_11238048(node_11238050) {
      var result_11238056 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 669;
        result_11238056 = nimCopy(null, [], NTI11238071);
        L1: do {
          F.line = 670;
          var comp_match_11265214 = null;
          F.line = 182;
          var colontmp__11365863 = null;
          F.line = 670;
          colontmp__11365863 = compile_11238275(config_11238041, node_11238050);
          F.line = 184;
          var i_11365865 = 0;
          F.line = 185;
          var l_11365866 = (colontmp__11365863 != null ? colontmp__11365863.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_11365865 < l_11365866)) break L3;
                F.line = 670;
                comp_match_11265214 = colontmp__11365863[chckIndx(i_11365865, 0, (colontmp__11365863 != null ? colontmp__11365863.length : 0)+0-1)-0];
                F.line = 671;
                if (result_11238056 != null) { result_11238056.push(as_interface_11265717(comp_match_11265214)); } else { result_11238056 = [as_interface_11265717(comp_match_11265214)]; };
                F.line = 188;
                i_11365865 = addInt(i_11365865, 1);
                if (!(((colontmp__11365863 != null ? colontmp__11365863.length : 0) == l_11365866))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_11238056;

    }

  var result_11238043 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 667;
    result_11238043 = {compile: HEX3Aanonymous_11238048};
  framePtr = F.prev;

  return result_11238043;

}
function match_11237481(c_11237486, selector_11237487, convert_11237489, actions_11237495) {
  var result_11237497 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 250;
    result_11237497 = {selector: nimCopy(null, selector_11237487, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_11237489, NTI11235387), cmatches: null, iterate: {kind: 0, simple: null, serial: null}};
    F.line = 257;
    if (c_11237486.cmatches != null) { c_11237486.cmatches.push(as_interface_11238036(result_11237497)); } else { c_11237486.cmatches = [as_interface_11238036(result_11237497)]; };
    if (!((actions_11237495 == null))) {
    F.line = 259;
    actions_11237495(result_11237497);
    }
    
  framePtr = F.prev;

  return result_11237497;

}
function match_11236139(c_11236144, selector_11236145, convert_11236147, equal_11236151, actions_11236157) {
    function HEX3Aanonymous_11236167(data_11236169, old_data_11236170) {
      var result_11236174 = {Field0: 0, Field1: false};

      var F={procname:"match.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 296;
        var data2_11236175 = convert_11236147(data_11236169);
        F.line = 297;
        var colontmp__11365858 = data2_11236175;
        F.line = 297;
        var colontmp__11365859 = !(equal_11236151(data2_11236175, old_data_11236170));
        F.line = 297;
        nimCopy(result_11236174, {Field0: colontmp__11365858, Field1: colontmp__11365859}, NTI11236171);
      framePtr = F.prev;

      return result_11236174;

    }

  var result_11236159 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 293;
    var type_selector_11236205 = {kind: 2, compare: HEX3Aanonymous_11236167, simple: null, serial: null};
    F.line = 298;
    result_11236159 = match_11237481(c_11236144, selector_11236145, type_selector_11236205, actions_11236157);
  framePtr = F.prev;

  return result_11236159;

}
function eql_11235294(s1_11235297, s2_11235298) {
  var result_11235299 = false;

  var F={procname:"eql.eql",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 779;
    result_11235299 = (s1_11235297 == s2_11235298);
  framePtr = F.prev;

  return result_11235299;

}
function set_text_11296005() {
    function HEX3Aanonymous_11296014(node_11296016, text_11296017) {
      var F={procname:"setText.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 49;
        node_11296016.textContent = toJSStr(cstrToNimstr((text_11296017)+""));
      framePtr = F.prev;

      
    }

  var result_11296013 = null;

  var F={procname:"setText.setText",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 49;
    result_11296013 = HEX3Aanonymous_11296014;
  framePtr = F.prev;

  return result_11296013;

}
function init_11346384(c_11346389, init_11346390) {
  var F={procname:"init.init",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 345;
    if (c_11346389.init != null) { c_11346389.init.push(init_11346390); } else { c_11346389.init = [init_11346390]; };
  framePtr = F.prev;

  
}
function add_event_listener_11346207(c_11346212, event_11346213, cb_11346214, use_capture_11346215) {
    event_11346213 = nimCopy(null, event_11346213, NTI112);
    function HEX3Aanonymous_11346353(node_11346355) {
      var F={procname:"addEventListener.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 33;
        node_11346355.addEventListener(toJSStr(event_11346213), cb_11346214, use_capture_11346215);
      framePtr = F.prev;

      
    }

  var F={procname:"addEventListener.addEventListener",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 32;
    init_11346384(c_11346212, HEX3Aanonymous_11346353);
  framePtr = F.prev;

  
}
function compile_11299384(cfg_11299389, node_11299390) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_11299452 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 426;
    result_11299452 = nimCopy(null, [], NTI11299467);
    F.line = 427;
    var matched_nodes_11299468 = node_11299390.querySelectorAll(toJSStr(cfg_11299389.selector));
    if (((matched_nodes_11299468 != null ? matched_nodes_11299468.length : 0) == 0)) {
    F.line = 429;
    var selector_11299474 = nimCopy(null, cfg_11299389.selector, NTI112);
    F.line = 430;
    var fmt_res_11299475 = [mnewString(0)];
    F.line = 430;
    if (fmt_res_11299475[0] != null) { fmt_res_11299475[0] = (fmt_res_11299475[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11299475[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 430;
    format_value_10125080(fmt_res_11299475, 0, selector_11299474, []);
    F.line = 430;
    if (fmt_res_11299475[0] != null) { fmt_res_11299475[0] = (fmt_res_11299475[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11299475[0] = makeNimstrLit("\'"); };
    F.line = 430;
    raiseException({message: nimCopy(null, fmt_res_11299475[0], NTI112), parent: null, m_type: NTI10216017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 432;
      var matched_node_11305008 = null;
      F.line = 184;
      var i_11365939 = 0;
      F.line = 185;
      var l_11365940 = (matched_nodes_11299468 != null ? matched_nodes_11299468.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11365939 < l_11365940)) break L3;
            F.line = 432;
            matched_node_11305008 = matched_nodes_11299468[chckIndx(i_11365939, 0, (matched_nodes_11299468 != null ? matched_nodes_11299468.length : 0)+0-1)-0];
            F.line = 433;
            var match_11305016 = {refresh: nimCopy(null, cfg_11299389.refresh, NTI11296709), init: nimCopy(null, cfg_11299389.init, NTI10216259), iter: cfg_11299389.iter, node: matched_node_11305008, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 438;
            match_11305016.node = matched_node_11305008;
            if (match_11305016.iter) {
            var Tmp4 = match_11305016;
            if (ConstSet66[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 440;
            var Tmp5 = cfg_11299389;
            if (ConstSet67[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI11296773);
            var Tmp6 = match_11305016;
            if (ConstSet68[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 441;
            Tmp6.anchor = matched_node_11305008.ownerDocument.createComment(matched_node_11305008.outerHTML);
            var Tmp7 = match_11305016;
            if (ConstSet69[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 442;
            Tmp7.mount_template = cfg_11299389.mount;
            var Tmp8 = match_11305016;
            if (ConstSet70[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 443;
            Tmp8.match_templates = nimCopy(null, cfg_11299389.cmatches, NTI11296715);
            var Tmp9 = match_11305016;
            if (ConstSet71[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 444;
            Tmp9.items = nimCopy(null, [], NTI11305042);
            F.line = 445;
            var Tmp10 = match_11305016;
            if (ConstSet72[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_11305008.parentNode.replaceChild(Tmp10.anchor, matched_node_11305008);
            }
            else {
              var Tmp11 = match_11305016;
              if (ConstSet73[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 447;
              var Tmp12 = cfg_11299389;
              if (ConstSet74[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 448;
              var Tmp13 = match_11305016;
              if (ConstSet75[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_11305016;
                if (ConstSet76[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 450;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_11305016;
              if (ConstSet77[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 453;
              var Tmp16 = cfg_11299389;
              if (ConstSet78[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI11296741);
              var Tmp17 = match_11305016;
              if (ConstSet79[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 454;
              Tmp17.matches = nimCopy(null, [], NTI11305069);
              var Tmp18 = match_11305016;
              if (ConstSet80[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 455;
              Tmp18.inited = false;
              var Tmp19 = match_11305016;
              if (ConstSet81[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 456;
              Tmp19.mount = null;
              if (!((cfg_11299389.mount == null))) {
              var Tmp20 = match_11305016;
              if (ConstSet82[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 458;
              Tmp20.mount_source = cfg_11299389.mount;
              }
              else {
                L21: do {
                  F.line = 460;
                  var submatch_11315214 = null;
                  F.line = 184;
                  var i_11365936 = 0;
                  F.line = 185;
                  var l_11365937 = (cfg_11299389.cmatches != null ? cfg_11299389.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_11365936 < l_11365937)) break L23;
                        F.line = 460;
                        submatch_11315214 = cfg_11299389.cmatches[chckIndx(i_11365936, 0, (cfg_11299389.cmatches != null ? cfg_11299389.cmatches.length : 0)+0-1)-0];
                        F.line = 461;
                        var Tmp24 = match_11305016;
                        if (ConstSet83[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_11315218(Tmp24, "matches", submatch_11315214.compile(matched_node_11305008));
                        F.line = 188;
                        i_11365936 = addInt(i_11365936, 1);
                        if (!(((cfg_11299389.cmatches != null ? cfg_11299389.cmatches.length : 0) == l_11365937))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 462;
            if (result_11299452 != null) { result_11299452.push(match_11305016); } else { result_11299452 = [match_11305016]; };
            F.line = 188;
            i_11365939 = addInt(i_11365939, 1);
            if (!(((matched_nodes_11299468 != null ? matched_nodes_11299468.length : 0) == l_11365940))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11299452;

}
function create_iter_item_11325839(match_11325844, parent_node_11325845) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11325847 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 487;
    var comp_11325852 = null;
    F.line = 488;
    var node_11325853 = null;
      var Tmp1 = match_11325844;
      if (ConstSet94[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 490;
    var Tmp2 = match_11325844;
    if (ConstSet95[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11325852 = Tmp2.mount_template.clone();
    F.line = 491;
    node_11325853 = comp_11325852.node();
    }
    else {
      F.line = 493;
      node_11325853 = match_11325844.node.cloneNode(true);
    }
    
    F.line = 494;
    var Tmp3 = match_11325844;
    if (ConstSet96[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11325847 = {serial: 0, mount: comp_11325852, node: node_11325853, matches: compile_11325897(Tmp3.match_templates, node_11325853)};
    F.line = 499;
    var Tmp4 = match_11325844;
    if (ConstSet97[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11325845.insertBefore(node_11325853, Tmp4.anchor);
  framePtr = F.prev;

  return result_11325847;

}
function detach_11345474(iter_item_11345478, parent_node_11345479) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 503;
    parent_node_11345479.removeChild(iter_item_11345478.node);
  framePtr = F.prev;

  
}
function pop_11345224(s_11345229, s_11345229_Idx) {
  var result_11345230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11345236 = subInt((s_11345229[s_11345229_Idx] != null ? s_11345229[s_11345229_Idx].length : 0), 1);
    F.line = 1784;
    result_11345230 = s_11345229[s_11345229_Idx][chckIndx(l_11345236, 0, (s_11345229[s_11345229_Idx] != null ? s_11345229[s_11345229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11345229[s_11345229_Idx] === null) s_11345229[s_11345229_Idx] = [];
               if (s_11345229[s_11345229_Idx].length < chckRange(l_11345236, 0, 2147483647)) { for (var i=s_11345229[s_11345229_Idx].length;i<chckRange(l_11345236, 0, 2147483647);++i) s_11345229[s_11345229_Idx].push(null); }
               else { s_11345229[s_11345229_Idx].length = chckRange(l_11345236, 0, 2147483647); };
  framePtr = F.prev;

  return result_11345230;

}
function update_11325737(match_11325742, val_11325743, refresh_11325744) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11325761(s_11325764, s_11325764_Idx) {
        var result_11325768 = {Field0: false, Field1: null};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 515;
          nimCopy(result_11325768, itf_simple_11325760(), NTI11325765);
        framePtr = F.prev;

        return result_11325768;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11325742.iter) {
    F.line = 508;
    var i_11325746 = 0;
    F.line = 509;
    var Tmp1 = match_11325742;
    if (ConstSet84[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11325749 = Tmp1.anchor.parentNode;
    F.line = 510;
    var itf_11325754 = null;
    F.line = 511;
    var Tmp2 = match_11325742;
    if (ConstSet85[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 513;
      var Tmp3 = match_11325742;
      if (ConstSet87[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet86[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11325760 = Tmp4.simple(val_11325743);
      F.line = 514;
      itf_11325754 = HEX3Aanonymous_11325761;
      break;
    case 1:
      F.line = 517;
      var Tmp5 = match_11325742;
      if (ConstSet89[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet88[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11325754 = Tmp6.serial(val_11325743);
      break;
    }
    L7: do {
      F.line = 519;
        L8: while (true) {
        if (!true) break L8;
          F.line = 520;
            var Tmp10 = match_11325742;
            if (ConstSet90[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11325746 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11325742;
          if (ConstSet91[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11325746, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11325813 = [Tmp9];
          F.line = 521;
          var changed_11325814 = refresh_11325744;
          F.line = 522;
          var it_11325816 = itf_11325754(serial_11325813, 0);
          if ((it_11325816["Field0"] == false)) {
          F.line = 523;
          break L7;
          }
          
          F.line = 524;
          var item_11325817 = it_11325816["Field1"];
          F.line = 526;
          var iter_item_11325822 = null;
          F.line = 527;
          var inited_11325823 = false;
            var Tmp14 = match_11325742;
            if (ConstSet92[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11325746 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 531;
          var Tmp16 = match_11325742;
          if (ConstSet93[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11325822 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11325746, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 532;
          inited_11325823 = true;
          F.line = 533;
          changed_11325814 = true;
          }
          else {
            F.line = 535;
            iter_item_11325822 = create_iter_item_11325839(match_11325742, parent_node_11325749);
            F.line = 536;
            var Tmp18 = match_11325742;
            if (ConstSet98[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11325822); } else { Tmp19 = [iter_item_11325822]; };
            F.line = 537;
            inited_11325823 = false;
            if (!((serial_11325813[0] == iter_item_11325822.serial))) {
            F.line = 539;
            changed_11325814 = true;
            }
            
          }
          
          if (!(inited_11325823)) {
          L20: do {
            F.line = 543;
            var init_proc_11326000 = null;
            F.line = 184;
            var i_11365945 = 0;
            F.line = 185;
            var l_11365946 = (match_11325742.init != null ? match_11325742.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11365945 < l_11365946)) break L22;
                  F.line = 543;
                  init_proc_11326000 = match_11325742.init[chckIndx(i_11365945, 0, (match_11325742.init != null ? match_11325742.init.length : 0)+0-1)-0];
                  F.line = 544;
                  init_proc_11326000(iter_item_11325822.node);
                  F.line = 188;
                  i_11365945 = addInt(i_11365945, 1);
                  if (!(((match_11325742.init != null ? match_11325742.init.length : 0) == l_11365946))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11325822.mount == null))) {
          F.line = 548;
          iter_item_11325822.mount.update(item_11325817, refresh_11325744);
          }
          
          L23: do {
            F.line = 551;
            var submatch_11335214 = null;
            F.line = 184;
            var i_11365950 = 0;
            F.line = 185;
            var l_11365951 = (iter_item_11325822.matches != null ? iter_item_11325822.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11365950 < l_11365951)) break L25;
                  F.line = 551;
                  submatch_11335214 = iter_item_11325822.matches[chckIndx(i_11365950, 0, (iter_item_11325822.matches != null ? iter_item_11325822.matches.length : 0)+0-1)-0];
                  F.line = 552;
                  submatch_11335214.update(item_11325817, refresh_11325744);
                  F.line = 188;
                  i_11365950 = addInt(i_11365950, 1);
                  if (!(((iter_item_11325822.matches != null ? iter_item_11325822.matches.length : 0) == l_11365951))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 555;
            var refresh_proc_11345214 = null;
            F.line = 184;
            var i_11365955 = 0;
            F.line = 185;
            var l_11365956 = (match_11325742.refresh != null ? match_11325742.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11365955 < l_11365956)) break L28;
                  F.line = 555;
                  refresh_proc_11345214 = match_11325742.refresh[chckIndx(i_11365955, 0, (match_11325742.refresh != null ? match_11325742.refresh.length : 0)+0-1)-0];
                  F.line = 556;
                  refresh_proc_11345214(iter_item_11325822.node, item_11325817);
                  F.line = 188;
                  i_11365955 = addInt(i_11365955, 1);
                  if (!(((match_11325742.refresh != null ? match_11325742.refresh.length : 0) == l_11365956))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 558;
          i_11325746 = addInt(i_11325746, 1);
        }
    } while(false);
    L29: do {
      F.line = 561;
        L30: while (true) {
          var Tmp31 = match_11325742;
          if (ConstSet99[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11325746 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 562;
          var Tmp33 = match_11325742;
          if (ConstSet100[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11345474(pop_11345224(Tmp33, "items"), parent_node_11325749);
        }
    } while(false);
    }
    else {
      F.line = 564;
      var changed_11345493 = refresh_11325744;
      F.line = 565;
      var node_11345494 = match_11325742.node;
      F.line = 566;
      var converted_val_11345495 = null;
      F.line = 568;
      var Tmp34 = match_11325742;
      if (ConstSet101[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 570;
        var Tmp35 = match_11325742;
        if (ConstSet103[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet102[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11345495 = Tmp36.simple(val_11325743);
        F.line = 571;
        changed_11345493 = true;
        break;
      case 1:
        F.line = 573;
        var Tmp37 = match_11325742;
        if (ConstSet104[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11345503 = [Tmp37.serial];
        F.line = 574;
        var Tmp38 = match_11325742;
        if (ConstSet106[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet105[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11345495 = Tmp39.serial(val_11325743, serial_11345503, 0);
          var Tmp40 = match_11325742;
          if (ConstSet107[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11345503[0] == Tmp40.serial))) {
        F.line = 576;
        changed_11345493 = true;
        }
        
        break;
      case 2:
        F.line = 578;
        var Tmp41 = match_11325742;
        if (ConstSet109[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet108[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11325742;
        if (ConstSet110[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11345515 = Tmp42.compare(val_11325743, Tmp43.value);
        F.line = 579;
        converted_val_11345495 = res_11345515.Field0;
        var Tmp44 = match_11325742;
        if (ConstSet111[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 580;
        Tmp44.value = res_11345515.Field0;
        if (res_11345515.Field1) {
        F.line = 582;
        changed_11345493 = true;
        }
        
        break;
      }
        var Tmp46 = match_11325742;
        if (ConstSet112[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11325742;
          if (ConstSet113[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11325742;
      if (ConstSet114[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 586;
      var Tmp49 = match_11325742;
      if (ConstSet115[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 587;
      var Tmp50 = match_11325742;
      if (ConstSet116[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11345494.parentNode.replaceChild(Tmp50.mount.node(), node_11345494);
      }
      
        var Tmp51 = match_11325742;
        if (ConstSet117[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 591;
        var init_proc_11345552 = null;
        F.line = 184;
        var i_11365960 = 0;
        F.line = 185;
        var l_11365961 = (match_11325742.init != null ? match_11325742.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11365960 < l_11365961)) break L54;
              F.line = 591;
              init_proc_11345552 = match_11325742.init[chckIndx(i_11365960, 0, (match_11325742.init != null ? match_11325742.init.length : 0)+0-1)-0];
              F.line = 592;
              init_proc_11345552(node_11345494);
              F.line = 188;
              i_11365960 = addInt(i_11365960, 1);
              if (!(((match_11325742.init != null ? match_11325742.init.length : 0) == l_11365961))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11325742;
      if (ConstSet118[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 593;
      Tmp55.inited = true;
      F.line = 594;
      changed_11345493 = true;
      }
      
        if (!changed_11345493) Tmp56 = false; else {          var Tmp57 = match_11325742;
          if (ConstSet119[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 598;
      var Tmp58 = match_11325742;
      if (ConstSet120[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11345494 = Tmp58.mount.node();
      F.line = 599;
      var Tmp59 = match_11325742;
      if (ConstSet121[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11345495, refresh_11325744);
      }
      
      if (changed_11345493) {
      L60: do {
        F.line = 603;
        var submatch_11345577 = null;
        F.line = 182;
        var colontmp__11365964 = null;
        F.line = 603;
        var Tmp61 = match_11325742;
        if (ConstSet122[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11365964 = Tmp61.matches;
        F.line = 184;
        var i_11365965 = 0;
        F.line = 185;
        var l_11365966 = (colontmp__11365964 != null ? colontmp__11365964.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11365965 < l_11365966)) break L63;
              F.line = 603;
              submatch_11345577 = colontmp__11365964[chckIndx(i_11365965, 0, (colontmp__11365964 != null ? colontmp__11365964.length : 0)+0-1)-0];
              F.line = 604;
              submatch_11345577.update(converted_val_11345495, refresh_11325744);
              F.line = 188;
              i_11365965 = addInt(i_11365965, 1);
              if (!(((colontmp__11365964 != null ? colontmp__11365964.length : 0) == l_11365966))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11345493) {
      L64: do {
        F.line = 608;
        var refresh_proc_11345584 = null;
        F.line = 184;
        var i_11365969 = 0;
        F.line = 185;
        var l_11365970 = (match_11325742.refresh != null ? match_11325742.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11365969 < l_11365970)) break L66;
              F.line = 608;
              refresh_proc_11345584 = match_11325742.refresh[chckIndx(i_11365969, 0, (match_11325742.refresh != null ? match_11325742.refresh.length : 0)+0-1)-0];
              F.line = 609;
              refresh_proc_11345584(node_11345494, converted_val_11345495);
              F.line = 188;
              i_11365969 = addInt(i_11365969, 1);
              if (!(((match_11325742.refresh != null ? match_11325742.refresh.length : 0) == l_11365970))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11325717(match_11325722) {
    function HEX3Aanonymous_11325729(data_11325731, refresh_11325732) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 663;
        update_11325737(match_11325722, data_11325731, refresh_11325732);
      framePtr = F.prev;

      
    }

  var result_11325724 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 662;
    result_11325724 = {update: HEX3Aanonymous_11325729};
  framePtr = F.prev;

  return result_11325724;

}
function as_interface_11299145(config_11299150) {
    function HEX3Aanonymous_11299157(node_11299159) {
      var result_11299165 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 669;
        result_11299165 = nimCopy(null, [], NTI11299180);
        L1: do {
          F.line = 670;
          var comp_match_11325214 = null;
          F.line = 182;
          var colontmp__11365927 = null;
          F.line = 670;
          colontmp__11365927 = compile_11299384(config_11299150, node_11299159);
          F.line = 184;
          var i_11365929 = 0;
          F.line = 185;
          var l_11365930 = (colontmp__11365927 != null ? colontmp__11365927.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_11365929 < l_11365930)) break L3;
                F.line = 670;
                comp_match_11325214 = colontmp__11365927[chckIndx(i_11365929, 0, (colontmp__11365927 != null ? colontmp__11365927.length : 0)+0-1)-0];
                F.line = 671;
                if (result_11299165 != null) { result_11299165.push(as_interface_11325717(comp_match_11325214)); } else { result_11299165 = [as_interface_11325717(comp_match_11325214)]; };
                F.line = 188;
                i_11365929 = addInt(i_11365929, 1);
                if (!(((colontmp__11365927 != null ? colontmp__11365927.length : 0) == l_11365930))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_11299165;

    }

  var result_11299152 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 667;
    result_11299152 = {compile: HEX3Aanonymous_11299157};
  framePtr = F.prev;

  return result_11299152;

}
function match_11298590(c_11298595, selector_11298596, convert_11298598, actions_11298604) {
  var result_11298606 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 250;
    result_11298606 = {selector: nimCopy(null, selector_11298596, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_11298598, NTI11296741), cmatches: null, iterate: {kind: 0, simple: null, serial: null}};
    F.line = 257;
    if (c_11298595.cmatches != null) { c_11298595.cmatches.push(as_interface_11299145(result_11298606)); } else { c_11298595.cmatches = [as_interface_11299145(result_11298606)]; };
    if (!((actions_11298604 == null))) {
    F.line = 259;
    actions_11298604(result_11298606);
    }
    
  framePtr = F.prev;

  return result_11298606;

}
function match_11297290(c_11297295, selector_11297296, convert_11297298, actions_11297304) {
  var result_11297306 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 275;
    var type_selector_11297314 = {kind: 0, simple: convert_11297298, serial: null, compare: null};
    F.line = 278;
    result_11297306 = match_11298590(c_11297295, selector_11297296, type_selector_11297314, actions_11297304);
  framePtr = F.prev;

  return result_11297306;

}
function id_11297244(data_11297247) {
  var result_11297248 = null;

  var F={procname:"id.id",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 200;
    result_11297248 = data_11297247;
  framePtr = F.prev;

  return result_11297248;

}
function match_11297224(c_11297228, selector_11297229, actions_11297235) {
  var result_11297237 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 333;
    result_11297237 = match_11297290(c_11297228, selector_11297229, id_11297244, actions_11297235);
  framePtr = F.prev;

  return result_11297237;

}
function update_11346029(t_11346033, data_11346034, refresh_11346035) {
  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 639;
    t_11346033.data = data_11346034;
    L1: do {
      F.line = 640;
      var match_11346042 = null;
      F.line = 184;
      var i_11365974 = 0;
      F.line = 185;
      var l_11365975 = (t_11346033.matches != null ? t_11346033.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11365974 < l_11365975)) break L3;
            F.line = 640;
            match_11346042 = t_11346033.matches[chckIndx(i_11365974, 0, (t_11346033.matches != null ? t_11346033.matches.length : 0)+0-1)-0];
            F.line = 641;
            match_11346042.update(data_11346034, refresh_11346035);
            F.line = 188;
            i_11365974 = addInt(i_11365974, 1);
            if (!(((t_11346033.matches != null ? t_11346033.matches.length : 0) == l_11365975))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_11231174(node_11231177) {
    function HEX3Aanonymous_11231184(b_11231191) {
        function HEX3Aanonymous_11235001(arg0_11235003) {
          var result_11235005 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"button.nim",line:0};
          framePtr = F;
            F.line = 16;
            result_11235005 = arg0_11235003.times;
          framePtr = F.prev;

          return result_11235005;

        }
        function HEX3Aanonymous_11345958(event_11345960) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"button.nim",line:0};
          framePtr = F;
            F.line = 18;
            b_11231191.data.times = addInt(b_11231191.data.times, 1);
            F.line = 19;
            console.log("button clicked", b_11231191.data.times);
            F.line = 20;
            update_11346029(b_11231191, b_11231191.data, false);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"button.nim",line:0};
      framePtr = F;
        F.line = 16;
        refresh_11296059(match_11236139(b_11231191, makeNimstrLit(".times"), HEX3Aanonymous_11235001, eql_11235294, null), set_text_11296005());
        F.line = 17;
        add_event_listener_11346207(match_11297224(b_11231191, makeNimstrLit("button"), null), makeNimstrLit("click"), HEX3Aanonymous_11345958, false);
      framePtr = F.prev;

      
    }

  var result_11231182 = null;

  var F={procname:"button.:anonymous",prev:framePtr,filename:"button.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 15;
    result_11231182 = compile_11346534(node_11231177, HEX3Aanonymous_11231184);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11231182;

}
var button_11231105 = [null];
declare_11365583(components_10218124[0], button_11231105, 0, fetch_template_11230001(makeNimstrLit("button.html"), makeNimstrLit("template"), true), HEX3Aanonymous_11231174);
function map_10225058(s_10225063, op_10225066) {
  var result_10225068 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_10225068 = new Array(chckRange((s_10225063 != null ? s_10225063.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_10225063 != null ? s_10225063.length : 0), 0, 2147483647);++i) {result_10225068[i]=null;}    L1: do {
      F.line = 375;
      var i_10225091 = 0;
      F.line = 104;
      var colontmp__11370817 = 0;
      F.line = 375;
      colontmp__11370817 = (s_10225063 != null ? s_10225063.length : 0);
      F.line = 106;
      var i_11370818 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11370818 < colontmp__11370817)) break L3;
            F.line = 375;
            i_10225091 = i_11370818;
            F.line = 376;
            result_10225068[chckIndx(i_10225091, 0, (result_10225068 != null ? result_10225068.length : 0)+0-1)-0] = op_10225066(s_10225063[chckIndx(i_10225091, 0, (s_10225063 != null ? s_10225063.length : 0)+0-1)-0]);
            F.line = 109;
            i_11370818 = addInt(i_11370818, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10225068;

}
async function init_10225001(registry_10225003) {
    function HEX3Aanonymous_10225020(p_10225022) {
      var result_10225027 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 26;
        result_10225027 = p_10225022();
      framePtr = F.prev;

      return result_10225027;

    }

  var result_10225008 = null;

  var F={procname:"registry.init",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 26;
    (await (Promise.all((map_10225058(registry_10225003.Field0, HEX3Aanonymous_10225020)))));
    F.line = 131;
    result_10225008 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10225008;

}
function attach_11370399(t_11370403, target_11370404, anchor_11370405, data_11370406) {
  var F={procname:"attach.attach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 647;
    update_11346029(t_11370403, data_11370406, true);
    F.line = 648;
    target_11370404.insertBefore(t_11370403.node, anchor_11370405);
  framePtr = F.prev;

  
}
function clone_11370097(comp_11370101) {
  var result_11370103 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 634;
    result_11370103 = compile_11355652({config: comp_11370101.config, m_type: NTI11231056, cmatches: null}, comp_11370101.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11370103;

}
async function main_11370001() {
  var result_11370007 = null;

  var F={procname:"index.main",prev:framePtr,filename:"index.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 10;
    (await init_10225001(components_10218124[0]));
    F.line = 11;
    attach_11370399(clone_11370097(button_11231105[0]), document.body, null, {times: 0});
    F.line = 131;
    result_11370007 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11370007;

}
main_11370001();
