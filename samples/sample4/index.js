/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI11290062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11281625 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281618 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281612 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11281611 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11284234 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11284228 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11284227 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11290035 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11281607 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11281685 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281669 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281665 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11281597 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281601 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11300896 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11281650 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281643 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281637 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11281633 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11240062 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231612 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231605 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216313 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231599 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231598 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11234439 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11234433 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11234432 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11240035 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231589 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231573 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231572 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11231594 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231669 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231653 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216045 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11231649 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10216408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216259 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231562 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231566 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10216015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10216017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11231583 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231578 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231577 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11251138 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11250986 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11231634 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231627 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231527 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10216033 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11231620 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11232380 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11301031 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11301048 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231103 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231094 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231078 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11231099 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231073 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11231042 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10187005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI10187029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10187031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10187390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10187035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10187033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11231088 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11231083 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11231082 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11231113 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11231069 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4600232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4855011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4855011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4600232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4855011.node = NNI4855011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI11231083 = {kind: 1, offset: "update", len: 0, typ: NTI11231088, name: "update", sons: null};
NTI11231083.node = NNI11231083;
NTI11231082.base = NTI11231083;
NTI11231113.base = NTI11231082;
NTI10187386.base = NTI10187033;
NTI10187388.base = NTI10187033;
NTI10187390.base = NTI10187033;
var NNI10187031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI10187031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10187031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10187031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10187031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10187031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10187031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI10187031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI10187031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI10187031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI10187031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI10187031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI10187031, name: "NotationNode", len: 0, sons: null}}};
NTI10187031.node = NNI10187031;
var NNI10187029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10187029.node = NNI10187029;
NTI10187029.base = NTI6008;
NTI10187027.base = NTI10187029;
NTI10187537.base = NTI10187041;
var NNI10187083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI10187537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI10187083.node = NNI10187083;
NTI10187083.base = NTI10187043;
NTI10187081.base = NTI10187083;
var NNI10187079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI10187079.node = NNI10187079;
NTI10187079.base = NTI10187043;
NTI10187077.base = NTI10187079;
NTI10187443.base = NTI10187077;
NTI10187445.base = NTI10187077;
var NNI10187043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI10187027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI10187081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI10187443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI10187445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI10187043.node = NNI10187043;
NTI10187043.base = NTI10187035;
NTI10187041.base = NTI10187043;
var NNI10187075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10187075.node = NNI10187075;
NTI10187075.base = NTI10187043;
NTI10187073.base = NTI10187075;
NTI10187423.base = NTI10187073;
NTI10187425.base = NTI10187081;
var NNI10187087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI10187087.node = NNI10187087;
NTI10187087.base = NTI10187043;
NTI10187085.base = NTI10187087;
NTI10187427.base = NTI10187085;
NTI10187429.base = NTI10187041;
var NNI10187071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI10187071.node = NNI10187071;
NTI10187071.base = NTI10187043;
NTI10187069.base = NTI10187071;
NTI10187431.base = NTI10187069;
var NNI10187067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10187067.node = NNI10187067;
NTI10187067.base = NTI10187043;
NTI10187065.base = NTI10187067;
NTI10187433.base = NTI10187065;
var NNI10187039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI10187041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI10187041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI10187041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI10187423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI10187425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI10187427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI10187429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI10187431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI10187433, name: "links", sons: null}]};
NTI10187039.node = NNI10187039;
NTI10187039.base = NTI10187035;
NTI10187037.base = NTI10187039;
var NNI10187091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI10187091.node = NNI10187091;
NTI10187091.base = NTI6008;
NTI10187089.base = NTI10187091;
var NNI10187035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI10187386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI10187388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10187390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI10187033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI10187033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI10187033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI10187031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI10187033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI10187033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI10187033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI10187037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI10187089, name: "style", sons: null}]};
NTI10187035.node = NNI10187035;
var NNI10187005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI10187180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI10187184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI10187188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI10187192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI10187196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI10187200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI10187204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI10187208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI10187212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI10187216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI10187220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI10187224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI10187228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI10187232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI10187236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI10187240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI10187244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI10187248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI10187252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI10187256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI10187260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI10187264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI10187268, name: "onloadend", sons: null}]};
NTI10187005.node = NNI10187005;
NTI10187005.base = NTI6008;
NTI10187035.base = NTI10187005;
NTI10187033.base = NTI10187035;
var NNI11231042 = {kind: 1, offset: "times", len: 0, typ: NTI143, name: "times", sons: null};
NTI11231042.node = NNI11231042;
NTI11231041.base = NTI11231042;
var NNI11231069 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI11231113, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI10187033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI11231041, name: "data", sons: null}]};
NTI11231069.node = NNI11231069;
var NNI11231078 = {kind: 1, offset: "compile", len: 0, typ: NTI11231094, name: "compile", sons: null};
NTI11231078.node = NNI11231078;
NTI11231077.base = NTI11231078;
NTI11231099.base = NTI11231077;
var NNI11231073 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI11231099, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI11231103, name: "config", sons: null}]};
NTI11231073.node = NNI11231073;
NTI11231073.base = NTI6008;
NTI11231069.base = NTI11231073;
NTI11301048.base = NTI11231082;
NTI11301031.base = NTI11231082;
var NNI11232380 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI112, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI163, name: "Field1", sons: null}]};
NTI11232380.node = NNI11232380;
var NNI10216033 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI10216033, name: "SimpleTypeSelector", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10216033, name: "SerialTypeSelector", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10216033, name: "CompareTypeSelector", len: 0, sons: null}}};
NTI10216033.node = NNI10216033;
var NNI11231620 = {kind: 3, offset: "kind", len: 3, typ: NTI10216033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11231527, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11231627, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11231634, name: "compare", sons: null}]]};
NTI11231620.node = NNI11231620;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI11250986 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI112, name: "Field1", sons: null}]};
NTI11250986.node = NNI11250986;
var NNI11231578 = {kind: 1, offset: "update", len: 0, typ: NTI11231583, name: "update", sons: null};
NTI11231578.node = NNI11231578;
NTI11231577.base = NTI11231578;
NTI11251138.base = NTI11231577;
var NNI10216017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10216017.node = NNI10216017;
var NNI10216015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10216015.node = NNI10216015;
NTI10216015.base = NTI6221;
NTI10216017.base = NTI10216015;
NTI11231566.base = NTI11231562;
NTI10216259.base = NTI10216408;
var NNI10216045 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI10216045, name: "SimpleIterator", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10216045, name: "SerialIterator", len: 0, sons: null}}};
NTI10216045.node = NNI10216045;
var NNI11231649 = {kind: 3, offset: "kind", len: 2, typ: NTI10216045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11231653, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11231669, name: "serial", sons: null}]]};
NTI11231649.node = NNI11231649;
var NNI11231573 = {kind: 1, offset: "compile", len: 0, typ: NTI11231589, name: "compile", sons: null};
NTI11231573.node = NNI11231573;
NTI11231572.base = NTI11231573;
NTI11231594.base = NTI11231572;
NTI11234439.base = NTI11231577;
var NNI11231599 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10216313, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11231605, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11231612, name: "clone", sons: null}]};
NTI11231599.node = NNI11231599;
NTI11231598.base = NTI11231599;
var NNI11234433 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11234439, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11231598, name: "mount", sons: null}]};
NTI11234433.node = NNI11234433;
NTI11234432.base = NTI11234433;
NTI11240035.base = NTI11234432;
NTI11240062.base = NTI11231577;
var NNI11281633 = {kind: 3, offset: "kind", len: 3, typ: NTI10216033, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11281637, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11281643, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI11281650, name: "compare", sons: null}]]};
NTI11281633.node = NNI11281633;
var NNI11300896 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI163, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI11231041, name: "Field1", sons: null}]};
NTI11300896.node = NNI11300896;
NTI11281601.base = NTI11281597;
var NNI11281665 = {kind: 3, offset: "kind", len: 2, typ: NTI10216045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI11281669, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI11281685, name: "serial", sons: null}]]};
NTI11281665.node = NNI11281665;
NTI11281607.base = NTI11231077;
NTI11284234.base = NTI11231082;
var NNI11281612 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10216313, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI11281618, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI11281625, name: "clone", sons: null}]};
NTI11281612.node = NNI11281612;
NTI11281611.base = NTI11281612;
var NNI11284228 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10187033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI11284234, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI11281611, name: "mount", sons: null}]};
NTI11284228.node = NNI11284228;
NTI11284227.base = NTI11284228;
NTI11290035.base = NTI11284227;
NTI11290062.base = NTI11231082;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function nimMax(a_230821, b_230822) {
    var Tmp1;

  var result_230823 = 0;

  BeforeRet: do {
    if ((b_230822 <= a_230821)) {
    Tmp1 = a_230821;
    }
    else {
    Tmp1 = b_230822;
    }
    
    result_230823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230823;

}
function nimMin(a_230803, b_230804) {
    var Tmp1;

  var result_230805 = 0;

  BeforeRet: do {
    if ((a_230803 <= b_230804)) {
    Tmp1 = a_230803;
    }
    else {
    Tmp1 = b_230804;
    }
    
    result_230805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230805;

}
var ConstSet9 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(0);
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(1);
var ConstSet14 = setConstr(true);
var ConstSet15 = setConstr(true);
var ConstSet16 = setConstr(true);
var ConstSet17 = setConstr(true);
var ConstSet18 = setConstr(true);
var ConstSet19 = setConstr(true);
var ConstSet20 = setConstr(true);
var ConstSet21 = setConstr(true);
var ConstSet22 = setConstr(true);
var ConstSet23 = setConstr(true);
var ConstSet24 = setConstr(true);
var ConstSet25 = setConstr(true);
var ConstSet26 = setConstr(false);
var ConstSet27 = setConstr(0);
var ConstSet28 = setConstr(false);
var ConstSet29 = setConstr(1);
var ConstSet30 = setConstr(1);
var ConstSet31 = setConstr(false);
var ConstSet32 = setConstr(1);
var ConstSet33 = setConstr(2);
var ConstSet34 = setConstr(false);
var ConstSet35 = setConstr(2);
var ConstSet36 = setConstr(2);
var ConstSet37 = setConstr(false);
var ConstSet38 = setConstr(false);
var ConstSet39 = setConstr(false);
var ConstSet40 = setConstr(false);
var ConstSet41 = setConstr(false);
var ConstSet42 = setConstr(false);
var ConstSet43 = setConstr(false);
var ConstSet44 = setConstr(false);
var ConstSet45 = setConstr(false);
var ConstSet46 = setConstr(false);
var ConstSet47 = setConstr(false);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(true);
var ConstSet50 = setConstr(true);
var ConstSet51 = setConstr(true);
var ConstSet52 = setConstr(true);
var ConstSet53 = setConstr(true);
var ConstSet54 = setConstr(true);
var ConstSet55 = setConstr(false);
var ConstSet56 = setConstr(false);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(1);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(false);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(false);
var ConstSet65 = setConstr(false);
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet66 = setConstr(true);
var ConstSet67 = setConstr(true);
var ConstSet68 = setConstr(0);
var ConstSet69 = setConstr(true);
var ConstSet70 = setConstr(1);
var ConstSet71 = setConstr(true);
var ConstSet72 = setConstr(true);
var ConstSet73 = setConstr(true);
var ConstSet74 = setConstr(true);
var ConstSet75 = setConstr(true);
var ConstSet76 = setConstr(true);
var ConstSet77 = setConstr(true);
var ConstSet78 = setConstr(true);
var ConstSet79 = setConstr(true);
var ConstSet80 = setConstr(true);
var ConstSet81 = setConstr(true);
var ConstSet82 = setConstr(true);
var ConstSet83 = setConstr(false);
var ConstSet84 = setConstr(0);
var ConstSet85 = setConstr(false);
var ConstSet86 = setConstr(1);
var ConstSet87 = setConstr(1);
var ConstSet88 = setConstr(false);
var ConstSet89 = setConstr(1);
var ConstSet90 = setConstr(2);
var ConstSet91 = setConstr(false);
var ConstSet92 = setConstr(2);
var ConstSet93 = setConstr(2);
var ConstSet94 = setConstr(false);
var ConstSet95 = setConstr(false);
var ConstSet96 = setConstr(false);
var ConstSet97 = setConstr(false);
var ConstSet98 = setConstr(false);
var ConstSet99 = setConstr(false);
var ConstSet100 = setConstr(false);
var ConstSet101 = setConstr(false);
var ConstSet102 = setConstr(false);
var ConstSet103 = setConstr(false);
var ConstSet104 = setConstr(false);
var ConstSet105 = setConstr(true);
var ConstSet106 = setConstr(true);
var ConstSet107 = setConstr(true);
var ConstSet108 = setConstr(true);
var ConstSet109 = setConstr(true);
var ConstSet110 = setConstr(true);
var ConstSet111 = setConstr(true);
var ConstSet112 = setConstr(false);
var ConstSet113 = setConstr(false);
var ConstSet114 = setConstr(false);
var ConstSet115 = setConstr(1);
var ConstSet116 = setConstr(false);
var ConstSet117 = setConstr(false);
var ConstSet118 = setConstr(false);
var ConstSet119 = setConstr(false);
var ConstSet120 = setConstr(false);
var ConstSet121 = setConstr(false);
var ConstSet122 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_850031 = [0];
var components_10218124 = [{Field0: null}];
var state_10244005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_10575231 = [null];
var local_instance_10575232 = [null];
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__11103098 = 0;
      colontmp__11103098 = (i_160051 - 1);
      var res_11103103 = colontmp__11103098;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11103103)) break L8;
            j_175236 = res_11103103;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_11103103 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function rotl_10244230(x_10244232, k_10244233) {
  var result_10244234 = 0;

  var F={procname:"random.rotl",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 122;
    result_10244234 = ((x_10244232 << k_10244233) | ((x_10244232 >>> 0) >>> ((64 - k_10244233) >>> 0)));
  framePtr = F.prev;

  return result_10244234;

}
function next_10244258(r_10244261) {
  var result_10244262 = 0;

  var F={procname:"random.next",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 139;
    var s0_10244263 = r_10244261.a0;
    F.line = 140;
    var s1_10244264 = r_10244261.a1;
    F.line = 141;
    result_10244262 = ((s0_10244263 + s1_10244264) >>> 0);
    F.line = 142;
    s1_10244264 = (s1_10244264 ^ s0_10244263);
    F.line = 143;
    r_10244261.a0 = ((rotl_10244230(s0_10244263, 55) ^ s1_10244264) ^ (s1_10244264 << 14));
    F.line = 144;
    r_10244261.a1 = rotl_10244230(s1_10244264, 36);
  framePtr = F.prev;

  return result_10244262;

}
function init_rand_10245612(seed_10245614) {
  var result_10245615 = [{a0: 0, a1: 0}];

  var F={procname:"random.initRand",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    if (!(!((seed_10245614 == 0)))) {
    F.line = 572;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/random.nim(572, 12) `seed != 0` "));
    }
    
    F.line = 573;
    result_10245615[0].a0 = (seed_10245614 >> 16);
    F.line = 574;
    result_10245615[0].a1 = (seed_10245614 & 65535);
    F.line = 575;
    next_10244258(result_10245615[0]);
  framePtr = F.prev;

  return result_10245615[0];

}
var rand_11103079 = [init_rand_10245612(1)];
async function init_comp_11340593(component_11340598, component_11340598_Idx, node_11340600, creator_11340602) {
  var result_11340604 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 19;
    var n_11340626 = (await node_11340600);
    F.line = 20;
    component_11340598[component_11340598_Idx] = creator_11340602(n_11340626);
    F.line = 131;
    result_11340604 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11340604;

}
function declare_11340575(registry_11340578, component_11340581, component_11340581_Idx, node_11340583, creator_11340585) {
    function HEX3Aanonymous_11340586() {
      var result_11340591 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 23;
        result_11340591 = init_comp_11340593(component_11340581, component_11340581_Idx, node_11340583, creator_11340585);
      framePtr = F.prev;

      return result_11340591;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 23;
    if (registry_11340578.Field0 != null) { registry_11340578.Field0.push(HEX3Aanonymous_11340586); } else { registry_11340578.Field0 = [HEX3Aanonymous_11340586]; };
  framePtr = F.prev;

  
}
async function fetch_template_11170001(rel_path_11170003) {
  var result_11170008 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 9;
    var response_11195032 = (await (window.fetch((toJSStr(rel_path_11170003)))));
    F.line = 10;
    var text_11200026 = (await (response_11195032.text()));
    F.line = 11;
    result_11170008 = (window.document.createRange().createContextualFragment((text_11200026)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11170008;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function nsuToHex(x_9450243, len_9450244) {
  var result_9450245 = null;

  var F={procname:"strutils.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 936;
    var n_9450247 = x_9450243;
    F.line = 937;
    result_9450245 = nimCopy(null, mnewString(len_9450244), NTI112);
    L1: do {
      F.line = 938;
      var j_9450254 = 0;
      F.line = 6;
      var colontmp__11340733 = 0;
      F.line = 938;
      colontmp__11340733 = subInt(len_9450244, 1);
      F.line = 28;
      var res_11340734 = colontmp__11340733;
      L2: do {
        F.line = 29;
          L3: while (true) {
          if (!(0 <= res_11340734)) break L3;
            F.line = 938;
            j_9450254 = res_11340734;
            F.line = 939;
            result_9450245[chckIndx(j_9450254, 0, (result_9450245 != null ? result_9450245.length : 0)+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9450247 & 15), 0, (makeNimstrLit("0123456789ABCDEF") != null ? makeNimstrLit("0123456789ABCDEF").length : 0)+0-1)-0];
            F.line = 940;
            n_9450247 = (n_9450247 >> 4);
            if (((n_9450247 == 0) && (x_9450243 < 0))) {
            F.line = 942;
            n_9450247 = -1;
            }
            
            F.line = 31;
            res_11340734 = subInt(res_11340734, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9450245;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function to_hex_11103115(x_11103118) {
  var result_11103119 = null;

  var F={procname:"toHex.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 945;
    result_11103119 = nimCopy(null, nsuToHex(chckRange(x_11103118, -9223372036854775808, 9223372036854775807), 16), NTI112);
  framePtr = F.prev;

  return result_11103119;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1445017(s_1445019, b_1445021, b_1445021_Idx, start_1445022) {
      var Tmp1;
          var Tmp4;

  var result_1445024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1445025 = start_1445022;
    if (((i_1445025 < (s_1445019 != null ? s_1445019.length : 0)) && (s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1445025 = addInt(i_1445025, 1);
    }
    
      if (!(i_1445025 < (s_1445019 != null ? s_1445019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1445021[b_1445021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1445025 < (s_1445019 != null ? s_1445019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1455016 = subInt(s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0], 48);
          if ((b_1445021[b_1445021_Idx] <= divInt(subInt(2147483647, c_1455016), 10))) {
          F.line = 483;
          b_1445021[b_1445021_Idx] = addInt(mulInt(b_1445021[b_1445021_Idx], 10), c_1455016);
          }
          else {
            F.line = 485;
            b_1445021[b_1445021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1445025 = addInt(i_1445025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1445025 < (s_1445019 != null ? s_1445019.length : 0)) && (s_1445019[chckIndx(i_1445025, 0, (s_1445019 != null ? s_1445019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1445025 = addInt(i_1445025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1445024 = subInt(i_1445025, start_1445022);
    }
    
  framePtr = F.prev;

  return result_1445024;

}
function HEX5BHEX5D_4855068(s_4855072, x_4855074) {
  var result_4855075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4855201 = x_4855074.a;
    F.line = 2437;
    var l_4855401 = addInt(subInt(subInt((s_4855072 != null ? s_4855072.length : 0), x_4855074.b), a_4855201), 1);
    F.line = 2438;
    result_4855075 = nimCopy(null, mnewString(chckRange(l_4855401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4855409 = 0;
      F.line = 106;
      var i_11340764 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11340764 < l_4855401)) break L3;
            F.line = 2439;
            i_4855409 = i_11340764;
            F.line = 2439;
            result_4855075[chckIndx(i_4855409, 0, (result_4855075 != null ? result_4855075.length : 0)+0-1)-0] = s_4855072[chckIndx(addInt(i_4855409, a_4855201), 0, (s_4855072 != null ? s_4855072.length : 0)+0-1)-0];
            F.line = 109;
            i_11340764 = addInt(i_11340764, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4855075;

}
function HEX2EHEX2E_4855001(a_4855006, b_4855008) {
  var result_4855014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4855014, {a: a_4855006, b: b_4855008}, NTI4855011);
  framePtr = F.prev;

  return result_4855014;

}
function parse_standard_format_specifier_10080322(s_10080324, start_10080325, ignore_unknown_suffix_10080327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10080328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_10080328.fill = 32;
    F.line = 380;
    result_10080328.align = 0;
    F.line = 381;
    result_10080328.sign = 45;
    F.line = 382;
    var i_10080331 = start_10080325;
    if (((addInt(i_10080331, 1) < (s_10080324 != null ? s_10080324.length : 0)) && (ConstSet2[s_10080324[chckIndx(addInt(i_10080331, 1), 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_10080328.fill = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 385;
    result_10080328.align = s_10080324[chckIndx(addInt(i_10080331, 1), 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 386;
    i_10080331 = addInt(i_10080331, 2);
    }
    else {
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (ConstSet3[s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_10080328.align = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 389;
    i_10080331 = addInt(i_10080331, 1);
    }
    }
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (ConstSet4[s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_10080328.sign = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 393;
    i_10080331 = addInt(i_10080331, 1);
    }
    
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_10080328.alternateForm = true;
    F.line = 397;
    i_10080331 = addInt(i_10080331, 1);
    }
    
      if (!((addInt(i_10080331, 1) < (s_10080324 != null ? s_10080324.length : 0)) && (s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_10080324[chckIndx(addInt(i_10080331, 1), 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_10080328.padWithZero = true;
    F.line = 401;
    i_10080331 = addInt(i_10080331, 1);
    }
    
    F.line = 403;
    var parsed_length_10100015 = parse_saturated_natural_1445017(s_10080324, result_10080328, "minimumWidth", i_10080331);
    F.line = 404;
    i_10080331 = addInt(i_10080331, parsed_length_10100015);
    if (((i_10080331 < (s_10080324 != null ? s_10080324.length : 0)) && (s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_10080331 = addInt(i_10080331, 1);
    F.line = 407;
    var parsed_length_b_10100029 = parse_saturated_natural_1445017(s_10080324, result_10080328, "precision", i_10080331);
    F.line = 408;
    i_10080331 = addInt(i_10080331, parsed_length_b_10100029);
    }
    else {
      F.line = 410;
      result_10080328.precision = -1;
    }
    
      if (!(i_10080331 < (s_10080324 != null ? s_10080324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_10080328.typ = s_10080324[chckIndx(i_10080331, 0, (s_10080324 != null ? s_10080324.length : 0)+0-1)-0];
    F.line = 414;
    i_10080331 = addInt(i_10080331, 1);
    }
    
    F.line = 415;
    result_10080328.endPosition = i_10080331;
      if (!!((i_10080331 == (s_10080324 != null ? s_10080324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_10080327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4855068(s_10080324, HEX2EHEX2E_4855001(i_10080331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_10080328;

}
function nucruneLen(s_1526829) {
  var result_1526830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1526832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1526832 < (s_1526829 != null ? s_1526829.length : 0))) break L2;
          if ((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1526832 = addInt(i_1526832, 1);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1526832 = addInt(i_1526832, 2);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1526832 = addInt(i_1526832, 3);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1526832 = addInt(i_1526832, 4);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1526832 = addInt(i_1526832, 5);
          }
          else {
          if ((((s_1526829[chckIndx(i_1526832, 0, (s_1526829 != null ? s_1526829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1526832 = addInt(i_1526832, 6);
          }
          else {
            F.line = 49;
          i_1526832 = addInt(i_1526832, 1);
          }
          }}}}}
          F.line = 50;
          result_1526830 = addInt(result_1526830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1526830;

}
function rune_len_at_1526931(s_1526933, i_1526934) {
  var result_1526935 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1526935 = 1;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1526935 = 2;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1526935 = 3;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1526935 = 4;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1526935 = 5;
    }
    else {
    if ((((s_1526933[chckIndx(i_1526934, 0, (s_1526933 != null ? s_1526933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1526935 = 6;
    }
    else {
      F.line = 68;
      result_1526935 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1526935;

}
function rune_offset_2150244(s_2150246, pos_2150247, start_2150248) {
  var result_2150249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_2150251 = 0;
    F.line = 320;
    var o_2150252 = start_2150248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_2150251 < pos_2150247)) break L2;
          F.line = 322;
          o_2150252 = addInt(o_2150252, chckRange(rune_len_at_1526931(s_2150246, o_2150252), 0, 2147483647));
          if (((s_2150246 != null ? s_2150246.length : 0) <= o_2150252)) {
          F.line = 324;
          result_2150249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_2150251 = addInt(i_2150251, 1);
        }
    } while(false);
    F.line = 326;
    result_2150249 = o_2150252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_2150249;

}
function validate_utf8_1770229(s_1770231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1770232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1770234 = 0;
    F.line = 173;
    var l_1770235 = (s_1770231 != null ? s_1770231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1770234 < l_1770235)) break L2;
          if ((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1770234 = addInt(i_1770234, 1);
          }
          else {
          if ((((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1770232 = i_1770234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1770234, 1) < l_1770235)) Tmp3 = false; else {              Tmp3 = (((s_1770231[chckIndx(addInt(i_1770234, 1), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1770234 = addInt(i_1770234, 2);
          }
          else {
            F.line = 180;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1770234, 2) < l_1770235)) Tmp5 = false; else {              Tmp5 = (((s_1770231[chckIndx(addInt(i_1770234, 1), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1770231[chckIndx(addInt(i_1770234, 2), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1770234 = addInt(i_1770234, 3);
          }
          else {
            F.line = 184;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1770231[chckIndx(i_1770234, 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1770234, 3) < l_1770235)) Tmp8 = false; else {              Tmp8 = (((s_1770231[chckIndx(addInt(i_1770234, 1), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1770231[chckIndx(addInt(i_1770234, 2), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1770231[chckIndx(addInt(i_1770234, 3), 0, (s_1770231 != null ? s_1770231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1770234 = addInt(i_1770234, 4);
          }
          else {
            F.line = 190;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1770232 = i_1770234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1770232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1770232;

}
function nsuRepeatChar(c_9625048, count_9625049) {
  var result_9625050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9625050 = nimCopy(null, mnewString(count_9625049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9625059 = 0;
      F.line = 66;
      var colontmp__11340795 = 0;
      F.line = 1283;
      colontmp__11340795 = subInt(count_9625049, 1);
      F.line = 77;
      var res_11340796 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11340796 <= colontmp__11340795)) break L3;
            F.line = 1283;
            i_9625059 = res_11340796;
            F.line = 1283;
            result_9625050[chckIndx(i_9625059, 0, (result_9625050 != null ? result_9625050.length : 0)+0-1)-0] = c_9625048;
            F.line = 80;
            res_11340796 = addInt(res_11340796, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9625050;

}
function align_string_10080222(s_10080224, minimum_width_10080225, align_10080226, fill_10080227) {
      var Tmp1;

  var result_10080228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_10080225 == 0)) {
    F.line = 282;
    result_10080228 = nimCopy(null, s_10080224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1770229(s_10080224) == -1)) {
      Tmp1 = nucruneLen(s_10080224);
      }
      else {
      Tmp1 = (s_10080224 != null ? s_10080224.length : 0);
      }
      
      var s_rune_len_10080229 = Tmp1;
      F.line = 285;
      var to_fill_10080230 = subInt(minimum_width_10080225, s_rune_len_10080229);
      if ((to_fill_10080230 <= 0)) {
      F.line = 287;
      result_10080228 = nimCopy(null, s_10080224, NTI112);
      }
      else {
      if (((align_10080226 == 60) || (align_10080226 == 0))) {
      F.line = 289;
      result_10080228 = nimCopy(null, (s_10080224 || []).concat(nsuRepeatChar(fill_10080227, chckRange(to_fill_10080230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_10080226 == 94)) {
      F.line = 291;
      var half_10080231 = divInt(to_fill_10080230, 2);
      F.line = 292;
      result_10080228 = nimCopy(null, (nsuRepeatChar(fill_10080227, chckRange(half_10080231, 0, 2147483647)) || []).concat(s_10080224 || [],nsuRepeatChar(fill_10080227, chckRange(subInt(to_fill_10080230, half_10080231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_10080228 = nimCopy(null, (nsuRepeatChar(fill_10080227, chckRange(to_fill_10080230, 0, 2147483647)) || []).concat(s_10080224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_10080228;

}
function format_value_10125080(result_10125083, result_10125083_Idx, value_10125084, specifier_10125085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_10125086 = parse_standard_format_specifier_10080322(specifier_10125085, 0, false);
    F.line = 503;
    var value_10125087 = nimCopy(null, value_10125084, NTI112);
    F.line = 504;
    switch (spec_10125086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10125086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_10125086.precision == -1))) {
    if ((spec_10125086.precision < nucruneLen(value_10125087))) {
    F.line = 512;
    (value_10125087 == null ? value_10125087 = mnewString(chckRange(rune_offset_2150244(value_10125087, chckRange(spec_10125086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_10125087.length = chckRange(rune_offset_2150244(value_10125087, chckRange(spec_10125086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_10125083[result_10125083_Idx] != null) { result_10125083[result_10125083_Idx] = (result_10125083[result_10125083_Idx]).concat(align_string_10080222(value_10125087, spec_10125086.minimumWidth, spec_10125086.align, spec_10125086.fill)); } else { result_10125083[result_10125083_Idx] = align_string_10080222(value_10125087, spec_10125086.minimumWidth, spec_10125086.align, spec_10125086.fill).slice(); };
  framePtr = F.prev;

  
}
function nsuFindChar(s_9770216, sub_9770217, start_9770218, last_9770219) {
    var Tmp1;

  var result_9770221 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    if ((last_9770219 == 0)) {
    Tmp1 = (s_9770216 != null ? (s_9770216.length-1) : -1);
    }
    else {
    Tmp1 = last_9770219;
    }
    
    var last_9770223 = Tmp1;
    L2: do {
      F.line = 1867;
      var i_9770606 = 0;
      F.line = 66;
      var colontmp__11340813 = 0;
      F.line = 1867;
      colontmp__11340813 = start_9770218;
      F.line = 77;
      var res_11340814 = colontmp__11340813;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_11340814 <= last_9770223)) break L4;
            F.line = 1867;
            i_9770606 = res_11340814;
            if ((sub_9770217 == s_9770216[chckIndx(i_9770606, 0, (s_9770216 != null ? s_9770216.length : 0)+0-1)-0])) {
            F.line = 1868;
            result_9770221 = i_9770606;
            break BeforeRet;
            }
            
            F.line = 80;
            res_11340814 = addInt(res_11340814, 1);
          }
      } while(false);
    } while(false);
    F.line = 1869;
    result_9770221 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9770221;

}
function substr_341022(s_341024, first_341025, last_341026) {
  var result_341027 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2943;
    var first_341028 = nimMax(first_341025, 0);
    F.line = 2944;
    var l_341030 = nimMax(addInt(subInt(nimMin(last_341026, (s_341024 != null ? (s_341024.length-1) : -1)), first_341028), 1), 0);
    F.line = 2945;
    result_341027 = nimCopy(null, mnewString(chckRange(l_341030, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2946;
      var i_341039 = 0;
      F.line = 66;
      var colontmp__11340820 = 0;
      F.line = 2946;
      colontmp__11340820 = subInt(l_341030, 1);
      F.line = 77;
      var res_11340821 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11340821 <= colontmp__11340820)) break L3;
            F.line = 2946;
            i_341039 = res_11340821;
            F.line = 2947;
            result_341027[chckIndx(i_341039, 0, (result_341027 != null ? result_341027.length : 0)+0-1)-0] = s_341024[chckIndx(addInt(i_341039, first_341028), 0, (s_341024 != null ? s_341024.length : 0)+0-1)-0];
            F.line = 80;
            res_11340821 = addInt(res_11340821, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_341027;

}
function substr_341053(s_341055, first_341056) {
  var result_341058 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2950;
    result_341058 = nimCopy(null, substr_341022(s_341055, first_341056, (s_341055 != null ? (s_341055.length-1) : -1)), NTI112);
  framePtr = F.prev;

  return result_341058;

}
function nsuInitSkipTable(a_9765081, sub_9765082) {
  var F={procname:"strutils.initSkipTable",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1791;
    var m_9765083 = (sub_9765082 != null ? sub_9765082.length : 0);
    F.line = 1792;
    var i_9765085 = 0;
    L1: do {
      F.line = 1793;
        L2: while (true) {
        if (!(i_9765085 <= 248)) break L2;
          F.line = 1794;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 0), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1795;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 1), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1796;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 2), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1797;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 3), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1798;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 4), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1799;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 5), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1800;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 6), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1801;
          a_9765081[chckIndx(chckRange(addInt(i_9765085, 7), 0, 255), 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = m_9765083;
          F.line = 1802;
          i_9765085 = addInt(i_9765085, 8);
        }
    } while(false);
    L3: do {
      F.line = 1804;
      var i_9765101 = 0;
      F.line = 104;
      var colontmp__11340828 = 0;
      F.line = 1804;
      colontmp__11340828 = subInt(m_9765083, 1);
      F.line = 106;
      var i_11340829 = 0;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_11340829 < colontmp__11340828)) break L5;
            F.line = 1804;
            i_9765101 = i_11340829;
            F.line = 1805;
            a_9765081[chckIndx(sub_9765082[chckIndx(i_9765101, 0, (sub_9765082 != null ? sub_9765082.length : 0)+0-1)-0], 0, (a_9765081 != null ? a_9765081.length : 0)+0-1)-0] = subInt(subInt(m_9765083, 1), i_9765101);
            F.line = 109;
            i_11340829 = addInt(i_11340829, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function nsuFindStrA(a_9765117, s_9765118, sub_9765119, start_9765120, last_9765121) {
    var Tmp1;

  var result_9765123 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1815;
    if ((last_9765121 == 0)) {
    Tmp1 = (s_9765118 != null ? (s_9765118.length-1) : -1);
    }
    else {
    Tmp1 = last_9765121;
    }
    
    var last_9765125 = Tmp1;
    F.line = 1816;
    var sub_last_9765126 = subInt((sub_9765119 != null ? sub_9765119.length : 0), 1);
    if ((sub_last_9765126 == -1)) {
    F.line = 1821;
    result_9765123 = start_9765120;
    break BeforeRet;
    }
    
    F.line = 1825;
    var skip_9765127 = start_9765120;
    L2: do {
      F.line = 1827;
        L3: while (true) {
        if (!(sub_last_9765126 <= subInt(last_9765125, skip_9765127))) break L3;
          F.line = 1828;
          var i_9770001 = sub_last_9765126;
          L4: do {
            F.line = 1829;
              L5: while (true) {
              if (!(s_9765118[chckIndx(addInt(skip_9765127, i_9770001), 0, (s_9765118 != null ? s_9765118.length : 0)+0-1)-0] == sub_9765119[chckIndx(i_9770001, 0, (sub_9765119 != null ? sub_9765119.length : 0)+0-1)-0])) break L5;
                if ((i_9770001 == 0)) {
                F.line = 1831;
                result_9765123 = skip_9765127;
                break BeforeRet;
                }
                
                F.line = 1832;
                i_9770001 = subInt(i_9770001, 1);
              }
          } while(false);
          F.line = 1833;
          skip_9765127 = addInt(skip_9765127, a_9765117[chckIndx(s_9765118[chckIndx(addInt(skip_9765127, sub_last_9765126), 0, (s_9765118 != null ? s_9765118.length : 0)+0-1)-0], 0, (a_9765117 != null ? a_9765117.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 1834;
    result_9765123 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9765123;

}
function nsuReplaceStr(s_9840016, sub_9840017, by_9840018) {
  var result_9840019 = null;

  var F={procname:"strutils.replace",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2056;
    result_9840019 = nimCopy(null, [], NTI112);
    F.line = 2057;
    var sub_len_9840020 = (sub_9840017 != null ? sub_9840017.length : 0);
    if ((sub_len_9840020 == 0)) {
    F.line = 2059;
    result_9840019 = nimCopy(null, s_9840016, NTI112);
    }
    else {
    if ((sub_len_9840020 == 1)) {
    F.line = 2063;
    var c_9840021 = sub_9840017[chckIndx(0, 0, (sub_9840017 != null ? sub_9840017.length : 0)+0-1)-0];
    F.line = 2064;
    var last_9840023 = (s_9840016 != null ? (s_9840016.length-1) : -1);
    F.line = 2065;
    var i_9840025 = 0;
    L1: do {
      F.line = 2066;
        L2: while (true) {
        if (!true) break L2;
          F.line = 2067;
          var j_9840026 = nsuFindChar(s_9840016, c_9840021, chckRange(i_9840025, 0, 2147483647), last_9840023);
          if ((j_9840026 < 0)) {
          F.line = 2068;
          break L1;
          }
          
          F.line = 2069;
          if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341022(s_9840016, i_9840025, subInt(j_9840026, 1))); } else { result_9840019 = substr_341022(s_9840016, i_9840025, subInt(j_9840026, 1)).slice(); };
          F.line = 2070;
          if (result_9840019 != null) { result_9840019 = (result_9840019).concat(by_9840018); } else { result_9840019 = by_9840018.slice(); };
          F.line = 2071;
          i_9840025 = addInt(j_9840026, sub_len_9840020);
        }
    } while(false);
    F.line = 2073;
    if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341053(s_9840016, i_9840025)); } else { result_9840019 = substr_341053(s_9840016, i_9840025).slice(); };
    }
    else {
      F.line = 2075;
      var a_9840027 = [new Int32Array(256)];
      F.line = 2076;
      nsuInitSkipTable(a_9840027[0], sub_9840017);
      F.line = 2077;
      var last_9840030 = (s_9840016 != null ? (s_9840016.length-1) : -1);
      F.line = 2078;
      var i_9840032 = 0;
      L3: do {
        F.line = 2079;
          L4: while (true) {
          if (!true) break L4;
            F.line = 2080;
            var j_9840033 = nsuFindStrA(a_9840027[0], s_9840016, sub_9840017, chckRange(i_9840032, 0, 2147483647), last_9840030);
            if ((j_9840033 < 0)) {
            F.line = 2081;
            break L3;
            }
            
            F.line = 2082;
            if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341022(s_9840016, i_9840032, subInt(j_9840033, 1))); } else { result_9840019 = substr_341022(s_9840016, i_9840032, subInt(j_9840033, 1)).slice(); };
            F.line = 2083;
            if (result_9840019 != null) { result_9840019 = (result_9840019).concat(by_9840018); } else { result_9840019 = by_9840018.slice(); };
            F.line = 2084;
            i_9840032 = addInt(j_9840033, sub_len_9840020);
          }
      } while(false);
      F.line = 2086;
      if (result_9840019 != null) { result_9840019 = (result_9840019).concat(substr_341053(s_9840016, i_9840032)); } else { result_9840019 = substr_341053(s_9840016, i_9840032).slice(); };
    }
    }
  framePtr = F.prev;

  return result_9840019;

}
function scope_11103110(node_11103113) {
  var F={procname:"css.scope",prev:framePtr,filename:"css.nim",line:0};
  framePtr = F;
    F.line = 11;
    var comp_11103138 = to_hex_11103115(next_10244258(rand_11103079[0]));
    L1: do {
      F.line = 12;
      var element_11110214 = null;
      F.line = 182;
      var colontmp__11340722 = null;
      F.line = 12;
      colontmp__11340722 = node_11103113.querySelectorAll("*");
      F.line = 184;
      var i_11340724 = 0;
      F.line = 185;
      var l_11340725 = (colontmp__11340722 != null ? colontmp__11340722.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11340724 < l_11340725)) break L3;
            F.line = 12;
            element_11110214 = colontmp__11340722[chckIndx(i_11340724, 0, (colontmp__11340722 != null ? colontmp__11340722.length : 0)+0-1)-0];
            F.line = 13;
            F.line = 13;
            var fmt_res_11110218 = [mnewString(0)];
            F.line = 13;
            if (fmt_res_11110218[0] != null) { fmt_res_11110218[0] = (fmt_res_11110218[0]).concat(makeNimstrLit("component-")); } else { fmt_res_11110218[0] = makeNimstrLit("component-"); };
            F.line = 13;
            format_value_10125080(fmt_res_11110218, 0, comp_11103138, []);
            element_11110214.classList.add(toJSStr(fmt_res_11110218[0]));
            F.line = 188;
            i_11340724 = addInt(i_11340724, 1);
            if (!(((colontmp__11340722 != null ? colontmp__11340722.length : 0) == l_11340725))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 14;
      var style_11115008 = null;
      F.line = 182;
      var colontmp__11340728 = null;
      F.line = 14;
      colontmp__11340728 = node_11103113.querySelectorAll("style[scope]");
      F.line = 184;
      var i_11340729 = 0;
      F.line = 185;
      var l_11340730 = (colontmp__11340728 != null ? colontmp__11340728.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_11340729 < l_11340730)) break L6;
            F.line = 14;
            style_11115008 = colontmp__11340728[chckIndx(i_11340729, 0, (colontmp__11340728 != null ? colontmp__11340728.length : 0)+0-1)-0];
            F.line = 15;
            var scope_11115014 = to_hex_11103115(next_10244258(rand_11103079[0]));
            F.line = 16;
            var fmt_res_11120004 = [mnewString(0)];
            F.line = 16;
            if (fmt_res_11120004[0] != null) { fmt_res_11120004[0] = (fmt_res_11120004[0]).concat(makeNimstrLit("scope-")); } else { fmt_res_11120004[0] = makeNimstrLit("scope-"); };
            F.line = 16;
            format_value_10125080(fmt_res_11120004, 0, scope_11115014, []);
            (style_11115008.parentNode).classList.add((toJSStr(fmt_res_11120004[0])));
            F.line = 21;
            F.line = 20;
            var fmt_res_11150005 = [mnewString(0)];
            F.line = 20;
            if (fmt_res_11150005[0] != null) { fmt_res_11150005[0] = (fmt_res_11150005[0]).concat(makeNimstrLit(".scope-")); } else { fmt_res_11150005[0] = makeNimstrLit(".scope-"); };
            F.line = 20;
            format_value_10125080(fmt_res_11150005, 0, scope_11115014, []);
            F.line = 21;
            var fmt_res_11155002 = [mnewString(0)];
            F.line = 21;
            if (fmt_res_11155002[0] != null) { fmt_res_11155002[0] = (fmt_res_11155002[0]).concat(makeNimstrLit(".component-")); } else { fmt_res_11155002[0] = makeNimstrLit(".component-"); };
            F.line = 21;
            format_value_10125080(fmt_res_11155002, 0, comp_11103138, []);
            style_11115008.textContent = toJSStr(nsuReplaceStr(nsuReplaceStr(cstrToNimstr(style_11115008.textContent), makeNimstrLit(":scope"), fmt_res_11150005[0]), makeNimstrLit(":component"), fmt_res_11155002[0]));
            F.line = 188;
            i_11340729 = addInt(i_11340729, 1);
            if (!(((colontmp__11340728 != null ? colontmp__11340728.length : 0) == l_11340730))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
async function fetch_template_11230001(rel_path_11230003, template_selector_11230004, css_11230005) {
  var result_11230010 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 14;
    var tmpl_11230035 = (await fetch_template_11170001(rel_path_11230003));
    F.line = 15;
    var node_11230036 = tmpl_11230035.querySelector(toJSStr(template_selector_11230004)).content;
    if (css_11230005) {
    F.line = 17;
    scope_11103110(node_11230036);
    }
    
    F.line = 18;
    result_11230010 = node_11230036;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11230010;

}
function new_11340207() {
  var result_11340211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11340401 = null;
    F.line = 851;
    r_11340401 = {m_type: NTI11231069, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_11340211 = r_11340401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11340211;

}
function compile_11301024(cfgs_11301029, node_11301030) {
  var result_11301033 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 462;
    result_11301033 = nimCopy(null, [], NTI11301048);
    L1: do {
      F.line = 463;
      var cfg_11301055 = null;
      F.line = 184;
      var i_11340837 = 0;
      F.line = 185;
      var l_11340838 = (cfgs_11301029 != null ? cfgs_11301029.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11340837 < l_11340838)) break L3;
            F.line = 463;
            cfg_11301055 = cfgs_11301029[chckIndx(i_11340837, 0, (cfgs_11301029 != null ? cfgs_11301029.length : 0)+0-1)-0];
            F.line = 464;
            if (result_11301033 != null) { result_11301033.push(cfg_11301055.compile(node_11301030)); } else { result_11301033 = [cfg_11301055.compile(node_11301030)]; };
            F.line = 188;
            i_11340837 = addInt(i_11340837, 1);
            if (!(((cfgs_11301029 != null ? cfgs_11301029.length : 0) == l_11340838))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11301033;

}
function compile_11330644(cfg_11330648, node_11330649) {
  var result_11330651 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_11330649 == null)))) {
    F.line = 469;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(469, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 470;
    result_11330651 = new_11340207();
    F.line = 471;
    result_11330651.config = cfg_11330648.config;
    F.line = 472;
    result_11330651.original_node = node_11330649;
    F.line = 473;
    result_11330651.node = node_11330649.cloneNode(true);
    F.line = 475;
    result_11330651.config(result_11330651);
    F.line = 476;
    result_11330651.matches = nimCopy(null, compile_11301024(result_11330651.cmatches, result_11330651.node), NTI11301031);
  framePtr = F.prev;

  return result_11330651;

}
function new_11330271() {
  var result_11330275 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_11330401 = null;
    F.line = 851;
    r_11330401 = {m_type: NTI11231073, cmatches: null, config: null};
    F.line = 852;
    result_11330275 = r_11330401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11330275;

}
function create_11330256(config_11330262) {
  var result_11330264 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 228;
    result_11330264 = new_11330271();
    F.line = 229;
    result_11330264.config = config_11330262;
  framePtr = F.prev;

  return result_11330264;

}
function compile_11321525(node_11321530, configurator_11321536) {
  var result_11321538 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 624;
    if (!(!((node_11321530 == null)))) {
    F.line = 626;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(626, 10) `\x0Anot (node == nil)` "));
    }
    
    result_11321538 = compile_11330644(create_11330256(configurator_11321536), node_11321530);
  framePtr = F.prev;

  return result_11321538;

}
function refresh_11280979(c_11280984, refresh_11280986) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 339;
    if (c_11280984.refresh != null) { c_11280984.refresh.push(refresh_11280986); } else { c_11280984.refresh = [refresh_11280986]; };
  framePtr = F.prev;

  
}
function compile_11251114(cfgs_11251119, node_11251120) {
  var result_11251123 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 462;
    result_11251123 = nimCopy(null, [], NTI11251138);
    L1: do {
      F.line = 463;
      var cfg_11251145 = null;
      F.line = 184;
      var i_11340881 = 0;
      F.line = 185;
      var l_11340882 = (cfgs_11251119 != null ? cfgs_11251119.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11340881 < l_11340882)) break L3;
            F.line = 463;
            cfg_11251145 = cfgs_11251119[chckIndx(i_11340881, 0, (cfgs_11251119 != null ? cfgs_11251119.length : 0)+0-1)-0];
            F.line = 464;
            if (result_11251123 != null) { result_11251123.push(cfg_11251145.compile(node_11251120)); } else { result_11251123 = [cfg_11251145.compile(node_11251120)]; };
            F.line = 188;
            i_11340881 = addInt(i_11340881, 1);
            if (!(((cfgs_11251119 != null ? cfgs_11251119.length : 0) == l_11340882))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_11251123;

}
function create_iter_item_11251060(match_11251065, parent_node_11251066) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11251068 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 484;
    var comp_11251073 = null;
    F.line = 485;
    var node_11251074 = null;
      var Tmp1 = match_11251065;
      if (ConstSet19[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 487;
    var Tmp2 = match_11251065;
    if (ConstSet20[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11251073 = Tmp2.mount_template.clone();
    F.line = 488;
    node_11251074 = comp_11251073.node();
    }
    else {
      F.line = 490;
      node_11251074 = match_11251065.node.cloneNode(true);
    }
    
    F.line = 491;
    var Tmp3 = match_11251065;
    if (ConstSet21[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11251068 = {serial: 0, mount: comp_11251073, node: node_11251074, matches: compile_11251114(Tmp3.match_templates, node_11251074)};
    F.line = 496;
    var Tmp4 = match_11251065;
    if (ConstSet22[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11251066.insertBefore(node_11251074, Tmp4.anchor);
  framePtr = F.prev;

  return result_11251068;

}
function detach_11280474(iter_item_11280478, parent_node_11280479) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 500;
    parent_node_11280479.removeChild(iter_item_11280478.node);
  framePtr = F.prev;

  
}
function pop_11280224(s_11280229, s_11280229_Idx) {
  var result_11280230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11280236 = subInt((s_11280229[s_11280229_Idx] != null ? s_11280229[s_11280229_Idx].length : 0), 1);
    F.line = 1784;
    result_11280230 = s_11280229[s_11280229_Idx][chckIndx(l_11280236, 0, (s_11280229[s_11280229_Idx] != null ? s_11280229[s_11280229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11280229[s_11280229_Idx] === null) s_11280229[s_11280229_Idx] = [];
               if (s_11280229[s_11280229_Idx].length < chckRange(l_11280236, 0, 2147483647)) { for (var i=s_11280229[s_11280229_Idx].length;i<chckRange(l_11280236, 0, 2147483647);++i) s_11280229[s_11280229_Idx].push(null); }
               else { s_11280229[s_11280229_Idx].length = chckRange(l_11280236, 0, 2147483647); };
  framePtr = F.prev;

  return result_11280230;

}
function update_11250958(match_11250963, val_11250964, refresh_11250965) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11250982(s_11250985, s_11250985_Idx) {
        var result_11250989 = {Field0: false, Field1: null};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 512;
          nimCopy(result_11250989, itf_simple_11250981(), NTI11250986);
        framePtr = F.prev;

        return result_11250989;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11250963.iter) {
    F.line = 505;
    var i_11250967 = 0;
    F.line = 506;
    var Tmp1 = match_11250963;
    if (ConstSet9[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11250970 = Tmp1.anchor.parentNode;
    F.line = 507;
    var itf_11250975 = null;
    F.line = 508;
    var Tmp2 = match_11250963;
    if (ConstSet10[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 510;
      var Tmp3 = match_11250963;
      if (ConstSet12[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet11[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11250981 = Tmp4.simple(val_11250964);
      F.line = 511;
      itf_11250975 = HEX3Aanonymous_11250982;
      break;
    case 1:
      F.line = 514;
      var Tmp5 = match_11250963;
      if (ConstSet14[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet13[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11250975 = Tmp6.serial(val_11250964);
      break;
    }
    L7: do {
      F.line = 516;
        L8: while (true) {
        if (!true) break L8;
          F.line = 517;
            var Tmp10 = match_11250963;
            if (ConstSet15[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11250967 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11250963;
          if (ConstSet16[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11250967, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11251034 = [Tmp9];
          F.line = 518;
          var changed_11251035 = refresh_11250965;
          F.line = 519;
          var it_11251037 = itf_11250975(serial_11251034, 0);
          if ((it_11251037["Field0"] == false)) {
          F.line = 520;
          break L7;
          }
          
          F.line = 521;
          var item_11251038 = nimCopy(null, it_11251037["Field1"], NTI112);
          F.line = 523;
          var iter_item_11251043 = null;
          F.line = 524;
          var inited_11251044 = false;
            var Tmp14 = match_11250963;
            if (ConstSet17[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11250967 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 528;
          var Tmp16 = match_11250963;
          if (ConstSet18[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11251043 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11250967, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 529;
          inited_11251044 = true;
          F.line = 530;
          changed_11251035 = true;
          }
          else {
            F.line = 532;
            iter_item_11251043 = create_iter_item_11251060(match_11250963, parent_node_11250970);
            F.line = 533;
            var Tmp18 = match_11250963;
            if (ConstSet23[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11251043); } else { Tmp19 = [iter_item_11251043]; };
            F.line = 534;
            inited_11251044 = false;
            if (!((serial_11251034[0] == iter_item_11251043.serial))) {
            F.line = 536;
            changed_11251035 = true;
            }
            
          }
          
          if (!(inited_11251044)) {
          L20: do {
            F.line = 540;
            var init_proc_11260214 = null;
            F.line = 184;
            var i_11340850 = 0;
            F.line = 185;
            var l_11340851 = (match_11250963.init != null ? match_11250963.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11340850 < l_11340851)) break L22;
                  F.line = 540;
                  init_proc_11260214 = match_11250963.init[chckIndx(i_11340850, 0, (match_11250963.init != null ? match_11250963.init.length : 0)+0-1)-0];
                  F.line = 541;
                  init_proc_11260214(iter_item_11251043.node);
                  F.line = 188;
                  i_11340850 = addInt(i_11340850, 1);
                  if (!(((match_11250963.init != null ? match_11250963.init.length : 0) == l_11340851))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11251043.mount == null))) {
          F.line = 545;
          iter_item_11251043.mount.update(item_11251038, refresh_11250965);
          }
          
          L23: do {
            F.line = 548;
            var submatch_11270214 = null;
            F.line = 184;
            var i_11340855 = 0;
            F.line = 185;
            var l_11340856 = (iter_item_11251043.matches != null ? iter_item_11251043.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11340855 < l_11340856)) break L25;
                  F.line = 548;
                  submatch_11270214 = iter_item_11251043.matches[chckIndx(i_11340855, 0, (iter_item_11251043.matches != null ? iter_item_11251043.matches.length : 0)+0-1)-0];
                  F.line = 549;
                  submatch_11270214.update(item_11251038, refresh_11250965);
                  F.line = 188;
                  i_11340855 = addInt(i_11340855, 1);
                  if (!(((iter_item_11251043.matches != null ? iter_item_11251043.matches.length : 0) == l_11340856))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 552;
            var refresh_proc_11280214 = null;
            F.line = 184;
            var i_11340860 = 0;
            F.line = 185;
            var l_11340861 = (match_11250963.refresh != null ? match_11250963.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11340860 < l_11340861)) break L28;
                  F.line = 552;
                  refresh_proc_11280214 = match_11250963.refresh[chckIndx(i_11340860, 0, (match_11250963.refresh != null ? match_11250963.refresh.length : 0)+0-1)-0];
                  F.line = 553;
                  refresh_proc_11280214(iter_item_11251043.node, item_11251038);
                  F.line = 188;
                  i_11340860 = addInt(i_11340860, 1);
                  if (!(((match_11250963.refresh != null ? match_11250963.refresh.length : 0) == l_11340861))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 555;
          i_11250967 = addInt(i_11250967, 1);
        }
    } while(false);
    L29: do {
      F.line = 558;
        L30: while (true) {
          var Tmp31 = match_11250963;
          if (ConstSet24[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11250967 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 559;
          var Tmp33 = match_11250963;
          if (ConstSet25[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11280474(pop_11280224(Tmp33, "items"), parent_node_11250970);
        }
    } while(false);
    }
    else {
      F.line = 561;
      var changed_11280493 = refresh_11250965;
      F.line = 562;
      var node_11280494 = match_11250963.node;
      F.line = 563;
      var converted_val_11280495 = null;
      F.line = 565;
      var Tmp34 = match_11250963;
      if (ConstSet26[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 567;
        var Tmp35 = match_11250963;
        if (ConstSet28[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet27[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11280495 = nimCopy(null, Tmp36.simple(val_11250964), NTI112);
        F.line = 568;
        changed_11280493 = true;
        break;
      case 1:
        F.line = 570;
        var Tmp37 = match_11250963;
        if (ConstSet29[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11280503 = [Tmp37.serial];
        F.line = 571;
        var Tmp38 = match_11250963;
        if (ConstSet31[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet30[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11280495 = nimCopy(null, Tmp39.serial(val_11250964, serial_11280503, 0), NTI112);
          var Tmp40 = match_11250963;
          if (ConstSet32[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11280503[0] == Tmp40.serial))) {
        F.line = 573;
        changed_11280493 = true;
        }
        
        break;
      case 2:
        F.line = 575;
        var Tmp41 = match_11250963;
        if (ConstSet34[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet33[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11250963;
        if (ConstSet35[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11280515 = Tmp42.compare(val_11250964, Tmp43.value);
        F.line = 576;
        converted_val_11280495 = nimCopy(null, res_11280515.Field0, NTI112);
        var Tmp44 = match_11250963;
        if (ConstSet36[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 577;
        Tmp44.value = nimCopy(null, res_11280515.Field0, NTI112);
        if (res_11280515.Field1) {
        F.line = 579;
        changed_11280493 = true;
        }
        
        break;
      }
        var Tmp46 = match_11250963;
        if (ConstSet37[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11250963;
          if (ConstSet38[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11250963;
      if (ConstSet39[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 583;
      var Tmp49 = match_11250963;
      if (ConstSet40[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 584;
      var Tmp50 = match_11250963;
      if (ConstSet41[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11280494.parentNode.replaceChild(Tmp50.mount.node(), node_11280494);
      }
      
        var Tmp51 = match_11250963;
        if (ConstSet42[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 588;
        var init_proc_11280552 = null;
        F.line = 184;
        var i_11340865 = 0;
        F.line = 185;
        var l_11340866 = (match_11250963.init != null ? match_11250963.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11340865 < l_11340866)) break L54;
              F.line = 588;
              init_proc_11280552 = match_11250963.init[chckIndx(i_11340865, 0, (match_11250963.init != null ? match_11250963.init.length : 0)+0-1)-0];
              F.line = 589;
              init_proc_11280552(node_11280494);
              F.line = 188;
              i_11340865 = addInt(i_11340865, 1);
              if (!(((match_11250963.init != null ? match_11250963.init.length : 0) == l_11340866))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11250963;
      if (ConstSet43[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 590;
      Tmp55.inited = true;
      F.line = 591;
      changed_11280493 = true;
      }
      
        if (!changed_11280493) Tmp56 = false; else {          var Tmp57 = match_11250963;
          if (ConstSet44[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 595;
      var Tmp58 = match_11250963;
      if (ConstSet45[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11280494 = Tmp58.mount.node();
      F.line = 596;
      var Tmp59 = match_11250963;
      if (ConstSet46[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11280495, refresh_11250965);
      }
      
      if (changed_11280493) {
      L60: do {
        F.line = 600;
        var submatch_11280577 = null;
        F.line = 182;
        var colontmp__11340869 = null;
        F.line = 600;
        var Tmp61 = match_11250963;
        if (ConstSet47[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11340869 = Tmp61.matches;
        F.line = 184;
        var i_11340870 = 0;
        F.line = 185;
        var l_11340871 = (colontmp__11340869 != null ? colontmp__11340869.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11340870 < l_11340871)) break L63;
              F.line = 600;
              submatch_11280577 = colontmp__11340869[chckIndx(i_11340870, 0, (colontmp__11340869 != null ? colontmp__11340869.length : 0)+0-1)-0];
              F.line = 601;
              submatch_11280577.update(converted_val_11280495, refresh_11250965);
              F.line = 188;
              i_11340870 = addInt(i_11340870, 1);
              if (!(((colontmp__11340869 != null ? colontmp__11340869.length : 0) == l_11340871))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11280493) {
      L64: do {
        F.line = 605;
        var refresh_proc_11280584 = null;
        F.line = 184;
        var i_11340874 = 0;
        F.line = 185;
        var l_11340875 = (match_11250963.refresh != null ? match_11250963.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11340874 < l_11340875)) break L66;
              F.line = 605;
              refresh_proc_11280584 = match_11250963.refresh[chckIndx(i_11340874, 0, (match_11250963.refresh != null ? match_11250963.refresh.length : 0)+0-1)-0];
              F.line = 606;
              refresh_proc_11280584(node_11280494, converted_val_11280495);
              F.line = 188;
              i_11340874 = addInt(i_11340874, 1);
              if (!(((match_11250963.refresh != null ? match_11250963.refresh.length : 0) == l_11340875))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11250938(match_11250943) {
    function HEX3Aanonymous_11250950(data_11250952, refresh_11250953) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 660;
        update_11250958(match_11250943, data_11250952, refresh_11250953);
      framePtr = F.prev;

      
    }

  var result_11250945 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 659;
    result_11250945 = {update: HEX3Aanonymous_11250950};
  framePtr = F.prev;

  return result_11250945;

}
function compile_11234381(cfg_11234386, node_11234387) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
        var Tmp11;
      var Tmp12;
      var Tmp13;
      var Tmp14;
      var Tmp15;
      var Tmp16;
      var Tmp17;
                var Tmp21;
                var Tmp22;

  var result_11234448 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 425;
    var matched_node_11234449 = node_11234387.querySelector(toJSStr(cfg_11234386.selector));
    if ((matched_node_11234449 == null)) {
    F.line = 427;
    var selector_11234458 = nimCopy(null, cfg_11234386.selector, NTI112);
    F.line = 428;
    var fmt_res_11234459 = [mnewString(0)];
    F.line = 428;
    if (fmt_res_11234459[0] != null) { fmt_res_11234459[0] = (fmt_res_11234459[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11234459[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 428;
    format_value_10125080(fmt_res_11234459, 0, selector_11234458, []);
    F.line = 428;
    if (fmt_res_11234459[0] != null) { fmt_res_11234459[0] = (fmt_res_11234459[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11234459[0] = makeNimstrLit("\'"); };
    F.line = 428;
    raiseException({message: nimCopy(null, fmt_res_11234459[0], NTI112), parent: null, m_type: NTI10216017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 430;
    var match_11240009 = {refresh: nimCopy(null, cfg_11234386.refresh, NTI11231566), init: nimCopy(null, cfg_11234386.init, NTI10216259), iter: cfg_11234386.iter, node: matched_node_11234449, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 435;
    match_11240009.node = matched_node_11234449;
    if (match_11240009.iter) {
    var Tmp1 = match_11240009;
    if (ConstSet48[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 437;
    var Tmp2 = cfg_11234386;
    if (ConstSet49[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    nimCopy(Tmp1.iterate, Tmp2.iterate, NTI11231649);
    var Tmp3 = match_11240009;
    if (ConstSet50[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 438;
    Tmp3.anchor = matched_node_11234449.ownerDocument.createComment(matched_node_11234449.outerHTML);
    var Tmp4 = match_11240009;
    if (ConstSet51[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 439;
    Tmp4.mount_template = cfg_11234386.mount;
    var Tmp5 = match_11240009;
    if (ConstSet52[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 440;
    Tmp5.match_templates = nimCopy(null, cfg_11234386.cmatches, NTI11231594);
    var Tmp6 = match_11240009;
    if (ConstSet53[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 441;
    Tmp6.items = nimCopy(null, [], NTI11240035);
    F.line = 442;
    var Tmp7 = match_11240009;
    if (ConstSet54[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11234449.parentNode.replaceChild(Tmp7.anchor, matched_node_11234449);
    }
    else {
      var Tmp8 = match_11240009;
      if (ConstSet55[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 444;
      var Tmp9 = cfg_11234386;
      if (ConstSet56[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.selectorKind = Tmp9.convert.kind;
      F.line = 445;
      var Tmp10 = match_11240009;
      if (ConstSet57[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp10.selectorKind) {
      case 1:
        var Tmp11 = match_11240009;
        if (ConstSet58[Tmp11.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 447;
        Tmp11.serial = 0;
        break;
      default: 
        break;
      }
      var Tmp12 = match_11240009;
      if (ConstSet59[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 450;
      var Tmp13 = cfg_11234386;
      if (ConstSet60[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp12.convert, Tmp13.convert, NTI11231620);
      var Tmp14 = match_11240009;
      if (ConstSet61[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 451;
      Tmp14.matches = nimCopy(null, [], NTI11240062);
      var Tmp15 = match_11240009;
      if (ConstSet62[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 452;
      Tmp15.inited = false;
      var Tmp16 = match_11240009;
      if (ConstSet63[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 453;
      Tmp16.mount = null;
      if (!((cfg_11234386.mount == null))) {
      var Tmp17 = match_11240009;
      if (ConstSet64[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 455;
      Tmp17.mount_source = cfg_11234386.mount;
      }
      else {
        L18: do {
          F.line = 457;
          var submatch_11250214 = null;
          F.line = 184;
          var i_11340887 = 0;
          F.line = 185;
          var l_11340888 = (cfg_11234386.cmatches != null ? cfg_11234386.cmatches.length : 0);
          L19: do {
            F.line = 186;
              L20: while (true) {
              if (!(i_11340887 < l_11340888)) break L20;
                F.line = 457;
                submatch_11250214 = cfg_11234386.cmatches[chckIndx(i_11340887, 0, (cfg_11234386.cmatches != null ? cfg_11234386.cmatches.length : 0)+0-1)-0];
                F.line = 458;
                var Tmp21 = match_11240009;
                if (ConstSet65[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp22 = Tmp21.matches, Tmp22) != null) { Tmp22.push(submatch_11250214.compile(matched_node_11234449)); } else { Tmp22 = [submatch_11250214.compile(matched_node_11234449)]; };
                F.line = 188;
                i_11340887 = addInt(i_11340887, 1);
                if (!(((cfg_11234386.cmatches != null ? cfg_11234386.cmatches.length : 0) == l_11340888))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 459;
    result_11234448 = match_11240009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11234448;

}
function as_interface_11234166(config_11234171) {
    function HEX3Aanonymous_11234178(node_11234180) {
      var result_11234185 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 665;
        result_11234185 = as_interface_11250938(compile_11234381(config_11234171, node_11234180));
      framePtr = F.prev;

      return result_11234185;

    }

  var result_11234173 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 664;
    result_11234173 = {compile: HEX3Aanonymous_11234178};
  framePtr = F.prev;

  return result_11234173;

}
function match_11233627(c_11233632, selector_11233633, convert_11233635, actions_11233641) {
  var result_11233643 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 249;
    result_11233643 = {selector: nimCopy(null, selector_11233633, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_11233635, NTI11231620), cmatches: null, iterate: {kind: 0, simple: null, serial: null}};
    F.line = 256;
    if (c_11233632.cmatches != null) { c_11233632.cmatches.push(as_interface_11234166(result_11233643)); } else { c_11233632.cmatches = [as_interface_11234166(result_11233643)]; };
    if (!((actions_11233641 == null))) {
    F.line = 258;
    actions_11233641(result_11233643);
    }
    
  framePtr = F.prev;

  return result_11233643;

}
function match_11232348(c_11232353, selector_11232354, convert_11232356, equal_11232360, actions_11232366) {
    function HEX3Aanonymous_11232376(data_11232378, old_data_11232379) {
      var result_11232383 = {Field0: null, Field1: false};

      var F={procname:"match.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 295;
        var data2_11232384 = convert_11232356(data_11232378);
        F.line = 296;
        var colontmp__11340842 = nimCopy(null, data2_11232384, NTI112);
        F.line = 296;
        var colontmp__11340843 = !(equal_11232360(data2_11232384, old_data_11232379));
        F.line = 296;
        nimCopy(result_11232383, {Field0: nimCopy(null, colontmp__11340842, NTI112), Field1: colontmp__11340843}, NTI11232380);
      framePtr = F.prev;

      return result_11232383;

    }

  var result_11232368 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 292;
    var type_selector_11232399 = {kind: 2, compare: HEX3Aanonymous_11232376, simple: null, serial: null};
    F.line = 297;
    result_11232368 = match_11233627(c_11232353, selector_11232354, type_selector_11232399, actions_11232366);
  framePtr = F.prev;

  return result_11232368;

}
function times_11231045(d_11231047) {
  var result_11231048 = null;

  var F={procname:"button.times",prev:framePtr,filename:"button.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_11231048 = nimCopy(null, cstrToNimstr((d_11231047.times)+""), NTI112);
  framePtr = F.prev;

  return result_11231048;

}
function eql_11231529(s1_11231532, s2_11231533) {
  var result_11231534 = false;

  var F={procname:"eql.eql",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 741;
    result_11231534 = eqStrings(s1_11231532, s2_11231533);
  framePtr = F.prev;

  return result_11231534;

}
function set_text_10242121(node_10242124, text_10242125) {
  var F={procname:"util.setText",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 41;
    node_10242124.textContent = toJSStr(text_10242125);
  framePtr = F.prev;

  
}
function init_11321361(c_11321366, init_11321367) {
  var F={procname:"init.init",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 344;
    if (c_11321366.init != null) { c_11321366.init.push(init_11321367); } else { c_11321366.init = [init_11321367]; };
  framePtr = F.prev;

  
}
function add_event_listener_11321188(c_11321193, event_11321194, cb_11321195, use_capture_11321196) {
    event_11321194 = nimCopy(null, event_11321194, NTI112);
    function HEX3Aanonymous_11321330(node_11321332) {
      var F={procname:"addEventListener.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 29;
        node_11321332.addEventListener(toJSStr(event_11321194), cb_11321195, use_capture_11321196);
      framePtr = F.prev;

      
    }

  var F={procname:"addEventListener.addEventListener",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 28;
    init_11321361(c_11321193, HEX3Aanonymous_11321330);
  framePtr = F.prev;

  
}
function create_iter_item_11300970(match_11300975, parent_node_11300976) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_11300978 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 484;
    var comp_11300983 = null;
    F.line = 485;
    var node_11300984 = null;
      var Tmp1 = match_11300975;
      if (ConstSet76[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 487;
    var Tmp2 = match_11300975;
    if (ConstSet77[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_11300983 = Tmp2.mount_template.clone();
    F.line = 488;
    node_11300984 = comp_11300983.node();
    }
    else {
      F.line = 490;
      node_11300984 = match_11300975.node.cloneNode(true);
    }
    
    F.line = 491;
    var Tmp3 = match_11300975;
    if (ConstSet78[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_11300978 = {serial: 0, mount: comp_11300983, node: node_11300984, matches: compile_11301024(Tmp3.match_templates, node_11300984)};
    F.line = 496;
    var Tmp4 = match_11300975;
    if (ConstSet79[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_11300976.insertBefore(node_11300984, Tmp4.anchor);
  framePtr = F.prev;

  return result_11300978;

}
function detach_11320474(iter_item_11320478, parent_node_11320479) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 500;
    parent_node_11320479.removeChild(iter_item_11320478.node);
  framePtr = F.prev;

  
}
function pop_11320224(s_11320229, s_11320229_Idx) {
  var result_11320230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_11320236 = subInt((s_11320229[s_11320229_Idx] != null ? s_11320229[s_11320229_Idx].length : 0), 1);
    F.line = 1784;
    result_11320230 = s_11320229[s_11320229_Idx][chckIndx(l_11320236, 0, (s_11320229[s_11320229_Idx] != null ? s_11320229[s_11320229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_11320229[s_11320229_Idx] === null) s_11320229[s_11320229_Idx] = [];
               if (s_11320229[s_11320229_Idx].length < chckRange(l_11320236, 0, 2147483647)) { for (var i=s_11320229[s_11320229_Idx].length;i<chckRange(l_11320236, 0, 2147483647);++i) s_11320229[s_11320229_Idx].push(null); }
               else { s_11320229[s_11320229_Idx].length = chckRange(l_11320236, 0, 2147483647); };
  framePtr = F.prev;

  return result_11320230;

}
function update_11300868(match_11300873, val_11300874, refresh_11300875) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      function HEX3Aanonymous_11300892(s_11300895, s_11300895_Idx) {
        var result_11300899 = {Field0: false, Field1: null};

        var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
        framePtr = F;
          F.line = 512;
          nimCopy(result_11300899, itf_simple_11300891(), NTI11300896);
        framePtr = F.prev;

        return result_11300899;

      }
      var Tmp5;
      var Tmp6;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp12;
          var Tmp13;
            var Tmp14;
            var Tmp15;
          var Tmp16;
          var Tmp17;
            var Tmp18;
            var Tmp19;
          var Tmp31;
          var Tmp32;
          var Tmp33;
      var Tmp34;
        var Tmp35;
        var Tmp36;
        var Tmp37;
        var Tmp38;
        var Tmp39;
          var Tmp40;
        var Tmp41;
        var Tmp42;
        var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
          var Tmp47;
      var Tmp48;
      var Tmp49;
      var Tmp50;
        var Tmp51;
      var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
        var Tmp61;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (match_11300873.iter) {
    F.line = 505;
    var i_11300877 = 0;
    F.line = 506;
    var Tmp1 = match_11300873;
    if (ConstSet66[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_11300880 = Tmp1.anchor.parentNode;
    F.line = 507;
    var itf_11300885 = null;
    F.line = 508;
    var Tmp2 = match_11300873;
    if (ConstSet67[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 510;
      var Tmp3 = match_11300873;
      if (ConstSet69[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet68[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      var itf_simple_11300891 = Tmp4.simple(val_11300874);
      F.line = 511;
      itf_11300885 = HEX3Aanonymous_11300892;
      break;
    case 1:
      F.line = 514;
      var Tmp5 = match_11300873;
      if (ConstSet71[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet70[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      itf_11300885 = Tmp6.serial(val_11300874);
      break;
    }
    L7: do {
      F.line = 516;
        L8: while (true) {
        if (!true) break L8;
          F.line = 517;
            var Tmp10 = match_11300873;
            if (ConstSet72[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11300877 < ((Tmp11 = Tmp10.items, Tmp11) != null ? Tmp11.length : 0))) {
          var Tmp12 = match_11300873;
          if (ConstSet73[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp9 = (Tmp13 = Tmp12.items, Tmp13)[chckIndx(i_11300877, 0, (Tmp13 != null ? Tmp13.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp9 = 0;
          }
          
          var serial_11300944 = [Tmp9];
          F.line = 518;
          var changed_11300945 = refresh_11300875;
          F.line = 519;
          var it_11300947 = itf_11300885(serial_11300944, 0);
          if ((it_11300947["Field0"] == false)) {
          F.line = 520;
          break L7;
          }
          
          F.line = 521;
          var item_11300948 = it_11300947["Field1"];
          F.line = 523;
          var iter_item_11300953 = null;
          F.line = 524;
          var inited_11300954 = false;
            var Tmp14 = match_11300873;
            if (ConstSet74[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_11300877 < ((Tmp15 = Tmp14.items, Tmp15) != null ? Tmp15.length : 0))) {
          F.line = 528;
          var Tmp16 = match_11300873;
          if (ConstSet75[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_11300953 = (Tmp17 = Tmp16.items, Tmp17)[chckIndx(i_11300877, 0, (Tmp17 != null ? Tmp17.length : 0)+0-1)-0];
          F.line = 529;
          inited_11300954 = true;
          F.line = 530;
          changed_11300945 = true;
          }
          else {
            F.line = 532;
            iter_item_11300953 = create_iter_item_11300970(match_11300873, parent_node_11300880);
            F.line = 533;
            var Tmp18 = match_11300873;
            if (ConstSet80[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp19 = Tmp18.items, Tmp19) != null) { Tmp19.push(iter_item_11300953); } else { Tmp19 = [iter_item_11300953]; };
            F.line = 534;
            inited_11300954 = false;
            if (!((serial_11300944[0] == iter_item_11300953.serial))) {
            F.line = 536;
            changed_11300945 = true;
            }
            
          }
          
          if (!(inited_11300954)) {
          L20: do {
            F.line = 540;
            var init_proc_11301124 = null;
            F.line = 184;
            var i_11340896 = 0;
            F.line = 185;
            var l_11340897 = (match_11300873.init != null ? match_11300873.init.length : 0);
            L21: do {
              F.line = 186;
                L22: while (true) {
                if (!(i_11340896 < l_11340897)) break L22;
                  F.line = 540;
                  init_proc_11301124 = match_11300873.init[chckIndx(i_11340896, 0, (match_11300873.init != null ? match_11300873.init.length : 0)+0-1)-0];
                  F.line = 541;
                  init_proc_11301124(iter_item_11300953.node);
                  F.line = 188;
                  i_11340896 = addInt(i_11340896, 1);
                  if (!(((match_11300873.init != null ? match_11300873.init.length : 0) == l_11340897))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_11300953.mount == null))) {
          F.line = 545;
          iter_item_11300953.mount.update(item_11300948, refresh_11300875);
          }
          
          L23: do {
            F.line = 548;
            var submatch_11310214 = null;
            F.line = 184;
            var i_11340901 = 0;
            F.line = 185;
            var l_11340902 = (iter_item_11300953.matches != null ? iter_item_11300953.matches.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_11340901 < l_11340902)) break L25;
                  F.line = 548;
                  submatch_11310214 = iter_item_11300953.matches[chckIndx(i_11340901, 0, (iter_item_11300953.matches != null ? iter_item_11300953.matches.length : 0)+0-1)-0];
                  F.line = 549;
                  submatch_11310214.update(item_11300948, refresh_11300875);
                  F.line = 188;
                  i_11340901 = addInt(i_11340901, 1);
                  if (!(((iter_item_11300953.matches != null ? iter_item_11300953.matches.length : 0) == l_11340902))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L26: do {
            F.line = 552;
            var refresh_proc_11320214 = null;
            F.line = 184;
            var i_11340906 = 0;
            F.line = 185;
            var l_11340907 = (match_11300873.refresh != null ? match_11300873.refresh.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_11340906 < l_11340907)) break L28;
                  F.line = 552;
                  refresh_proc_11320214 = match_11300873.refresh[chckIndx(i_11340906, 0, (match_11300873.refresh != null ? match_11300873.refresh.length : 0)+0-1)-0];
                  F.line = 553;
                  refresh_proc_11320214(iter_item_11300953.node, item_11300948);
                  F.line = 188;
                  i_11340906 = addInt(i_11340906, 1);
                  if (!(((match_11300873.refresh != null ? match_11300873.refresh.length : 0) == l_11340907))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 555;
          i_11300877 = addInt(i_11300877, 1);
        }
    } while(false);
    L29: do {
      F.line = 558;
        L30: while (true) {
          var Tmp31 = match_11300873;
          if (ConstSet81[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_11300877 < ((Tmp32 = Tmp31.items, Tmp32) != null ? Tmp32.length : 0))) break L30;
          F.line = 559;
          var Tmp33 = match_11300873;
          if (ConstSet82[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_11320474(pop_11320224(Tmp33, "items"), parent_node_11300880);
        }
    } while(false);
    }
    else {
      F.line = 561;
      var changed_11320493 = refresh_11300875;
      F.line = 562;
      var node_11320494 = match_11300873.node;
      F.line = 563;
      var converted_val_11320495 = null;
      F.line = 565;
      var Tmp34 = match_11300873;
      if (ConstSet83[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp34.convert.kind) {
      case 0:
        F.line = 567;
        var Tmp35 = match_11300873;
        if (ConstSet85[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp36 = Tmp35.convert;
        if (ConstSet84[Tmp36.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11320495 = Tmp36.simple(val_11300874);
        F.line = 568;
        changed_11320493 = true;
        break;
      case 1:
        F.line = 570;
        var Tmp37 = match_11300873;
        if (ConstSet86[Tmp37.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_11320503 = [Tmp37.serial];
        F.line = 571;
        var Tmp38 = match_11300873;
        if (ConstSet88[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet87[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_11320495 = Tmp39.serial(val_11300874, serial_11320503, 0);
          var Tmp40 = match_11300873;
          if (ConstSet89[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_11320503[0] == Tmp40.serial))) {
        F.line = 573;
        changed_11320493 = true;
        }
        
        break;
      case 2:
        F.line = 575;
        var Tmp41 = match_11300873;
        if (ConstSet91[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet90[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        var Tmp43 = match_11300873;
        if (ConstSet92[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_11320515 = Tmp42.compare(val_11300874, Tmp43.value);
        F.line = 576;
        converted_val_11320495 = res_11320515.Field0;
        var Tmp44 = match_11300873;
        if (ConstSet93[Tmp44.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 577;
        Tmp44.value = res_11320515.Field0;
        if (res_11320515.Field1) {
        F.line = 579;
        changed_11320493 = true;
        }
        
        break;
      }
        var Tmp46 = match_11300873;
        if (ConstSet94[Tmp46.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp46.mount == null)) Tmp45 = false; else {          var Tmp47 = match_11300873;
          if (ConstSet95[Tmp47.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp45 = !((Tmp47.mount_source == null));        }      if (Tmp45) {
      var Tmp48 = match_11300873;
      if (ConstSet96[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 583;
      var Tmp49 = match_11300873;
      if (ConstSet97[Tmp49.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp48.mount = Tmp49.mount_source.clone();
      F.line = 584;
      var Tmp50 = match_11300873;
      if (ConstSet98[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11320494.parentNode.replaceChild(Tmp50.mount.node(), node_11320494);
      }
      
        var Tmp51 = match_11300873;
        if (ConstSet99[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp51.inited)) {
      L52: do {
        F.line = 588;
        var init_proc_11320552 = null;
        F.line = 184;
        var i_11340911 = 0;
        F.line = 185;
        var l_11340912 = (match_11300873.init != null ? match_11300873.init.length : 0);
        L53: do {
          F.line = 186;
            L54: while (true) {
            if (!(i_11340911 < l_11340912)) break L54;
              F.line = 588;
              init_proc_11320552 = match_11300873.init[chckIndx(i_11340911, 0, (match_11300873.init != null ? match_11300873.init.length : 0)+0-1)-0];
              F.line = 589;
              init_proc_11320552(node_11320494);
              F.line = 188;
              i_11340911 = addInt(i_11340911, 1);
              if (!(((match_11300873.init != null ? match_11300873.init.length : 0) == l_11340912))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp55 = match_11300873;
      if (ConstSet100[Tmp55.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 590;
      Tmp55.inited = true;
      F.line = 591;
      changed_11320493 = true;
      }
      
        if (!changed_11320493) Tmp56 = false; else {          var Tmp57 = match_11300873;
          if (ConstSet101[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp57.mount == null));        }      if (Tmp56) {
      F.line = 595;
      var Tmp58 = match_11300873;
      if (ConstSet102[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_11320494 = Tmp58.mount.node();
      F.line = 596;
      var Tmp59 = match_11300873;
      if (ConstSet103[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount.update(converted_val_11320495, refresh_11300875);
      }
      
      if (changed_11320493) {
      L60: do {
        F.line = 600;
        var submatch_11320577 = null;
        F.line = 182;
        var colontmp__11340915 = null;
        F.line = 600;
        var Tmp61 = match_11300873;
        if (ConstSet104[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__11340915 = Tmp61.matches;
        F.line = 184;
        var i_11340916 = 0;
        F.line = 185;
        var l_11340917 = (colontmp__11340915 != null ? colontmp__11340915.length : 0);
        L62: do {
          F.line = 186;
            L63: while (true) {
            if (!(i_11340916 < l_11340917)) break L63;
              F.line = 600;
              submatch_11320577 = colontmp__11340915[chckIndx(i_11340916, 0, (colontmp__11340915 != null ? colontmp__11340915.length : 0)+0-1)-0];
              F.line = 601;
              submatch_11320577.update(converted_val_11320495, refresh_11300875);
              F.line = 188;
              i_11340916 = addInt(i_11340916, 1);
              if (!(((colontmp__11340915 != null ? colontmp__11340915.length : 0) == l_11340917))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_11320493) {
      L64: do {
        F.line = 605;
        var refresh_proc_11320584 = null;
        F.line = 184;
        var i_11340920 = 0;
        F.line = 185;
        var l_11340921 = (match_11300873.refresh != null ? match_11300873.refresh.length : 0);
        L65: do {
          F.line = 186;
            L66: while (true) {
            if (!(i_11340920 < l_11340921)) break L66;
              F.line = 605;
              refresh_proc_11320584 = match_11300873.refresh[chckIndx(i_11340920, 0, (match_11300873.refresh != null ? match_11300873.refresh.length : 0)+0-1)-0];
              F.line = 606;
              refresh_proc_11320584(node_11320494, converted_val_11320495);
              F.line = 188;
              i_11340920 = addInt(i_11340920, 1);
              if (!(((match_11300873.refresh != null ? match_11300873.refresh.length : 0) == l_11340921))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_11300848(match_11300853) {
    function HEX3Aanonymous_11300860(data_11300862, refresh_11300863) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 660;
        update_11300868(match_11300853, data_11300862, refresh_11300863);
      framePtr = F.prev;

      
    }

  var result_11300855 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 659;
    result_11300855 = {update: HEX3Aanonymous_11300860};
  framePtr = F.prev;

  return result_11300855;

}
function compile_11284176(cfg_11284181, node_11284182) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
        var Tmp11;
      var Tmp12;
      var Tmp13;
      var Tmp14;
      var Tmp15;
      var Tmp16;
      var Tmp17;
                var Tmp21;
                var Tmp22;

  var result_11284243 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 425;
    var matched_node_11284244 = node_11284182.querySelector(toJSStr(cfg_11284181.selector));
    if ((matched_node_11284244 == null)) {
    F.line = 427;
    var selector_11284253 = nimCopy(null, cfg_11284181.selector, NTI112);
    F.line = 428;
    var fmt_res_11284254 = [mnewString(0)];
    F.line = 428;
    if (fmt_res_11284254[0] != null) { fmt_res_11284254[0] = (fmt_res_11284254[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_11284254[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 428;
    format_value_10125080(fmt_res_11284254, 0, selector_11284253, []);
    F.line = 428;
    if (fmt_res_11284254[0] != null) { fmt_res_11284254[0] = (fmt_res_11284254[0]).concat(makeNimstrLit("\'")); } else { fmt_res_11284254[0] = makeNimstrLit("\'"); };
    F.line = 428;
    raiseException({message: nimCopy(null, fmt_res_11284254[0], NTI112), parent: null, m_type: NTI10216017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 430;
    var match_11290009 = {refresh: nimCopy(null, cfg_11284181.refresh, NTI11281601), init: nimCopy(null, cfg_11284181.init, NTI10216259), iter: cfg_11284181.iter, node: matched_node_11284244, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null}, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 435;
    match_11290009.node = matched_node_11284244;
    if (match_11290009.iter) {
    var Tmp1 = match_11290009;
    if (ConstSet105[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 437;
    var Tmp2 = cfg_11284181;
    if (ConstSet106[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    nimCopy(Tmp1.iterate, Tmp2.iterate, NTI11281665);
    var Tmp3 = match_11290009;
    if (ConstSet107[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 438;
    Tmp3.anchor = matched_node_11284244.ownerDocument.createComment(matched_node_11284244.outerHTML);
    var Tmp4 = match_11290009;
    if (ConstSet108[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 439;
    Tmp4.mount_template = cfg_11284181.mount;
    var Tmp5 = match_11290009;
    if (ConstSet109[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 440;
    Tmp5.match_templates = nimCopy(null, cfg_11284181.cmatches, NTI11281607);
    var Tmp6 = match_11290009;
    if (ConstSet110[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 441;
    Tmp6.items = nimCopy(null, [], NTI11290035);
    F.line = 442;
    var Tmp7 = match_11290009;
    if (ConstSet111[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_11284244.parentNode.replaceChild(Tmp7.anchor, matched_node_11284244);
    }
    else {
      var Tmp8 = match_11290009;
      if (ConstSet112[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 444;
      var Tmp9 = cfg_11284181;
      if (ConstSet113[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      Tmp8.selectorKind = Tmp9.convert.kind;
      F.line = 445;
      var Tmp10 = match_11290009;
      if (ConstSet114[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp10.selectorKind) {
      case 1:
        var Tmp11 = match_11290009;
        if (ConstSet115[Tmp11.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 447;
        Tmp11.serial = 0;
        break;
      default: 
        break;
      }
      var Tmp12 = match_11290009;
      if (ConstSet116[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 450;
      var Tmp13 = cfg_11284181;
      if (ConstSet117[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp12.convert, Tmp13.convert, NTI11281633);
      var Tmp14 = match_11290009;
      if (ConstSet118[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 451;
      Tmp14.matches = nimCopy(null, [], NTI11290062);
      var Tmp15 = match_11290009;
      if (ConstSet119[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 452;
      Tmp15.inited = false;
      var Tmp16 = match_11290009;
      if (ConstSet120[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 453;
      Tmp16.mount = null;
      if (!((cfg_11284181.mount == null))) {
      var Tmp17 = match_11290009;
      if (ConstSet121[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 455;
      Tmp17.mount_source = cfg_11284181.mount;
      }
      else {
        L18: do {
          F.line = 457;
          var submatch_11300214 = null;
          F.line = 184;
          var i_11340927 = 0;
          F.line = 185;
          var l_11340928 = (cfg_11284181.cmatches != null ? cfg_11284181.cmatches.length : 0);
          L19: do {
            F.line = 186;
              L20: while (true) {
              if (!(i_11340927 < l_11340928)) break L20;
                F.line = 457;
                submatch_11300214 = cfg_11284181.cmatches[chckIndx(i_11340927, 0, (cfg_11284181.cmatches != null ? cfg_11284181.cmatches.length : 0)+0-1)-0];
                F.line = 458;
                var Tmp21 = match_11290009;
                if (ConstSet122[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp22 = Tmp21.matches, Tmp22) != null) { Tmp22.push(submatch_11300214.compile(matched_node_11284244)); } else { Tmp22 = [submatch_11300214.compile(matched_node_11284244)]; };
                F.line = 188;
                i_11340927 = addInt(i_11340927, 1);
                if (!(((cfg_11284181.cmatches != null ? cfg_11284181.cmatches.length : 0) == l_11340928))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 459;
    result_11284243 = match_11290009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11284243;

}
function as_interface_11283961(config_11283966) {
    function HEX3Aanonymous_11283973(node_11283975) {
      var result_11283980 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 665;
        result_11283980 = as_interface_11300848(compile_11284176(config_11283966, node_11283975));
      framePtr = F.prev;

      return result_11283980;

    }

  var result_11283968 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 664;
    result_11283968 = {compile: HEX3Aanonymous_11283973};
  framePtr = F.prev;

  return result_11283968;

}
function match_11283422(c_11283427, selector_11283428, convert_11283430, actions_11283436) {
  var result_11283438 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 249;
    result_11283438 = {selector: nimCopy(null, selector_11283428, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_11283430, NTI11281633), cmatches: null, iterate: {kind: 0, simple: null, serial: null}};
    F.line = 256;
    if (c_11283427.cmatches != null) { c_11283427.cmatches.push(as_interface_11283961(result_11283438)); } else { c_11283427.cmatches = [as_interface_11283961(result_11283438)]; };
    if (!((actions_11283436 == null))) {
    F.line = 258;
    actions_11283436(result_11283438);
    }
    
  framePtr = F.prev;

  return result_11283438;

}
function match_11282170(c_11282175, selector_11282176, convert_11282178, actions_11282184) {
  var result_11282186 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 274;
    var type_selector_11282194 = {kind: 0, simple: convert_11282178, serial: null, compare: null};
    F.line = 277;
    result_11282186 = match_11283422(c_11282175, selector_11282176, type_selector_11282194, actions_11282184);
  framePtr = F.prev;

  return result_11282186;

}
function id_11282124(data_11282127) {
  var result_11282128 = null;

  var F={procname:"id.id",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 199;
    result_11282128 = data_11282127;
  framePtr = F.prev;

  return result_11282128;

}
function match_11282104(c_11282108, selector_11282109, actions_11282115) {
  var result_11282117 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 332;
    result_11282117 = match_11282170(c_11282108, selector_11282109, id_11282124, actions_11282115);
  framePtr = F.prev;

  return result_11282117;

}
function update_11321014(t_11321018, data_11321019, refresh_11321020) {
  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 636;
    t_11321018.data = data_11321019;
    L1: do {
      F.line = 637;
      var match_11321027 = null;
      F.line = 184;
      var i_11340931 = 0;
      F.line = 185;
      var l_11340932 = (t_11321018.matches != null ? t_11321018.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_11340931 < l_11340932)) break L3;
            F.line = 637;
            match_11321027 = t_11321018.matches[chckIndx(i_11340931, 0, (t_11321018.matches != null ? t_11321018.matches.length : 0)+0-1)-0];
            F.line = 638;
            match_11321027.update(data_11321019, refresh_11321020);
            F.line = 188;
            i_11340931 = addInt(i_11340931, 1);
            if (!(((t_11321018.matches != null ? t_11321018.matches.length : 0) == l_11340932))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function HEX3Aanonymous_11231183(node_11231186) {
    function HEX3Aanonymous_11231193(b_11231200) {
        function HEX3Aanonymous_11320947(event_11320949) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"button.nim",line:0};
          framePtr = F;
            F.line = 20;
            b_11231200.data.times = addInt(b_11231200.data.times, 1);
            F.line = 21;
            console.log("button clicked", b_11231200.data.times);
            F.line = 22;
            update_11321014(b_11231200, b_11231200.data, false);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"button.nim",line:0};
      framePtr = F;
        F.line = 18;
        refresh_11280979(match_11232348(b_11231200, makeNimstrLit(".times"), times_11231045, eql_11231529, null), set_text_10242121);
        F.line = 19;
        add_event_listener_11321188(match_11282104(b_11231200, makeNimstrLit("button"), null), makeNimstrLit("click"), HEX3Aanonymous_11320947, false);
      framePtr = F.prev;

      
    }

  var result_11231191 = null;

  var F={procname:"button.:anonymous",prev:framePtr,filename:"button.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 17;
    result_11231191 = compile_11321525(node_11231186, HEX3Aanonymous_11231193);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11231191;

}
var button_11231118 = [null];
declare_11340575(components_10218124[0], button_11231118, 0, fetch_template_11230001(makeNimstrLit("button.html"), makeNimstrLit("template"), true), HEX3Aanonymous_11231183);
function map_10225058(s_10225063, op_10225066) {
  var result_10225068 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_10225068 = new Array(chckRange((s_10225063 != null ? s_10225063.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_10225063 != null ? s_10225063.length : 0), 0, 2147483647);++i) {result_10225068[i]=null;}    L1: do {
      F.line = 375;
      var i_10225091 = 0;
      F.line = 104;
      var colontmp__11345817 = 0;
      F.line = 375;
      colontmp__11345817 = (s_10225063 != null ? s_10225063.length : 0);
      F.line = 106;
      var i_11345818 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_11345818 < colontmp__11345817)) break L3;
            F.line = 375;
            i_10225091 = i_11345818;
            F.line = 376;
            result_10225068[chckIndx(i_10225091, 0, (result_10225068 != null ? result_10225068.length : 0)+0-1)-0] = op_10225066(s_10225063[chckIndx(i_10225091, 0, (s_10225063 != null ? s_10225063.length : 0)+0-1)-0]);
            F.line = 109;
            i_11345818 = addInt(i_11345818, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10225068;

}
async function init_10225001(registry_10225003) {
    function HEX3Aanonymous_10225020(p_10225022) {
      var result_10225027 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 26;
        result_10225027 = p_10225022();
      framePtr = F.prev;

      return result_10225027;

    }

  var result_10225008 = null;

  var F={procname:"registry.init",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 26;
    (await (Promise.all((map_10225058(registry_10225003.Field0, HEX3Aanonymous_10225020)))));
    F.line = 131;
    result_10225008 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10225008;

}
function attach_11345383(t_11345387, target_11345388, anchor_11345389, data_11345390) {
  var F={procname:"attach.attach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 644;
    update_11321014(t_11345387, data_11345390, true);
    F.line = 645;
    target_11345388.insertBefore(t_11345387.node, anchor_11345389);
  framePtr = F.prev;

  
}
function clone_11345093(comp_11345097) {
  var result_11345099 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 631;
    result_11345099 = compile_11330644({config: comp_11345097.config, m_type: NTI11231073, cmatches: null}, comp_11345097.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11345099;

}
async function main_11345001() {
  var result_11345007 = null;

  var F={procname:"index.main",prev:framePtr,filename:"index.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 10;
    (await init_10225001(components_10218124[0]));
    F.line = 11;
    attach_11345383(clone_11345093(button_11231118[0]), document.body, null, {times: 0});
    F.line = 131;
    result_11345007 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11345007;

}
main_11345001();
