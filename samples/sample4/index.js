/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI9945049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9936319 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9936315 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9936307 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9936300 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9936294 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9936293 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9937085 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9937080 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9937079 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9945030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9936289 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9936279 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9936283 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9895049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885363 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881029 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI9885432 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885417 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885411 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885410 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9886220 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9886215 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9886214 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9895030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885401 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885385 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885384 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885406 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881324 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9881178 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885374 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885378 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9881015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9881017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4180232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4435011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9885395 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885390 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885389 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9906019 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9955883 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI9955900 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885081 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885072 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885056 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885055 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885077 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885051 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9885016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9852005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI9852537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9852031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI9852390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9852035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI9852033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885066 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI9885061 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9885060 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI9885091 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9885047 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI9885061 = {kind: 1, offset: "update", len: 0, typ: NTI9885066, name: "update", sons: null};
NTI9885061.node = NNI9885061;
NTI9885060.base = NTI9885061;
NTI9885091.base = NTI9885060;
NTI9852386.base = NTI9852033;
NTI9852388.base = NTI9852033;
NTI9852390.base = NTI9852033;
var NNI9852031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI9852031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI9852031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI9852031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI9852031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI9852031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI9852031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI9852031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI9852031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI9852031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI9852031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI9852031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI9852031, name: "NotationNode", len: 0, sons: null}}};
NTI9852031.node = NNI9852031;
var NNI9852029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9852029.node = NNI9852029;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI9852029.base = NTI6008;
NTI9852027.base = NTI9852029;
NTI9852537.base = NTI9852041;
var NNI9852083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI9852537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI9852083.node = NNI9852083;
NTI9852083.base = NTI9852043;
NTI9852081.base = NTI9852083;
var NNI9852079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI9852079.node = NNI9852079;
NTI9852079.base = NTI9852043;
NTI9852077.base = NTI9852079;
NTI9852443.base = NTI9852077;
NTI9852445.base = NTI9852077;
var NNI9852043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI9852027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI9852081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI9852443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI9852445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI9852043.node = NNI9852043;
NTI9852043.base = NTI9852035;
NTI9852041.base = NTI9852043;
var NNI9852075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852075.node = NNI9852075;
NTI9852075.base = NTI9852043;
NTI9852073.base = NTI9852075;
NTI9852423.base = NTI9852073;
NTI9852425.base = NTI9852081;
var NNI9852087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI9852087.node = NNI9852087;
NTI9852087.base = NTI9852043;
NTI9852085.base = NTI9852087;
NTI9852427.base = NTI9852085;
NTI9852429.base = NTI9852041;
var NNI9852071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI9852071.node = NNI9852071;
NTI9852071.base = NTI9852043;
NTI9852069.base = NTI9852071;
NTI9852431.base = NTI9852069;
var NNI9852067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI9852067.node = NNI9852067;
NTI9852067.base = NTI9852043;
NTI9852065.base = NTI9852067;
NTI9852433.base = NTI9852065;
var NNI9852039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI9852041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI9852041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI9852041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI9852423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI9852425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI9852427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI9852429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI9852431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI9852433, name: "links", sons: null}]};
NTI9852039.node = NNI9852039;
NTI9852039.base = NTI9852035;
NTI9852037.base = NTI9852039;
var NNI9852091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI9852091.node = NNI9852091;
NTI9852091.base = NTI6008;
NTI9852089.base = NTI9852091;
var NNI9852035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI9852386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI9852388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI9852390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI9852033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI9852033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI9852033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI9852031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI9852033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI9852033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI9852033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI9852037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI9852089, name: "style", sons: null}]};
NTI9852035.node = NNI9852035;
var NNI9852005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI9852180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI9852184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI9852188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI9852192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI9852196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI9852200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI9852204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI9852208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI9852212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI9852216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI9852220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI9852224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI9852228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI9852232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI9852236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI9852240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI9852244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI9852248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI9852252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI9852256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI9852260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI9852264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI9852268, name: "onloadend", sons: null}]};
NTI9852005.node = NNI9852005;
NTI9852005.base = NTI6008;
NTI9852035.base = NTI9852005;
NTI9852033.base = NTI9852035;
var NNI9885016 = {kind: 1, offset: "times", len: 0, typ: NTI143, name: "times", sons: null};
NTI9885016.node = NNI9885016;
NTI9885015.base = NTI9885016;
var NNI9885047 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI9885091, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI9852033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI9885015, name: "data", sons: null}]};
NTI9885047.node = NNI9885047;
var NNI9885056 = {kind: 1, offset: "compile", len: 0, typ: NTI9885072, name: "compile", sons: null};
NTI9885056.node = NNI9885056;
NTI9885055.base = NTI9885056;
NTI9885077.base = NTI9885055;
var NNI9885051 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI9885077, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI9885081, name: "config", sons: null}]};
NTI9885051.node = NNI9885051;
NTI9885051.base = NTI6008;
NTI9885047.base = NTI9885051;
NTI9955900.base = NTI9885060;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6249.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
NTI6241.base = NTI6219;
NTI9955883.base = NTI9885060;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI9885390 = {kind: 1, offset: "update", len: 0, typ: NTI9885395, name: "update", sons: null};
NTI9885390.node = NNI9885390;
NTI9885389.base = NTI9885390;
NTI9906019.base = NTI9885389;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4435011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4180232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4435011.node = NNI4435011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI9881017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881017.node = NNI9881017;
var NNI9881015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI9881015.node = NNI9881015;
NTI9881015.base = NTI6221;
NTI9881017.base = NTI9881015;
NTI9885378.base = NTI9885374;
NTI9881178.base = NTI9881324;
var NNI9885385 = {kind: 1, offset: "compile", len: 0, typ: NTI9885401, name: "compile", sons: null};
NTI9885385.node = NNI9885385;
NTI9885384.base = NTI9885385;
NTI9885406.base = NTI9885384;
NTI9886220.base = NTI9885389;
var NNI9885411 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881232, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI9885417, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI9885424, name: "clone", sons: null}]};
NTI9885411.node = NNI9885411;
NTI9885410.base = NTI9885411;
var NNI9886215 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI9886220, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI9885410, name: "mount", sons: null}]};
NTI9886215.node = NNI9886215;
NTI9886214.base = NTI9886215;
NTI9895030.base = NTI9886214;
var NNI9881029 = {kind: 2, offset: 0, typ: null, name: null, len: 1, sons: {"0": {kind: 1, offset: 0, typ: NTI9881029, name: "Simple", len: 0, sons: null}}};
NTI9881029.node = NNI9881029;
var NNI9885432 = {kind: 3, offset: "kind", len: 1, typ: NTI9881029, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI9885363, name: "simple", sons: null}]]};
NTI9885432.node = NNI9885432;
NTI9895049.base = NTI9885389;
NTI9936283.base = NTI9936279;
NTI9936289.base = NTI9885055;
NTI9937085.base = NTI9885060;
var NNI9936294 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9881232, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI9936300, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI9936307, name: "clone", sons: null}]};
NTI9936294.node = NNI9936294;
NTI9936293.base = NTI9936294;
var NNI9937080 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI9852033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI9937085, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI9936293, name: "mount", sons: null}]};
NTI9937080.node = NNI9937080;
NTI9937079.base = NTI9937080;
NTI9945030.base = NTI9937079;
var NNI9936315 = {kind: 3, offset: "kind", len: 1, typ: NTI9881029, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI9936319, name: "simple", sons: null}]]};
NTI9936315.node = NNI9936315;
NTI9945049.base = NTI9885060;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet3 = setConstr(true);
var ConstSet4 = setConstr(true);
var ConstSet5 = setConstr(true);
var ConstSet6 = setConstr(true);
var ConstSet7 = setConstr(true);
var ConstSet8 = setConstr(true);
var ConstSet9 = setConstr(true);
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(false);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(false);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
var ConstSet18 = setConstr(false);
var ConstSet19 = setConstr(false);
var ConstSet20 = setConstr(false);
var ConstSet21 = setConstr(false);
var ConstSet22 = setConstr(false);
var ConstSet23 = setConstr(false);
var ConstSet24 = setConstr(false);
var ConstSet25 = setConstr(false);
var ConstSet26 = setConstr(false);
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
var ConstSet27 = setConstr(60, 62, 94);
var ConstSet28 = setConstr(60, 62, 94);
var ConstSet29 = setConstr(45, 43, 32);
var ConstSet30 = setConstr([48, 57]);
var ConstSet31 = setConstr([48, 57]);
var ConstSet32 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet33 = setConstr([65, 90], [97, 122]);
var ConstSet34 = setConstr(true);
var ConstSet35 = setConstr(true);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(true);
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(true);
var ConstSet40 = setConstr(true);
var ConstSet41 = setConstr(false);
var ConstSet42 = setConstr(false);
var ConstSet43 = setConstr(false);
var ConstSet44 = setConstr(false);
var ConstSet45 = setConstr(false);
var ConstSet46 = setConstr(false);
var ConstSet47 = setConstr(false);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(true);
var ConstSet50 = setConstr(true);
var ConstSet51 = setConstr(true);
var ConstSet52 = setConstr(true);
var ConstSet53 = setConstr(true);
var ConstSet54 = setConstr(true);
var ConstSet55 = setConstr(true);
var ConstSet56 = setConstr(true);
var ConstSet57 = setConstr(true);
var ConstSet58 = setConstr(true);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(0);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(false);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(false);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(false);
var ConstSet67 = setConstr(false);
var ConstSet68 = setConstr(false);
var ConstSet69 = setConstr(false);
var ConstSet70 = setConstr(false);
var ConstSet71 = setConstr(false);
var ConstSet72 = setConstr(false);
var ConstSet73 = setConstr(true);
var ConstSet74 = setConstr(true);
var ConstSet75 = setConstr(true);
var ConstSet76 = setConstr(true);
var ConstSet77 = setConstr(true);
var ConstSet78 = setConstr(true);
var ConstSet79 = setConstr(true);
var ConstSet80 = setConstr(false);
var ConstSet81 = setConstr(false);
var ConstSet82 = setConstr(false);
var ConstSet83 = setConstr(false);
var ConstSet84 = setConstr(false);
var ConstSet85 = setConstr(false);
var ConstSet86 = setConstr(false);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

function new_9976620() {
  var result_9976624 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_9976801 = null;
    F.line = 851;
    r_9976801 = {m_type: NTI9885047, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_9976624 = r_9976801;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9976624;

}
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__9977679 = 0;
      colontmp__9977679 = (i_160051 - 1);
      var res_9977684 = colontmp__9977679;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_9977684)) break L8;
            j_175236 = res_9977684;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_9977684 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function compile_9955876(cfgs_9955881, node_9955882) {
  var result_9955885 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 333;
    result_9955885 = nimCopy(null, [], NTI9955900);
    L1: do {
      F.line = 334;
      var cfg_9955907 = null;
      F.line = 184;
      var i_9977664 = 0;
      F.line = 185;
      var l_9977665 = (cfgs_9955881 != null ? cfgs_9955881.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_9977664 < l_9977665)) break L3;
            F.line = 334;
            cfg_9955907 = cfgs_9955881[chckIndx(i_9977664, 0, (cfgs_9955881 != null ? cfgs_9955881.length : 0)+0-1)-0];
            F.line = 335;
            if (result_9955885 != null) { result_9955885.push(cfg_9955907.compile(node_9955882)); } else { result_9955885 = [cfg_9955907.compile(node_9955882)]; };
            F.line = 188;
            i_9977664 = addInt(i_9977664, 1);
            if (!(((cfgs_9955881 != null ? cfgs_9955881.length : 0) == l_9977665))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9955885;

}
function compile_9976606(cfg_9976610, node_9976611) {
  var result_9976613 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 340;
    result_9976613 = new_9976620();
    F.line = 341;
    result_9976613.config = cfg_9976610.config;
    F.line = 342;
    result_9976613.original_node = node_9976611;
    F.line = 343;
    result_9976613.node = node_9976611.cloneNode(true);
    F.line = 345;
    result_9976613.config(result_9976613);
    F.line = 346;
    result_9976613.matches = nimCopy(null, compile_9955876(result_9976613.cmatches, result_9976613.node), NTI9955883);
  framePtr = F.prev;

  return result_9976613;

}
function new_9976390() {
  var result_9976394 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_9976401 = null;
    F.line = 851;
    r_9976401 = {m_type: NTI9885051, cmatches: null, config: null};
    F.line = 852;
    result_9976394 = r_9976401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9976394;

}
function create_9976375(config_9976381) {
  var result_9976383 = null;

  var F={procname:"create.create",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 182;
    result_9976383 = new_9976390();
    F.line = 183;
    result_9976383.config = config_9976381;
  framePtr = F.prev;

  return result_9976383;

}
function compile_9976306(node_9976311, configurator_9976317) {
  var result_9976319 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 470;
    result_9976319 = compile_9976606(create_9976375(configurator_9976317), node_9976311);
  framePtr = F.prev;

  return result_9976319;

}
function refresh_9935926(c_9935931, refresh_9935933) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 230;
    if (c_9935931.refresh != null) { c_9935931.refresh.push(refresh_9935933); } else { c_9935931.refresh = [refresh_9935933]; };
  framePtr = F.prev;

  
}
function changed_9905898(val1_9905901, val2_9905902) {
  var result_9905903 = false;

  var F={procname:"changed.changed",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
    F.line = 19;
    result_9905903 = true;
  framePtr = F.prev;

  return result_9905903;

}
function compile_9905995(cfgs_9906000, node_9906001) {
  var result_9906004 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 333;
    result_9906004 = nimCopy(null, [], NTI9906019);
    L1: do {
      F.line = 334;
      var cfg_9906026 = null;
      F.line = 184;
      var i_9977733 = 0;
      F.line = 185;
      var l_9977734 = (cfgs_9906000 != null ? cfgs_9906000.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_9977733 < l_9977734)) break L3;
            F.line = 334;
            cfg_9906026 = cfgs_9906000[chckIndx(i_9977733, 0, (cfgs_9906000 != null ? cfgs_9906000.length : 0)+0-1)-0];
            F.line = 335;
            if (result_9906004 != null) { result_9906004.push(cfg_9906026.compile(node_9906001)); } else { result_9906004 = [cfg_9906026.compile(node_9906001)]; };
            F.line = 188;
            i_9977733 = addInt(i_9977733, 1);
            if (!(((cfgs_9906000 != null ? cfgs_9906000.length : 0) == l_9977734))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9906004;

}
function create_iter_item_9905944(match_9905949, parent_node_9905950) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_9905952 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 354;
    var comp_9905957 = null;
    F.line = 355;
    var node_9905958 = null;
      var Tmp1 = match_9905949;
      if (ConstSet6[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 357;
    var Tmp2 = match_9905949;
    if (ConstSet7[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_9905957 = Tmp2.mount_template.clone();
    F.line = 358;
    node_9905958 = comp_9905957.node();
    }
    else {
      F.line = 360;
      node_9905958 = match_9905949.node.cloneNode(true);
    }
    
    F.line = 361;
    var Tmp3 = match_9905949;
    if (ConstSet8[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_9905952 = {mount: comp_9905957, node: node_9905958, matches: compile_9905995(Tmp3.match_templates, node_9905958)};
    F.line = 365;
    var Tmp4 = match_9905949;
    if (ConstSet9[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_9905950.insertBefore(node_9905958, Tmp4.anchor);
  framePtr = F.prev;

  return result_9905952;

}
function detach_9935473(iter_item_9935477, parent_node_9935478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 369;
    parent_node_9935478.removeChild(iter_item_9935477.node);
  framePtr = F.prev;

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function pop_9935222(s_9935227, s_9935227_Idx) {
  var result_9935228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_9935234 = subInt((s_9935227[s_9935227_Idx] != null ? s_9935227[s_9935227_Idx].length : 0), 1);
    F.line = 1784;
    result_9935228 = s_9935227[s_9935227_Idx][chckIndx(l_9935234, 0, (s_9935227[s_9935227_Idx] != null ? s_9935227[s_9935227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_9935227[s_9935227_Idx] === null) s_9935227[s_9935227_Idx] = [];
               if (s_9935227[s_9935227_Idx].length < chckRange(l_9935234, 0, 2147483647)) { for (var i=s_9935227[s_9935227_Idx].length;i<chckRange(l_9935234, 0, 2147483647);++i) s_9935227[s_9935227_Idx].push(null); }
               else { s_9935227[s_9935227_Idx].length = chckRange(l_9935234, 0, 2147483647); };
  framePtr = F.prev;

  return result_9935228;

}
function update_9905890(match_9905895, val_9905896, refresh_9905897) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
        var Tmp29;
        var Tmp30;
          var Tmp31;
      var Tmp32;
      var Tmp33;
      var Tmp34;
        var Tmp35;
      var Tmp39;
        var Tmp40;
      var Tmp41;
      var Tmp42;
        var Tmp44;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_9905897)) Tmp1 = false; else {        Tmp1 = !(changed_9905898(match_9905895.oldValue, val_9905896));      }    if (Tmp1) {
    F.line = 374;
    break BeforeRet;
    }
    
    F.line = 376;
    match_9905895.oldValue = val_9905896;
    if (match_9905895.iter) {
    F.line = 378;
    var i_9905918 = 0;
    F.line = 379;
    var Tmp2 = match_9905895;
    if (ConstSet2[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_9905920 = Tmp2.anchor.parentNode;
    F.line = 380;
    var Tmp3 = match_9905895;
    if (ConstSet3[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_9905922 = Tmp3.iterate(val_9905896);
    L4: do {
      F.line = 381;
        L5: while (true) {
        if (!true) break L5;
          F.line = 382;
          var it_9905923 = itf_9905922();
          if ((it_9905923["Field0"] == false)) {
          F.line = 383;
          break L4;
          }
          
          F.line = 384;
          var item_9905924 = nimCopy(null, it_9905923["Field1"], NTI112);
          if ((10 < i_9905918)) {
          F.line = 387;
          break L4;
          }
          
          F.line = 389;
          var iter_item_9905929 = null;
          F.line = 390;
          var inited_9905930 = false;
            var Tmp6 = match_9905895;
            if (ConstSet4[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_9905918 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 394;
          var Tmp8 = match_9905895;
          if (ConstSet5[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_9905929 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_9905918, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 395;
          inited_9905930 = true;
          }
          else {
            F.line = 397;
            iter_item_9905929 = create_iter_item_9905944(match_9905895, parent_node_9905920);
            F.line = 398;
            var Tmp10 = match_9905895;
            if (ConstSet10[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_9905929); } else { Tmp11 = [iter_item_9905929]; };
            F.line = 399;
            inited_9905930 = false;
          }
          
          if (!(inited_9905930)) {
          L12: do {
            F.line = 403;
            var init_proc_9915214 = null;
            F.line = 184;
            var i_9977702 = 0;
            F.line = 185;
            var l_9977703 = (match_9905895.init != null ? match_9905895.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_9977702 < l_9977703)) break L14;
                  F.line = 403;
                  init_proc_9915214 = match_9905895.init[chckIndx(i_9977702, 0, (match_9905895.init != null ? match_9905895.init.length : 0)+0-1)-0];
                  F.line = 404;
                  init_proc_9915214(iter_item_9905929.node);
                  F.line = 188;
                  i_9977702 = addInt(i_9977702, 1);
                  if (!(((match_9905895.init != null ? match_9905895.init.length : 0) == l_9977703))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_9905929.mount == null))) {
          F.line = 408;
          iter_item_9905929.mount.update(item_9905924, refresh_9905897);
          }
          
          L15: do {
            F.line = 411;
            var submatch_9925214 = null;
            F.line = 184;
            var i_9977707 = 0;
            F.line = 185;
            var l_9977708 = (iter_item_9905929.matches != null ? iter_item_9905929.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_9977707 < l_9977708)) break L17;
                  F.line = 411;
                  submatch_9925214 = iter_item_9905929.matches[chckIndx(i_9977707, 0, (iter_item_9905929.matches != null ? iter_item_9905929.matches.length : 0)+0-1)-0];
                  F.line = 412;
                  submatch_9925214.update(item_9905924, refresh_9905897);
                  F.line = 188;
                  i_9977707 = addInt(i_9977707, 1);
                  if (!(((iter_item_9905929.matches != null ? iter_item_9905929.matches.length : 0) == l_9977708))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 415;
            var refresh_proc_9935214 = null;
            F.line = 184;
            var i_9977712 = 0;
            F.line = 185;
            var l_9977713 = (match_9905895.refresh != null ? match_9905895.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_9977712 < l_9977713)) break L20;
                  F.line = 415;
                  refresh_proc_9935214 = match_9905895.refresh[chckIndx(i_9977712, 0, (match_9905895.refresh != null ? match_9905895.refresh.length : 0)+0-1)-0];
                  F.line = 416;
                  refresh_proc_9935214(iter_item_9905929.node, item_9905924);
                  F.line = 188;
                  i_9977712 = addInt(i_9977712, 1);
                  if (!(((match_9905895.refresh != null ? match_9905895.refresh.length : 0) == l_9977713))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 418;
          i_9905918 = addInt(i_9905918, 1);
        }
    } while(false);
    L21: do {
      F.line = 421;
        L22: while (true) {
          var Tmp23 = match_9905895;
          if (ConstSet11[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_9905918 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 422;
          var Tmp25 = match_9905895;
          if (ConstSet12[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_9935473(pop_9935222(Tmp25, "items"), parent_node_9905920);
        }
    } while(false);
    }
    else {
      F.line = 424;
      var node_9935492 = match_9905895.node;
      F.line = 425;
      var converted_val_9935493 = null;
      F.line = 427;
      var Tmp26 = match_9905895;
      if (ConstSet13[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp26.convert.kind) {
      case 0:
        F.line = 429;
        var Tmp27 = match_9905895;
        if (ConstSet15[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp28 = Tmp27.convert;
        if (ConstSet14[Tmp28.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_9935493 = nimCopy(null, Tmp28.simple(val_9905896), NTI112);
        break;
      }
        var Tmp30 = match_9905895;
        if (ConstSet16[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp30.mount == null)) Tmp29 = false; else {          var Tmp31 = match_9905895;
          if (ConstSet17[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp29 = !((Tmp31.mount_source == null));        }      if (Tmp29) {
      var Tmp32 = match_9905895;
      if (ConstSet18[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 433;
      var Tmp33 = match_9905895;
      if (ConstSet19[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp32.mount = Tmp33.mount_source.clone();
      F.line = 434;
      var Tmp34 = match_9905895;
      if (ConstSet20[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9935492.parentNode.replaceChild(Tmp34.mount.node(), node_9935492);
      }
      
        var Tmp35 = match_9905895;
        if (ConstSet21[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp35.inited)) {
      L36: do {
        F.line = 438;
        var init_proc_9935525 = null;
        F.line = 184;
        var i_9977717 = 0;
        F.line = 185;
        var l_9977718 = (match_9905895.init != null ? match_9905895.init.length : 0);
        L37: do {
          F.line = 186;
            L38: while (true) {
            if (!(i_9977717 < l_9977718)) break L38;
              F.line = 438;
              init_proc_9935525 = match_9905895.init[chckIndx(i_9977717, 0, (match_9905895.init != null ? match_9905895.init.length : 0)+0-1)-0];
              F.line = 439;
              init_proc_9935525(node_9935492);
              F.line = 188;
              i_9977717 = addInt(i_9977717, 1);
              if (!(((match_9905895.init != null ? match_9905895.init.length : 0) == l_9977718))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp39 = match_9905895;
      if (ConstSet22[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 440;
      Tmp39.inited = true;
      }
      
        var Tmp40 = match_9905895;
        if (ConstSet23[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp40.mount == null))) {
      F.line = 444;
      var Tmp41 = match_9905895;
      if (ConstSet24[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9935492 = Tmp41.mount.node();
      F.line = 445;
      var Tmp42 = match_9905895;
      if (ConstSet25[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp42.mount.update(converted_val_9935493, refresh_9905897);
      }
      
      L43: do {
        F.line = 448;
        var submatch_9935545 = null;
        F.line = 182;
        var colontmp__9977721 = null;
        F.line = 448;
        var Tmp44 = match_9905895;
        if (ConstSet26[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__9977721 = Tmp44.matches;
        F.line = 184;
        var i_9977722 = 0;
        F.line = 185;
        var l_9977723 = (colontmp__9977721 != null ? colontmp__9977721.length : 0);
        L45: do {
          F.line = 186;
            L46: while (true) {
            if (!(i_9977722 < l_9977723)) break L46;
              F.line = 448;
              submatch_9935545 = colontmp__9977721[chckIndx(i_9977722, 0, (colontmp__9977721 != null ? colontmp__9977721.length : 0)+0-1)-0];
              F.line = 449;
              submatch_9935545.update(converted_val_9935493, refresh_9905897);
              F.line = 188;
              i_9977722 = addInt(i_9977722, 1);
              if (!(((colontmp__9977721 != null ? colontmp__9977721.length : 0) == l_9977723))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L47: do {
        F.line = 452;
        var refresh_proc_9935552 = null;
        F.line = 184;
        var i_9977726 = 0;
        F.line = 185;
        var l_9977727 = (match_9905895.refresh != null ? match_9905895.refresh.length : 0);
        L48: do {
          F.line = 186;
            L49: while (true) {
            if (!(i_9977726 < l_9977727)) break L49;
              F.line = 452;
              refresh_proc_9935552 = match_9905895.refresh[chckIndx(i_9977726, 0, (match_9905895.refresh != null ? match_9905895.refresh.length : 0)+0-1)-0];
              F.line = 453;
              refresh_proc_9935552(node_9935492, converted_val_9935493);
              F.line = 188;
              i_9977726 = addInt(i_9977726, 1);
              if (!(((match_9905895.refresh != null ? match_9905895.refresh.length : 0) == l_9977727))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_9905870(match_9905875) {
    function HEX3Aanonymous_9905882(data_9905884, refresh_9905885) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 506;
        update_9905890(match_9905875, data_9905884, refresh_9905885);
      framePtr = F.prev;

      
    }

  var result_9905877 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 505;
    result_9905877 = {update: HEX3Aanonymous_9905882};
  framePtr = F.prev;

  return result_9905877;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1025017(s_1025019, b_1025021, b_1025021_Idx, start_1025022) {
      var Tmp1;
          var Tmp4;

  var result_1025024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1025025 = start_1025022;
    if (((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1025025 = addInt(i_1025025, 1);
    }
    
      if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet31[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1025021[b_1025021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1025025 < (s_1025019 != null ? s_1025019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet32[s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1035016 = subInt(s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0], 48);
          if ((b_1025021[b_1025021_Idx] <= divInt(subInt(2147483647, c_1035016), 10))) {
          F.line = 483;
          b_1025021[b_1025021_Idx] = addInt(mulInt(b_1025021[b_1025021_Idx], 10), c_1035016);
          }
          else {
            F.line = 485;
            b_1025021[b_1025021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1025025 = addInt(i_1025025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1025025 < (s_1025019 != null ? s_1025019.length : 0)) && (s_1025019[chckIndx(i_1025025, 0, (s_1025019 != null ? s_1025019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1025025 = addInt(i_1025025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1025024 = subInt(i_1025025, start_1025022);
    }
    
  framePtr = F.prev;

  return result_1025024;

}
function HEX5BHEX5D_4435068(s_4435072, x_4435074) {
  var result_4435075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4435201 = x_4435074.a;
    F.line = 2437;
    var l_4435401 = addInt(subInt(subInt((s_4435072 != null ? s_4435072.length : 0), x_4435074.b), a_4435201), 1);
    F.line = 2438;
    result_4435075 = nimCopy(null, mnewString(chckRange(l_4435401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4435409 = 0;
      F.line = 106;
      var i_9977757 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_9977757 < l_4435401)) break L3;
            F.line = 2439;
            i_4435409 = i_9977757;
            F.line = 2439;
            result_4435075[chckIndx(i_4435409, 0, (result_4435075 != null ? result_4435075.length : 0)+0-1)-0] = s_4435072[chckIndx(addInt(i_4435409, a_4435201), 0, (s_4435072 != null ? s_4435072.length : 0)+0-1)-0];
            F.line = 109;
            i_9977757 = addInt(i_9977757, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4435075;

}
function HEX2EHEX2E_4435001(a_4435006, b_4435008) {
  var result_4435014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4435014, {a: a_4435006, b: b_4435008}, NTI4435011);
  framePtr = F.prev;

  return result_4435014;

}
function parse_standard_format_specifier_9745322(s_9745324, start_9745325, ignore_unknown_suffix_9745327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_9745328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_9745328.fill = 32;
    F.line = 380;
    result_9745328.align = 0;
    F.line = 381;
    result_9745328.sign = 45;
    F.line = 382;
    var i_9745331 = start_9745325;
    if (((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet27[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_9745328.fill = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 385;
    result_9745328.align = s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 386;
    i_9745331 = addInt(i_9745331, 2);
    }
    else {
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet28[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_9745328.align = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 389;
    i_9745331 = addInt(i_9745331, 1);
    }
    }
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (ConstSet29[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_9745328.sign = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 393;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_9745328.alternateForm = true;
    F.line = 397;
    i_9745331 = addInt(i_9745331, 1);
    }
    
      if (!((addInt(i_9745331, 1) < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet30[s_9745324[chckIndx(addInt(i_9745331, 1), 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_9745328.padWithZero = true;
    F.line = 401;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 403;
    var parsed_length_9765015 = parse_saturated_natural_1025017(s_9745324, result_9745328, "minimumWidth", i_9745331);
    F.line = 404;
    i_9745331 = addInt(i_9745331, parsed_length_9765015);
    if (((i_9745331 < (s_9745324 != null ? s_9745324.length : 0)) && (s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_9745331 = addInt(i_9745331, 1);
    F.line = 407;
    var parsed_length_b_9765029 = parse_saturated_natural_1025017(s_9745324, result_9745328, "precision", i_9745331);
    F.line = 408;
    i_9745331 = addInt(i_9745331, parsed_length_b_9765029);
    }
    else {
      F.line = 410;
      result_9745328.precision = -1;
    }
    
      if (!(i_9745331 < (s_9745324 != null ? s_9745324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet33[s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_9745328.typ = s_9745324[chckIndx(i_9745331, 0, (s_9745324 != null ? s_9745324.length : 0)+0-1)-0];
    F.line = 414;
    i_9745331 = addInt(i_9745331, 1);
    }
    
    F.line = 415;
    result_9745328.endPosition = i_9745331;
      if (!!((i_9745331 == (s_9745324 != null ? s_9745324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_9745327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4435068(s_9745324, HEX2EHEX2E_4435001(i_9745331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_9745328;

}
function nucruneLen(s_1106829) {
  var result_1106830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1106832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1106832 < (s_1106829 != null ? s_1106829.length : 0))) break L2;
          if ((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1106832 = addInt(i_1106832, 1);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1106832 = addInt(i_1106832, 2);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1106832 = addInt(i_1106832, 3);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1106832 = addInt(i_1106832, 4);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1106832 = addInt(i_1106832, 5);
          }
          else {
          if ((((s_1106829[chckIndx(i_1106832, 0, (s_1106829 != null ? s_1106829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1106832 = addInt(i_1106832, 6);
          }
          else {
            F.line = 49;
          i_1106832 = addInt(i_1106832, 1);
          }
          }}}}}
          F.line = 50;
          result_1106830 = addInt(result_1106830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1106830;

}
function rune_len_at_1106932(s_1106934, i_1106935) {
  var result_1106936 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1106936 = 1;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1106936 = 2;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1106936 = 3;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1106936 = 4;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1106936 = 5;
    }
    else {
    if ((((s_1106934[chckIndx(i_1106935, 0, (s_1106934 != null ? s_1106934.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1106936 = 6;
    }
    else {
      F.line = 68;
      result_1106936 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1106936;

}
function rune_offset_1730244(s_1730246, pos_1730247, start_1730248) {
  var result_1730249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_1730251 = 0;
    F.line = 320;
    var o_1730252 = start_1730248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_1730251 < pos_1730247)) break L2;
          F.line = 322;
          o_1730252 = addInt(o_1730252, chckRange(rune_len_at_1106932(s_1730246, o_1730252), 0, 2147483647));
          if (((s_1730246 != null ? s_1730246.length : 0) <= o_1730252)) {
          F.line = 324;
          result_1730249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_1730251 = addInt(i_1730251, 1);
        }
    } while(false);
    F.line = 326;
    result_1730249 = o_1730252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1730249;

}
function validate_utf8_1350229(s_1350231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1350232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1350234 = 0;
    F.line = 173;
    var l_1350235 = (s_1350231 != null ? s_1350231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1350234 < l_1350235)) break L2;
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1350234 = addInt(i_1350234, 1);
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1350232 = i_1350234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1350234, 1) < l_1350235)) Tmp3 = false; else {              Tmp3 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1350234 = addInt(i_1350234, 2);
          }
          else {
            F.line = 180;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1350234, 2) < l_1350235)) Tmp5 = false; else {              Tmp5 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1350234 = addInt(i_1350234, 3);
          }
          else {
            F.line = 184;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1350231[chckIndx(i_1350234, 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1350234, 3) < l_1350235)) Tmp8 = false; else {              Tmp8 = (((s_1350231[chckIndx(addInt(i_1350234, 1), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1350231[chckIndx(addInt(i_1350234, 2), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1350231[chckIndx(addInt(i_1350234, 3), 0, (s_1350231 != null ? s_1350231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1350234 = addInt(i_1350234, 4);
          }
          else {
            F.line = 190;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1350232 = i_1350234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1350232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1350232;

}
function nsuRepeatChar(c_9290048, count_9290049) {
  var result_9290050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9290050 = nimCopy(null, mnewString(count_9290049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9290059 = 0;
      F.line = 66;
      var colontmp__9977788 = 0;
      F.line = 1283;
      colontmp__9977788 = subInt(count_9290049, 1);
      F.line = 77;
      var res_9977789 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_9977789 <= colontmp__9977788)) break L3;
            F.line = 1283;
            i_9290059 = res_9977789;
            F.line = 1283;
            result_9290050[chckIndx(i_9290059, 0, (result_9290050 != null ? result_9290050.length : 0)+0-1)-0] = c_9290048;
            F.line = 80;
            res_9977789 = addInt(res_9977789, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9290050;

}
function align_string_9745222(s_9745224, minimum_width_9745225, align_9745226, fill_9745227) {
      var Tmp1;

  var result_9745228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_9745225 == 0)) {
    F.line = 282;
    result_9745228 = nimCopy(null, s_9745224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1350229(s_9745224) == -1)) {
      Tmp1 = nucruneLen(s_9745224);
      }
      else {
      Tmp1 = (s_9745224 != null ? s_9745224.length : 0);
      }
      
      var s_rune_len_9745229 = Tmp1;
      F.line = 285;
      var to_fill_9745230 = subInt(minimum_width_9745225, s_rune_len_9745229);
      if ((to_fill_9745230 <= 0)) {
      F.line = 287;
      result_9745228 = nimCopy(null, s_9745224, NTI112);
      }
      else {
      if (((align_9745226 == 60) || (align_9745226 == 0))) {
      F.line = 289;
      result_9745228 = nimCopy(null, (s_9745224 || []).concat(nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_9745226 == 94)) {
      F.line = 291;
      var half_9745231 = divInt(to_fill_9745230, 2);
      F.line = 292;
      result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(half_9745231, 0, 2147483647)) || []).concat(s_9745224 || [],nsuRepeatChar(fill_9745227, chckRange(subInt(to_fill_9745230, half_9745231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_9745228 = nimCopy(null, (nsuRepeatChar(fill_9745227, chckRange(to_fill_9745230, 0, 2147483647)) || []).concat(s_9745224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_9745228;

}
function format_value_9790080(result_9790083, result_9790083_Idx, value_9790084, specifier_9790085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_9790086 = parse_standard_format_specifier_9745322(specifier_9790085, 0, false);
    F.line = 503;
    var value_9790087 = nimCopy(null, value_9790084, NTI112);
    F.line = 504;
    switch (spec_9790086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_9790086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_9790086.precision == -1))) {
    if ((spec_9790086.precision < nucruneLen(value_9790087))) {
    F.line = 512;
    (value_9790087 == null ? value_9790087 = mnewString(chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_9790087.length = chckRange(rune_offset_1730244(value_9790087, chckRange(spec_9790086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_9790083[result_9790083_Idx] != null) { result_9790083[result_9790083_Idx] = (result_9790083[result_9790083_Idx]).concat(align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill)); } else { result_9790083[result_9790083_Idx] = align_string_9745222(value_9790087, spec_9790086.minimumWidth, spec_9790086.align, spec_9790086.fill).slice(); };
  framePtr = F.prev;

  
}
function compile_9886165(cfg_9886170, node_9886171) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_9886229 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 302;
    var matched_node_9886230 = node_9886171.querySelector(toJSStr(cfg_9886170.selector));
    if ((matched_node_9886230 == null)) {
    F.line = 304;
    var selector_9886239 = nimCopy(null, cfg_9886170.selector, NTI112);
    F.line = 305;
    var fmt_res_9886243 = [mnewString(0)];
    F.line = 305;
    if (fmt_res_9886243[0] != null) { fmt_res_9886243[0] = (fmt_res_9886243[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_9886243[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 305;
    format_value_9790080(fmt_res_9886243, 0, selector_9886239, []);
    F.line = 305;
    if (fmt_res_9886243[0] != null) { fmt_res_9886243[0] = (fmt_res_9886243[0]).concat(makeNimstrLit("\'")); } else { fmt_res_9886243[0] = makeNimstrLit("\'"); };
    F.line = 305;
    raiseException({message: nimCopy(null, fmt_res_9886243[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 307;
    var match_9895009 = {refresh: nimCopy(null, cfg_9886170.refresh, NTI9885378), init: nimCopy(null, cfg_9886170.init, NTI9881178), iter: cfg_9886170.iter, node: matched_node_9886230, oldValue: null, convert: {kind: 0, simple: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 312;
    match_9895009.node = matched_node_9886230;
    if (match_9895009.iter) {
    var Tmp1 = match_9895009;
    if (ConstSet34[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 314;
    var Tmp2 = cfg_9886170;
    if (ConstSet35[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_9895009;
    if (ConstSet36[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 315;
    Tmp3.anchor = matched_node_9886230.ownerDocument.createComment(matched_node_9886230.outerHTML);
    var Tmp4 = match_9895009;
    if (ConstSet37[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 316;
    Tmp4.mount_template = cfg_9886170.mount;
    var Tmp5 = match_9895009;
    if (ConstSet38[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 317;
    Tmp5.match_templates = nimCopy(null, cfg_9886170.cmatches, NTI9885406);
    var Tmp6 = match_9895009;
    if (ConstSet39[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 318;
    Tmp6.items = nimCopy(null, [], NTI9895030);
    F.line = 319;
    var Tmp7 = match_9895009;
    if (ConstSet40[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_9886230.parentNode.replaceChild(Tmp7.anchor, matched_node_9886230);
    }
    else {
      var Tmp8 = match_9895009;
      if (ConstSet41[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 321;
      var Tmp9 = cfg_9886170;
      if (ConstSet42[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp8.convert, Tmp9.convert, NTI9885432);
      var Tmp10 = match_9895009;
      if (ConstSet43[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 322;
      Tmp10.matches = nimCopy(null, [], NTI9895049);
      var Tmp11 = match_9895009;
      if (ConstSet44[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 323;
      Tmp11.inited = false;
      var Tmp12 = match_9895009;
      if (ConstSet45[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 324;
      Tmp12.mount = null;
      if (!((cfg_9886170.mount == null))) {
      var Tmp13 = match_9895009;
      if (ConstSet46[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 326;
      Tmp13.mount_source = cfg_9886170.mount;
      }
      else {
        L14: do {
          F.line = 328;
          var submatch_9905214 = null;
          F.line = 184;
          var i_9977740 = 0;
          F.line = 185;
          var l_9977741 = (cfg_9886170.cmatches != null ? cfg_9886170.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_9977740 < l_9977741)) break L16;
                F.line = 328;
                submatch_9905214 = cfg_9886170.cmatches[chckIndx(i_9977740, 0, (cfg_9886170.cmatches != null ? cfg_9886170.cmatches.length : 0)+0-1)-0];
                F.line = 329;
                var Tmp17 = match_9895009;
                if (ConstSet47[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_9905214.compile(matched_node_9886230)); } else { Tmp18 = [submatch_9905214.compile(matched_node_9886230)]; };
                F.line = 188;
                i_9977740 = addInt(i_9977740, 1);
                if (!(((cfg_9886170.cmatches != null ? cfg_9886170.cmatches.length : 0) == l_9977741))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 330;
    result_9886229 = match_9895009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9886229;

}
function as_interface_9885988(config_9885993) {
    function HEX3Aanonymous_9886000(node_9886002) {
      var result_9886007 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 511;
        result_9886007 = as_interface_9905870(compile_9886165(config_9885993, node_9886002));
      framePtr = F.prev;

      return result_9886007;

    }

  var result_9885995 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 510;
    result_9885995 = {compile: HEX3Aanonymous_9886000};
  framePtr = F.prev;

  return result_9885995;

}
function match_9885521(c_9885526, selector_9885527, convert_9885529, actions_9885535) {
  var result_9885537 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 205;
    result_9885537 = {selector: nimCopy(null, selector_9885527, NTI112), refresh: [], init: [], mount: null, iter: false, convert: {kind: 0, simple: convert_9885529}, cmatches: null, iterate: null};
    F.line = 214;
    if (c_9885526.cmatches != null) { c_9885526.cmatches.push(as_interface_9885988(result_9885537)); } else { c_9885526.cmatches = [as_interface_9885988(result_9885537)]; };
    if (!((actions_9885535 == null))) {
    F.line = 216;
    actions_9885535(result_9885537);
    }
    
  framePtr = F.prev;

  return result_9885537;

}
function times_9885019(d_9885021) {
  var result_9885022 = null;

  var F={procname:"button.times",prev:framePtr,filename:"button.nim",line:0};
  framePtr = F;
    F.line = 9;
    result_9885022 = nimCopy(null, cstrToNimstr((d_9885021.times)+""), NTI112);
  framePtr = F.prev;

  return result_9885022;

}
function set_text_9883108(node_9883111, text_9883112) {
  var F={procname:"svelteutil.setText",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
    F.line = 41;
    node_9883111.textContent = toJSStr(text_9883112);
  framePtr = F.prev;

  
}
function init_9976187(c_9976192, init_9976193) {
  var F={procname:"init.init",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 235;
    if (c_9976192.init != null) { c_9976192.init.push(init_9976193); } else { c_9976192.init = [init_9976193]; };
  framePtr = F.prev;

  
}
function add_event_listener_9976052(c_9976057, event_9976058, cb_9976059, use_capture_9976060) {
    event_9976058 = nimCopy(null, event_9976058, NTI112);
    function HEX3Aanonymous_9976156(node_9976158) {
      var F={procname:"addEventListener.:anonymous",prev:framePtr,filename:"svelteutil.nim",line:0};
      framePtr = F;
        F.line = 29;
        node_9976158.addEventListener(toJSStr(event_9976058), cb_9976059, use_capture_9976060);
      framePtr = F.prev;

      
    }

  var F={procname:"addEventListener.addEventListener",prev:framePtr,filename:"svelteutil.nim",line:0};
  framePtr = F;
    F.line = 28;
    init_9976187(c_9976057, HEX3Aanonymous_9976156);
  framePtr = F.prev;

  
}
function create_iter_item_9955825(match_9955830, parent_node_9955831) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_9955833 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 354;
    var comp_9955838 = null;
    F.line = 355;
    var node_9955839 = null;
      var Tmp1 = match_9955830;
      if (ConstSet52[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 357;
    var Tmp2 = match_9955830;
    if (ConstSet53[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_9955838 = Tmp2.mount_template.clone();
    F.line = 358;
    node_9955839 = comp_9955838.node();
    }
    else {
      F.line = 360;
      node_9955839 = match_9955830.node.cloneNode(true);
    }
    
    F.line = 361;
    var Tmp3 = match_9955830;
    if (ConstSet54[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_9955833 = {mount: comp_9955838, node: node_9955839, matches: compile_9955876(Tmp3.match_templates, node_9955839)};
    F.line = 365;
    var Tmp4 = match_9955830;
    if (ConstSet55[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_9955831.insertBefore(node_9955839, Tmp4.anchor);
  framePtr = F.prev;

  return result_9955833;

}
function detach_9975473(iter_item_9975477, parent_node_9975478) {
  var F={procname:"detach.detach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 369;
    parent_node_9975478.removeChild(iter_item_9975477.node);
  framePtr = F.prev;

  
}
function pop_9975222(s_9975227, s_9975227_Idx) {
  var result_9975228 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_9975234 = subInt((s_9975227[s_9975227_Idx] != null ? s_9975227[s_9975227_Idx].length : 0), 1);
    F.line = 1784;
    result_9975228 = s_9975227[s_9975227_Idx][chckIndx(l_9975234, 0, (s_9975227[s_9975227_Idx] != null ? s_9975227[s_9975227_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_9975227[s_9975227_Idx] === null) s_9975227[s_9975227_Idx] = [];
               if (s_9975227[s_9975227_Idx].length < chckRange(l_9975234, 0, 2147483647)) { for (var i=s_9975227[s_9975227_Idx].length;i<chckRange(l_9975234, 0, 2147483647);++i) s_9975227[s_9975227_Idx].push(null); }
               else { s_9975227[s_9975227_Idx].length = chckRange(l_9975234, 0, 2147483647); };
  framePtr = F.prev;

  return result_9975228;

}
function update_9955785(match_9955790, val_9955791, refresh_9955792) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
            var Tmp6;
            var Tmp7;
          var Tmp8;
          var Tmp9;
            var Tmp10;
            var Tmp11;
          var Tmp23;
          var Tmp24;
          var Tmp25;
      var Tmp26;
        var Tmp27;
        var Tmp28;
        var Tmp29;
        var Tmp30;
          var Tmp31;
      var Tmp32;
      var Tmp33;
      var Tmp34;
        var Tmp35;
      var Tmp39;
        var Tmp40;
      var Tmp41;
      var Tmp42;
        var Tmp44;

  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
      if (!!(refresh_9955792)) Tmp1 = false; else {        Tmp1 = !(changed_9905898(match_9955790.oldValue, val_9955791));      }    if (Tmp1) {
    F.line = 374;
    break BeforeRet;
    }
    
    F.line = 376;
    match_9955790.oldValue = val_9955791;
    if (match_9955790.iter) {
    F.line = 378;
    var i_9955799 = 0;
    F.line = 379;
    var Tmp2 = match_9955790;
    if (ConstSet48[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_9955801 = Tmp2.anchor.parentNode;
    F.line = 380;
    var Tmp3 = match_9955790;
    if (ConstSet49[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var itf_9955803 = Tmp3.iterate(val_9955791);
    L4: do {
      F.line = 381;
        L5: while (true) {
        if (!true) break L5;
          F.line = 382;
          var it_9955804 = itf_9955803();
          if ((it_9955804["Field0"] == false)) {
          F.line = 383;
          break L4;
          }
          
          F.line = 384;
          var item_9955805 = it_9955804["Field1"];
          if ((10 < i_9955799)) {
          F.line = 387;
          break L4;
          }
          
          F.line = 389;
          var iter_item_9955810 = null;
          F.line = 390;
          var inited_9955811 = false;
            var Tmp6 = match_9955790;
            if (ConstSet50[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_9955799 < ((Tmp7 = Tmp6.items, Tmp7) != null ? Tmp7.length : 0))) {
          F.line = 394;
          var Tmp8 = match_9955790;
          if (ConstSet51[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_9955810 = (Tmp9 = Tmp8.items, Tmp9)[chckIndx(i_9955799, 0, (Tmp9 != null ? Tmp9.length : 0)+0-1)-0];
          F.line = 395;
          inited_9955811 = true;
          }
          else {
            F.line = 397;
            iter_item_9955810 = create_iter_item_9955825(match_9955790, parent_node_9955801);
            F.line = 398;
            var Tmp10 = match_9955790;
            if (ConstSet56[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp11 = Tmp10.items, Tmp11) != null) { Tmp11.push(iter_item_9955810); } else { Tmp11 = [iter_item_9955810]; };
            F.line = 399;
            inited_9955811 = false;
          }
          
          if (!(inited_9955811)) {
          L12: do {
            F.line = 403;
            var init_proc_9955974 = null;
            F.line = 184;
            var i_9977800 = 0;
            F.line = 185;
            var l_9977801 = (match_9955790.init != null ? match_9955790.init.length : 0);
            L13: do {
              F.line = 186;
                L14: while (true) {
                if (!(i_9977800 < l_9977801)) break L14;
                  F.line = 403;
                  init_proc_9955974 = match_9955790.init[chckIndx(i_9977800, 0, (match_9955790.init != null ? match_9955790.init.length : 0)+0-1)-0];
                  F.line = 404;
                  init_proc_9955974(iter_item_9955810.node);
                  F.line = 188;
                  i_9977800 = addInt(i_9977800, 1);
                  if (!(((match_9955790.init != null ? match_9955790.init.length : 0) == l_9977801))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_9955810.mount == null))) {
          F.line = 408;
          iter_item_9955810.mount.update(item_9955805, refresh_9955792);
          }
          
          L15: do {
            F.line = 411;
            var submatch_9965214 = null;
            F.line = 184;
            var i_9977805 = 0;
            F.line = 185;
            var l_9977806 = (iter_item_9955810.matches != null ? iter_item_9955810.matches.length : 0);
            L16: do {
              F.line = 186;
                L17: while (true) {
                if (!(i_9977805 < l_9977806)) break L17;
                  F.line = 411;
                  submatch_9965214 = iter_item_9955810.matches[chckIndx(i_9977805, 0, (iter_item_9955810.matches != null ? iter_item_9955810.matches.length : 0)+0-1)-0];
                  F.line = 412;
                  submatch_9965214.update(item_9955805, refresh_9955792);
                  F.line = 188;
                  i_9977805 = addInt(i_9977805, 1);
                  if (!(((iter_item_9955810.matches != null ? iter_item_9955810.matches.length : 0) == l_9977806))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          L18: do {
            F.line = 415;
            var refresh_proc_9975214 = null;
            F.line = 184;
            var i_9977810 = 0;
            F.line = 185;
            var l_9977811 = (match_9955790.refresh != null ? match_9955790.refresh.length : 0);
            L19: do {
              F.line = 186;
                L20: while (true) {
                if (!(i_9977810 < l_9977811)) break L20;
                  F.line = 415;
                  refresh_proc_9975214 = match_9955790.refresh[chckIndx(i_9977810, 0, (match_9955790.refresh != null ? match_9955790.refresh.length : 0)+0-1)-0];
                  F.line = 416;
                  refresh_proc_9975214(iter_item_9955810.node, item_9955805);
                  F.line = 188;
                  i_9977810 = addInt(i_9977810, 1);
                  if (!(((match_9955790.refresh != null ? match_9955790.refresh.length : 0) == l_9977811))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 418;
          i_9955799 = addInt(i_9955799, 1);
        }
    } while(false);
    L21: do {
      F.line = 421;
        L22: while (true) {
          var Tmp23 = match_9955790;
          if (ConstSet57[Tmp23.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_9955799 < ((Tmp24 = Tmp23.items, Tmp24) != null ? Tmp24.length : 0))) break L22;
          F.line = 422;
          var Tmp25 = match_9955790;
          if (ConstSet58[Tmp25.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_9975473(pop_9975222(Tmp25, "items"), parent_node_9955801);
        }
    } while(false);
    }
    else {
      F.line = 424;
      var node_9975492 = match_9955790.node;
      F.line = 425;
      var converted_val_9975493 = null;
      F.line = 427;
      var Tmp26 = match_9955790;
      if (ConstSet59[Tmp26.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp26.convert.kind) {
      case 0:
        F.line = 429;
        var Tmp27 = match_9955790;
        if (ConstSet61[Tmp27.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp28 = Tmp27.convert;
        if (ConstSet60[Tmp28.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'TypeSelector\'")); }
        converted_val_9975493 = Tmp28.simple(val_9955791);
        break;
      }
        var Tmp30 = match_9955790;
        if (ConstSet62[Tmp30.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp30.mount == null)) Tmp29 = false; else {          var Tmp31 = match_9955790;
          if (ConstSet63[Tmp31.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp29 = !((Tmp31.mount_source == null));        }      if (Tmp29) {
      var Tmp32 = match_9955790;
      if (ConstSet64[Tmp32.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 433;
      var Tmp33 = match_9955790;
      if (ConstSet65[Tmp33.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp32.mount = Tmp33.mount_source.clone();
      F.line = 434;
      var Tmp34 = match_9955790;
      if (ConstSet66[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9975492.parentNode.replaceChild(Tmp34.mount.node(), node_9975492);
      }
      
        var Tmp35 = match_9955790;
        if (ConstSet67[Tmp35.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!(Tmp35.inited)) {
      L36: do {
        F.line = 438;
        var init_proc_9975525 = null;
        F.line = 184;
        var i_9977815 = 0;
        F.line = 185;
        var l_9977816 = (match_9955790.init != null ? match_9955790.init.length : 0);
        L37: do {
          F.line = 186;
            L38: while (true) {
            if (!(i_9977815 < l_9977816)) break L38;
              F.line = 438;
              init_proc_9975525 = match_9955790.init[chckIndx(i_9977815, 0, (match_9955790.init != null ? match_9955790.init.length : 0)+0-1)-0];
              F.line = 439;
              init_proc_9975525(node_9975492);
              F.line = 188;
              i_9977815 = addInt(i_9977815, 1);
              if (!(((match_9955790.init != null ? match_9955790.init.length : 0) == l_9977816))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp39 = match_9955790;
      if (ConstSet68[Tmp39.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 440;
      Tmp39.inited = true;
      }
      
        var Tmp40 = match_9955790;
        if (ConstSet69[Tmp40.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      if (!((Tmp40.mount == null))) {
      F.line = 444;
      var Tmp41 = match_9955790;
      if (ConstSet70[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_9975492 = Tmp41.mount.node();
      F.line = 445;
      var Tmp42 = match_9955790;
      if (ConstSet71[Tmp42.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp42.mount.update(converted_val_9975493, refresh_9955792);
      }
      
      L43: do {
        F.line = 448;
        var submatch_9975545 = null;
        F.line = 182;
        var colontmp__9977819 = null;
        F.line = 448;
        var Tmp44 = match_9955790;
        if (ConstSet72[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__9977819 = Tmp44.matches;
        F.line = 184;
        var i_9977820 = 0;
        F.line = 185;
        var l_9977821 = (colontmp__9977819 != null ? colontmp__9977819.length : 0);
        L45: do {
          F.line = 186;
            L46: while (true) {
            if (!(i_9977820 < l_9977821)) break L46;
              F.line = 448;
              submatch_9975545 = colontmp__9977819[chckIndx(i_9977820, 0, (colontmp__9977819 != null ? colontmp__9977819.length : 0)+0-1)-0];
              F.line = 449;
              submatch_9975545.update(converted_val_9975493, refresh_9955792);
              F.line = 188;
              i_9977820 = addInt(i_9977820, 1);
              if (!(((colontmp__9977819 != null ? colontmp__9977819.length : 0) == l_9977821))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      L47: do {
        F.line = 452;
        var refresh_proc_9975552 = null;
        F.line = 184;
        var i_9977824 = 0;
        F.line = 185;
        var l_9977825 = (match_9955790.refresh != null ? match_9955790.refresh.length : 0);
        L48: do {
          F.line = 186;
            L49: while (true) {
            if (!(i_9977824 < l_9977825)) break L49;
              F.line = 452;
              refresh_proc_9975552 = match_9955790.refresh[chckIndx(i_9977824, 0, (match_9955790.refresh != null ? match_9955790.refresh.length : 0)+0-1)-0];
              F.line = 453;
              refresh_proc_9975552(node_9975492, converted_val_9975493);
              F.line = 188;
              i_9977824 = addInt(i_9977824, 1);
              if (!(((match_9955790.refresh != null ? match_9955790.refresh.length : 0) == l_9977825))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    
  } while (false);
  framePtr = F.prev;

  
}
function as_interface_9955765(match_9955770) {
    function HEX3Aanonymous_9955777(data_9955779, refresh_9955780) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 506;
        update_9955785(match_9955770, data_9955779, refresh_9955780);
      framePtr = F.prev;

      
    }

  var result_9955772 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 505;
    result_9955772 = {update: HEX3Aanonymous_9955777};
  framePtr = F.prev;

  return result_9955772;

}
function compile_9937030(cfg_9937035, node_9937036) {
    var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;
    var Tmp5;
    var Tmp6;
    var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
                var Tmp17;
                var Tmp18;

  var result_9937094 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 302;
    var matched_node_9937095 = node_9937036.querySelector(toJSStr(cfg_9937035.selector));
    if ((matched_node_9937095 == null)) {
    F.line = 304;
    var selector_9937104 = nimCopy(null, cfg_9937035.selector, NTI112);
    F.line = 305;
    var fmt_res_9937105 = [mnewString(0)];
    F.line = 305;
    if (fmt_res_9937105[0] != null) { fmt_res_9937105[0] = (fmt_res_9937105[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_9937105[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 305;
    format_value_9790080(fmt_res_9937105, 0, selector_9937104, []);
    F.line = 305;
    if (fmt_res_9937105[0] != null) { fmt_res_9937105[0] = (fmt_res_9937105[0]).concat(makeNimstrLit("\'")); } else { fmt_res_9937105[0] = makeNimstrLit("\'"); };
    F.line = 305;
    raiseException({message: nimCopy(null, fmt_res_9937105[0], NTI112), parent: null, m_type: NTI9881017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    F.line = 307;
    var match_9945009 = {refresh: nimCopy(null, cfg_9937035.refresh, NTI9936283), init: nimCopy(null, cfg_9937035.init, NTI9881178), iter: cfg_9937035.iter, node: matched_node_9937095, oldValue: null, convert: {kind: 0, simple: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: null, mount_template: null, match_templates: null, items: null, anchor: null};
    F.line = 312;
    match_9945009.node = matched_node_9937095;
    if (match_9945009.iter) {
    var Tmp1 = match_9945009;
    if (ConstSet73[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 314;
    var Tmp2 = cfg_9937035;
    if (ConstSet74[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    Tmp1.iterate = Tmp2.iterate;
    var Tmp3 = match_9945009;
    if (ConstSet75[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 315;
    Tmp3.anchor = matched_node_9937095.ownerDocument.createComment(matched_node_9937095.outerHTML);
    var Tmp4 = match_9945009;
    if (ConstSet76[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 316;
    Tmp4.mount_template = cfg_9937035.mount;
    var Tmp5 = match_9945009;
    if (ConstSet77[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 317;
    Tmp5.match_templates = nimCopy(null, cfg_9937035.cmatches, NTI9936289);
    var Tmp6 = match_9945009;
    if (ConstSet78[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    F.line = 318;
    Tmp6.items = nimCopy(null, [], NTI9945030);
    F.line = 319;
    var Tmp7 = match_9945009;
    if (ConstSet79[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    matched_node_9937095.parentNode.replaceChild(Tmp7.anchor, matched_node_9937095);
    }
    else {
      var Tmp8 = match_9945009;
      if (ConstSet80[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 321;
      var Tmp9 = cfg_9937035;
      if (ConstSet81[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      nimCopy(Tmp8.convert, Tmp9.convert, NTI9936315);
      var Tmp10 = match_9945009;
      if (ConstSet82[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 322;
      Tmp10.matches = nimCopy(null, [], NTI9945049);
      var Tmp11 = match_9945009;
      if (ConstSet83[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 323;
      Tmp11.inited = false;
      var Tmp12 = match_9945009;
      if (ConstSet84[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 324;
      Tmp12.mount = null;
      if (!((cfg_9937035.mount == null))) {
      var Tmp13 = match_9945009;
      if (ConstSet85[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 326;
      Tmp13.mount_source = cfg_9937035.mount;
      }
      else {
        L14: do {
          F.line = 328;
          var submatch_9955214 = null;
          F.line = 184;
          var i_9977831 = 0;
          F.line = 185;
          var l_9977832 = (cfg_9937035.cmatches != null ? cfg_9937035.cmatches.length : 0);
          L15: do {
            F.line = 186;
              L16: while (true) {
              if (!(i_9977831 < l_9977832)) break L16;
                F.line = 328;
                submatch_9955214 = cfg_9937035.cmatches[chckIndx(i_9977831, 0, (cfg_9937035.cmatches != null ? cfg_9937035.cmatches.length : 0)+0-1)-0];
                F.line = 329;
                var Tmp17 = match_9945009;
                if (ConstSet86[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                if ((Tmp18 = Tmp17.matches, Tmp18) != null) { Tmp18.push(submatch_9955214.compile(matched_node_9937095)); } else { Tmp18 = [submatch_9955214.compile(matched_node_9937095)]; };
                F.line = 188;
                i_9977831 = addInt(i_9977831, 1);
                if (!(((cfg_9937035.cmatches != null ? cfg_9937035.cmatches.length : 0) == l_9977832))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      }
      
    }
    
    F.line = 330;
    result_9937094 = match_9945009;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9937094;

}
function as_interface_9936853(config_9936858) {
    function HEX3Aanonymous_9936865(node_9936867) {
      var result_9936872 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"svelte.nim",line:0};
      framePtr = F;
        F.line = 511;
        result_9936872 = as_interface_9955765(compile_9937030(config_9936858, node_9936867));
      framePtr = F.prev;

      return result_9936872;

    }

  var result_9936860 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 510;
    result_9936860 = {compile: HEX3Aanonymous_9936865};
  framePtr = F.prev;

  return result_9936860;

}
function match_9936386(c_9936391, selector_9936392, convert_9936394, actions_9936400) {
  var result_9936402 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 205;
    result_9936402 = {selector: nimCopy(null, selector_9936392, NTI112), refresh: [], init: [], mount: null, iter: false, convert: {kind: 0, simple: convert_9936394}, cmatches: null, iterate: null};
    F.line = 214;
    if (c_9936391.cmatches != null) { c_9936391.cmatches.push(as_interface_9936853(result_9936402)); } else { c_9936391.cmatches = [as_interface_9936853(result_9936402)]; };
    if (!((actions_9936400 == null))) {
    F.line = 216;
    actions_9936400(result_9936402);
    }
    
  framePtr = F.prev;

  return result_9936402;

}
function id_9936364(data_9936367) {
  var result_9936368 = null;

  var F={procname:"id.id",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 153;
    result_9936368 = data_9936367;
  framePtr = F.prev;

  return result_9936368;

}
function match_9936344(c_9936348, selector_9936349, actions_9936355) {
  var result_9936357 = null;

  var F={procname:"match.match",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 223;
    result_9936357 = match_9936386(c_9936348, selector_9936349, id_9936364, actions_9936355);
  framePtr = F.prev;

  return result_9936357;

}
function update_9975916(t_9975920, data_9975921, refresh_9975922) {
  var F={procname:"update.update",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 482;
    t_9975920.data = data_9975921;
    L1: do {
      F.line = 483;
      var match_9975929 = null;
      F.line = 184;
      var i_9977835 = 0;
      F.line = 185;
      var l_9977836 = (t_9975920.matches != null ? t_9975920.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_9977835 < l_9977836)) break L3;
            F.line = 483;
            match_9975929 = t_9975920.matches[chckIndx(i_9977835, 0, (t_9975920.matches != null ? t_9975920.matches.length : 0)+0-1)-0];
            F.line = 484;
            match_9975929.update(data_9975921, refresh_9975922);
            F.line = 188;
            i_9977835 = addInt(i_9977835, 1);
            if (!(((t_9975920.matches != null ? t_9975920.matches.length : 0) == l_9977836))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_button_9885036(node_9885039) {
    function HEX3Aanonymous_9885098(b_9885105) {
        function HEX3Aanonymous_9975849(event_9975851) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"button.nim",line:0};
          framePtr = F;
            F.line = 15;
            b_9885105.data.times = addInt(b_9885105.data.times, 1);
            F.line = 16;
            console.log("button clicked", b_9885105.data.times);
            F.line = 17;
            update_9975916(b_9885105, b_9885105.data, false);
          framePtr = F.prev;

          
        }

      var F={procname:"compileButton.:anonymous",prev:framePtr,filename:"button.nim",line:0};
      framePtr = F;
        F.line = 13;
        refresh_9935926(match_9885521(b_9885105, makeNimstrLit(".times"), times_9885019, null), set_text_9883108);
        F.line = 14;
        add_event_listener_9976052(match_9936344(b_9885105, makeNimstrLit("button"), null), makeNimstrLit("click"), HEX3Aanonymous_9975849, false);
      framePtr = F.prev;

      
    }

  var result_9885096 = null;

  var F={procname:"button.compileButton",prev:framePtr,filename:"button.nim",line:0};
  framePtr = F;
    F.line = 12;
    result_9885096 = compile_9976306(node_9885039, HEX3Aanonymous_9885098);
  framePtr = F.prev;

  return result_9885096;

}
function attach_9977357(t_9977361, target_9977362, anchor_9977363, data_9977364) {
  var F={procname:"attach.attach",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
    F.line = 490;
    update_9975916(t_9977361, data_9977364, true);
    F.line = 491;
    target_9977362.insertBefore(t_9977361.node, anchor_9977363);
  framePtr = F.prev;

  
}
function clone_9977105(comp_9977109) {
  var result_9977111 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"svelte.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 476;
    result_9977111 = compile_9976606({config: comp_9977109.config, m_type: NTI9885051, cmatches: null}, comp_9977109.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9977111;

}
var button_9977040 = [compile_button_9885036(document.querySelector("template#button").content)];
if (true) {
attach_9977357(clone_9977105(button_9977040[0]), document.body, null, {times: 0});
}

