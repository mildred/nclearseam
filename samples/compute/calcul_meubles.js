/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI10486039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12490069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12490042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12477238 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12477232 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12483126 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12483120 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12483119 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12483132 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12483114 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12477373 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477356 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477340 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477336 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12483102 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12477264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477253 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477243 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12477242 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12477215 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12483082 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12483078 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12483077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12483150 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12482768 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12477329 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477316 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477307 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477303 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12477302 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12477289 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477282 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477276 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12477272 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12465069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12465042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12452036 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12452030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12456049 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12456044 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12452125 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452117 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452109 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452105 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12456032 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12456012 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12456008 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12456007 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12456067 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12455698 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12452098 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452085 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452076 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452072 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12452071 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12452058 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452051 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12451711 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12452044 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12452396 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12511109 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12511126 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12291084 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12291073 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12291044 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12291043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12291080 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12291039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10671084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI851017 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10671073 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10671070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10671067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI179 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI10671041 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10671045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10671043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12291024 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12291023 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12291018 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12291019 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12291016 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12291062 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12291050 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12291049 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12291094 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12291035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12216126 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12195069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12195042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12181880 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10221355 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12181837 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10221015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10221017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12185958 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12185952 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12185951 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12185964 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12181873 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181844 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12181843 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12185946 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12182012 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181995 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181979 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221057 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI12181975 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12181862 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181850 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12181849 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12185934 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12181906 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181895 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221410 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181885 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12181884 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10221511 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221439 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12181820 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12185914 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12185910 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12185909 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12185982 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12185600 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12181968 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221173 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12181955 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181946 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181942 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12181941 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12181928 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12181921 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12180291 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221041 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI12181914 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12182283 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12280459 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12280476 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12171206 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12171195 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12171166 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12171165 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12171202 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12171161 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12171147 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12171146 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI10192029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10192390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12171184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12171172 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12171171 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12171216 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12171157 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4605232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4860011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4860011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4605232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4860011.node = NNI4860011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI6243.base = NTI6221;
var NNI12171172 = {kind: 1, offset: "update", len: 0, typ: NTI12171184, name: "update", sons: null};
NTI12171172.node = NNI12171172;
NTI12171171.base = NTI12171172;
NTI12171216.base = NTI12171171;
NTI10192386.base = NTI10192033;
NTI10192388.base = NTI10192033;
NTI10192390.base = NTI10192033;
var NNI10192031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI10192031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10192031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10192031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10192031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10192031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10192031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI10192031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI10192031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI10192031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI10192031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI10192031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI10192031, name: "NotationNode", len: 0, sons: null}}};
NTI10192031.node = NNI10192031;
var NNI10192029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10192029.node = NNI10192029;
NTI10192029.base = NTI6008;
NTI10192027.base = NTI10192029;
NTI10192537.base = NTI10192041;
var NNI10192083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI10192537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI10192083.node = NNI10192083;
NTI10192083.base = NTI10192043;
NTI10192081.base = NTI10192083;
var NNI10192079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI10192079.node = NNI10192079;
NTI10192079.base = NTI10192043;
NTI10192077.base = NTI10192079;
NTI10192443.base = NTI10192077;
NTI10192445.base = NTI10192077;
var NNI10192043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI10192027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI10192081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI10192443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI10192445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI10192043.node = NNI10192043;
NTI10192043.base = NTI10192035;
NTI10192041.base = NTI10192043;
var NNI10192075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10192075.node = NNI10192075;
NTI10192075.base = NTI10192043;
NTI10192073.base = NTI10192075;
NTI10192423.base = NTI10192073;
NTI10192425.base = NTI10192081;
var NNI10192087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI10192087.node = NNI10192087;
NTI10192087.base = NTI10192043;
NTI10192085.base = NTI10192087;
NTI10192427.base = NTI10192085;
NTI10192429.base = NTI10192041;
var NNI10192071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI10192071.node = NNI10192071;
NTI10192071.base = NTI10192043;
NTI10192069.base = NTI10192071;
NTI10192431.base = NTI10192069;
var NNI10192067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10192067.node = NNI10192067;
NTI10192067.base = NTI10192043;
NTI10192065.base = NTI10192067;
NTI10192433.base = NTI10192065;
var NNI10192039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI10192041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI10192041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI10192041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI10192423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI10192425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI10192427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI10192429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI10192431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI10192433, name: "links", sons: null}]};
NTI10192039.node = NNI10192039;
NTI10192039.base = NTI10192035;
NTI10192037.base = NTI10192039;
var NNI10192091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI10192091.node = NNI10192091;
NTI10192091.base = NTI6008;
NTI10192089.base = NTI10192091;
var NNI10192035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI10192386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI10192388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10192390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI10192033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI10192033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI10192033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI10192031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI10192033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI10192033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI10192033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI10192037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI10192089, name: "style", sons: null}]};
NTI10192035.node = NNI10192035;
var NNI10192005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI10192180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI10192184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI10192188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI10192192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI10192196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI10192200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI10192204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI10192208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI10192212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI10192216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI10192220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI10192224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI10192228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI10192232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI10192236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI10192240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI10192244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI10192248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI10192252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI10192256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI10192260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI10192264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI10192268, name: "onloadend", sons: null}]};
NTI10192005.node = NNI10192005;
NTI10192005.base = NTI6008;
NTI10192035.base = NTI10192005;
NTI10192033.base = NTI10192035;
var NNI12171147 = {kind: 1, offset: "cubeprice", len: 0, typ: NTI143, name: "cubeprice", sons: null};
NTI12171147.node = NNI12171147;
NTI12171146.base = NTI12171147;
var NNI12171157 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI12171216, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI10192033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI12171146, name: "data", sons: null}]};
NTI12171157.node = NNI12171157;
var NNI12171166 = {kind: 1, offset: "compile", len: 0, typ: NTI12171195, name: "compile", sons: null};
NTI12171166.node = NNI12171166;
NTI12171165.base = NTI12171166;
NTI12171202.base = NTI12171165;
var NNI12171161 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI12171202, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI12171206, name: "config", sons: null}]};
NTI12171161.node = NNI12171161;
NTI12171161.base = NTI6008;
NTI12171157.base = NTI12171161;
NTI12280476.base = NTI12171171;
NTI12280459.base = NTI12171171;
var NNI12182283 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI163, name: "Field1", sons: null}]};
NTI12182283.node = NNI12182283;
var NNI10221041 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10221041, name: "SimpleTypeSelector", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10221041, name: "SerialTypeSelector", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10221041, name: "CompareTypeSelector", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10221041, name: "ObjectTypeSelector", len: 0, sons: null}}};
NTI10221041.node = NNI10221041;
NTI10221173.base = NTI112;
var NNI12181942 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI12181946, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI12181955, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10221173, name: "id", sons: null}]};
NTI12181942.node = NNI12181942;
NTI12181941.base = NTI12181942;
var NNI12181914 = {kind: 3, offset: "kind", len: 4, typ: NTI10221041, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12180291, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12181921, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI12181928, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI12181941, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI12181968, name: "eql", sons: null}]}]]};
NTI12181914.node = NNI12181914;
NTI12185600.base = NTI12171171;
NTI12185914.base = NTI12181820;
NTI10221439.base = NTI10221511;
var NNI12181885 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10221410, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI12181895, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI12181906, name: "clone", sons: null}]};
NTI12181885.node = NNI12181885;
NTI12181884.base = NTI12181885;
var NNI12181850 = {kind: 1, offset: "update", len: 0, typ: NTI12181862, name: "update", sons: null};
NTI12181850.node = NNI12181850;
NTI12181849.base = NTI12181850;
NTI12185934.base = NTI12181849;
var NNI10221057 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI10221057, name: "SimpleIterator", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10221057, name: "SerialIterator", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10221057, name: "TypeSelectorIterator", len: 0, sons: null}}};
NTI10221057.node = NNI10221057;
var NNI12181975 = {kind: 3, offset: "kind", len: 3, typ: NTI10221057, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12181979, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12181995, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI12182012, name: "selector", sons: null}]]};
NTI12181975.node = NNI12181975;
var NNI12181844 = {kind: 1, offset: "compile", len: 0, typ: NTI12181873, name: "compile", sons: null};
NTI12181844.node = NNI12181844;
NTI12181843.base = NTI12181844;
NTI12185946.base = NTI12181843;
NTI12185958.base = NTI12181849;
var NNI12185952 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12185958, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12181884, name: "mount", sons: null}]};
NTI12185952.node = NNI12185952;
NTI12185951.base = NTI12185952;
NTI12185964.base = NTI12185951;
var NNI12185910 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI12185914, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10221439, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10221041, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "value", len: 0, typ: NTI143, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI12181914, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI12181884, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12181884, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12185934, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI12181975, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI12181884, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI12185946, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI12185964, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10192033, name: "anchor", sons: null}]}]]}]};
NTI12185910.node = NNI12185910;
NTI12185909.base = NTI12185910;
NTI12185982.base = NTI12185909;
var NNI10221017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10221017.node = NNI10221017;
var NNI10221015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10221015.node = NNI10221015;
NTI10221015.base = NTI6221;
NTI10221017.base = NTI10221015;
NTI12181837.base = NTI12181820;
NTI10221355.base = NTI10221511;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
NTI12181880.base = NTI12181843;
NTI12195042.base = NTI12185951;
NTI12195069.base = NTI12181849;
NTI12216126.base = NTI12181849;
var NNI12291050 = {kind: 1, offset: "update", len: 0, typ: NTI12291062, name: "update", sons: null};
NTI12291050.node = NNI12291050;
NTI12291049.base = NTI12291050;
NTI12291094.base = NTI12291049;
var NNI10671041 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI10671041, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10671041, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10671041, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10671041, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10671041, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10671041, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10671041, name: "JArray", len: 0, sons: null}}};
NTI10671041.node = NNI10671041;
var NNI10671073 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI851017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI112, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI10671043, name: "Field3", sons: null}]};
NTI10671073.node = NNI10671073;
NTI10671070.base = NTI10671073;
var NNI10671067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI10671070, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI143, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI143, name: "last", sons: null}]};
NTI10671067.node = NNI10671067;
NTI10671084.base = NTI10671043;
var NNI10671045 = {kind: 3, offset: "kind", len: 7, typ: NTI10671041, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI112, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI179, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI104, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI163, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI10671067, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI10671084, name: "elems", sons: null}]]};
NTI10671045.node = NNI10671045;
NTI10671043.base = NTI10671045;
NTI12291024.base = NTI10671043;
var NNI12291023 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "children", len: 0, typ: NTI12291024, name: "children", sons: null}, 
{kind: 1, offset: "settings", len: 0, typ: NTI12171146, name: "settings", sons: null}]};
NTI12291023.node = NNI12291023;
NTI12291018.base = NTI12291023;
var NNI12291019 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "times", len: 0, typ: NTI143, name: "times", sons: null}, 
{kind: 1, offset: "doc", len: 0, typ: NTI12291018, name: "doc", sons: null}]};
NTI12291019.node = NNI12291019;
NTI12291016.base = NTI12291019;
var NNI12291035 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI12291094, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI10192033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI12291016, name: "data", sons: null}]};
NTI12291035.node = NNI12291035;
var NNI12291044 = {kind: 1, offset: "compile", len: 0, typ: NTI12291073, name: "compile", sons: null};
NTI12291044.node = NNI12291044;
NTI12291043.base = NTI12291044;
NTI12291080.base = NTI12291043;
var NNI12291039 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI12291080, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI12291084, name: "config", sons: null}]};
NTI12291039.node = NNI12291039;
NTI12291039.base = NTI6008;
NTI12291035.base = NTI12291039;
NTI12511126.base = NTI12291049;
NTI12511109.base = NTI12291049;
var NNI12452396 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI163, name: "Field1", sons: null}]};
NTI12452396.node = NNI12452396;
var NNI12452072 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI12452076, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI12452085, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10221173, name: "id", sons: null}]};
NTI12452072.node = NNI12452072;
NTI12452071.base = NTI12452072;
var NNI12452044 = {kind: 3, offset: "kind", len: 4, typ: NTI10221041, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12451711, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12452051, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI12452058, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI12452071, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI12452098, name: "eql", sons: null}]}]]};
NTI12452044.node = NNI12452044;
NTI12455698.base = NTI12291049;
NTI12456012.base = NTI12181820;
NTI12456032.base = NTI12181849;
var NNI12452105 = {kind: 3, offset: "kind", len: 3, typ: NTI10221057, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12452109, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12452117, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI12452125, name: "selector", sons: null}]]};
NTI12452105.node = NNI12452105;
NTI12456044.base = NTI12181843;
NTI12456049.base = NTI12185951;
var NNI12456008 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI12456012, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10221439, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10221041, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "value", len: 0, typ: NTI143, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI12452044, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI12181884, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12181884, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12456032, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI12452105, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI12181884, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI12456044, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI12456049, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10192033, name: "anchor", sons: null}]}]]}]};
NTI12456008.node = NNI12456008;
NTI12456007.base = NTI12456008;
NTI12456067.base = NTI12456007;
NTI12452030.base = NTI12181820;
NTI12452036.base = NTI12181843;
NTI12465042.base = NTI12185951;
NTI12465069.base = NTI12181849;
var NNI12477303 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI12477307, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI12477316, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10221173, name: "id", sons: null}]};
NTI12477303.node = NNI12477303;
NTI12477302.base = NTI12477303;
var NNI12477272 = {kind: 3, offset: "kind", len: 4, typ: NTI10221041, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12477276, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12477282, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI12477289, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI12477302, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI12477329, name: "eql", sons: null}]}]]};
NTI12477272.node = NNI12477272;
NTI12482768.base = NTI12291049;
NTI12483082.base = NTI12477215;
var NNI12477243 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10221410, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI12477253, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI12477264, name: "clone", sons: null}]};
NTI12477243.node = NNI12477243;
NTI12477242.base = NTI12477243;
NTI12483102.base = NTI12291049;
var NNI12477336 = {kind: 3, offset: "kind", len: 3, typ: NTI10221057, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12477340, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12477356, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI12477373, name: "selector", sons: null}]]};
NTI12477336.node = NNI12477336;
NTI12483114.base = NTI12291043;
NTI12483126.base = NTI12291049;
var NNI12483120 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12483126, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12477242, name: "mount", sons: null}]};
NTI12483120.node = NNI12483120;
NTI12483119.base = NTI12483120;
NTI12483132.base = NTI12483119;
var NNI12483078 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI12483082, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10221439, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10221041, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "value", len: 0, typ: NTI12291016, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI12477272, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI12477242, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12477242, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12483102, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI12477336, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI12477242, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI12483114, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI12483132, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10192033, name: "anchor", sons: null}]}]]}]};
NTI12483078.node = NNI12483078;
NTI12483077.base = NTI12483078;
NTI12483150.base = NTI12483077;
NTI12477232.base = NTI12477215;
NTI12477238.base = NTI12291043;
NTI12490042.base = NTI12483119;
NTI12490069.base = NTI12291049;
var NNI6245 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6245.node = NNI6245;
NTI6245.base = NTI6243;
var NNI10486039 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10486039.node = NNI10486039;
NTI10486039.base = NTI6243;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function nimMax(a_230821, b_230822) {
    var Tmp1;

  var result_230823 = 0;

  BeforeRet: do {
    if ((b_230822 <= a_230821)) {
    Tmp1 = a_230821;
    }
    else {
    Tmp1 = b_230822;
    }
    
    result_230823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230823;

}
function nimMin(a_230803, b_230804) {
    var Tmp1;

  var result_230805 = 0;

  BeforeRet: do {
    if ((a_230803 <= b_230804)) {
    Tmp1 = a_230803;
    }
    else {
    Tmp1 = b_230804;
    }
    
    result_230805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230805;

}
var ConstSet9 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet10 = setConstr(true);
var ConstSet11 = setConstr(true);
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(true);
var ConstSet14 = setConstr(true);
var ConstSet15 = setConstr(true);
var ConstSet16 = setConstr(false);
var ConstSet17 = setConstr(false);
var ConstSet18 = setConstr(false);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(false);
var ConstSet21 = setConstr(false);
var ConstSet22 = setConstr(false);
var ConstSet23 = setConstr(false);
var ConstSet24 = setConstr(false);
var ConstSet25 = setConstr(false);
var ConstSet26 = setConstr(false);
var ConstSet27 = setConstr(true);
var ConstSet28 = setConstr(true);
var ConstSet29 = setConstr(0);
var ConstSet30 = setConstr(true);
var ConstSet31 = setConstr(1);
var ConstSet32 = setConstr(true);
var ConstSet33 = setConstr(2);
var ConstSet34 = setConstr(true);
var ConstSet35 = setConstr(true);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(true);
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(true);
var ConstSet40 = setConstr(true);
var ConstSet41 = setConstr(true);
var ConstSet42 = setConstr(true);
var ConstSet43 = setConstr(true);
var ConstSet44 = setConstr(true);
var ConstSet45 = setConstr(true);
var ConstSet46 = setConstr(true);
var ConstSet47 = setConstr(false);
var ConstSet48 = setConstr(0);
var ConstSet49 = setConstr(false);
var ConstSet50 = setConstr(1);
var ConstSet51 = setConstr(1);
var ConstSet52 = setConstr(false);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(2);
var ConstSet55 = setConstr(false);
var ConstSet56 = setConstr(2);
var ConstSet57 = setConstr(2);
var ConstSet58 = setConstr(3);
var ConstSet59 = setConstr(false);
var ConstSet60 = setConstr(3);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(3);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(2);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(false);
var ConstSet67 = setConstr(false);
var ConstSet68 = setConstr(false);
var ConstSet69 = setConstr(false);
var ConstSet70 = setConstr(false);
var ConstSet71 = setConstr(false);
var ConstSet72 = setConstr(false);
var ConstSet73 = setConstr(false);
var ConstSet74 = setConstr(false);
var ConstSet75 = setConstr(false);
var ConstSet76 = setConstr(true);
var ConstSet77 = setConstr(true);
var ConstSet78 = setConstr(true);
var ConstSet79 = setConstr(true);
var ConstSet80 = setConstr(true);
var ConstSet81 = setConstr(true);
var ConstSet82 = setConstr(true);
var ConstSet83 = setConstr(false);
var ConstSet84 = setConstr(false);
var ConstSet85 = setConstr(false);
var ConstSet86 = setConstr(1);
var ConstSet87 = setConstr(false);
var ConstSet88 = setConstr(false);
var ConstSet89 = setConstr(false);
var ConstSet90 = setConstr(false);
var ConstSet91 = setConstr(false);
var ConstSet92 = setConstr(false);
var ConstSet93 = setConstr(false);
var ConstSet94 = setConstr(true);
var ConstSet95 = setConstr(true);
var ConstSet96 = setConstr(0);
var ConstSet97 = setConstr(true);
var ConstSet98 = setConstr(1);
var ConstSet99 = setConstr(true);
var ConstSet100 = setConstr(2);
var ConstSet101 = setConstr(true);
var ConstSet102 = setConstr(true);
var ConstSet103 = setConstr(true);
var ConstSet104 = setConstr(true);
var ConstSet105 = setConstr(true);
var ConstSet106 = setConstr(true);
var ConstSet107 = setConstr(true);
var ConstSet108 = setConstr(true);
var ConstSet109 = setConstr(true);
var ConstSet110 = setConstr(true);
var ConstSet111 = setConstr(true);
var ConstSet112 = setConstr(true);
var ConstSet113 = setConstr(true);
var ConstSet114 = setConstr(false);
var ConstSet115 = setConstr(0);
var ConstSet116 = setConstr(false);
var ConstSet117 = setConstr(1);
var ConstSet118 = setConstr(1);
var ConstSet119 = setConstr(false);
var ConstSet120 = setConstr(1);
var ConstSet121 = setConstr(2);
var ConstSet122 = setConstr(false);
var ConstSet123 = setConstr(2);
var ConstSet124 = setConstr(2);
var ConstSet125 = setConstr(3);
var ConstSet126 = setConstr(false);
var ConstSet127 = setConstr(3);
var ConstSet128 = setConstr(false);
var ConstSet129 = setConstr(3);
var ConstSet130 = setConstr(false);
var ConstSet131 = setConstr(2);
var ConstSet132 = setConstr(false);
var ConstSet133 = setConstr(false);
var ConstSet134 = setConstr(false);
var ConstSet135 = setConstr(false);
var ConstSet136 = setConstr(false);
var ConstSet137 = setConstr(false);
var ConstSet138 = setConstr(false);
var ConstSet139 = setConstr(false);
var ConstSet140 = setConstr(false);
var ConstSet141 = setConstr(false);
var ConstSet142 = setConstr(false);
var ConstSet143 = setConstr(true);
var ConstSet144 = setConstr(true);
var ConstSet145 = setConstr(true);
var ConstSet146 = setConstr(true);
var ConstSet147 = setConstr(true);
var ConstSet148 = setConstr(true);
var ConstSet149 = setConstr(true);
var ConstSet150 = setConstr(false);
var ConstSet151 = setConstr(false);
var ConstSet152 = setConstr(false);
var ConstSet153 = setConstr(1);
var ConstSet154 = setConstr(false);
var ConstSet155 = setConstr(false);
var ConstSet156 = setConstr(false);
var ConstSet157 = setConstr(false);
var ConstSet158 = setConstr(false);
var ConstSet159 = setConstr(false);
var ConstSet160 = setConstr(false);
var ConstSet161 = setConstr(true);
var ConstSet162 = setConstr(true);
var ConstSet163 = setConstr(0);
var ConstSet164 = setConstr(true);
var ConstSet165 = setConstr(1);
var ConstSet166 = setConstr(true);
var ConstSet167 = setConstr(2);
var ConstSet168 = setConstr(true);
var ConstSet169 = setConstr(true);
var ConstSet170 = setConstr(true);
var ConstSet171 = setConstr(true);
var ConstSet172 = setConstr(true);
var ConstSet173 = setConstr(true);
var ConstSet174 = setConstr(true);
var ConstSet175 = setConstr(true);
var ConstSet176 = setConstr(true);
var ConstSet177 = setConstr(true);
var ConstSet178 = setConstr(true);
var ConstSet179 = setConstr(true);
var ConstSet180 = setConstr(true);
var ConstSet181 = setConstr(false);
var ConstSet182 = setConstr(0);
var ConstSet183 = setConstr(false);
var ConstSet184 = setConstr(1);
var ConstSet185 = setConstr(1);
var ConstSet186 = setConstr(false);
var ConstSet187 = setConstr(1);
var ConstSet188 = setConstr(2);
var ConstSet189 = setConstr(false);
var ConstSet190 = setConstr(2);
var ConstSet191 = setConstr(2);
var ConstSet192 = setConstr(3);
var ConstSet193 = setConstr(false);
var ConstSet194 = setConstr(3);
var ConstSet195 = setConstr(false);
var ConstSet196 = setConstr(3);
var ConstSet197 = setConstr(false);
var ConstSet198 = setConstr(2);
var ConstSet199 = setConstr(false);
var ConstSet200 = setConstr(false);
var ConstSet201 = setConstr(false);
var ConstSet202 = setConstr(false);
var ConstSet203 = setConstr(false);
var ConstSet204 = setConstr(false);
var ConstSet205 = setConstr(false);
var ConstSet206 = setConstr(false);
var ConstSet207 = setConstr(false);
var ConstSet208 = setConstr(false);
var ConstSet209 = setConstr(false);
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet210 = setConstr(4);
var ConstSet211 = setConstr(4);
var ConstSet212 = setConstr(2);
var ConstSet213 = setConstr(2);
var ConstSet214 = setConstr(3);
var ConstSet215 = setConstr(3);
var ConstSet216 = setConstr(1);
var ConstSet217 = setConstr(1);
var ConstSet218 = setConstr(6);
var ConstSet219 = setConstr(6);
var ConstSet220 = setConstr(5);
var ConstSet221 = setConstr(5);
var ConstSet222 = setConstr(5);
function modInt(a_230475, b_230476) {
        if (b_230476 == 0) raiseDivByZero();
    if (b_230476 == -1 && a_230475 == 2147483647) raiseOverflow();
    return Math.trunc(a_230475 % b_230476);
  

  
}
var ConstSet223 = setConstr(5);
var ConstSet224 = setConstr(5);
var ConstSet225 = setConstr(5, 0);
function addChar(x_275031, c_275032) {
    x_275031.push(c_275032);

  
}
var ConstSet226 = setConstr([48, 57]);
var ConstSet227 = setConstr(0, 125);
var ConstSet228 = setConstr([48, 57]);
var ConstSet229 = setConstr([65, 90]);
var ConstSet230 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
function reprEnum(e_315480, typ_315481) {
  var result_315482 = null;

  var F={procname:"system.reprEnum",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    if (!(is_undefined_315483(typ_315481.node.sons[e_315480]))) {
    F.line = 38;
    result_315482 = nimCopy(null, makeNimstrLit(typ_315481.node.sons[e_315480].name), NTI112);
    }
    else {
      F.line = 40;
      result_315482 = nimCopy(null, (cstrToNimstr((e_315480)+"") || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI112);
    }
    
  framePtr = F.prev;

  return result_315482;

}
var ConstSet231 = setConstr(5, 0);
var ConstSet232 = setConstr(6);
var ConstSet233 = setConstr(6);
var ConstSet234 = setConstr(6);
var ConstSet235 = setConstr(5);
var ConstSet236 = setConstr(4);
var ConstSet237 = setConstr(2);
var ConstSet238 = setConstr(3);
var ConstSet239 = setConstr(1);
var ConstSet240 = setConstr(5);
function genericReset(x_250044, ti_250045) {
  var result_250046 = null;

    result_250046 = null;
    switch (ti_250045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (is_fat_pointer_235401(ti_250045)) {
              result_250046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_250046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_250045.kind == 17)) {
      result_250046 = {m_type: ti_250045};
      }
      else {
        result_250046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_250046 = [];
    
      break;
    case 4:
    case 16:
            result_250046 = new Array(x_250044.length);
      for (var i = 0; i < x_250044.length; ++i) {
        result_250046[i] = genericReset(x_250044[i], ti_250045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_250046;

}
var ConstSet241 = setConstr(5);
var ConstSet242 = setConstr(6);
var ConstSet243 = setConstr(6);
var ConstSet244 = setConstr(6);
var ConstSet245 = setConstr(5);
var ConstSet246 = setConstr(5, 0);
var ConstSet247 = setConstr(5, 0);
var ConstSet248 = setConstr(2);
var ConstSet249 = setConstr(2);
var ConstSet250 = setConstr(2);
var ConstSet251 = setConstr(6);
var ConstSet252 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_855031 = [0];
var components_10223124 = [{Field0: null}];
var state_11257005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_11515231 = [null];
var local_instance_11515232 = [null];
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__12043098 = 0;
      colontmp__12043098 = (i_160051 - 1);
      var res_12043103 = colontmp__12043098;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_12043103)) break L8;
            j_175236 = res_12043103;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_12043103 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function rotl_11257230(x_11257232, k_11257233) {
  var result_11257234 = 0;

  var F={procname:"random.rotl",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 122;
    result_11257234 = ((x_11257232 << k_11257233) | ((x_11257232 >>> 0) >>> ((64 - k_11257233) >>> 0)));
  framePtr = F.prev;

  return result_11257234;

}
function next_11257258(r_11257261) {
  var result_11257262 = 0;

  var F={procname:"random.next",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 139;
    var s0_11257263 = r_11257261.a0;
    F.line = 140;
    var s1_11257264 = r_11257261.a1;
    F.line = 141;
    result_11257262 = ((s0_11257263 + s1_11257264) >>> 0);
    F.line = 142;
    s1_11257264 = (s1_11257264 ^ s0_11257263);
    F.line = 143;
    r_11257261.a0 = ((rotl_11257230(s0_11257263, 55) ^ s1_11257264) ^ (s1_11257264 << 14));
    F.line = 144;
    r_11257261.a1 = rotl_11257230(s1_11257264, 36);
  framePtr = F.prev;

  return result_11257262;

}
function init_rand_11260612(seed_11260614) {
  var result_11260615 = [{a0: 0, a1: 0}];

  var F={procname:"random.initRand",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    if (!(!((seed_11260614 == 0)))) {
    F.line = 572;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/random.nim(572, 12) `seed != 0` "));
    }
    
    F.line = 573;
    result_11260615[0].a0 = (seed_11260614 >> 16);
    F.line = 574;
    result_11260615[0].a1 = (seed_11260614 & 65535);
    F.line = 575;
    next_11257258(result_11260615[0]);
  framePtr = F.prev;

  return result_11260615[0];

}
var rand_12043079 = [init_rand_11260612(1)];
async function init_comp_12290467(component_12290472, component_12290472_Idx, node_12290474, creator_12290476) {
  var result_12290478 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 19;
    var n_12290500 = (await node_12290474);
    F.line = 20;
    component_12290472[component_12290472_Idx] = creator_12290476(n_12290500);
    F.line = 131;
    result_12290478 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12290478;

}
function declare_12290449(registry_12290452, component_12290455, component_12290455_Idx, node_12290457, creator_12290459) {
    function HEX3Aanonymous_12290460() {
      var result_12290465 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 23;
        result_12290465 = init_comp_12290467(component_12290455, component_12290455_Idx, node_12290457, creator_12290459);
      framePtr = F.prev;

      return result_12290465;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 23;
    if (registry_12290452.Field0 != null) { registry_12290452.Field0.push(HEX3Aanonymous_12290460); } else { registry_12290452.Field0 = [HEX3Aanonymous_12290460]; };
  framePtr = F.prev;

  
}
async function fetch_template_12110001(rel_path_12110003) {
  var result_12110008 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 9;
    var response_12135032 = (await (window.fetch((toJSStr(rel_path_12110003)))));
    F.line = 10;
    var text_12140026 = (await (response_12135032.text()));
    F.line = 11;
    result_12110008 = (window.document.createRange().createContextualFragment((text_12140026)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12110008;

}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function nsuToHex(x_9455243, len_9455244) {
  var result_9455245 = null;

  var F={procname:"strutils.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 936;
    var n_9455247 = x_9455243;
    F.line = 937;
    result_9455245 = nimCopy(null, mnewString(len_9455244), NTI112);
    L1: do {
      F.line = 938;
      var j_9455254 = 0;
      F.line = 6;
      var colontmp__12290607 = 0;
      F.line = 938;
      colontmp__12290607 = subInt(len_9455244, 1);
      F.line = 28;
      var res_12290608 = colontmp__12290607;
      L2: do {
        F.line = 29;
          L3: while (true) {
          if (!(0 <= res_12290608)) break L3;
            F.line = 938;
            j_9455254 = res_12290608;
            F.line = 939;
            result_9455245[chckIndx(j_9455254, 0, (result_9455245 != null ? result_9455245.length : 0)+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9455247 & 15), 0, (makeNimstrLit("0123456789ABCDEF") != null ? makeNimstrLit("0123456789ABCDEF").length : 0)+0-1)-0];
            F.line = 940;
            n_9455247 = (n_9455247 >> 4);
            if (((n_9455247 == 0) && (x_9455243 < 0))) {
            F.line = 942;
            n_9455247 = -1;
            }
            
            F.line = 31;
            res_12290608 = subInt(res_12290608, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9455245;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function to_hex_12043115(x_12043118) {
  var result_12043119 = null;

  var F={procname:"toHex.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 945;
    result_12043119 = nimCopy(null, nsuToHex(chckRange(x_12043118, -9223372036854775808, 9223372036854775807), 16), NTI112);
  framePtr = F.prev;

  return result_12043119;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1450017(s_1450019, b_1450021, b_1450021_Idx, start_1450022) {
      var Tmp1;
          var Tmp4;

  var result_1450024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1450025 = start_1450022;
    if (((i_1450025 < (s_1450019 != null ? s_1450019.length : 0)) && (s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1450025 = addInt(i_1450025, 1);
    }
    
      if (!(i_1450025 < (s_1450019 != null ? s_1450019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1450021[b_1450021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1450025 < (s_1450019 != null ? s_1450019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1460016 = subInt(s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0], 48);
          if ((b_1450021[b_1450021_Idx] <= divInt(subInt(2147483647, c_1460016), 10))) {
          F.line = 483;
          b_1450021[b_1450021_Idx] = addInt(mulInt(b_1450021[b_1450021_Idx], 10), c_1460016);
          }
          else {
            F.line = 485;
            b_1450021[b_1450021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1450025 = addInt(i_1450025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1450025 < (s_1450019 != null ? s_1450019.length : 0)) && (s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1450025 = addInt(i_1450025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1450024 = subInt(i_1450025, start_1450022);
    }
    
  framePtr = F.prev;

  return result_1450024;

}
function HEX5BHEX5D_4860068(s_4860072, x_4860074) {
  var result_4860075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4860201 = x_4860074.a;
    F.line = 2437;
    var l_4860401 = addInt(subInt(subInt((s_4860072 != null ? s_4860072.length : 0), x_4860074.b), a_4860201), 1);
    F.line = 2438;
    result_4860075 = nimCopy(null, mnewString(chckRange(l_4860401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4860409 = 0;
      F.line = 106;
      var i_12290638 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_12290638 < l_4860401)) break L3;
            F.line = 2439;
            i_4860409 = i_12290638;
            F.line = 2439;
            result_4860075[chckIndx(i_4860409, 0, (result_4860075 != null ? result_4860075.length : 0)+0-1)-0] = s_4860072[chckIndx(addInt(i_4860409, a_4860201), 0, (s_4860072 != null ? s_4860072.length : 0)+0-1)-0];
            F.line = 109;
            i_12290638 = addInt(i_12290638, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4860075;

}
function HEX2EHEX2E_4860001(a_4860006, b_4860008) {
  var result_4860014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4860014, {a: a_4860006, b: b_4860008}, NTI4860011);
  framePtr = F.prev;

  return result_4860014;

}
function parse_standard_format_specifier_10085322(s_10085324, start_10085325, ignore_unknown_suffix_10085327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10085328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_10085328.fill = 32;
    F.line = 380;
    result_10085328.align = 0;
    F.line = 381;
    result_10085328.sign = 45;
    F.line = 382;
    var i_10085331 = start_10085325;
    if (((addInt(i_10085331, 1) < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet2[s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_10085328.fill = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 385;
    result_10085328.align = s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 386;
    i_10085331 = addInt(i_10085331, 2);
    }
    else {
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet3[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_10085328.align = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 389;
    i_10085331 = addInt(i_10085331, 1);
    }
    }
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet4[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_10085328.sign = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 393;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_10085328.alternateForm = true;
    F.line = 397;
    i_10085331 = addInt(i_10085331, 1);
    }
    
      if (!((addInt(i_10085331, 1) < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_10085328.padWithZero = true;
    F.line = 401;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    F.line = 403;
    var parsed_length_10105015 = parse_saturated_natural_1450017(s_10085324, result_10085328, "minimumWidth", i_10085331);
    F.line = 404;
    i_10085331 = addInt(i_10085331, parsed_length_10105015);
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_10085331 = addInt(i_10085331, 1);
    F.line = 407;
    var parsed_length_b_10105029 = parse_saturated_natural_1450017(s_10085324, result_10085328, "precision", i_10085331);
    F.line = 408;
    i_10085331 = addInt(i_10085331, parsed_length_b_10105029);
    }
    else {
      F.line = 410;
      result_10085328.precision = -1;
    }
    
      if (!(i_10085331 < (s_10085324 != null ? s_10085324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_10085328.typ = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 414;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    F.line = 415;
    result_10085328.endPosition = i_10085331;
      if (!!((i_10085331 == (s_10085324 != null ? s_10085324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_10085327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4860068(s_10085324, HEX2EHEX2E_4860001(i_10085331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_10085328;

}
function nucruneLen(s_1531829) {
  var result_1531830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1531832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1531832 < (s_1531829 != null ? s_1531829.length : 0))) break L2;
          if ((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1531832 = addInt(i_1531832, 1);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1531832 = addInt(i_1531832, 2);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1531832 = addInt(i_1531832, 3);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1531832 = addInt(i_1531832, 4);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1531832 = addInt(i_1531832, 5);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1531832 = addInt(i_1531832, 6);
          }
          else {
            F.line = 49;
          i_1531832 = addInt(i_1531832, 1);
          }
          }}}}}
          F.line = 50;
          result_1531830 = addInt(result_1531830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1531830;

}
function rune_len_at_1531931(s_1531933, i_1531934) {
  var result_1531935 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1531935 = 1;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1531935 = 2;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1531935 = 3;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1531935 = 4;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1531935 = 5;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1531935 = 6;
    }
    else {
      F.line = 68;
      result_1531935 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1531935;

}
function rune_offset_2155244(s_2155246, pos_2155247, start_2155248) {
  var result_2155249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_2155251 = 0;
    F.line = 320;
    var o_2155252 = start_2155248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_2155251 < pos_2155247)) break L2;
          F.line = 322;
          o_2155252 = addInt(o_2155252, chckRange(rune_len_at_1531931(s_2155246, o_2155252), 0, 2147483647));
          if (((s_2155246 != null ? s_2155246.length : 0) <= o_2155252)) {
          F.line = 324;
          result_2155249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_2155251 = addInt(i_2155251, 1);
        }
    } while(false);
    F.line = 326;
    result_2155249 = o_2155252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_2155249;

}
function validate_utf8_1775229(s_1775231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1775232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1775234 = 0;
    F.line = 173;
    var l_1775235 = (s_1775231 != null ? s_1775231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1775234 < l_1775235)) break L2;
          if ((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1775234 = addInt(i_1775234, 1);
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1775232 = i_1775234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1775234, 1) < l_1775235)) Tmp3 = false; else {              Tmp3 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1775234 = addInt(i_1775234, 2);
          }
          else {
            F.line = 180;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1775234, 2) < l_1775235)) Tmp5 = false; else {              Tmp5 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1775231[chckIndx(addInt(i_1775234, 2), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1775234 = addInt(i_1775234, 3);
          }
          else {
            F.line = 184;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1775234, 3) < l_1775235)) Tmp8 = false; else {              Tmp8 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1775231[chckIndx(addInt(i_1775234, 2), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1775231[chckIndx(addInt(i_1775234, 3), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1775234 = addInt(i_1775234, 4);
          }
          else {
            F.line = 190;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1775232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1775232;

}
function nsuRepeatChar(c_9630048, count_9630049) {
  var result_9630050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9630050 = nimCopy(null, mnewString(count_9630049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9630059 = 0;
      F.line = 66;
      var colontmp__12290669 = 0;
      F.line = 1283;
      colontmp__12290669 = subInt(count_9630049, 1);
      F.line = 77;
      var res_12290670 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12290670 <= colontmp__12290669)) break L3;
            F.line = 1283;
            i_9630059 = res_12290670;
            F.line = 1283;
            result_9630050[chckIndx(i_9630059, 0, (result_9630050 != null ? result_9630050.length : 0)+0-1)-0] = c_9630048;
            F.line = 80;
            res_12290670 = addInt(res_12290670, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9630050;

}
function align_string_10085222(s_10085224, minimum_width_10085225, align_10085226, fill_10085227) {
      var Tmp1;

  var result_10085228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_10085225 == 0)) {
    F.line = 282;
    result_10085228 = nimCopy(null, s_10085224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1775229(s_10085224) == -1)) {
      Tmp1 = nucruneLen(s_10085224);
      }
      else {
      Tmp1 = (s_10085224 != null ? s_10085224.length : 0);
      }
      
      var s_rune_len_10085229 = Tmp1;
      F.line = 285;
      var to_fill_10085230 = subInt(minimum_width_10085225, s_rune_len_10085229);
      if ((to_fill_10085230 <= 0)) {
      F.line = 287;
      result_10085228 = nimCopy(null, s_10085224, NTI112);
      }
      else {
      if (((align_10085226 == 60) || (align_10085226 == 0))) {
      F.line = 289;
      result_10085228 = nimCopy(null, (s_10085224 || []).concat(nsuRepeatChar(fill_10085227, chckRange(to_fill_10085230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_10085226 == 94)) {
      F.line = 291;
      var half_10085231 = divInt(to_fill_10085230, 2);
      F.line = 292;
      result_10085228 = nimCopy(null, (nsuRepeatChar(fill_10085227, chckRange(half_10085231, 0, 2147483647)) || []).concat(s_10085224 || [],nsuRepeatChar(fill_10085227, chckRange(subInt(to_fill_10085230, half_10085231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_10085228 = nimCopy(null, (nsuRepeatChar(fill_10085227, chckRange(to_fill_10085230, 0, 2147483647)) || []).concat(s_10085224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_10085228;

}
function format_value_10130080(result_10130083, result_10130083_Idx, value_10130084, specifier_10130085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_10130086 = parse_standard_format_specifier_10085322(specifier_10130085, 0, false);
    F.line = 503;
    var value_10130087 = nimCopy(null, value_10130084, NTI112);
    F.line = 504;
    switch (spec_10130086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10130086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_10130086.precision == -1))) {
    if ((spec_10130086.precision < nucruneLen(value_10130087))) {
    F.line = 512;
    (value_10130087 == null ? value_10130087 = mnewString(chckRange(rune_offset_2155244(value_10130087, chckRange(spec_10130086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_10130087.length = chckRange(rune_offset_2155244(value_10130087, chckRange(spec_10130086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_10130083[result_10130083_Idx] != null) { result_10130083[result_10130083_Idx] = (result_10130083[result_10130083_Idx]).concat(align_string_10085222(value_10130087, spec_10130086.minimumWidth, spec_10130086.align, spec_10130086.fill)); } else { result_10130083[result_10130083_Idx] = align_string_10085222(value_10130087, spec_10130086.minimumWidth, spec_10130086.align, spec_10130086.fill).slice(); };
  framePtr = F.prev;

  
}
function nsuFindChar(s_9775216, sub_9775217, start_9775218, last_9775219) {
    var Tmp1;

  var result_9775221 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    if ((last_9775219 == 0)) {
    Tmp1 = (s_9775216 != null ? (s_9775216.length-1) : -1);
    }
    else {
    Tmp1 = last_9775219;
    }
    
    var last_9775223 = Tmp1;
    L2: do {
      F.line = 1867;
      var i_9775606 = 0;
      F.line = 66;
      var colontmp__12290687 = 0;
      F.line = 1867;
      colontmp__12290687 = start_9775218;
      F.line = 77;
      var res_12290688 = colontmp__12290687;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12290688 <= last_9775223)) break L4;
            F.line = 1867;
            i_9775606 = res_12290688;
            if ((sub_9775217 == s_9775216[chckIndx(i_9775606, 0, (s_9775216 != null ? s_9775216.length : 0)+0-1)-0])) {
            F.line = 1868;
            result_9775221 = i_9775606;
            break BeforeRet;
            }
            
            F.line = 80;
            res_12290688 = addInt(res_12290688, 1);
          }
      } while(false);
    } while(false);
    F.line = 1869;
    result_9775221 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9775221;

}
function substr_341022(s_341024, first_341025, last_341026) {
  var result_341027 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2943;
    var first_341028 = nimMax(first_341025, 0);
    F.line = 2944;
    var l_341030 = nimMax(addInt(subInt(nimMin(last_341026, (s_341024 != null ? (s_341024.length-1) : -1)), first_341028), 1), 0);
    F.line = 2945;
    result_341027 = nimCopy(null, mnewString(chckRange(l_341030, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2946;
      var i_341039 = 0;
      F.line = 66;
      var colontmp__12290694 = 0;
      F.line = 2946;
      colontmp__12290694 = subInt(l_341030, 1);
      F.line = 77;
      var res_12290695 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12290695 <= colontmp__12290694)) break L3;
            F.line = 2946;
            i_341039 = res_12290695;
            F.line = 2947;
            result_341027[chckIndx(i_341039, 0, (result_341027 != null ? result_341027.length : 0)+0-1)-0] = s_341024[chckIndx(addInt(i_341039, first_341028), 0, (s_341024 != null ? s_341024.length : 0)+0-1)-0];
            F.line = 80;
            res_12290695 = addInt(res_12290695, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_341027;

}
function substr_341053(s_341055, first_341056) {
  var result_341058 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2950;
    result_341058 = nimCopy(null, substr_341022(s_341055, first_341056, (s_341055 != null ? (s_341055.length-1) : -1)), NTI112);
  framePtr = F.prev;

  return result_341058;

}
function nsuInitSkipTable(a_9770081, sub_9770082) {
  var F={procname:"strutils.initSkipTable",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1791;
    var m_9770083 = (sub_9770082 != null ? sub_9770082.length : 0);
    F.line = 1792;
    var i_9770085 = 0;
    L1: do {
      F.line = 1793;
        L2: while (true) {
        if (!(i_9770085 <= 248)) break L2;
          F.line = 1794;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 0), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1795;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 1), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1796;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 2), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1797;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 3), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1798;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 4), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1799;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 5), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1800;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 6), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1801;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 7), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1802;
          i_9770085 = addInt(i_9770085, 8);
        }
    } while(false);
    L3: do {
      F.line = 1804;
      var i_9770101 = 0;
      F.line = 104;
      var colontmp__12290702 = 0;
      F.line = 1804;
      colontmp__12290702 = subInt(m_9770083, 1);
      F.line = 106;
      var i_12290703 = 0;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_12290703 < colontmp__12290702)) break L5;
            F.line = 1804;
            i_9770101 = i_12290703;
            F.line = 1805;
            a_9770081[chckIndx(sub_9770082[chckIndx(i_9770101, 0, (sub_9770082 != null ? sub_9770082.length : 0)+0-1)-0], 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = subInt(subInt(m_9770083, 1), i_9770101);
            F.line = 109;
            i_12290703 = addInt(i_12290703, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function nsuFindStrA(a_9770117, s_9770118, sub_9770119, start_9770120, last_9770121) {
    var Tmp1;

  var result_9770123 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1815;
    if ((last_9770121 == 0)) {
    Tmp1 = (s_9770118 != null ? (s_9770118.length-1) : -1);
    }
    else {
    Tmp1 = last_9770121;
    }
    
    var last_9770125 = Tmp1;
    F.line = 1816;
    var sub_last_9770126 = subInt((sub_9770119 != null ? sub_9770119.length : 0), 1);
    if ((sub_last_9770126 == -1)) {
    F.line = 1821;
    result_9770123 = start_9770120;
    break BeforeRet;
    }
    
    F.line = 1825;
    var skip_9770127 = start_9770120;
    L2: do {
      F.line = 1827;
        L3: while (true) {
        if (!(sub_last_9770126 <= subInt(last_9770125, skip_9770127))) break L3;
          F.line = 1828;
          var i_9775001 = sub_last_9770126;
          L4: do {
            F.line = 1829;
              L5: while (true) {
              if (!(s_9770118[chckIndx(addInt(skip_9770127, i_9775001), 0, (s_9770118 != null ? s_9770118.length : 0)+0-1)-0] == sub_9770119[chckIndx(i_9775001, 0, (sub_9770119 != null ? sub_9770119.length : 0)+0-1)-0])) break L5;
                if ((i_9775001 == 0)) {
                F.line = 1831;
                result_9770123 = skip_9770127;
                break BeforeRet;
                }
                
                F.line = 1832;
                i_9775001 = subInt(i_9775001, 1);
              }
          } while(false);
          F.line = 1833;
          skip_9770127 = addInt(skip_9770127, a_9770117[chckIndx(s_9770118[chckIndx(addInt(skip_9770127, sub_last_9770126), 0, (s_9770118 != null ? s_9770118.length : 0)+0-1)-0], 0, (a_9770117 != null ? a_9770117.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 1834;
    result_9770123 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9770123;

}
function nsuReplaceStr(s_9845016, sub_9845017, by_9845018) {
  var result_9845019 = null;

  var F={procname:"strutils.replace",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2056;
    result_9845019 = nimCopy(null, [], NTI112);
    F.line = 2057;
    var sub_len_9845020 = (sub_9845017 != null ? sub_9845017.length : 0);
    if ((sub_len_9845020 == 0)) {
    F.line = 2059;
    result_9845019 = nimCopy(null, s_9845016, NTI112);
    }
    else {
    if ((sub_len_9845020 == 1)) {
    F.line = 2063;
    var c_9845021 = sub_9845017[chckIndx(0, 0, (sub_9845017 != null ? sub_9845017.length : 0)+0-1)-0];
    F.line = 2064;
    var last_9845023 = (s_9845016 != null ? (s_9845016.length-1) : -1);
    F.line = 2065;
    var i_9845025 = 0;
    L1: do {
      F.line = 2066;
        L2: while (true) {
        if (!true) break L2;
          F.line = 2067;
          var j_9845026 = nsuFindChar(s_9845016, c_9845021, chckRange(i_9845025, 0, 2147483647), last_9845023);
          if ((j_9845026 < 0)) {
          F.line = 2068;
          break L1;
          }
          
          F.line = 2069;
          if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341022(s_9845016, i_9845025, subInt(j_9845026, 1))); } else { result_9845019 = substr_341022(s_9845016, i_9845025, subInt(j_9845026, 1)).slice(); };
          F.line = 2070;
          if (result_9845019 != null) { result_9845019 = (result_9845019).concat(by_9845018); } else { result_9845019 = by_9845018.slice(); };
          F.line = 2071;
          i_9845025 = addInt(j_9845026, sub_len_9845020);
        }
    } while(false);
    F.line = 2073;
    if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341053(s_9845016, i_9845025)); } else { result_9845019 = substr_341053(s_9845016, i_9845025).slice(); };
    }
    else {
      F.line = 2075;
      var a_9845027 = [new Int32Array(256)];
      F.line = 2076;
      nsuInitSkipTable(a_9845027[0], sub_9845017);
      F.line = 2077;
      var last_9845030 = (s_9845016 != null ? (s_9845016.length-1) : -1);
      F.line = 2078;
      var i_9845032 = 0;
      L3: do {
        F.line = 2079;
          L4: while (true) {
          if (!true) break L4;
            F.line = 2080;
            var j_9845033 = nsuFindStrA(a_9845027[0], s_9845016, sub_9845017, chckRange(i_9845032, 0, 2147483647), last_9845030);
            if ((j_9845033 < 0)) {
            F.line = 2081;
            break L3;
            }
            
            F.line = 2082;
            if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341022(s_9845016, i_9845032, subInt(j_9845033, 1))); } else { result_9845019 = substr_341022(s_9845016, i_9845032, subInt(j_9845033, 1)).slice(); };
            F.line = 2083;
            if (result_9845019 != null) { result_9845019 = (result_9845019).concat(by_9845018); } else { result_9845019 = by_9845018.slice(); };
            F.line = 2084;
            i_9845032 = addInt(j_9845033, sub_len_9845020);
          }
      } while(false);
      F.line = 2086;
      if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341053(s_9845016, i_9845032)); } else { result_9845019 = substr_341053(s_9845016, i_9845032).slice(); };
    }
    }
  framePtr = F.prev;

  return result_9845019;

}
function scope_12043110(node_12043113) {
  var F={procname:"css.scope",prev:framePtr,filename:"css.nim",line:0};
  framePtr = F;
    F.line = 11;
    var comp_12043138 = to_hex_12043115(next_11257258(rand_12043079[0]));
    L1: do {
      F.line = 12;
      var element_12050214 = null;
      F.line = 182;
      var colontmp__12290596 = null;
      F.line = 12;
      colontmp__12290596 = node_12043113.querySelectorAll("*");
      F.line = 184;
      var i_12290598 = 0;
      F.line = 185;
      var l_12290599 = (colontmp__12290596 != null ? colontmp__12290596.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12290598 < l_12290599)) break L3;
            F.line = 12;
            element_12050214 = colontmp__12290596[chckIndx(i_12290598, 0, (colontmp__12290596 != null ? colontmp__12290596.length : 0)+0-1)-0];
            F.line = 13;
            F.line = 13;
            var fmt_res_12050218 = [mnewString(0)];
            F.line = 13;
            if (fmt_res_12050218[0] != null) { fmt_res_12050218[0] = (fmt_res_12050218[0]).concat(makeNimstrLit("component-")); } else { fmt_res_12050218[0] = makeNimstrLit("component-"); };
            F.line = 13;
            format_value_10130080(fmt_res_12050218, 0, comp_12043138, []);
            element_12050214.classList.add(toJSStr(fmt_res_12050218[0]));
            F.line = 188;
            i_12290598 = addInt(i_12290598, 1);
            if (!(((colontmp__12290596 != null ? colontmp__12290596.length : 0) == l_12290599))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 14;
      var style_12055008 = null;
      F.line = 182;
      var colontmp__12290602 = null;
      F.line = 14;
      colontmp__12290602 = node_12043113.querySelectorAll("style[scope]");
      F.line = 184;
      var i_12290603 = 0;
      F.line = 185;
      var l_12290604 = (colontmp__12290602 != null ? colontmp__12290602.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_12290603 < l_12290604)) break L6;
            F.line = 14;
            style_12055008 = colontmp__12290602[chckIndx(i_12290603, 0, (colontmp__12290602 != null ? colontmp__12290602.length : 0)+0-1)-0];
            F.line = 15;
            var scope_12055014 = to_hex_12043115(next_11257258(rand_12043079[0]));
            F.line = 16;
            var fmt_res_12060004 = [mnewString(0)];
            F.line = 16;
            if (fmt_res_12060004[0] != null) { fmt_res_12060004[0] = (fmt_res_12060004[0]).concat(makeNimstrLit("scope-")); } else { fmt_res_12060004[0] = makeNimstrLit("scope-"); };
            F.line = 16;
            format_value_10130080(fmt_res_12060004, 0, scope_12055014, []);
            (style_12055008.parentNode).classList.add((toJSStr(fmt_res_12060004[0])));
            F.line = 21;
            F.line = 20;
            var fmt_res_12090005 = [mnewString(0)];
            F.line = 20;
            if (fmt_res_12090005[0] != null) { fmt_res_12090005[0] = (fmt_res_12090005[0]).concat(makeNimstrLit(".scope-")); } else { fmt_res_12090005[0] = makeNimstrLit(".scope-"); };
            F.line = 20;
            format_value_10130080(fmt_res_12090005, 0, scope_12055014, []);
            F.line = 21;
            var fmt_res_12095002 = [mnewString(0)];
            F.line = 21;
            if (fmt_res_12095002[0] != null) { fmt_res_12095002[0] = (fmt_res_12095002[0]).concat(makeNimstrLit(".component-")); } else { fmt_res_12095002[0] = makeNimstrLit(".component-"); };
            F.line = 21;
            format_value_10130080(fmt_res_12095002, 0, comp_12043138, []);
            style_12055008.textContent = toJSStr(nsuReplaceStr(nsuReplaceStr(cstrToNimstr(style_12055008.textContent), makeNimstrLit(":scope"), fmt_res_12090005[0]), makeNimstrLit(":component"), fmt_res_12095002[0]));
            F.line = 188;
            i_12290603 = addInt(i_12290603, 1);
            if (!(((colontmp__12290602 != null ? colontmp__12290602.length : 0) == l_12290604))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
async function fetch_template_12170001(rel_path_12170003, template_selector_12170004, css_12170005) {
  var result_12170010 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 14;
    var tmpl_12170035 = (await fetch_template_12110001(rel_path_12170003));
    F.line = 15;
    var node_12170036 = tmpl_12170035.querySelector(toJSStr(template_selector_12170004)).content;
    if (css_12170005) {
    F.line = 17;
    scope_12043110(node_12170036);
    }
    
    F.line = 18;
    result_12170010 = node_12170036;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12170010;

}
function new_12280207() {
  var result_12280211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12280401 = null;
    F.line = 851;
    r_12280401 = {m_type: NTI12171157, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_12280211 = r_12280401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12280211;

}
function add_12290216(x_12290221, x_12290221_Idx, y_12290223) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_12290229 = (x_12290221[x_12290221_Idx] != null ? x_12290221[x_12290221_Idx].length : 0);
    F.line = 1209;
    if (x_12290221[x_12290221_Idx] === null) x_12290221[x_12290221_Idx] = [];
               if (x_12290221[x_12290221_Idx].length < (Tmp1 = chckRange(addInt(xl_12290229, (y_12290223 != null ? y_12290223.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_12290221[x_12290221_Idx].length;i<Tmp1;++i) x_12290221[x_12290221_Idx].push(null); }
               else { x_12290221[x_12290221_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_12290254 = 0;
      F.line = 66;
      var colontmp__12290715 = 0;
      F.line = 1210;
      colontmp__12290715 = (y_12290223 != null ? (y_12290223.length-1) : -1);
      F.line = 77;
      var res_12290716 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12290716 <= colontmp__12290715)) break L4;
            F.line = 1210;
            i_12290254 = res_12290716;
            F.line = 1210;
            x_12290221[x_12290221_Idx][chckIndx(addInt(xl_12290229, i_12290254), 0, (x_12290221[x_12290221_Idx] != null ? x_12290221[x_12290221_Idx].length : 0)+0-1)-0] = y_12290223[chckIndx(i_12290254, 0, (y_12290223 != null ? y_12290223.length : 0)+0-1)-0];
            F.line = 80;
            res_12290716 = addInt(res_12290716, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_12280452(cfgs_12280457, node_12280458) {
  var result_12280461 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 541;
    result_12280461[0] = nimCopy(null, [], NTI12280476);
    L1: do {
      F.line = 542;
      var cfg_12290214 = null;
      F.line = 184;
      var i_12290711 = 0;
      F.line = 185;
      var l_12290712 = (cfgs_12280457 != null ? cfgs_12280457.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12290711 < l_12290712)) break L3;
            F.line = 542;
            cfg_12290214 = cfgs_12280457[chckIndx(i_12290711, 0, (cfgs_12280457 != null ? cfgs_12280457.length : 0)+0-1)-0];
            F.line = 543;
            add_12290216(result_12280461, 0, cfg_12290214.compile(node_12280458));
            F.line = 188;
            i_12290711 = addInt(i_12290711, 1);
            if (!(((cfgs_12280457 != null ? cfgs_12280457.length : 0) == l_12290712))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12280461[0];

}
function compile_12270747(cfg_12270751, node_12270752) {
  var result_12270754 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_12270752 == null)))) {
    F.line = 548;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(548, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 549;
    result_12270754 = new_12280207();
    F.line = 550;
    result_12270754.config = cfg_12270751.config;
    F.line = 551;
    result_12270754.original_node = node_12270752;
    F.line = 552;
    result_12270754.node = node_12270752.cloneNode(true);
    F.line = 554;
    result_12270754.config(result_12270754);
    F.line = 555;
    result_12270754.matches = nimCopy(null, compile_12280452(result_12270754.cmatches, result_12270754.node), NTI12280459);
  framePtr = F.prev;

  return result_12270754;

}
function new_12270283() {
  var result_12270287 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12270401 = null;
    F.line = 851;
    r_12270401 = {m_type: NTI12171161, cmatches: null, config: null};
    F.line = 852;
    result_12270287 = r_12270401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12270287;

}
function create_12270268(config_12270274) {
  var result_12270276 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 269;
    result_12270276 = new_12270283();
    F.line = 270;
    result_12270276.config = config_12270274;
  framePtr = F.prev;

  return result_12270276;

}
function compile_12262722(node_12262727, configurator_12262733) {
  var result_12262735 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 742;
    if (!(!((node_12262727 == null)))) {
    F.line = 744;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(744, 10) `\x0Anot (node == nil)` "));
    }
    
    result_12262735 = compile_12270747(create_12270268(configurator_12262733), node_12262727);
  framePtr = F.prev;

  return result_12262735;

}
function refresh_12250299(c_12250304, refresh_12250306) {
  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 416;
    if (c_12250304.refresh != null) { c_12250304.refresh.push(refresh_12250306); } else { c_12250304.refresh = [refresh_12250306]; };
  framePtr = F.prev;

  
}
function add_12205218(x_12205223, x_12205223_Idx, y_12205225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_12205231 = (x_12205223[x_12205223_Idx] != null ? x_12205223[x_12205223_Idx].length : 0);
    F.line = 1209;
    if (x_12205223[x_12205223_Idx] === null) x_12205223[x_12205223_Idx] = [];
               if (x_12205223[x_12205223_Idx].length < (Tmp1 = chckRange(addInt(xl_12205231, (y_12205225 != null ? y_12205225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_12205223[x_12205223_Idx].length;i<Tmp1;++i) x_12205223[x_12205223_Idx].push(null); }
               else { x_12205223[x_12205223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_12205256 = 0;
      F.line = 66;
      var colontmp__12290748 = 0;
      F.line = 1210;
      colontmp__12290748 = (y_12205225 != null ? (y_12205225.length-1) : -1);
      F.line = 77;
      var res_12290749 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12290749 <= colontmp__12290748)) break L4;
            F.line = 1210;
            i_12205256 = res_12290749;
            F.line = 1210;
            x_12205223[x_12205223_Idx][chckIndx(addInt(xl_12205231, i_12205256), 0, (x_12205223[x_12205223_Idx] != null ? x_12205223[x_12205223_Idx].length : 0)+0-1)-0] = y_12205225[chckIndx(i_12205256, 0, (y_12205225 != null ? y_12205225.length : 0)+0-1)-0];
            F.line = 80;
            res_12290749 = addInt(res_12290749, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_12185899(cfg_12185904, node_12185905) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_12185967 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 502;
    result_12185967 = nimCopy(null, [], NTI12185982);
    F.line = 503;
    var matched_nodes_12185983 = node_12185905.querySelectorAll(toJSStr(cfg_12185904.selector));
    if (((matched_nodes_12185983 != null ? matched_nodes_12185983.length : 0) == 0)) {
    F.line = 505;
    var selector_12185989 = nimCopy(null, cfg_12185904.selector, NTI112);
    F.line = 506;
    var fmt_res_12185990 = [mnewString(0)];
    F.line = 506;
    if (fmt_res_12185990[0] != null) { fmt_res_12185990[0] = (fmt_res_12185990[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_12185990[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 506;
    format_value_10130080(fmt_res_12185990, 0, selector_12185989, []);
    F.line = 506;
    if (fmt_res_12185990[0] != null) { fmt_res_12185990[0] = (fmt_res_12185990[0]).concat(makeNimstrLit("\'")); } else { fmt_res_12185990[0] = makeNimstrLit("\'"); };
    F.line = 506;
    raiseException({message: nimCopy(null, fmt_res_12185990[0], NTI112), parent: null, m_type: NTI10221017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 508;
      var matched_node_12195008 = null;
      F.line = 184;
      var i_12290743 = 0;
      F.line = 185;
      var l_12290744 = (matched_nodes_12185983 != null ? matched_nodes_12185983.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12290743 < l_12290744)) break L3;
            F.line = 508;
            matched_node_12195008 = matched_nodes_12185983[chckIndx(i_12290743, 0, (matched_nodes_12185983 != null ? matched_nodes_12185983.length : 0)+0-1)-0];
            F.line = 509;
            var match_12195016 = {refresh: nimCopy(null, cfg_12185904.refresh, NTI12181837), init: nimCopy(null, cfg_12185904.init, NTI10221355), iter: cfg_12185904.iter, node: matched_node_12195008, selectorKind: 0, serial: 0, value: 0, convert: {kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null, selector: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 514;
            match_12195016.node = matched_node_12195008;
            if (match_12195016.iter) {
            var Tmp4 = match_12195016;
            if (ConstSet9[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 516;
            var Tmp5 = cfg_12185904;
            if (ConstSet10[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI12181975);
            var Tmp6 = match_12195016;
            if (ConstSet11[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 517;
            Tmp6.anchor = matched_node_12195008.ownerDocument.createComment(matched_node_12195008.outerHTML);
            var Tmp7 = match_12195016;
            if (ConstSet12[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 518;
            Tmp7.mount_template = cfg_12185904.mount;
            var Tmp8 = match_12195016;
            if (ConstSet13[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 519;
            Tmp8.match_templates = nimCopy(null, cfg_12185904.cmatches, NTI12181880);
            var Tmp9 = match_12195016;
            if (ConstSet14[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 520;
            Tmp9.items = nimCopy(null, [], NTI12195042);
            F.line = 521;
            var Tmp10 = match_12195016;
            if (ConstSet15[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_12195008.parentNode.replaceChild(Tmp10.anchor, matched_node_12195008);
            }
            else {
              var Tmp11 = match_12195016;
              if (ConstSet16[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 523;
              var Tmp12 = cfg_12185904;
              if (ConstSet17[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 524;
              var Tmp13 = match_12195016;
              if (ConstSet18[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_12195016;
                if (ConstSet19[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 526;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_12195016;
              if (ConstSet20[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 529;
              var Tmp16 = cfg_12185904;
              if (ConstSet21[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI12181914);
              var Tmp17 = match_12195016;
              if (ConstSet22[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 530;
              Tmp17.matches = nimCopy(null, [], NTI12195069);
              var Tmp18 = match_12195016;
              if (ConstSet23[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 531;
              Tmp18.inited = false;
              var Tmp19 = match_12195016;
              if (ConstSet24[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 532;
              Tmp19.mount = null;
              if (!((cfg_12185904.mount == null))) {
              var Tmp20 = match_12195016;
              if (ConstSet25[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 534;
              Tmp20.mount_source = cfg_12185904.mount;
              }
              else {
                L21: do {
                  F.line = 536;
                  var submatch_12205214 = null;
                  F.line = 184;
                  var i_12290740 = 0;
                  F.line = 185;
                  var l_12290741 = (cfg_12185904.cmatches != null ? cfg_12185904.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_12290740 < l_12290741)) break L23;
                        F.line = 536;
                        submatch_12205214 = cfg_12185904.cmatches[chckIndx(i_12290740, 0, (cfg_12185904.cmatches != null ? cfg_12185904.cmatches.length : 0)+0-1)-0];
                        F.line = 537;
                        var Tmp24 = match_12195016;
                        if (ConstSet26[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_12205218(Tmp24, "matches", submatch_12205214.compile(matched_node_12195008));
                        F.line = 188;
                        i_12290740 = addInt(i_12290740, 1);
                        if (!(((cfg_12185904.cmatches != null ? cfg_12185904.cmatches.length : 0) == l_12290741))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 538;
            if (result_12185967 != null) { result_12185967.push(match_12195016); } else { result_12185967 = [match_12195016]; };
            F.line = 188;
            i_12290743 = addInt(i_12290743, 1);
            if (!(((matched_nodes_12185983 != null ? matched_nodes_12185983.length : 0) == l_12290744))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12185967;

}
function compile_12216102(cfgs_12216107, node_12216108) {
  var result_12216111 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 541;
    result_12216111[0] = nimCopy(null, [], NTI12216126);
    L1: do {
      F.line = 542;
      var cfg_12216133 = null;
      F.line = 184;
      var i_12290789 = 0;
      F.line = 185;
      var l_12290790 = (cfgs_12216107 != null ? cfgs_12216107.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12290789 < l_12290790)) break L3;
            F.line = 542;
            cfg_12216133 = cfgs_12216107[chckIndx(i_12290789, 0, (cfgs_12216107 != null ? cfgs_12216107.length : 0)+0-1)-0];
            F.line = 543;
            add_12205218(result_12216111, 0, cfg_12216133.compile(node_12216108));
            F.line = 188;
            i_12290789 = addInt(i_12290789, 1);
            if (!(((cfgs_12216107 != null ? cfgs_12216107.length : 0) == l_12290790))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12216111[0];

}
function create_iter_item_12216038(match_12216043, parent_node_12216044) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_12216046 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 563;
    var comp_12216051 = null;
    F.line = 564;
    var node_12216052 = null;
      var Tmp1 = match_12216043;
      if (ConstSet40[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 566;
    var Tmp2 = match_12216043;
    if (ConstSet41[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_12216051 = Tmp2.mount_template.clone();
    F.line = 567;
    node_12216052 = comp_12216051.node();
    }
    else {
      F.line = 569;
      node_12216052 = match_12216043.node.cloneNode(true);
    }
    
    F.line = 570;
    var Tmp3 = match_12216043;
    if (ConstSet42[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_12216046 = {serial: 0, mount: comp_12216051, node: node_12216052, matches: compile_12216102(Tmp3.match_templates, node_12216052)};
    F.line = 575;
    var Tmp4 = match_12216043;
    if (ConstSet43[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_12216044.insertBefore(node_12216052, Tmp4.anchor);
  framePtr = F.prev;

  return result_12216046;

}
function detach_12245488(iter_item_12245492, parent_node_12245493) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 579;
    parent_node_12245493.removeChild(iter_item_12245492.node);
  framePtr = F.prev;

  
}
function pop_12245224(s_12245229, s_12245229_Idx) {
  var result_12245230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_12245236 = subInt((s_12245229[s_12245229_Idx] != null ? s_12245229[s_12245229_Idx].length : 0), 1);
    F.line = 1784;
    result_12245230 = s_12245229[s_12245229_Idx][chckIndx(l_12245236, 0, (s_12245229[s_12245229_Idx] != null ? s_12245229[s_12245229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_12245229[s_12245229_Idx] === null) s_12245229[s_12245229_Idx] = [];
               if (s_12245229[s_12245229_Idx].length < chckRange(l_12245236, 0, 2147483647)) { for (var i=s_12245229[s_12245229_Idx].length;i<chckRange(l_12245236, 0, 2147483647);++i) s_12245229[s_12245229_Idx].push(null); }
               else { s_12245229[s_12245229_Idx].length = chckRange(l_12245236, 0, 2147483647); };
  framePtr = F.prev;

  return result_12245230;

}
function update_12215915(match_12215920, init_val_12215921, set_val_12215923, refresh_12215924) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          var Tmp16;
            function HEX3Aanonymous_12215994(new_value_12215996) {
              var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 617;
                it_12215985.set(val_12215925, 0, new_value_12215996);
                if (!((set_val_12215923 == null))) {
                F.line = 618;
                set_val_12215923(val_12215925[0]);
                }
                
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
          var Tmp34;
          var Tmp35;
          var Tmp36;
      var Tmp37;
        var Tmp38;
        var Tmp39;
        var Tmp40;
        var Tmp41;
        var Tmp42;
          var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
          var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        function HEX3Aanonymous_12245553(val2_12245555) {
          var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 690;
            obj_12245539.set(val_12215925, 0, val2_12245555);
            if (!((set_val_12215923 == null))) {
            F.line = 691;
            set_val_12215923(val_12215925[0]);
            }
            
          framePtr = F.prev;

          
        }
        var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
      var Tmp60;
      var Tmp61;
      var Tmp65;
        var Tmp66;
          var Tmp67;
      var Tmp68;
      var Tmp69;
        var Tmp71;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 582;
    var val_12215925 = [init_val_12215921];
    if (match_12215920.iter) {
    F.line = 585;
    var i_12215927 = 0;
    F.line = 586;
    var Tmp1 = match_12215920;
    if (ConstSet27[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_12215930 = Tmp1.anchor.parentNode;
    F.line = 587;
    var it_simple_12215935 = null;
    F.line = 588;
    var it_serial_12215940 = null;
    F.line = 589;
    var it_select_12215948 = null;
    F.line = 590;
    var Tmp2 = match_12215920;
    if (ConstSet28[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 592;
      var Tmp3 = match_12215920;
      if (ConstSet30[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet29[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_12215935 = Tmp4.simple(val_12215925[0]);
      break;
    case 1:
      F.line = 594;
      var Tmp5 = match_12215920;
      if (ConstSet32[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet31[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_12215940 = Tmp6.serial(val_12215925[0]);
      break;
    case 2:
      F.line = 596;
      var Tmp7 = match_12215920;
      if (ConstSet34[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet33[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_12215948 = Tmp8.selector(val_12215925[0]);
      break;
    }
    L9: do {
      F.line = 598;
        L10: while (true) {
        if (!true) break L10;
          F.line = 599;
            var Tmp12 = match_12215920;
            if (ConstSet35[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12215927 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_12215920;
          if (ConstSet36[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_12215927, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_12215973 = [Tmp11];
          F.line = 600;
          var changed_12215974 = refresh_12215924;
          F.line = 601;
          var item_12215975 = 0;
          F.line = 602;
          var set_12215979 = null;
          F.line = 603;
          var Tmp16 = match_12215920;
          if (ConstSet37[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 605;
            var it_12215982 = it_simple_12215935();
            if ((it_12215982["Field0"] == false)) {
            F.line = 606;
            break L9;
            }
            
            F.line = 607;
            item_12215975 = it_12215982["Field1"];
            break;
          case 1:
            F.line = 609;
            var it_12215984 = it_serial_12215940(serial_12215973, 0);
            if ((it_12215984["Field0"] == false)) {
            F.line = 610;
            break L9;
            }
            
            F.line = 611;
            item_12215975 = it_12215984["Field1"];
            break;
          case 2:
            F.line = 613;
            var it_12215985 = it_select_12215948();
            if ((it_12215985 == null)) {
            F.line = 614;
            break L9;
            }
            
            F.line = 615;
            item_12215975 = it_12215985.get(val_12215925[0]);
            F.line = 616;
            set_12215979 = HEX3Aanonymous_12215994;
            break;
          }
          F.line = 620;
          var iter_item_12216021 = null;
          F.line = 621;
          var inited_12216022 = false;
            var Tmp17 = match_12215920;
            if (ConstSet38[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12215927 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 625;
          var Tmp19 = match_12215920;
          if (ConstSet39[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_12216021 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_12215927, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 626;
          inited_12216022 = true;
          F.line = 627;
          changed_12215974 = true;
          }
          else {
            F.line = 629;
            iter_item_12216021 = create_iter_item_12216038(match_12215920, parent_node_12215930);
            F.line = 630;
            var Tmp21 = match_12215920;
            if (ConstSet44[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_12216021); } else { Tmp22 = [iter_item_12216021]; };
            F.line = 631;
            inited_12216022 = false;
            if (!((serial_12215973[0] == iter_item_12216021.serial))) {
            F.line = 633;
            changed_12215974 = true;
            }
            
          }
          
          if (!(inited_12216022)) {
          L23: do {
            F.line = 637;
            var init_proc_12225214 = null;
            F.line = 184;
            var i_12290758 = 0;
            F.line = 185;
            var l_12290759 = (match_12215920.init != null ? match_12215920.init.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_12290758 < l_12290759)) break L25;
                  F.line = 637;
                  init_proc_12225214 = match_12215920.init[chckIndx(i_12290758, 0, (match_12215920.init != null ? match_12215920.init.length : 0)+0-1)-0];
                  F.line = 638;
                  init_proc_12225214(iter_item_12216021.node);
                  F.line = 188;
                  i_12290758 = addInt(i_12290758, 1);
                  if (!(((match_12215920.init != null ? match_12215920.init.length : 0) == l_12290759))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_12216021.mount == null))) {
          F.line = 642;
          iter_item_12216021.mount.update(item_12215975, set_12215979, refresh_12215924);
          }
          
          L26: do {
            F.line = 645;
            var submatch_12235214 = null;
            F.line = 184;
            var i_12290763 = 0;
            F.line = 185;
            var l_12290764 = (iter_item_12216021.matches != null ? iter_item_12216021.matches.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_12290763 < l_12290764)) break L28;
                  F.line = 645;
                  submatch_12235214 = iter_item_12216021.matches[chckIndx(i_12290763, 0, (iter_item_12216021.matches != null ? iter_item_12216021.matches.length : 0)+0-1)-0];
                  F.line = 646;
                  submatch_12235214.update(item_12215975, set_12215979, refresh_12215924);
                  F.line = 188;
                  i_12290763 = addInt(i_12290763, 1);
                  if (!(((iter_item_12216021.matches != null ? iter_item_12216021.matches.length : 0) == l_12290764))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 649;
          var e_12235219 = {node: iter_item_12216021.node, data: item_12215975, init: !(inited_12216022), set: set_12215979};
          L29: do {
            F.line = 654;
            var refresh_proc_12245214 = null;
            F.line = 184;
            var i_12290769 = 0;
            F.line = 185;
            var l_12290770 = (match_12215920.refresh != null ? match_12215920.refresh.length : 0);
            L30: do {
              F.line = 186;
                L31: while (true) {
                if (!(i_12290769 < l_12290770)) break L31;
                  F.line = 654;
                  refresh_proc_12245214 = match_12215920.refresh[chckIndx(i_12290769, 0, (match_12215920.refresh != null ? match_12215920.refresh.length : 0)+0-1)-0];
                  F.line = 655;
                  refresh_proc_12245214(e_12235219);
                  F.line = 188;
                  i_12290769 = addInt(i_12290769, 1);
                  if (!(((match_12215920.refresh != null ? match_12215920.refresh.length : 0) == l_12290770))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 657;
          i_12215927 = addInt(i_12215927, 1);
        }
    } while(false);
    L32: do {
      F.line = 660;
        L33: while (true) {
          var Tmp34 = match_12215920;
          if (ConstSet45[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_12215927 < ((Tmp35 = Tmp34.items, Tmp35) != null ? Tmp35.length : 0))) break L33;
          F.line = 661;
          var Tmp36 = match_12215920;
          if (ConstSet46[Tmp36.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_12245488(pop_12245224(Tmp36, "items"), parent_node_12215930);
        }
    } while(false);
    }
    else {
      F.line = 663;
      var changed_12245507 = refresh_12215924;
      F.line = 664;
      var node_12245508 = match_12215920.node;
      F.line = 665;
      var converted_val_12245509 = 0;
      F.line = 666;
      var set_12245513 = null;
      F.line = 668;
      var Tmp37 = match_12215920;
      if (ConstSet47[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp37.convert.kind) {
      case 0:
        F.line = 670;
        var Tmp38 = match_12215920;
        if (ConstSet49[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet48[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12245509 = Tmp39.simple(val_12215925[0]);
        F.line = 671;
        changed_12245507 = true;
        break;
      case 1:
        F.line = 673;
        var Tmp40 = match_12215920;
        if (ConstSet50[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_12245521 = [Tmp40.serial];
        F.line = 674;
        var Tmp41 = match_12215920;
        if (ConstSet52[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet51[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12245509 = Tmp42.serial(val_12215925[0], serial_12245521, 0);
          var Tmp43 = match_12215920;
          if (ConstSet53[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_12245521[0] == Tmp43.serial))) {
        F.line = 676;
        changed_12245507 = true;
        }
        
        break;
      case 2:
        F.line = 678;
        var Tmp44 = match_12215920;
        if (ConstSet55[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp45 = Tmp44.convert;
        if (ConstSet54[Tmp45.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp46 = match_12215920;
        if (ConstSet56[Tmp46.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_12245533 = Tmp45.compare(val_12215925[0], Tmp46.value);
        F.line = 679;
        converted_val_12245509 = res_12245533.Field0;
        var Tmp47 = match_12215920;
        if (ConstSet57[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 680;
        Tmp47.value = res_12245533.Field0;
        if (res_12245533.Field1) {
        F.line = 682;
        changed_12245507 = true;
        }
        
        break;
      case 3:
        F.line = 684;
        var Tmp48 = match_12215920;
        if (ConstSet59[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet58[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_12245539 = Tmp49.obj;
        F.line = 685;
        converted_val_12245509 = obj_12245539.get(val_12215925[0]);
        F.line = 686;
        changed_12245507 = true;
          var Tmp50 = match_12215920;
          if (ConstSet61[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          var Tmp51 = Tmp50.convert;
          if (ConstSet60[Tmp51.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        if (!((Tmp51.eql == null))) {
        F.line = 688;
        var Tmp52 = match_12215920;
        if (ConstSet63[Tmp52.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp53 = Tmp52.convert;
        if (ConstSet62[Tmp53.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp54 = match_12215920;
        if (ConstSet64[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_12245507 = !(Tmp53.eql(converted_val_12245509, Tmp54.value));
        }
        
        F.line = 689;
        set_12245513 = HEX3Aanonymous_12245553;
        break;
      }
        var Tmp56 = match_12215920;
        if (ConstSet65[Tmp56.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp56.mount == null)) Tmp55 = false; else {          var Tmp57 = match_12215920;
          if (ConstSet66[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp55 = !((Tmp57.mount_source == null));        }      if (Tmp55) {
      var Tmp58 = match_12215920;
      if (ConstSet67[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 696;
      var Tmp59 = match_12215920;
      if (ConstSet68[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp58.mount = Tmp59.mount_source.clone();
      F.line = 697;
      var Tmp60 = match_12215920;
      if (ConstSet69[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12245508.parentNode.replaceChild(Tmp60.mount.node(), node_12245508);
      }
      
      F.line = 700;
      var Tmp61 = match_12215920;
      if (ConstSet70[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_12245604 = Tmp61.inited;
      if (!(inited_12245604)) {
      L62: do {
        F.line = 702;
        var init_proc_12245611 = null;
        F.line = 184;
        var i_12290774 = 0;
        F.line = 185;
        var l_12290775 = (match_12215920.init != null ? match_12215920.init.length : 0);
        L63: do {
          F.line = 186;
            L64: while (true) {
            if (!(i_12290774 < l_12290775)) break L64;
              F.line = 702;
              init_proc_12245611 = match_12215920.init[chckIndx(i_12290774, 0, (match_12215920.init != null ? match_12215920.init.length : 0)+0-1)-0];
              F.line = 703;
              init_proc_12245611(node_12245508);
              F.line = 188;
              i_12290774 = addInt(i_12290774, 1);
              if (!(((match_12215920.init != null ? match_12215920.init.length : 0) == l_12290775))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp65 = match_12215920;
      if (ConstSet71[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 704;
      Tmp65.inited = true;
      F.line = 705;
      changed_12245507 = true;
      }
      
        if (!changed_12245507) Tmp66 = false; else {          var Tmp67 = match_12215920;
          if (ConstSet72[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp66 = !((Tmp67.mount == null));        }      if (Tmp66) {
      F.line = 709;
      var Tmp68 = match_12215920;
      if (ConstSet73[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12245508 = Tmp68.mount.node();
      F.line = 710;
      var Tmp69 = match_12215920;
      if (ConstSet74[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp69.mount.update(converted_val_12245509, set_12245513, refresh_12215924);
      }
      
      if (changed_12245507) {
      L70: do {
        F.line = 714;
        var submatch_12245636 = null;
        F.line = 182;
        var colontmp__12290778 = null;
        F.line = 714;
        var Tmp71 = match_12215920;
        if (ConstSet75[Tmp71.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__12290778 = Tmp71.matches;
        F.line = 184;
        var i_12290779 = 0;
        F.line = 185;
        var l_12290780 = (colontmp__12290778 != null ? colontmp__12290778.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_12290779 < l_12290780)) break L73;
              F.line = 714;
              submatch_12245636 = colontmp__12290778[chckIndx(i_12290779, 0, (colontmp__12290778 != null ? colontmp__12290778.length : 0)+0-1)-0];
              F.line = 715;
              submatch_12245636.update(converted_val_12245509, set_12245513, refresh_12215924);
              F.line = 188;
              i_12290779 = addInt(i_12290779, 1);
              if (!(((colontmp__12290778 != null ? colontmp__12290778.length : 0) == l_12290780))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_12245507) {
      F.line = 718;
      var e_12245641 = {node: node_12245508, data: converted_val_12245509, init: !(inited_12245604), set: set_12245513};
      L74: do {
        F.line = 723;
        var refresh_proc_12245648 = null;
        F.line = 184;
        var i_12290784 = 0;
        F.line = 185;
        var l_12290785 = (match_12215920.refresh != null ? match_12215920.refresh.length : 0);
        L75: do {
          F.line = 186;
            L76: while (true) {
            if (!(i_12290784 < l_12290785)) break L76;
              F.line = 723;
              refresh_proc_12245648 = match_12215920.refresh[chckIndx(i_12290784, 0, (match_12215920.refresh != null ? match_12215920.refresh.length : 0)+0-1)-0];
              F.line = 724;
              refresh_proc_12245648(e_12245641);
              F.line = 188;
              i_12290784 = addInt(i_12290784, 1);
              if (!(((match_12215920.refresh != null ? match_12215920.refresh.length : 0) == l_12290785))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_12215889(match_12215894) {
    function HEX3Aanonymous_12215901(data_12215903, set_12215908, refresh_12215909) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 783;
        update_12215915(match_12215894, data_12215903, set_12215908, refresh_12215909);
      framePtr = F.prev;

      
    }

  var result_12215896 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 782;
    result_12215896 = {update: HEX3Aanonymous_12215901};
  framePtr = F.prev;

  return result_12215896;

}
function as_interface_12185565(config_12185570) {
    function HEX3Aanonymous_12185577(node_12185579) {
      var result_12185585 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 789;
        result_12185585 = nimCopy(null, [], NTI12185600);
        L1: do {
          F.line = 790;
          var comp_match_12215214 = null;
          F.line = 182;
          var colontmp__12290730 = null;
          F.line = 790;
          colontmp__12290730 = compile_12185899(config_12185570, node_12185579);
          F.line = 184;
          var i_12290732 = 0;
          F.line = 185;
          var l_12290733 = (colontmp__12290730 != null ? colontmp__12290730.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12290732 < l_12290733)) break L3;
                F.line = 790;
                comp_match_12215214 = colontmp__12290730[chckIndx(i_12290732, 0, (colontmp__12290730 != null ? colontmp__12290730.length : 0)+0-1)-0];
                F.line = 791;
                if (result_12185585 != null) { result_12185585.push(as_interface_12215889(comp_match_12215214)); } else { result_12185585 = [as_interface_12215889(comp_match_12215214)]; };
                F.line = 188;
                i_12290732 = addInt(i_12290732, 1);
                if (!(((colontmp__12290730 != null ? colontmp__12290730.length : 0) == l_12290733))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_12185585;

    }

  var result_12185572 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 787;
    result_12185572 = {compile: HEX3Aanonymous_12185577};
  framePtr = F.prev;

  return result_12185572;

}
function match_12184838(c_12184843, selector_12184844, convert_12184846, actions_12184852) {
  var result_12184854 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 290;
    result_12184854 = {selector: nimCopy(null, selector_12184844, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_12184846, NTI12181914), cmatches: null, iterate: {kind: 0, simple: null, serial: null, selector: null}};
    F.line = 297;
    if (c_12184843.cmatches != null) { c_12184843.cmatches.push(as_interface_12185565(result_12184854)); } else { c_12184843.cmatches = [as_interface_12185565(result_12184854)]; };
    if (!((actions_12184852 == null))) {
    F.line = 299;
    actions_12184852(result_12184854);
    }
    
  framePtr = F.prev;

  return result_12184854;

}
function match_12182251(c_12182256, selector_12182257, convert_12182259, equal_12182263, actions_12182269) {
    function HEX3Aanonymous_12182279(data_12182281, old_data_12182282) {
      var result_12182286 = {Field0: 0, Field1: false};

      var F={procname:"match.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 366;
        var data2_12182287 = convert_12182259(data_12182281);
        F.line = 367;
        var colontmp__12290725 = data2_12182287;
        F.line = 367;
        var colontmp__12290726 = !(equal_12182263(data2_12182287, old_data_12182282));
        F.line = 367;
        nimCopy(result_12182286, {Field0: colontmp__12290725, Field1: colontmp__12290726}, NTI12182283);
      framePtr = F.prev;

      return result_12182286;

    }

  var result_12182271 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 363;
    var type_selector_12182317 = {kind: 2, compare: HEX3Aanonymous_12182279, simple: null, serial: null, obj: null, eql: null};
    F.line = 368;
    result_12182271 = match_12184838(c_12182256, selector_12182257, type_selector_12182317, actions_12182269);
  framePtr = F.prev;

  return result_12182271;

}
function eql_12181789(s1_12181792, s2_12181793) {
  var result_12181794 = false;

  var F={procname:"eql.eql",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 10;
    result_12181794 = (s1_12181792 == s2_12181793);
  framePtr = F.prev;

  return result_12181794;

}
function bind_value_12246249() {
    function HEX3Aanonymous_12246256(re_12246262) {
        function HEX3Aanonymous_12246263(e_12246265) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
            F.line = 238;
            re_12246262.set(((re_12246262.node)["value"]));
          framePtr = F.prev;

          
        }

      var F={procname:"bindValue.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        if (re_12246262.init) {
        F.line = 237;
        re_12246262.node.addEventListener("change", HEX3Aanonymous_12246263, false);
        }
        
        F.line = 239;
        (re_12246262.node).value = (re_12246262.data);
      framePtr = F.prev;

      
    }

  var result_12246255 = null;

  var F={procname:"bindValue.bindValue",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 235;
    result_12246255 = HEX3Aanonymous_12246256;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12246255;

}
function refresh_12262561(c_12262566, refresh_12262572) {
    function HEX3Aanonymous_12262573(re_12262579) {
      var F={procname:"refresh.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 410;
        refresh_12262572(re_12262579.node, re_12262579.data);
      framePtr = F.prev;

      
    }

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 410;
    if (c_12262566.refresh != null) { c_12262566.refresh.push(HEX3Aanonymous_12262573); } else { c_12262566.refresh = [HEX3Aanonymous_12262573]; };
  framePtr = F.prev;

  
}
function set_text_12262268() {
    function HEX3Aanonymous_12262277(node_12262279, text_12262280) {
      var F={procname:"setText.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 228;
        node_12262279.textContent = toJSStr(cstrToNimstr((text_12262280)+""));
      framePtr = F.prev;

      
    }

  var result_12262276 = null;

  var F={procname:"setText.setText",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 228;
    result_12262276 = HEX3Aanonymous_12262277;
  framePtr = F.prev;

  return result_12262276;

}
function HEX3Aanonymous_12171298(node_12171301) {
    function HEX3Aanonymous_12171308(c_12171315) {
        function HEX3Aanonymous_12180001(arg0_12180003) {
          var result_12180009 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 18;
            var arg1_12180010 = arg0_12180003.cubeprice;
            F.line = 64;
            result_12180009 = arg1_12180010;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12180009;

        }
        function HEX3Aanonymous_12260001(arg0_12260003) {
          var result_12260009 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 19;
            var arg1_12260010 = arg0_12260003.cubeprice;
            F.line = 64;
            result_12260009 = arg1_12260010;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12260009;

        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
      framePtr = F;
        F.line = 18;
        refresh_12250299(match_12182251(c_12171315, makeNimstrLit("[name=cubeprice]"), HEX3Aanonymous_12180001, eql_12181789, null), bind_value_12246249());
        F.line = 19;
        refresh_12262561(match_12182251(c_12171315, makeNimstrLit(".cubeprice"), HEX3Aanonymous_12260001, eql_12181789, null), set_text_12262268());
      framePtr = F.prev;

      
    }

  var result_12171306 = null;

  var F={procname:"settings.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 17;
    result_12171306 = compile_12262722(node_12171301, HEX3Aanonymous_12171308);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12171306;

}
var settings_component_12171221 = [null];
declare_12290449(components_10223124[0], settings_component_12171221, 0, fetch_template_12170001(makeNimstrLit("settings.html"), makeNimstrLit("template"), true), HEX3Aanonymous_12171298);
var app_12291099 = [null];
async function init_comp_12640615(component_12640620, component_12640620_Idx, node_12640622, creator_12640624) {
  var result_12640626 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 19;
    var n_12640648 = (await node_12640622);
    F.line = 20;
    component_12640620[component_12640620_Idx] = creator_12640624(n_12640648);
    F.line = 131;
    result_12640626 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12640626;

}
function declare_12640597(registry_12640600, component_12640603, component_12640603_Idx, node_12640605, creator_12640607) {
    function HEX3Aanonymous_12640608() {
      var result_12640613 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 23;
        result_12640613 = init_comp_12640615(component_12640603, component_12640603_Idx, node_12640605, creator_12640607);
      framePtr = F.prev;

      return result_12640613;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 23;
    if (registry_12640600.Field0 != null) { registry_12640600.Field0.push(HEX3Aanonymous_12640608); } else { registry_12640600.Field0 = [HEX3Aanonymous_12640608]; };
  framePtr = F.prev;

  
}
function new_12640207() {
  var result_12640211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12640401 = null;
    F.line = 851;
    r_12640401 = {m_type: NTI12291035, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_12640211 = r_12640401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12640211;

}
function add_12500218(x_12500223, x_12500223_Idx, y_12500225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_12500231 = (x_12500223[x_12500223_Idx] != null ? x_12500223[x_12500223_Idx].length : 0);
    F.line = 1209;
    if (x_12500223[x_12500223_Idx] === null) x_12500223[x_12500223_Idx] = [];
               if (x_12500223[x_12500223_Idx].length < (Tmp1 = chckRange(addInt(xl_12500231, (y_12500225 != null ? y_12500225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_12500223[x_12500223_Idx].length;i<Tmp1;++i) x_12500223[x_12500223_Idx].push(null); }
               else { x_12500223[x_12500223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_12500256 = 0;
      F.line = 66;
      var colontmp__12640748 = 0;
      F.line = 1210;
      colontmp__12640748 = (y_12500225 != null ? (y_12500225.length-1) : -1);
      F.line = 77;
      var res_12640749 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12640749 <= colontmp__12640748)) break L4;
            F.line = 1210;
            i_12500256 = res_12640749;
            F.line = 1210;
            x_12500223[x_12500223_Idx][chckIndx(addInt(xl_12500231, i_12500256), 0, (x_12500223[x_12500223_Idx] != null ? x_12500223[x_12500223_Idx].length : 0)+0-1)-0] = y_12500225[chckIndx(i_12500256, 0, (y_12500225 != null ? y_12500225.length : 0)+0-1)-0];
            F.line = 80;
            res_12640749 = addInt(res_12640749, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_12511102(cfgs_12511107, node_12511108) {
  var result_12511111 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 541;
    result_12511111[0] = nimCopy(null, [], NTI12511126);
    L1: do {
      F.line = 542;
      var cfg_12511133 = null;
      F.line = 184;
      var i_12640744 = 0;
      F.line = 185;
      var l_12640745 = (cfgs_12511107 != null ? cfgs_12511107.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12640744 < l_12640745)) break L3;
            F.line = 542;
            cfg_12511133 = cfgs_12511107[chckIndx(i_12640744, 0, (cfgs_12511107 != null ? cfgs_12511107.length : 0)+0-1)-0];
            F.line = 543;
            add_12500218(result_12511111, 0, cfg_12511133.compile(node_12511108));
            F.line = 188;
            i_12640744 = addInt(i_12640744, 1);
            if (!(((cfgs_12511107 != null ? cfgs_12511107.length : 0) == l_12640745))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12511111[0];

}
function compile_12630747(cfg_12630751, node_12630752) {
  var result_12630754 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_12630752 == null)))) {
    F.line = 548;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(548, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 549;
    result_12630754 = new_12640207();
    F.line = 550;
    result_12630754.config = cfg_12630751.config;
    F.line = 551;
    result_12630754.original_node = node_12630752;
    F.line = 552;
    result_12630754.node = node_12630752.cloneNode(true);
    F.line = 554;
    result_12630754.config(result_12630754);
    F.line = 555;
    result_12630754.matches = nimCopy(null, compile_12511102(result_12630754.cmatches, result_12630754.node), NTI12511109);
  framePtr = F.prev;

  return result_12630754;

}
function new_12630283() {
  var result_12630287 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12630401 = null;
    F.line = 851;
    r_12630401 = {m_type: NTI12291039, cmatches: null, config: null};
    F.line = 852;
    result_12630287 = r_12630401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12630287;

}
function create_12630268(config_12630274) {
  var result_12630276 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 269;
    result_12630276 = new_12630283();
    F.line = 270;
    result_12630276.config = config_12630274;
  framePtr = F.prev;

  return result_12630276;

}
function compile_12623348(node_12623353, configurator_12623359) {
  var result_12623361 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 742;
    if (!(!((node_12623353 == null)))) {
    F.line = 744;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(744, 10) `\x0Anot (node == nil)` "));
    }
    
    result_12623361 = compile_12630747(create_12630268(configurator_12623359), node_12623353);
  framePtr = F.prev;

  return result_12623361;

}
function refresh_12477083(c_12477088, refresh_12477090) {
    function HEX3Aanonymous_12477091(re_12477097) {
      var F={procname:"refresh.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 410;
        refresh_12477090(re_12477097.node, re_12477097.data);
      framePtr = F.prev;

      
    }

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 410;
    if (c_12477088.refresh != null) { c_12477088.refresh.push(HEX3Aanonymous_12477091); } else { c_12477088.refresh = [HEX3Aanonymous_12477091]; };
  framePtr = F.prev;

  
}
function compile_12455997(cfg_12456002, node_12456003) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_12456052 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 502;
    result_12456052 = nimCopy(null, [], NTI12456067);
    F.line = 503;
    var matched_nodes_12456068 = node_12456003.querySelectorAll(toJSStr(cfg_12456002.selector));
    if (((matched_nodes_12456068 != null ? matched_nodes_12456068.length : 0) == 0)) {
    F.line = 505;
    var selector_12456074 = nimCopy(null, cfg_12456002.selector, NTI112);
    F.line = 506;
    var fmt_res_12456075 = [mnewString(0)];
    F.line = 506;
    if (fmt_res_12456075[0] != null) { fmt_res_12456075[0] = (fmt_res_12456075[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_12456075[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 506;
    format_value_10130080(fmt_res_12456075, 0, selector_12456074, []);
    F.line = 506;
    if (fmt_res_12456075[0] != null) { fmt_res_12456075[0] = (fmt_res_12456075[0]).concat(makeNimstrLit("\'")); } else { fmt_res_12456075[0] = makeNimstrLit("\'"); };
    F.line = 506;
    raiseException({message: nimCopy(null, fmt_res_12456075[0], NTI112), parent: null, m_type: NTI10221017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 508;
      var matched_node_12465008 = null;
      F.line = 184;
      var i_12640775 = 0;
      F.line = 185;
      var l_12640776 = (matched_nodes_12456068 != null ? matched_nodes_12456068.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12640775 < l_12640776)) break L3;
            F.line = 508;
            matched_node_12465008 = matched_nodes_12456068[chckIndx(i_12640775, 0, (matched_nodes_12456068 != null ? matched_nodes_12456068.length : 0)+0-1)-0];
            F.line = 509;
            var match_12465016 = {refresh: nimCopy(null, cfg_12456002.refresh, NTI12452030), init: nimCopy(null, cfg_12456002.init, NTI10221355), iter: cfg_12456002.iter, node: matched_node_12465008, selectorKind: 0, serial: 0, value: 0, convert: {kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null, selector: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 514;
            match_12465016.node = matched_node_12465008;
            if (match_12465016.iter) {
            var Tmp4 = match_12465016;
            if (ConstSet76[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 516;
            var Tmp5 = cfg_12456002;
            if (ConstSet77[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI12452105);
            var Tmp6 = match_12465016;
            if (ConstSet78[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 517;
            Tmp6.anchor = matched_node_12465008.ownerDocument.createComment(matched_node_12465008.outerHTML);
            var Tmp7 = match_12465016;
            if (ConstSet79[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 518;
            Tmp7.mount_template = cfg_12456002.mount;
            var Tmp8 = match_12465016;
            if (ConstSet80[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 519;
            Tmp8.match_templates = nimCopy(null, cfg_12456002.cmatches, NTI12452036);
            var Tmp9 = match_12465016;
            if (ConstSet81[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 520;
            Tmp9.items = nimCopy(null, [], NTI12465042);
            F.line = 521;
            var Tmp10 = match_12465016;
            if (ConstSet82[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_12465008.parentNode.replaceChild(Tmp10.anchor, matched_node_12465008);
            }
            else {
              var Tmp11 = match_12465016;
              if (ConstSet83[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 523;
              var Tmp12 = cfg_12456002;
              if (ConstSet84[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 524;
              var Tmp13 = match_12465016;
              if (ConstSet85[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_12465016;
                if (ConstSet86[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 526;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_12465016;
              if (ConstSet87[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 529;
              var Tmp16 = cfg_12456002;
              if (ConstSet88[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI12452044);
              var Tmp17 = match_12465016;
              if (ConstSet89[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 530;
              Tmp17.matches = nimCopy(null, [], NTI12465069);
              var Tmp18 = match_12465016;
              if (ConstSet90[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 531;
              Tmp18.inited = false;
              var Tmp19 = match_12465016;
              if (ConstSet91[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 532;
              Tmp19.mount = null;
              if (!((cfg_12456002.mount == null))) {
              var Tmp20 = match_12465016;
              if (ConstSet92[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 534;
              Tmp20.mount_source = cfg_12456002.mount;
              }
              else {
                L21: do {
                  F.line = 536;
                  var submatch_12465090 = null;
                  F.line = 184;
                  var i_12640772 = 0;
                  F.line = 185;
                  var l_12640773 = (cfg_12456002.cmatches != null ? cfg_12456002.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_12640772 < l_12640773)) break L23;
                        F.line = 536;
                        submatch_12465090 = cfg_12456002.cmatches[chckIndx(i_12640772, 0, (cfg_12456002.cmatches != null ? cfg_12456002.cmatches.length : 0)+0-1)-0];
                        F.line = 537;
                        var Tmp24 = match_12465016;
                        if (ConstSet93[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_12205218(Tmp24, "matches", submatch_12465090.compile(matched_node_12465008));
                        F.line = 188;
                        i_12640772 = addInt(i_12640772, 1);
                        if (!(((cfg_12456002.cmatches != null ? cfg_12456002.cmatches.length : 0) == l_12640773))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 538;
            if (result_12456052 != null) { result_12456052.push(match_12465016); } else { result_12456052 = [match_12465016]; };
            F.line = 188;
            i_12640775 = addInt(i_12640775, 1);
            if (!(((matched_nodes_12456068 != null ? matched_nodes_12456068.length : 0) == l_12640776))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12456052;

}
function create_iter_item_12476038(match_12476043, parent_node_12476044) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_12476046 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 563;
    var comp_12476051 = null;
    F.line = 564;
    var node_12476052 = null;
      var Tmp1 = match_12476043;
      if (ConstSet107[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 566;
    var Tmp2 = match_12476043;
    if (ConstSet108[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_12476051 = Tmp2.mount_template.clone();
    F.line = 567;
    node_12476052 = comp_12476051.node();
    }
    else {
      F.line = 569;
      node_12476052 = match_12476043.node.cloneNode(true);
    }
    
    F.line = 570;
    var Tmp3 = match_12476043;
    if (ConstSet109[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_12476046 = {serial: 0, mount: comp_12476051, node: node_12476052, matches: compile_12216102(Tmp3.match_templates, node_12476052)};
    F.line = 575;
    var Tmp4 = match_12476043;
    if (ConstSet110[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_12476044.insertBefore(node_12476052, Tmp4.anchor);
  framePtr = F.prev;

  return result_12476046;

}
function update_12475915(match_12475920, init_val_12475921, set_val_12475923, refresh_12475924) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          var Tmp16;
            function HEX3Aanonymous_12475994(new_value_12475996) {
              var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 617;
                it_12475985.set(val_12475925, 0, new_value_12475996);
                if (!((set_val_12475923 == null))) {
                F.line = 618;
                set_val_12475923(val_12475925[0]);
                }
                
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
          var Tmp34;
          var Tmp35;
          var Tmp36;
      var Tmp37;
        var Tmp38;
        var Tmp39;
        var Tmp40;
        var Tmp41;
        var Tmp42;
          var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
          var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        function HEX3Aanonymous_12476305(val2_12476307) {
          var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 690;
            obj_12476291.set(val_12475925, 0, val2_12476307);
            if (!((set_val_12475923 == null))) {
            F.line = 691;
            set_val_12475923(val_12475925[0]);
            }
            
          framePtr = F.prev;

          
        }
        var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
      var Tmp60;
      var Tmp61;
      var Tmp65;
        var Tmp66;
          var Tmp67;
      var Tmp68;
      var Tmp69;
        var Tmp71;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 582;
    var val_12475925 = [init_val_12475921];
    if (match_12475920.iter) {
    F.line = 585;
    var i_12475927 = 0;
    F.line = 586;
    var Tmp1 = match_12475920;
    if (ConstSet94[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_12475930 = Tmp1.anchor.parentNode;
    F.line = 587;
    var it_simple_12475935 = null;
    F.line = 588;
    var it_serial_12475940 = null;
    F.line = 589;
    var it_select_12475948 = null;
    F.line = 590;
    var Tmp2 = match_12475920;
    if (ConstSet95[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 592;
      var Tmp3 = match_12475920;
      if (ConstSet97[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet96[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_12475935 = Tmp4.simple(val_12475925[0]);
      break;
    case 1:
      F.line = 594;
      var Tmp5 = match_12475920;
      if (ConstSet99[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet98[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_12475940 = Tmp6.serial(val_12475925[0]);
      break;
    case 2:
      F.line = 596;
      var Tmp7 = match_12475920;
      if (ConstSet101[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet100[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_12475948 = Tmp8.selector(val_12475925[0]);
      break;
    }
    L9: do {
      F.line = 598;
        L10: while (true) {
        if (!true) break L10;
          F.line = 599;
            var Tmp12 = match_12475920;
            if (ConstSet102[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12475927 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_12475920;
          if (ConstSet103[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_12475927, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_12475973 = [Tmp11];
          F.line = 600;
          var changed_12475974 = refresh_12475924;
          F.line = 601;
          var item_12475975 = 0;
          F.line = 602;
          var set_12475979 = null;
          F.line = 603;
          var Tmp16 = match_12475920;
          if (ConstSet104[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 605;
            var it_12475982 = it_simple_12475935();
            if ((it_12475982["Field0"] == false)) {
            F.line = 606;
            break L9;
            }
            
            F.line = 607;
            item_12475975 = it_12475982["Field1"];
            break;
          case 1:
            F.line = 609;
            var it_12475984 = it_serial_12475940(serial_12475973, 0);
            if ((it_12475984["Field0"] == false)) {
            F.line = 610;
            break L9;
            }
            
            F.line = 611;
            item_12475975 = it_12475984["Field1"];
            break;
          case 2:
            F.line = 613;
            var it_12475985 = it_select_12475948();
            if ((it_12475985 == null)) {
            F.line = 614;
            break L9;
            }
            
            F.line = 615;
            item_12475975 = it_12475985.get(val_12475925[0]);
            F.line = 616;
            set_12475979 = HEX3Aanonymous_12475994;
            break;
          }
          F.line = 620;
          var iter_item_12476021 = null;
          F.line = 621;
          var inited_12476022 = false;
            var Tmp17 = match_12475920;
            if (ConstSet105[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12475927 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 625;
          var Tmp19 = match_12475920;
          if (ConstSet106[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_12476021 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_12475927, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 626;
          inited_12476022 = true;
          F.line = 627;
          changed_12475974 = true;
          }
          else {
            F.line = 629;
            iter_item_12476021 = create_iter_item_12476038(match_12475920, parent_node_12475930);
            F.line = 630;
            var Tmp21 = match_12475920;
            if (ConstSet111[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_12476021); } else { Tmp22 = [iter_item_12476021]; };
            F.line = 631;
            inited_12476022 = false;
            if (!((serial_12475973[0] == iter_item_12476021.serial))) {
            F.line = 633;
            changed_12475974 = true;
            }
            
          }
          
          if (!(inited_12476022)) {
          L23: do {
            F.line = 637;
            var init_proc_12476143 = null;
            F.line = 184;
            var i_12640781 = 0;
            F.line = 185;
            var l_12640782 = (match_12475920.init != null ? match_12475920.init.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_12640781 < l_12640782)) break L25;
                  F.line = 637;
                  init_proc_12476143 = match_12475920.init[chckIndx(i_12640781, 0, (match_12475920.init != null ? match_12475920.init.length : 0)+0-1)-0];
                  F.line = 638;
                  init_proc_12476143(iter_item_12476021.node);
                  F.line = 188;
                  i_12640781 = addInt(i_12640781, 1);
                  if (!(((match_12475920.init != null ? match_12475920.init.length : 0) == l_12640782))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_12476021.mount == null))) {
          F.line = 642;
          iter_item_12476021.mount.update(item_12475975, set_12475979, refresh_12475924);
          }
          
          L26: do {
            F.line = 645;
            var submatch_12476158 = null;
            F.line = 184;
            var i_12640785 = 0;
            F.line = 185;
            var l_12640786 = (iter_item_12476021.matches != null ? iter_item_12476021.matches.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_12640785 < l_12640786)) break L28;
                  F.line = 645;
                  submatch_12476158 = iter_item_12476021.matches[chckIndx(i_12640785, 0, (iter_item_12476021.matches != null ? iter_item_12476021.matches.length : 0)+0-1)-0];
                  F.line = 646;
                  submatch_12476158.update(item_12475975, set_12475979, refresh_12475924);
                  F.line = 188;
                  i_12640785 = addInt(i_12640785, 1);
                  if (!(((iter_item_12476021.matches != null ? iter_item_12476021.matches.length : 0) == l_12640786))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 649;
          var e_12476163 = {node: iter_item_12476021.node, data: item_12475975, init: !(inited_12476022), set: set_12475979};
          L29: do {
            F.line = 654;
            var refresh_proc_12476170 = null;
            F.line = 184;
            var i_12640790 = 0;
            F.line = 185;
            var l_12640791 = (match_12475920.refresh != null ? match_12475920.refresh.length : 0);
            L30: do {
              F.line = 186;
                L31: while (true) {
                if (!(i_12640790 < l_12640791)) break L31;
                  F.line = 654;
                  refresh_proc_12476170 = match_12475920.refresh[chckIndx(i_12640790, 0, (match_12475920.refresh != null ? match_12475920.refresh.length : 0)+0-1)-0];
                  F.line = 655;
                  refresh_proc_12476170(e_12476163);
                  F.line = 188;
                  i_12640790 = addInt(i_12640790, 1);
                  if (!(((match_12475920.refresh != null ? match_12475920.refresh.length : 0) == l_12640791))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 657;
          i_12475927 = addInt(i_12475927, 1);
        }
    } while(false);
    L32: do {
      F.line = 660;
        L33: while (true) {
          var Tmp34 = match_12475920;
          if (ConstSet112[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_12475927 < ((Tmp35 = Tmp34.items, Tmp35) != null ? Tmp35.length : 0))) break L33;
          F.line = 661;
          var Tmp36 = match_12475920;
          if (ConstSet113[Tmp36.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_12245488(pop_12245224(Tmp36, "items"), parent_node_12475930);
        }
    } while(false);
    }
    else {
      F.line = 663;
      var changed_12476259 = refresh_12475924;
      F.line = 664;
      var node_12476260 = match_12475920.node;
      F.line = 665;
      var converted_val_12476261 = 0;
      F.line = 666;
      var set_12476265 = null;
      F.line = 668;
      var Tmp37 = match_12475920;
      if (ConstSet114[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp37.convert.kind) {
      case 0:
        F.line = 670;
        var Tmp38 = match_12475920;
        if (ConstSet116[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet115[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12476261 = Tmp39.simple(val_12475925[0]);
        F.line = 671;
        changed_12476259 = true;
        break;
      case 1:
        F.line = 673;
        var Tmp40 = match_12475920;
        if (ConstSet117[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_12476273 = [Tmp40.serial];
        F.line = 674;
        var Tmp41 = match_12475920;
        if (ConstSet119[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet118[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12476261 = Tmp42.serial(val_12475925[0], serial_12476273, 0);
          var Tmp43 = match_12475920;
          if (ConstSet120[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_12476273[0] == Tmp43.serial))) {
        F.line = 676;
        changed_12476259 = true;
        }
        
        break;
      case 2:
        F.line = 678;
        var Tmp44 = match_12475920;
        if (ConstSet122[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp45 = Tmp44.convert;
        if (ConstSet121[Tmp45.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp46 = match_12475920;
        if (ConstSet123[Tmp46.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_12476285 = Tmp45.compare(val_12475925[0], Tmp46.value);
        F.line = 679;
        converted_val_12476261 = res_12476285.Field0;
        var Tmp47 = match_12475920;
        if (ConstSet124[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 680;
        Tmp47.value = res_12476285.Field0;
        if (res_12476285.Field1) {
        F.line = 682;
        changed_12476259 = true;
        }
        
        break;
      case 3:
        F.line = 684;
        var Tmp48 = match_12475920;
        if (ConstSet126[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet125[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_12476291 = Tmp49.obj;
        F.line = 685;
        converted_val_12476261 = obj_12476291.get(val_12475925[0]);
        F.line = 686;
        changed_12476259 = true;
          var Tmp50 = match_12475920;
          if (ConstSet128[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          var Tmp51 = Tmp50.convert;
          if (ConstSet127[Tmp51.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        if (!((Tmp51.eql == null))) {
        F.line = 688;
        var Tmp52 = match_12475920;
        if (ConstSet130[Tmp52.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp53 = Tmp52.convert;
        if (ConstSet129[Tmp53.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp54 = match_12475920;
        if (ConstSet131[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_12476259 = !(Tmp53.eql(converted_val_12476261, Tmp54.value));
        }
        
        F.line = 689;
        set_12476265 = HEX3Aanonymous_12476305;
        break;
      }
        var Tmp56 = match_12475920;
        if (ConstSet132[Tmp56.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp56.mount == null)) Tmp55 = false; else {          var Tmp57 = match_12475920;
          if (ConstSet133[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp55 = !((Tmp57.mount_source == null));        }      if (Tmp55) {
      var Tmp58 = match_12475920;
      if (ConstSet134[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 696;
      var Tmp59 = match_12475920;
      if (ConstSet135[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp58.mount = Tmp59.mount_source.clone();
      F.line = 697;
      var Tmp60 = match_12475920;
      if (ConstSet136[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12476260.parentNode.replaceChild(Tmp60.mount.node(), node_12476260);
      }
      
      F.line = 700;
      var Tmp61 = match_12475920;
      if (ConstSet137[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_12476356 = Tmp61.inited;
      if (!(inited_12476356)) {
      L62: do {
        F.line = 702;
        var init_proc_12476363 = null;
        F.line = 184;
        var i_12640795 = 0;
        F.line = 185;
        var l_12640796 = (match_12475920.init != null ? match_12475920.init.length : 0);
        L63: do {
          F.line = 186;
            L64: while (true) {
            if (!(i_12640795 < l_12640796)) break L64;
              F.line = 702;
              init_proc_12476363 = match_12475920.init[chckIndx(i_12640795, 0, (match_12475920.init != null ? match_12475920.init.length : 0)+0-1)-0];
              F.line = 703;
              init_proc_12476363(node_12476260);
              F.line = 188;
              i_12640795 = addInt(i_12640795, 1);
              if (!(((match_12475920.init != null ? match_12475920.init.length : 0) == l_12640796))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp65 = match_12475920;
      if (ConstSet138[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 704;
      Tmp65.inited = true;
      F.line = 705;
      changed_12476259 = true;
      }
      
        if (!changed_12476259) Tmp66 = false; else {          var Tmp67 = match_12475920;
          if (ConstSet139[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp66 = !((Tmp67.mount == null));        }      if (Tmp66) {
      F.line = 709;
      var Tmp68 = match_12475920;
      if (ConstSet140[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12476260 = Tmp68.mount.node();
      F.line = 710;
      var Tmp69 = match_12475920;
      if (ConstSet141[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp69.mount.update(converted_val_12476261, set_12476265, refresh_12475924);
      }
      
      if (changed_12476259) {
      L70: do {
        F.line = 714;
        var submatch_12476388 = null;
        F.line = 182;
        var colontmp__12640799 = null;
        F.line = 714;
        var Tmp71 = match_12475920;
        if (ConstSet142[Tmp71.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__12640799 = Tmp71.matches;
        F.line = 184;
        var i_12640800 = 0;
        F.line = 185;
        var l_12640801 = (colontmp__12640799 != null ? colontmp__12640799.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_12640800 < l_12640801)) break L73;
              F.line = 714;
              submatch_12476388 = colontmp__12640799[chckIndx(i_12640800, 0, (colontmp__12640799 != null ? colontmp__12640799.length : 0)+0-1)-0];
              F.line = 715;
              submatch_12476388.update(converted_val_12476261, set_12476265, refresh_12475924);
              F.line = 188;
              i_12640800 = addInt(i_12640800, 1);
              if (!(((colontmp__12640799 != null ? colontmp__12640799.length : 0) == l_12640801))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_12476259) {
      F.line = 718;
      var e_12476393 = {node: node_12476260, data: converted_val_12476261, init: !(inited_12476356), set: set_12476265};
      L74: do {
        F.line = 723;
        var refresh_proc_12476400 = null;
        F.line = 184;
        var i_12640805 = 0;
        F.line = 185;
        var l_12640806 = (match_12475920.refresh != null ? match_12475920.refresh.length : 0);
        L75: do {
          F.line = 186;
            L76: while (true) {
            if (!(i_12640805 < l_12640806)) break L76;
              F.line = 723;
              refresh_proc_12476400 = match_12475920.refresh[chckIndx(i_12640805, 0, (match_12475920.refresh != null ? match_12475920.refresh.length : 0)+0-1)-0];
              F.line = 724;
              refresh_proc_12476400(e_12476393);
              F.line = 188;
              i_12640805 = addInt(i_12640805, 1);
              if (!(((match_12475920.refresh != null ? match_12475920.refresh.length : 0) == l_12640806))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_12475889(match_12475894) {
    function HEX3Aanonymous_12475901(data_12475903, set_12475908, refresh_12475909) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 783;
        update_12475915(match_12475894, data_12475903, set_12475908, refresh_12475909);
      framePtr = F.prev;

      
    }

  var result_12475896 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 782;
    result_12475896 = {update: HEX3Aanonymous_12475901};
  framePtr = F.prev;

  return result_12475896;

}
function as_interface_12455663(config_12455668) {
    function HEX3Aanonymous_12455675(node_12455677) {
      var result_12455683 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 789;
        result_12455683 = nimCopy(null, [], NTI12455698);
        L1: do {
          F.line = 790;
          var comp_match_12475214 = null;
          F.line = 182;
          var colontmp__12640763 = null;
          F.line = 790;
          colontmp__12640763 = compile_12455997(config_12455668, node_12455677);
          F.line = 184;
          var i_12640765 = 0;
          F.line = 185;
          var l_12640766 = (colontmp__12640763 != null ? colontmp__12640763.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12640765 < l_12640766)) break L3;
                F.line = 790;
                comp_match_12475214 = colontmp__12640763[chckIndx(i_12640765, 0, (colontmp__12640763 != null ? colontmp__12640763.length : 0)+0-1)-0];
                F.line = 791;
                if (result_12455683 != null) { result_12455683.push(as_interface_12475889(comp_match_12475214)); } else { result_12455683 = [as_interface_12475889(comp_match_12475214)]; };
                F.line = 188;
                i_12640765 = addInt(i_12640765, 1);
                if (!(((colontmp__12640763 != null ? colontmp__12640763.length : 0) == l_12640766))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_12455683;

    }

  var result_12455670 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 787;
    result_12455670 = {compile: HEX3Aanonymous_12455675};
  framePtr = F.prev;

  return result_12455670;

}
function match_12454936(c_12454941, selector_12454942, convert_12454944, actions_12454950) {
  var result_12454952 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 290;
    result_12454952 = {selector: nimCopy(null, selector_12454942, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_12454944, NTI12452044), cmatches: null, iterate: {kind: 0, simple: null, serial: null, selector: null}};
    F.line = 297;
    if (c_12454941.cmatches != null) { c_12454941.cmatches.push(as_interface_12455663(result_12454952)); } else { c_12454941.cmatches = [as_interface_12455663(result_12454952)]; };
    if (!((actions_12454950 == null))) {
    F.line = 299;
    actions_12454950(result_12454952);
    }
    
  framePtr = F.prev;

  return result_12454952;

}
function match_12452364(c_12452369, selector_12452370, convert_12452372, equal_12452376, actions_12452382) {
    function HEX3Aanonymous_12452392(data_12452394, old_data_12452395) {
      var result_12452399 = {Field0: 0, Field1: false};

      var F={procname:"match.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 366;
        var data2_12452400 = convert_12452372(data_12452394);
        F.line = 367;
        var colontmp__12640758 = data2_12452400;
        F.line = 367;
        var colontmp__12640759 = !(equal_12452376(data2_12452400, old_data_12452395));
        F.line = 367;
        nimCopy(result_12452399, {Field0: colontmp__12640758, Field1: colontmp__12640759}, NTI12452396);
      framePtr = F.prev;

      return result_12452399;

    }

  var result_12452384 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 363;
    var type_selector_12452415 = {kind: 2, compare: HEX3Aanonymous_12452392, simple: null, serial: null, obj: null, eql: null};
    F.line = 368;
    result_12452384 = match_12454936(c_12452369, selector_12452370, type_selector_12452415, actions_12452382);
  framePtr = F.prev;

  return result_12452384;

}
function init_12521676(c_12521681, init_12521682) {
  var F={procname:"init.init",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 421;
    if (c_12521681.init != null) { c_12521681.init.push(init_12521682); } else { c_12521681.init = [init_12521682]; };
  framePtr = F.prev;

  
}
function add_event_listener_12521427(c_12521432, event_12521433, cb_12521434, use_capture_12521435) {
    event_12521433 = nimCopy(null, event_12521433, NTI112);
    function HEX3Aanonymous_12521660(node_12521662) {
      var F={procname:"addEventListener.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 212;
        node_12521662.addEventListener(toJSStr(event_12521433), cb_12521434, use_capture_12521435);
      framePtr = F.prev;

      
    }

  var F={procname:"addEventListener.addEventListener",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 211;
    init_12521676(c_12521432, HEX3Aanonymous_12521660);
  framePtr = F.prev;

  
}
function compile_12483067(cfg_12483072, node_12483073) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_12483135 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 502;
    result_12483135 = nimCopy(null, [], NTI12483150);
    F.line = 503;
    var matched_nodes_12483151 = node_12483073.querySelectorAll(toJSStr(cfg_12483072.selector));
    if (((matched_nodes_12483151 != null ? matched_nodes_12483151.length : 0) == 0)) {
    F.line = 505;
    var selector_12483157 = nimCopy(null, cfg_12483072.selector, NTI112);
    F.line = 506;
    var fmt_res_12483158 = [mnewString(0)];
    F.line = 506;
    if (fmt_res_12483158[0] != null) { fmt_res_12483158[0] = (fmt_res_12483158[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_12483158[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 506;
    format_value_10130080(fmt_res_12483158, 0, selector_12483157, []);
    F.line = 506;
    if (fmt_res_12483158[0] != null) { fmt_res_12483158[0] = (fmt_res_12483158[0]).concat(makeNimstrLit("\'")); } else { fmt_res_12483158[0] = makeNimstrLit("\'"); };
    F.line = 506;
    raiseException({message: nimCopy(null, fmt_res_12483158[0], NTI112), parent: null, m_type: NTI10221017, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 508;
      var matched_node_12490008 = null;
      F.line = 184;
      var i_12640825 = 0;
      F.line = 185;
      var l_12640826 = (matched_nodes_12483151 != null ? matched_nodes_12483151.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12640825 < l_12640826)) break L3;
            F.line = 508;
            matched_node_12490008 = matched_nodes_12483151[chckIndx(i_12640825, 0, (matched_nodes_12483151 != null ? matched_nodes_12483151.length : 0)+0-1)-0];
            F.line = 509;
            var match_12490016 = {refresh: nimCopy(null, cfg_12483072.refresh, NTI12477232), init: nimCopy(null, cfg_12483072.init, NTI10221355), iter: cfg_12483072.iter, node: matched_node_12490008, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null, selector: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 514;
            match_12490016.node = matched_node_12490008;
            if (match_12490016.iter) {
            var Tmp4 = match_12490016;
            if (ConstSet143[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 516;
            var Tmp5 = cfg_12483072;
            if (ConstSet144[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI12477336);
            var Tmp6 = match_12490016;
            if (ConstSet145[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 517;
            Tmp6.anchor = matched_node_12490008.ownerDocument.createComment(matched_node_12490008.outerHTML);
            var Tmp7 = match_12490016;
            if (ConstSet146[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 518;
            Tmp7.mount_template = cfg_12483072.mount;
            var Tmp8 = match_12490016;
            if (ConstSet147[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 519;
            Tmp8.match_templates = nimCopy(null, cfg_12483072.cmatches, NTI12477238);
            var Tmp9 = match_12490016;
            if (ConstSet148[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 520;
            Tmp9.items = nimCopy(null, [], NTI12490042);
            F.line = 521;
            var Tmp10 = match_12490016;
            if (ConstSet149[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_12490008.parentNode.replaceChild(Tmp10.anchor, matched_node_12490008);
            }
            else {
              var Tmp11 = match_12490016;
              if (ConstSet150[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 523;
              var Tmp12 = cfg_12483072;
              if (ConstSet151[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 524;
              var Tmp13 = match_12490016;
              if (ConstSet152[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_12490016;
                if (ConstSet153[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 526;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_12490016;
              if (ConstSet154[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 529;
              var Tmp16 = cfg_12483072;
              if (ConstSet155[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI12477272);
              var Tmp17 = match_12490016;
              if (ConstSet156[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 530;
              Tmp17.matches = nimCopy(null, [], NTI12490069);
              var Tmp18 = match_12490016;
              if (ConstSet157[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 531;
              Tmp18.inited = false;
              var Tmp19 = match_12490016;
              if (ConstSet158[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 532;
              Tmp19.mount = null;
              if (!((cfg_12483072.mount == null))) {
              var Tmp20 = match_12490016;
              if (ConstSet159[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 534;
              Tmp20.mount_source = cfg_12483072.mount;
              }
              else {
                L21: do {
                  F.line = 536;
                  var submatch_12500214 = null;
                  F.line = 184;
                  var i_12640822 = 0;
                  F.line = 185;
                  var l_12640823 = (cfg_12483072.cmatches != null ? cfg_12483072.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_12640822 < l_12640823)) break L23;
                        F.line = 536;
                        submatch_12500214 = cfg_12483072.cmatches[chckIndx(i_12640822, 0, (cfg_12483072.cmatches != null ? cfg_12483072.cmatches.length : 0)+0-1)-0];
                        F.line = 537;
                        var Tmp24 = match_12490016;
                        if (ConstSet160[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_12500218(Tmp24, "matches", submatch_12500214.compile(matched_node_12490008));
                        F.line = 188;
                        i_12640822 = addInt(i_12640822, 1);
                        if (!(((cfg_12483072.cmatches != null ? cfg_12483072.cmatches.length : 0) == l_12640823))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 538;
            if (result_12483135 != null) { result_12483135.push(match_12490016); } else { result_12483135 = [match_12490016]; };
            F.line = 188;
            i_12640825 = addInt(i_12640825, 1);
            if (!(((matched_nodes_12483151 != null ? matched_nodes_12483151.length : 0) == l_12640826))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12483135;

}
function create_iter_item_12511038(match_12511043, parent_node_12511044) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_12511046 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 563;
    var comp_12511051 = null;
    F.line = 564;
    var node_12511052 = null;
      var Tmp1 = match_12511043;
      if (ConstSet174[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 566;
    var Tmp2 = match_12511043;
    if (ConstSet175[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_12511051 = Tmp2.mount_template.clone();
    F.line = 567;
    node_12511052 = comp_12511051.node();
    }
    else {
      F.line = 569;
      node_12511052 = match_12511043.node.cloneNode(true);
    }
    
    F.line = 570;
    var Tmp3 = match_12511043;
    if (ConstSet176[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_12511046 = {serial: 0, mount: comp_12511051, node: node_12511052, matches: compile_12511102(Tmp3.match_templates, node_12511052)};
    F.line = 575;
    var Tmp4 = match_12511043;
    if (ConstSet177[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_12511044.insertBefore(node_12511052, Tmp4.anchor);
  framePtr = F.prev;

  return result_12511046;

}
function detach_12520488(iter_item_12520492, parent_node_12520493) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 579;
    parent_node_12520493.removeChild(iter_item_12520492.node);
  framePtr = F.prev;

  
}
function pop_12520224(s_12520229, s_12520229_Idx) {
  var result_12520230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_12520236 = subInt((s_12520229[s_12520229_Idx] != null ? s_12520229[s_12520229_Idx].length : 0), 1);
    F.line = 1784;
    result_12520230 = s_12520229[s_12520229_Idx][chckIndx(l_12520236, 0, (s_12520229[s_12520229_Idx] != null ? s_12520229[s_12520229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_12520229[s_12520229_Idx] === null) s_12520229[s_12520229_Idx] = [];
               if (s_12520229[s_12520229_Idx].length < chckRange(l_12520236, 0, 2147483647)) { for (var i=s_12520229[s_12520229_Idx].length;i<chckRange(l_12520236, 0, 2147483647);++i) s_12520229[s_12520229_Idx].push(null); }
               else { s_12520229[s_12520229_Idx].length = chckRange(l_12520236, 0, 2147483647); };
  framePtr = F.prev;

  return result_12520230;

}
function update_12510915(match_12510920, init_val_12510921, set_val_12510923, refresh_12510924) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          var Tmp16;
            function HEX3Aanonymous_12510994(new_value_12510996) {
              var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 617;
                it_12510985.set(val_12510925, 0, new_value_12510996);
                if (!((set_val_12510923 == null))) {
                F.line = 618;
                set_val_12510923(val_12510925[0]);
                }
                
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
          var Tmp34;
          var Tmp35;
          var Tmp36;
      var Tmp37;
        var Tmp38;
        var Tmp39;
        var Tmp40;
        var Tmp41;
        var Tmp42;
          var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
          var Tmp51;
        var Tmp52;
        var Tmp53;
        var Tmp54;
        function HEX3Aanonymous_12520553(val2_12520555) {
          var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 690;
            obj_12520539.set(val_12510925, 0, val2_12520555);
            if (!((set_val_12510923 == null))) {
            F.line = 691;
            set_val_12510923(val_12510925[0]);
            }
            
          framePtr = F.prev;

          
        }
        var Tmp55;
        var Tmp56;
          var Tmp57;
      var Tmp58;
      var Tmp59;
      var Tmp60;
      var Tmp61;
      var Tmp65;
        var Tmp66;
          var Tmp67;
      var Tmp68;
      var Tmp69;
        var Tmp71;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 582;
    var val_12510925 = [init_val_12510921];
    if (match_12510920.iter) {
    F.line = 585;
    var i_12510927 = 0;
    F.line = 586;
    var Tmp1 = match_12510920;
    if (ConstSet161[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_12510930 = Tmp1.anchor.parentNode;
    F.line = 587;
    var it_simple_12510935 = null;
    F.line = 588;
    var it_serial_12510940 = null;
    F.line = 589;
    var it_select_12510948 = null;
    F.line = 590;
    var Tmp2 = match_12510920;
    if (ConstSet162[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 592;
      var Tmp3 = match_12510920;
      if (ConstSet164[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet163[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_12510935 = Tmp4.simple(val_12510925[0]);
      break;
    case 1:
      F.line = 594;
      var Tmp5 = match_12510920;
      if (ConstSet166[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet165[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_12510940 = Tmp6.serial(val_12510925[0]);
      break;
    case 2:
      F.line = 596;
      var Tmp7 = match_12510920;
      if (ConstSet168[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet167[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_12510948 = Tmp8.selector(val_12510925[0]);
      break;
    }
    L9: do {
      F.line = 598;
        L10: while (true) {
        if (!true) break L10;
          F.line = 599;
            var Tmp12 = match_12510920;
            if (ConstSet169[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12510927 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_12510920;
          if (ConstSet170[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_12510927, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_12510973 = [Tmp11];
          F.line = 600;
          var changed_12510974 = refresh_12510924;
          F.line = 601;
          var item_12510975 = null;
          F.line = 602;
          var set_12510979 = null;
          F.line = 603;
          var Tmp16 = match_12510920;
          if (ConstSet171[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 605;
            var it_12510982 = it_simple_12510935();
            if ((it_12510982["Field0"] == false)) {
            F.line = 606;
            break L9;
            }
            
            F.line = 607;
            item_12510975 = it_12510982["Field1"];
            break;
          case 1:
            F.line = 609;
            var it_12510984 = it_serial_12510940(serial_12510973, 0);
            if ((it_12510984["Field0"] == false)) {
            F.line = 610;
            break L9;
            }
            
            F.line = 611;
            item_12510975 = it_12510984["Field1"];
            break;
          case 2:
            F.line = 613;
            var it_12510985 = it_select_12510948();
            if ((it_12510985 == null)) {
            F.line = 614;
            break L9;
            }
            
            F.line = 615;
            item_12510975 = it_12510985.get(val_12510925[0]);
            F.line = 616;
            set_12510979 = HEX3Aanonymous_12510994;
            break;
          }
          F.line = 620;
          var iter_item_12511021 = null;
          F.line = 621;
          var inited_12511022 = false;
            var Tmp17 = match_12510920;
            if (ConstSet172[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12510927 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 625;
          var Tmp19 = match_12510920;
          if (ConstSet173[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_12511021 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_12510927, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 626;
          inited_12511022 = true;
          F.line = 627;
          changed_12510974 = true;
          }
          else {
            F.line = 629;
            iter_item_12511021 = create_iter_item_12511038(match_12510920, parent_node_12510930);
            F.line = 630;
            var Tmp21 = match_12510920;
            if (ConstSet178[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_12511021); } else { Tmp22 = [iter_item_12511021]; };
            F.line = 631;
            inited_12511022 = false;
            if (!((serial_12510973[0] == iter_item_12511021.serial))) {
            F.line = 633;
            changed_12510974 = true;
            }
            
          }
          
          if (!(inited_12511022)) {
          L23: do {
            F.line = 637;
            var init_proc_12511205 = null;
            F.line = 184;
            var i_12640831 = 0;
            F.line = 185;
            var l_12640832 = (match_12510920.init != null ? match_12510920.init.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_12640831 < l_12640832)) break L25;
                  F.line = 637;
                  init_proc_12511205 = match_12510920.init[chckIndx(i_12640831, 0, (match_12510920.init != null ? match_12510920.init.length : 0)+0-1)-0];
                  F.line = 638;
                  init_proc_12511205(iter_item_12511021.node);
                  F.line = 188;
                  i_12640831 = addInt(i_12640831, 1);
                  if (!(((match_12510920.init != null ? match_12510920.init.length : 0) == l_12640832))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_12511021.mount == null))) {
          F.line = 642;
          iter_item_12511021.mount.update(item_12510975, set_12510979, refresh_12510924);
          }
          
          L26: do {
            F.line = 645;
            var submatch_12511220 = null;
            F.line = 184;
            var i_12640836 = 0;
            F.line = 185;
            var l_12640837 = (iter_item_12511021.matches != null ? iter_item_12511021.matches.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_12640836 < l_12640837)) break L28;
                  F.line = 645;
                  submatch_12511220 = iter_item_12511021.matches[chckIndx(i_12640836, 0, (iter_item_12511021.matches != null ? iter_item_12511021.matches.length : 0)+0-1)-0];
                  F.line = 646;
                  submatch_12511220.update(item_12510975, set_12510979, refresh_12510924);
                  F.line = 188;
                  i_12640836 = addInt(i_12640836, 1);
                  if (!(((iter_item_12511021.matches != null ? iter_item_12511021.matches.length : 0) == l_12640837))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 649;
          var e_12511225 = {node: iter_item_12511021.node, data: item_12510975, init: !(inited_12511022), set: set_12510979};
          L29: do {
            F.line = 654;
            var refresh_proc_12520214 = null;
            F.line = 184;
            var i_12640842 = 0;
            F.line = 185;
            var l_12640843 = (match_12510920.refresh != null ? match_12510920.refresh.length : 0);
            L30: do {
              F.line = 186;
                L31: while (true) {
                if (!(i_12640842 < l_12640843)) break L31;
                  F.line = 654;
                  refresh_proc_12520214 = match_12510920.refresh[chckIndx(i_12640842, 0, (match_12510920.refresh != null ? match_12510920.refresh.length : 0)+0-1)-0];
                  F.line = 655;
                  refresh_proc_12520214(e_12511225);
                  F.line = 188;
                  i_12640842 = addInt(i_12640842, 1);
                  if (!(((match_12510920.refresh != null ? match_12510920.refresh.length : 0) == l_12640843))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 657;
          i_12510927 = addInt(i_12510927, 1);
        }
    } while(false);
    L32: do {
      F.line = 660;
        L33: while (true) {
          var Tmp34 = match_12510920;
          if (ConstSet179[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_12510927 < ((Tmp35 = Tmp34.items, Tmp35) != null ? Tmp35.length : 0))) break L33;
          F.line = 661;
          var Tmp36 = match_12510920;
          if (ConstSet180[Tmp36.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_12520488(pop_12520224(Tmp36, "items"), parent_node_12510930);
        }
    } while(false);
    }
    else {
      F.line = 663;
      var changed_12520507 = refresh_12510924;
      F.line = 664;
      var node_12520508 = match_12510920.node;
      F.line = 665;
      var converted_val_12520509 = null;
      F.line = 666;
      var set_12520513 = null;
      F.line = 668;
      var Tmp37 = match_12510920;
      if (ConstSet181[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp37.convert.kind) {
      case 0:
        F.line = 670;
        var Tmp38 = match_12510920;
        if (ConstSet183[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet182[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12520509 = Tmp39.simple(val_12510925[0]);
        F.line = 671;
        changed_12520507 = true;
        break;
      case 1:
        F.line = 673;
        var Tmp40 = match_12510920;
        if (ConstSet184[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_12520521 = [Tmp40.serial];
        F.line = 674;
        var Tmp41 = match_12510920;
        if (ConstSet186[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet185[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12520509 = Tmp42.serial(val_12510925[0], serial_12520521, 0);
          var Tmp43 = match_12510920;
          if (ConstSet187[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_12520521[0] == Tmp43.serial))) {
        F.line = 676;
        changed_12520507 = true;
        }
        
        break;
      case 2:
        F.line = 678;
        var Tmp44 = match_12510920;
        if (ConstSet189[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp45 = Tmp44.convert;
        if (ConstSet188[Tmp45.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp46 = match_12510920;
        if (ConstSet190[Tmp46.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_12520533 = Tmp45.compare(val_12510925[0], Tmp46.value);
        F.line = 679;
        converted_val_12520509 = res_12520533.Field0;
        var Tmp47 = match_12510920;
        if (ConstSet191[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 680;
        Tmp47.value = res_12520533.Field0;
        if (res_12520533.Field1) {
        F.line = 682;
        changed_12520507 = true;
        }
        
        break;
      case 3:
        F.line = 684;
        var Tmp48 = match_12510920;
        if (ConstSet193[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet192[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_12520539 = Tmp49.obj;
        F.line = 685;
        converted_val_12520509 = obj_12520539.get(val_12510925[0]);
        F.line = 686;
        changed_12520507 = true;
          var Tmp50 = match_12510920;
          if (ConstSet195[Tmp50.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          var Tmp51 = Tmp50.convert;
          if (ConstSet194[Tmp51.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        if (!((Tmp51.eql == null))) {
        F.line = 688;
        var Tmp52 = match_12510920;
        if (ConstSet197[Tmp52.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp53 = Tmp52.convert;
        if (ConstSet196[Tmp53.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp54 = match_12510920;
        if (ConstSet198[Tmp54.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_12520507 = !(Tmp53.eql(converted_val_12520509, Tmp54.value));
        }
        
        F.line = 689;
        set_12520513 = HEX3Aanonymous_12520553;
        break;
      }
        var Tmp56 = match_12510920;
        if (ConstSet199[Tmp56.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp56.mount == null)) Tmp55 = false; else {          var Tmp57 = match_12510920;
          if (ConstSet200[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp55 = !((Tmp57.mount_source == null));        }      if (Tmp55) {
      var Tmp58 = match_12510920;
      if (ConstSet201[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 696;
      var Tmp59 = match_12510920;
      if (ConstSet202[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp58.mount = Tmp59.mount_source.clone();
      F.line = 697;
      var Tmp60 = match_12510920;
      if (ConstSet203[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12520508.parentNode.replaceChild(Tmp60.mount.node(), node_12520508);
      }
      
      F.line = 700;
      var Tmp61 = match_12510920;
      if (ConstSet204[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_12520604 = Tmp61.inited;
      if (!(inited_12520604)) {
      L62: do {
        F.line = 702;
        var init_proc_12520611 = null;
        F.line = 184;
        var i_12640847 = 0;
        F.line = 185;
        var l_12640848 = (match_12510920.init != null ? match_12510920.init.length : 0);
        L63: do {
          F.line = 186;
            L64: while (true) {
            if (!(i_12640847 < l_12640848)) break L64;
              F.line = 702;
              init_proc_12520611 = match_12510920.init[chckIndx(i_12640847, 0, (match_12510920.init != null ? match_12510920.init.length : 0)+0-1)-0];
              F.line = 703;
              init_proc_12520611(node_12520508);
              F.line = 188;
              i_12640847 = addInt(i_12640847, 1);
              if (!(((match_12510920.init != null ? match_12510920.init.length : 0) == l_12640848))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp65 = match_12510920;
      if (ConstSet205[Tmp65.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 704;
      Tmp65.inited = true;
      F.line = 705;
      changed_12520507 = true;
      }
      
        if (!changed_12520507) Tmp66 = false; else {          var Tmp67 = match_12510920;
          if (ConstSet206[Tmp67.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp66 = !((Tmp67.mount == null));        }      if (Tmp66) {
      F.line = 709;
      var Tmp68 = match_12510920;
      if (ConstSet207[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12520508 = Tmp68.mount.node();
      F.line = 710;
      var Tmp69 = match_12510920;
      if (ConstSet208[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp69.mount.update(converted_val_12520509, set_12520513, refresh_12510924);
      }
      
      if (changed_12520507) {
      L70: do {
        F.line = 714;
        var submatch_12520636 = null;
        F.line = 182;
        var colontmp__12640851 = null;
        F.line = 714;
        var Tmp71 = match_12510920;
        if (ConstSet209[Tmp71.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__12640851 = Tmp71.matches;
        F.line = 184;
        var i_12640852 = 0;
        F.line = 185;
        var l_12640853 = (colontmp__12640851 != null ? colontmp__12640851.length : 0);
        L72: do {
          F.line = 186;
            L73: while (true) {
            if (!(i_12640852 < l_12640853)) break L73;
              F.line = 714;
              submatch_12520636 = colontmp__12640851[chckIndx(i_12640852, 0, (colontmp__12640851 != null ? colontmp__12640851.length : 0)+0-1)-0];
              F.line = 715;
              submatch_12520636.update(converted_val_12520509, set_12520513, refresh_12510924);
              F.line = 188;
              i_12640852 = addInt(i_12640852, 1);
              if (!(((colontmp__12640851 != null ? colontmp__12640851.length : 0) == l_12640853))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_12520507) {
      F.line = 718;
      var e_12520641 = {node: node_12520508, data: converted_val_12520509, init: !(inited_12520604), set: set_12520513};
      L74: do {
        F.line = 723;
        var refresh_proc_12520648 = null;
        F.line = 184;
        var i_12640857 = 0;
        F.line = 185;
        var l_12640858 = (match_12510920.refresh != null ? match_12510920.refresh.length : 0);
        L75: do {
          F.line = 186;
            L76: while (true) {
            if (!(i_12640857 < l_12640858)) break L76;
              F.line = 723;
              refresh_proc_12520648 = match_12510920.refresh[chckIndx(i_12640857, 0, (match_12510920.refresh != null ? match_12510920.refresh.length : 0)+0-1)-0];
              F.line = 724;
              refresh_proc_12520648(e_12520641);
              F.line = 188;
              i_12640857 = addInt(i_12640857, 1);
              if (!(((match_12510920.refresh != null ? match_12510920.refresh.length : 0) == l_12640858))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_12510889(match_12510894) {
    function HEX3Aanonymous_12510901(data_12510903, set_12510908, refresh_12510909) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 783;
        update_12510915(match_12510894, data_12510903, set_12510908, refresh_12510909);
      framePtr = F.prev;

      
    }

  var result_12510896 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 782;
    result_12510896 = {update: HEX3Aanonymous_12510901};
  framePtr = F.prev;

  return result_12510896;

}
function as_interface_12482733(config_12482738) {
    function HEX3Aanonymous_12482745(node_12482747) {
      var result_12482753 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 789;
        result_12482753 = nimCopy(null, [], NTI12482768);
        L1: do {
          F.line = 790;
          var comp_match_12510214 = null;
          F.line = 182;
          var colontmp__12640813 = null;
          F.line = 790;
          colontmp__12640813 = compile_12483067(config_12482738, node_12482747);
          F.line = 184;
          var i_12640815 = 0;
          F.line = 185;
          var l_12640816 = (colontmp__12640813 != null ? colontmp__12640813.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12640815 < l_12640816)) break L3;
                F.line = 790;
                comp_match_12510214 = colontmp__12640813[chckIndx(i_12640815, 0, (colontmp__12640813 != null ? colontmp__12640813.length : 0)+0-1)-0];
                F.line = 791;
                if (result_12482753 != null) { result_12482753.push(as_interface_12510889(comp_match_12510214)); } else { result_12482753 = [as_interface_12510889(comp_match_12510214)]; };
                F.line = 188;
                i_12640815 = addInt(i_12640815, 1);
                if (!(((colontmp__12640813 != null ? colontmp__12640813.length : 0) == l_12640816))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_12482753;

    }

  var result_12482740 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 787;
    result_12482740 = {compile: HEX3Aanonymous_12482745};
  framePtr = F.prev;

  return result_12482740;

}
function match_12482006(c_12482011, selector_12482012, convert_12482014, actions_12482020) {
  var result_12482022 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 290;
    result_12482022 = {selector: nimCopy(null, selector_12482012, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_12482014, NTI12477272), cmatches: null, iterate: {kind: 0, simple: null, serial: null, selector: null}};
    F.line = 297;
    if (c_12482011.cmatches != null) { c_12482011.cmatches.push(as_interface_12482733(result_12482022)); } else { c_12482011.cmatches = [as_interface_12482733(result_12482022)]; };
    if (!((actions_12482020 == null))) {
    F.line = 299;
    actions_12482020(result_12482022);
    }
    
  framePtr = F.prev;

  return result_12482022;

}
function match_12479461(c_12479466, selector_12479467, convert_12479469, actions_12479475) {
  var result_12479477 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 315;
    var type_selector_12479485 = {kind: 0, simple: convert_12479469, serial: null, compare: null, obj: null, eql: null};
    F.line = 318;
    result_12479477 = match_12482006(c_12479466, selector_12479467, type_selector_12479485, actions_12479475);
  framePtr = F.prev;

  return result_12479477;

}
function id_12479426(data_12479429) {
  var result_12479430 = null;

  var F={procname:"id.id",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 240;
    result_12479430 = data_12479429;
  framePtr = F.prev;

  return result_12479430;

}
function match_12479406(c_12479410, selector_12479411, actions_12479417) {
  var result_12479419 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 403;
    result_12479419 = match_12479461(c_12479410, selector_12479411, id_12479426, actions_12479417);
  framePtr = F.prev;

  return result_12479419;

}
function HEX3DHEX3D_10845020(x_10845024, y_10845026) {
  var result_10845027 = false;

  var F={procname:"==.==",prev:framePtr,filename:"comparisons.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 301;
    var same_object_10845601 = false;
    F.line = 302;
    same_object_10845601 = x_10845024 === y_10845026
    if (same_object_10845601) {
    F.line = 303;
    result_10845027 = true;
    break BeforeRet;
    }
    
    if (!(((x_10845024 != null ? x_10845024.length : 0) == (y_10845026 != null ? y_10845026.length : 0)))) {
    F.line = 310;
    result_10845027 = false;
    break BeforeRet;
    }
    
    L1: do {
      F.line = 312;
      var i_10846024 = 0;
      F.line = 66;
      var colontmp__12640874 = 0;
      F.line = 312;
      colontmp__12640874 = subInt((x_10845024 != null ? x_10845024.length : 0), 1);
      F.line = 77;
      var res_12640875 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12640875 <= colontmp__12640874)) break L3;
            F.line = 312;
            i_10846024 = res_12640875;
            if (!(HEX3DHEX3D_10840491(x_10845024[chckIndx(i_10846024, 0, (x_10845024 != null ? x_10845024.length : 0)+0-1)-0], y_10845026[chckIndx(i_10846024, 0, (y_10845026 != null ? y_10845026.length : 0)+0-1)-0]))) {
            F.line = 314;
            result_10845027 = false;
            break BeforeRet;
            }
            
            F.line = 80;
            res_12640875 = addInt(res_12640875, 1);
          }
      } while(false);
    } while(false);
    F.line = 316;
    result_10845027 = true;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10845027;

}
function len_10850128(t_10850133) {
  var result_10850134 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1467;
    result_10850134 = t_10850133.counter;
  framePtr = F.prev;

  return result_10850134;

}
function is_filled_1004018(hcode_1004020) {
  var result_1004021 = false;

  var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_1004021 = !((hcode_1004020 == 0));
  framePtr = F.prev;

  return result_1004021;

}
function imul_855517(a_855519, b_855520) {
  var result_855521 = 0;

  var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 133;
    var mask_855522 = 65535;
    F.line = 135;
    var a_hi_855531 = (((a_855519 >>> 0) >>> 16) & mask_855522);
    F.line = 136;
    var a_lo_855532 = (a_855519 & mask_855522);
    F.line = 137;
    var b_hi_855541 = (((b_855520 >>> 0) >>> 16) & mask_855522);
    F.line = 138;
    var b_lo_855542 = (b_855520 & mask_855522);
    F.line = 139;
    result_855521 = ((((a_lo_855532 * b_lo_855542) >>> 0) + (((((a_hi_855531 * b_lo_855542) >>> 0) + ((a_lo_855532 * b_hi_855541) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_855521;

}
function rotl32_855601(x_855603, r_855604) {
  var result_855605 = 0;

  var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_855605 = ((x_855603 << r_855604) | ((x_855603 >>> 0) >>> subInt(32, r_855604)));
  framePtr = F.prev;

  return result_855605;

}
function murmur_hash_855629(x_855632) {
  var result_855633 = 0;

  var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 155;
    var size_855643 = (x_855632 != null ? x_855632.length : 0);
    F.line = 156;
    var step_size_855645 = 4;
    F.line = 157;
    var n_855646 = divInt(size_855643, step_size_855645);
    F.line = 159;
    var h1_855647 = 0;
    F.line = 160;
    var i_855649 = 0;
    L1: do {
      F.line = 163;
        L2: while (true) {
        if (!(i_855649 < mulInt(n_855646, step_size_855645))) break L2;
          F.line = 164;
          var k1_855650 = 0;
          F.line = 166;
          var j_855651 = step_size_855645;
          L3: do {
            F.line = 167;
              L4: while (true) {
              if (!(0 < j_855651)) break L4;
                F.line = 168;
                j_855651 = subInt(j_855651, 1);
                F.line = 169;
                k1_855650 = ((k1_855650 << 8) | x_855632[chckIndx(addInt(i_855649, j_855651), 0, (x_855632 != null ? x_855632.length : 0)+0-1)-0]);
              }
          } while(false);
          F.line = 172;
          i_855649 = addInt(i_855649, step_size_855645);
          F.line = 174;
          k1_855650 = imul_855517(k1_855650, 3432918353);
          F.line = 175;
          k1_855650 = rotl32_855601(k1_855650, 15);
          F.line = 176;
          k1_855650 = imul_855517(k1_855650, 461845907);
          F.line = 178;
          h1_855647 = (h1_855647 ^ k1_855650);
          F.line = 179;
          h1_855647 = rotl32_855601(h1_855647, 13);
          F.line = 180;
          h1_855647 = ((((h1_855647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    F.line = 183;
    var k1_860208 = 0;
    F.line = 184;
    var rem_860209 = modInt(size_855643, step_size_855645);
    L5: do {
      F.line = 185;
        L6: while (true) {
        if (!(0 < rem_860209)) break L6;
          F.line = 186;
          rem_860209 = subInt(rem_860209, 1);
          F.line = 187;
          k1_860208 = ((k1_860208 << 8) | x_855632[chckIndx(addInt(i_855649, rem_860209), 0, (x_855632 != null ? x_855632.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 188;
    k1_860208 = imul_855517(k1_860208, 3432918353);
    F.line = 189;
    k1_860208 = rotl32_855601(k1_860208, 15);
    F.line = 190;
    k1_860208 = imul_855517(k1_860208, 461845907);
    F.line = 191;
    h1_855647 = (h1_855647 ^ k1_860208);
    F.line = 194;
    h1_855647 = (h1_855647 ^ size_855643);
    F.line = 195;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 16));
    F.line = 196;
    h1_855647 = imul_855517(h1_855647, 2246822507);
    F.line = 197;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 13));
    F.line = 198;
    h1_855647 = imul_855517(h1_855647, 3266489909);
    F.line = 199;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 16));
    F.line = 200;
    result_855633 = (h1_855647|0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_855633;

}
function hash_895214(x_895216) {
  var result_895217 = 0;

  var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_895217 = murmur_hash_855629((x_895216.slice(0, (x_895216 != null ? (x_895216.length-1) : -1)+1)));
  framePtr = F.prev;

  return result_895217;

}
function next_try_1005014(h_1005016, max_hash_1005017) {
  var result_1005018 = 0;

  var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_1005018 = (addInt(h_1005016, 1) & max_hash_1005017);
  framePtr = F.prev;

  return result_1005018;

}
function raw_get_10765621(t_10765626, key_10765627, hc_10765628, hc_10765628_Idx) {
            var Tmp3;

  var result_10765629 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10765628[hc_10765628_Idx] = hash_895214(key_10765627);
    if ((hc_10765628[hc_10765628_Idx] == 0)) {
    F.line = 65;
    hc_10765628[hc_10765628_Idx] = 314159265;
    }
    
    if (((t_10765626.data != null ? t_10765626.data.length : 0) == 0)) {
    F.line = 47;
    result_10765629 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10775138 = (hc_10765628[hc_10765628_Idx] & (t_10765626.data != null ? (t_10765626.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_10765626.data[chckIndx(h_10775138, 0, (t_10765626.data != null ? t_10765626.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10765626.data[chckIndx(h_10775138, 0, (t_10765626.data != null ? t_10765626.data.length : 0)+0-1)-0].Field0 == hc_10765628[hc_10765628_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10765626.data[chckIndx(h_10775138, 0, (t_10765626.data != null ? t_10765626.data.length : 0)+0-1)-0].Field2, key_10765627);            }          if (Tmp3) {
          F.line = 55;
          result_10765629 = h_10775138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10775138 = next_try_1005014(h_10775138, (t_10765626.data != null ? (t_10765626.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10765629 = subInt(-1, h_10775138);
  } while (false);
  framePtr = F.prev;

  return result_10765629;

}
function has_key_10860326(t_10860331, key_10860332) {
  var result_10860333 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1371;
    var hc_10860334 = [0];
    F.line = 1372;
    result_10860333 = (0 <= raw_get_10765621(t_10860331, key_10860332, hc_10860334, 0));
  framePtr = F.prev;

  return result_10860333;

}
function raw_get_10865157(t_10865161, key_10865162, hc_10865163, hc_10865163_Idx) {
            var Tmp3;

  var result_10865164 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10865163[hc_10865163_Idx] = hash_895214(key_10865162);
    if ((hc_10865163[hc_10865163_Idx] == 0)) {
    F.line = 65;
    hc_10865163[hc_10865163_Idx] = 314159265;
    }
    
    if (((t_10865161.data != null ? t_10865161.data.length : 0) == 0)) {
    F.line = 47;
    result_10865164 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10875138 = (hc_10865163[hc_10865163_Idx] & (t_10865161.data != null ? (t_10865161.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_10865161.data[chckIndx(h_10875138, 0, (t_10865161.data != null ? t_10865161.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10865161.data[chckIndx(h_10875138, 0, (t_10865161.data != null ? t_10865161.data.length : 0)+0-1)-0].Field0 == hc_10865163[hc_10865163_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10865161.data[chckIndx(h_10875138, 0, (t_10865161.data != null ? t_10865161.data.length : 0)+0-1)-0].Field2, key_10865162);            }          if (Tmp3) {
          F.line = 55;
          result_10865164 = h_10875138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10875138 = next_try_1005014(h_10875138, (t_10865161.data != null ? (t_10865161.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10865164 = subInt(-1, h_10875138);
  } while (false);
  framePtr = F.prev;

  return result_10865164;

}
function HEX5BHEX5D_10865146(t_10865152, key_10865153) {
  var result_10865155 = null;
  var result_10865155_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym1020595_10865156 = [0];
    F.line = 258;
    var indexHEX60gensym1020596_10875605 = raw_get_10865157(t_10865152, key_10865153, hcHEX60gensym1020595_10865156, 0);
    if ((0 <= indexHEX60gensym1020596_10875605)) {
    F.line = 259;
    result_10865155 = t_10865152.data[chckIndx(indexHEX60gensym1020596_10875605, 0, (t_10865152.data != null ? t_10865152.data.length : 0)+0-1)-0]; result_10865155_Idx = "Field3";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10865153 || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_10865155, result_10865155_Idx];

}
function HEX3DHEX3D_10840491(a_10840493, b_10840494) {
      var Tmp1;
        var Tmp2;
        var Tmp3;
        var Tmp4;
        var Tmp5;
        var Tmp6;
        var Tmp7;
        var Tmp8;
        var Tmp9;
        var Tmp10;
        var Tmp11;
          var Tmp12;
          var Tmp13;
          var Tmp15;
                  var Tmp18;
                  var Tmp19;
                  var Tmp20;

  var result_10840495 = false;

  var F={procname:"json.==",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((a_10840493 == null)) {
    if ((b_10840494 == null)) {
    F.line = 400;
    result_10840495 = true;
    break BeforeRet;
    }
    
    F.line = 401;
    result_10840495 = false;
    break BeforeRet;
    }
    else {
      if ((b_10840494 == null)) Tmp1 = true; else {        Tmp1 = !((a_10840493.kind == b_10840494.kind));      }    if (Tmp1) {
    F.line = 403;
    result_10840495 = false;
    break BeforeRet;
    }
    else {
      F.line = 405;
      switch (a_10840493.kind) {
      case 4:
        F.line = 407;
        var Tmp2 = a_10840493;
        if (ConstSet210[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp3 = b_10840494;
        if (ConstSet211[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10840495 = eqStrings(Tmp2.str, Tmp3.str);
        break;
      case 2:
        F.line = 409;
        var Tmp4 = a_10840493;
        if (ConstSet212[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp5 = b_10840494;
        if (ConstSet213[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10840495 = (Tmp4.num == Tmp5.num);
        break;
      case 3:
        F.line = 411;
        var Tmp6 = a_10840493;
        if (ConstSet214[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp7 = b_10840494;
        if (ConstSet215[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10840495 = (Tmp6.fnum == Tmp7.fnum);
        break;
      case 1:
        F.line = 413;
        var Tmp8 = a_10840493;
        if (ConstSet216[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp9 = b_10840494;
        if (ConstSet217[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10840495 = (Tmp8.bval == Tmp9.bval);
        break;
      case 0:
        F.line = 415;
        result_10840495 = true;
        break;
      case 6:
        F.line = 417;
        var Tmp10 = a_10840493;
        if (ConstSet218[Tmp10.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp11 = b_10840494;
        if (ConstSet219[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10840495 = HEX3DHEX3D_10845020(Tmp10.elems, Tmp11.elems);
        break;
      case 5:
          var Tmp12 = a_10840493;
          if (ConstSet220[Tmp12.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          var Tmp13 = b_10840494;
          if (ConstSet221[Tmp13.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        if (!((len_10850128(Tmp12.fields) == len_10850128(Tmp13.fields)))) {
        F.line = 421;
        result_10840495 = false;
        break BeforeRet;
        }
        
        L14: do {
          F.line = 422;
          var key_10860214 = null;
          F.line = 422;
          var val_10860215 = null;
          F.line = 1646;
          var colontmp__12640867 = {data: null, counter: 0, first: 0, last: 0};
          F.line = 422;
          var Tmp15 = a_10840493;
          if (ConstSet222[Tmp15.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          nimCopy(colontmp__12640867, Tmp15.fields, NTI10671067);
          F.line = 1672;
          var l_12640869 = len_10850128(colontmp__12640867);
          if ((0 < colontmp__12640867.counter)) {
          F.line = 1251;
          var h_12640870 = colontmp__12640867.first;
          L16: do {
            F.line = 1252;
              L17: while (true) {
              if (!(0 <= h_12640870)) break L17;
                F.line = 1253;
                var nxt_12640872 = colontmp__12640867.data[chckIndx(h_12640870, 0, (colontmp__12640867.data != null ? colontmp__12640867.data.length : 0)+0-1)-0].Field1;
                if (is_filled_1004018(colontmp__12640867.data[chckIndx(h_12640870, 0, (colontmp__12640867.data != null ? colontmp__12640867.data.length : 0)+0-1)-0].Field0)) {
                F.line = 422;
                key_10860214 = colontmp__12640867.data[chckIndx(h_12640870, 0, (colontmp__12640867.data != null ? colontmp__12640867.data.length : 0)+0-1)-0].Field2;
                F.line = 1674;
                val_10860215 = colontmp__12640867.data[chckIndx(h_12640870, 0, (colontmp__12640867.data != null ? colontmp__12640867.data.length : 0)+0-1)-0].Field3;
                  var Tmp18 = b_10840494;
                  if (ConstSet223[Tmp18.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(has_key_10860326(Tmp18.fields, key_10860214))) {
                F.line = 423;
                result_10840495 = false;
                break BeforeRet;
                }
                
                  var Tmp19 = b_10840494;
                  if (ConstSet224[Tmp19.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(HEX3DHEX3D_10840491((Tmp20 = HEX5BHEX5D_10865146(Tmp19.fields, key_10860214), Tmp20)[0][Tmp20[1]], val_10860215))) {
                F.line = 424;
                result_10840495 = false;
                break BeforeRet;
                }
                
                if (!((len_10850128(colontmp__12640867) == l_12640869))) {
                F.line = 1675;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tables.nim(1675, 11) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 1256;
                h_12640870 = nxt_12640872;
              }
          } while(false);
          }
          
        } while(false);
        F.line = 425;
        result_10840495 = true;
        break;
      }
    }
    }
  } while (false);
  framePtr = F.prev;

  return result_10840495;

}
function invalid_format_string_9975046() {
  var F={procname:"strutils.invalidFormatString",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2624;
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
  framePtr = F.prev;

  
}
function nsuToLowerAsciiChar(c_9125023) {
  var result_9125024 = 0;

  var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet229[c_9125023] != undefined)) {
    F.line = 209;
    result_9125024 = chckRange(addInt(c_9125023, 32), 0, 255);
    }
    else {
      F.line = 211;
      result_9125024 = c_9125023;
    }
    
  framePtr = F.prev;

  return result_9125024;

}
function nsuCmpIgnoreStyle(a_9185022, b_9185023) {
          var Tmp7;
          var Tmp8;

  var result_9185024 = 0;

  BeforeRet: do {
    var i_9185026 = 0;
    var j_9185028 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          L3: do {
              L4: while (true) {
              if (!((i_9185026 < (a_9185022 != null ? a_9185022.length : 0)) && (a_9185022[i_9185026] == 95))) break L4;
                i_9185026 += 1;
              }
          } while(false);
          L5: do {
              L6: while (true) {
              if (!((j_9185028 < (b_9185023 != null ? b_9185023.length : 0)) && (b_9185023[j_9185028] == 95))) break L6;
                j_9185028 += 1;
              }
          } while(false);
          if ((i_9185026 < (a_9185022 != null ? a_9185022.length : 0))) {
          Tmp7 = nsuToLowerAsciiChar(a_9185022[i_9185026]);
          }
          else {
          Tmp7 = 0;
          }
          
          var aa_9185041 = Tmp7;
          if ((j_9185028 < (b_9185023 != null ? b_9185023.length : 0))) {
          Tmp8 = nsuToLowerAsciiChar(b_9185023[j_9185028]);
          }
          else {
          Tmp8 = 0;
          }
          
          var bb_9185042 = Tmp8;
          result_9185024 = (aa_9185041 - bb_9185042);
          if (!((result_9185024 == 0))) {
          break BeforeRet;
          }
          
          if (((a_9185022 != null ? a_9185022.length : 0) <= i_9185026)) {
          if (((b_9185023 != null ? b_9185023.length : 0) <= j_9185028)) {
          result_9185024 = 0;
          break BeforeRet;
          }
          
          result_9185024 = -1;
          break BeforeRet;
          }
          else {
          if (((b_9185023 != null ? b_9185023.length : 0) <= j_9185028)) {
          result_9185024 = 1;
          break BeforeRet;
          }
          }
          i_9185026 += 1;
          j_9185028 += 1;
        }
    } while(false);
  } while (false);

  return result_9185024;

}
function find_normalized_9975014(x_9975016, in_array_9975018) {
  var result_9975019 = 0;

  var F={procname:"strutils.findNormalized",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 2616;
    var i_9975021 = 0;
    L1: do {
      F.line = 2617;
        L2: while (true) {
        if (!(i_9975021 < (in_array_9975018 != null ? (in_array_9975018.length-1) : -1))) break L2;
          if ((nsuCmpIgnoreStyle(x_9975016, in_array_9975018[chckIndx(i_9975021, 0, (in_array_9975018 != null ? in_array_9975018.length : 0)+0-1)-0]) == 0)) {
          F.line = 2618;
          result_9975019 = i_9975021;
          break BeforeRet;
          }
          
          F.line = 2619;
          i_9975021 = addInt(i_9975021, 2);
        }
    } while(false);
    F.line = 2621;
    result_9975019 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9975019;

}
function nsuAddf(s_9980018, s_9980018_Idx, formatstr_9980019, a_9980021) {
                  var Tmp5;
            var Tmp6;
              var Tmp7;
            var Tmp10;
              var Tmp11;
                var Tmp12;
                  var Tmp15;
              var Tmp16;

  var F={procname:"strutils.addf",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2630;
    var i_9980025 = 0;
    F.line = 2631;
    var num_9980027 = 0;
    L1: do {
      F.line = 2632;
        L2: while (true) {
        if (!(i_9980025 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) break L2;
          if (((formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 36) && (addInt(i_9980025, 1) < (formatstr_9980019 != null ? formatstr_9980019.length : 0)))) {
          F.line = 2634;
          switch (formatstr_9980019[chckIndx(addInt(i_9980025, 1), 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]) {
          case 35:
            if (((a_9980021 != null ? (a_9980021.length-1) : -1) < num_9980027)) {
            F.line = 2636;
            invalid_format_string_9975046();
            }
            
            F.line = 2637;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(num_9980027, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(num_9980027, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            F.line = 2638;
            i_9980025 = addInt(i_9980025, 2);
            F.line = 2639;
            num_9980027 = addInt(num_9980027, 1);
            break;
          case 36:
            F.line = 2641;
            if (s_9980018[s_9980018_Idx] != null) { addChar(s_9980018[s_9980018_Idx], 36); } else { s_9980018[s_9980018_Idx] = [36]; };
            F.line = 2642;
            i_9980025 = addInt(i_9980025, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            F.line = 2644;
            var j_9985025 = 0;
            F.line = 2645;
            i_9980025 = addInt(i_9980025, 1);
            F.line = 2646;
            var negative_9985032 = (formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 45);
            if (negative_9985032) {
            F.line = 2647;
            i_9980025 = addInt(i_9980025, 1);
            }
            
            L3: do {
              F.line = 2648;
                L4: while (true) {
                  if (!(i_9980025 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) Tmp5 = false; else {                    Tmp5 = (ConstSet226[formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined);                  }                if (!Tmp5) break L4;
                  F.line = 2649;
                  j_9985025 = subInt(addInt(mulInt(j_9985025, 10), formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]), 48);
                  F.line = 2650;
                  i_9980025 = addInt(i_9980025, 1);
                }
            } while(false);
            F.line = 2651;
            if (!(negative_9985032)) {
            Tmp6 = subInt(j_9985025, 1);
            }
            else {
            Tmp6 = subInt((a_9980021 != null ? a_9980021.length : 0), j_9985025);
            }
            
            var idx_9990025 = Tmp6;
              if ((idx_9990025 < 0)) Tmp7 = true; else {                Tmp7 = ((a_9980021 != null ? (a_9980021.length-1) : -1) < idx_9990025);              }            if (Tmp7) {
            F.line = 2652;
            invalid_format_string_9975046();
            }
            
            F.line = 2653;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(idx_9990025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(idx_9990025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            break;
          case 123:
            F.line = 2655;
            var j_9995006 = addInt(i_9980025, 2);
            F.line = 2656;
            var k_9995008 = 0;
            F.line = 2657;
            var negative_9995009 = (formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 45);
            if (negative_9995009) {
            F.line = 2658;
            j_9995006 = addInt(j_9995006, 1);
            }
            
            F.line = 2659;
            var is_number_9995017 = 0;
            L8: do {
              F.line = 2660;
                L9: while (true) {
                if (!((j_9995006 < (formatstr_9980019 != null ? formatstr_9980019.length : 0)) && !((ConstSet227[formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined)))) break L9;
                  if ((ConstSet228[formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined)) {
                  F.line = 2662;
                  k_9995008 = subInt(addInt(mulInt(k_9995008, 10), formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]), 48);
                  if ((is_number_9995017 == 0)) {
                  F.line = 2663;
                  is_number_9995017 = 1;
                  }
                  
                  }
                  else {
                    F.line = 2665;
                    is_number_9995017 = -1;
                  }
                  
                  F.line = 2666;
                  j_9995006 = addInt(j_9995006, 1);
                }
            } while(false);
            if ((is_number_9995017 == 1)) {
            F.line = 2668;
            if (!(negative_9995009)) {
            Tmp10 = subInt(k_9995008, 1);
            }
            else {
            Tmp10 = subInt((a_9980021 != null ? a_9980021.length : 0), k_9995008);
            }
            
            var idx_10005025 = Tmp10;
              if ((idx_10005025 < 0)) Tmp11 = true; else {                Tmp11 = ((a_9980021 != null ? (a_9980021.length-1) : -1) < idx_10005025);              }            if (Tmp11) {
            F.line = 2669;
            invalid_format_string_9975046();
            }
            
            F.line = 2670;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(idx_10005025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(idx_10005025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            }
            else {
              F.line = 2672;
              var x_10010006 = find_normalized_9975014(substr_341022(formatstr_9980019, addInt(i_9980025, 2), subInt(j_9995006, 1)), a_9980021);
                if (!(0 <= x_10010006)) Tmp12 = false; else {                  Tmp12 = (x_10010006 < (a_9980021 != null ? (a_9980021.length-1) : -1));                }              if (Tmp12) {
              F.line = 2673;
              if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(addInt(x_10010006, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(addInt(x_10010006, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
              }
              else {
                F.line = 2674;
              invalid_format_string_9975046();
              }
              
            }
            
            F.line = 2675;
            i_9980025 = addInt(j_9995006, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            F.line = 2677;
            var j_10015006 = addInt(i_9980025, 1);
            L13: do {
              F.line = 2678;
                L14: while (true) {
                  if (!(j_10015006 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) Tmp15 = false; else {                    Tmp15 = (ConstSet230[formatstr_9980019[chckIndx(j_10015006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined);                  }                if (!Tmp15) break L14;
                  F.line = 2678;
                  j_10015006 = addInt(j_10015006, 1);
                }
            } while(false);
            F.line = 2679;
            var x_10020013 = find_normalized_9975014(substr_341022(formatstr_9980019, addInt(i_9980025, 1), subInt(j_10015006, 1)), a_9980021);
              if (!(0 <= x_10020013)) Tmp16 = false; else {                Tmp16 = (x_10020013 < (a_9980021 != null ? (a_9980021.length-1) : -1));              }            if (Tmp16) {
            F.line = 2680;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(addInt(x_10020013, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(addInt(x_10020013, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            }
            else {
              F.line = 2681;
            invalid_format_string_9975046();
            }
            
            F.line = 2682;
            i_9980025 = j_10015006;
            break;
          default: 
            F.line = 2684;
            invalid_format_string_9975046();
            break;
          }
          }
          else {
            F.line = 2686;
            if (s_9980018[s_9980018_Idx] != null) { addChar(s_9980018[s_9980018_Idx], formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = [formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]]; };
            F.line = 2687;
            i_9980025 = addInt(i_9980025, 1);
          }
          
        }
    } while(false);
  framePtr = F.prev;

  
}
function nsuFormatOpenArray(formatstr_10025027, a_10025029) {
  var result_10025030 = [null];

  var F={procname:"strutils.%",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2734;
    result_10025030[0] = nimCopy(null, mnewString(0), NTI112);
    F.line = 2735;
    nsuAddf(result_10025030, 0, formatstr_10025027, a_10025029);
  framePtr = F.prev;

  return result_10025030[0];

}
function is_undefined_315483(x_315486) {
  var result_315487 = false;

  var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_315487 = x_315486 === undefined;
  framePtr = F.prev;

  return result_315487;

}
function add_quoted_11200201(s_11200204, s_11200204_Idx, x_11200205) {
  var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2807;
    if (s_11200204[s_11200204_Idx] != null) { s_11200204[s_11200204_Idx] = (s_11200204[s_11200204_Idx]).concat(reprEnum(x_11200205, NTI10671041)); } else { s_11200204[s_11200204_Idx] = reprEnum(x_11200205, NTI10671041).slice(); };
  framePtr = F.prev;

  
}
function collection_to_string_11200015(x_11200018, prefix_11200019, separator_11200020, suffix_11200021) {
  var result_11200022 = [null];

  var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"dollars.nim",line:0};
  framePtr = F;
    F.line = 106;
    result_11200022[0] = nimCopy(null, prefix_11200019, NTI112);
    F.line = 107;
    var first_element_11200023 = true;
    L1: do {
      F.line = 108;
      var value_11200069 = 0;
      F.line = 37;
      var i_12640902 = 0;
      L2: do {
        F.line = 38;
          L3: while (true) {
          if (!(i_12640902 <= 6)) break L3;
            if ((x_11200018[i_12640902] != undefined)) {
            F.line = 108;
            value_11200069 = i_12640902;
            if (first_element_11200023) {
            F.line = 110;
            first_element_11200023 = false;
            }
            else {
              F.line = 112;
            if (result_11200022[0] != null) { result_11200022[0] = (result_11200022[0]).concat(separator_11200020); } else { result_11200022[0] = separator_11200020.slice(); };
            }
            
            F.line = 121;
            add_quoted_11200201(result_11200022, 0, value_11200069);
            }
            
            F.line = 40;
            i_12640902 += 1;
          }
      } while(false);
    } while(false);
    F.line = 122;
    if (result_11200022[0] != null) { result_11200022[0] = (result_11200022[0]).concat(suffix_11200021); } else { result_11200022[0] = suffix_11200021.slice(); };
  framePtr = F.prev;

  return result_11200022[0];

}
function HEX24_11200009(x_11200013) {
  var result_11200014 = null;

  var F={procname:"$.$",prev:framePtr,filename:"dollars.nim",line:0};
  framePtr = F;
    F.line = 125;
    result_11200014 = nimCopy(null, collection_to_string_11200015(x_11200013, makeNimstrLit("{"), makeNimstrLit(", "), makeNimstrLit("}")), NTI112);
  framePtr = F.prev;

  return result_11200014;

}
function new_12325008() {
  var result_12325012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_12325202 = null;
    F.line = 851;
    r_12325202 = {children: null, settings: null};
    F.line = 852;
    result_12325012 = r_12325202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12325012;

}
function len_10880341(n_10880343) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10880344 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 456;
    switch (n_10880343.kind) {
    case 6:
      F.line = 457;
      var Tmp1 = n_10880343;
      if (ConstSet234[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_10880344 = ((Tmp2 = Tmp1.elems, Tmp2) != null ? Tmp2.length : 0);
      break;
    case 5:
      F.line = 458;
      var Tmp3 = n_10880343;
      if (ConstSet235[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_10880344 = len_10850128(Tmp3.fields);
      break;
    default: 
      break;
    }
  framePtr = F.prev;

  return result_10880344;

}
function add_int_325201(result_325204, result_325204_Idx, x_325205) {
  var F={procname:"system.addInt",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2347;
    if (result_325204[result_325204_Idx] != null) { result_325204[result_325204_Idx] = (result_325204[result_325204_Idx]).concat(cstrToNimstr((x_325205)+"")); } else { result_325204[result_325204_Idx] = cstrToNimstr((x_325205)+"").slice(); };
  framePtr = F.prev;

  
}
function new_jstring_10671086(s_10671088) {
  var result_10671089 = null;

  var F={procname:"json.newJString",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 186;
    result_10671089 = {kind: 4, str: nimCopy(null, s_10671088, NTI112), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10671089;

}
function new_jint_10671168(n_10671170) {
  var result_10671171 = null;

  var F={procname:"json.newJInt",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 194;
    result_10671171 = {kind: 2, num: n_10671170, str: null, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10671171;

}
function new_jfloat_10671185(n_10671187) {
  var result_10671188 = null;

  var F={procname:"json.newJFloat",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 198;
    result_10671188 = {kind: 3, fnum: n_10671187, str: null, num: 0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10671188;

}
function new_jbool_10671202(b_10671204) {
  var result_10671205 = null;

  var F={procname:"json.newJBool",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 202;
    result_10671205 = {kind: 1, bval: b_10671204, str: null, num: 0, fnum: 0.0, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10671205;

}
function new_jnull_10671219() {
  var result_10671221 = null;

  var F={procname:"json.newJNull",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 206;
    result_10671221 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10671221;

}
function is_power_of_two_955029(x_955031) {
    var Tmp1;

  var result_955032 = false;

  BeforeRet: do {
    if (!(0 < x_955031)) Tmp1 = false; else {      Tmp1 = ((x_955031 & (x_955031 - 1)) == 0);    }    result_955032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_955032;

}
function init_ordered_table_10671240(initial_size_10671244) {
  var result_10671246 = {data: null, counter: 0, first: 0, last: 0};

  var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_955029(initial_size_10671244))) {
    F.line = 127;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 128;
    result_10671246.counter = 0;
    F.line = 129;
    result_10671246.data = new Array(chckRange(initial_size_10671244, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10671244, 0, 2147483647);++i) {result_10671246.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    result_10671246.first = -1;
    F.line = 132;
    result_10671246.last = -1;
  framePtr = F.prev;

  return result_10671246;

}
function new_jobject_10671235() {
  var result_10671237 = null;

  var F={procname:"json.newJObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_10671237 = {kind: 5, fields: init_ordered_table_10671240(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
  framePtr = F.prev;

  return result_10671237;

}
function must_rehash_10800601(t_10800604) {
  var result_10800605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10800604.counter < (t_10800604.data != null ? t_10800604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10800605 = ((mulInt((t_10800604.data != null ? t_10800604.data.length : 0), 2) < mulInt(t_10800604.counter, 3)) || (subInt((t_10800604.data != null ? t_10800604.data.length : 0), t_10800604.counter) < 4));
  framePtr = F.prev;

  return result_10800605;

}
function raw_insert_10826349(t_10826355, data_10826358, data_10826358_Idx, key_10826359, val_10826360, hc_10826361, h_10826362) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10826358[data_10826358_Idx][chckIndx(h_10826362, 0, (data_10826358[data_10826358_Idx] != null ? data_10826358[data_10826358_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, key_10826359, NTI112);
    F.line = 23;
    data_10826358[data_10826358_Idx][chckIndx(h_10826362, 0, (data_10826358[data_10826358_Idx] != null ? data_10826358[data_10826358_Idx].length : 0)+0-1)-0].Field3 = val_10826360;
    F.line = 24;
    data_10826358[data_10826358_Idx][chckIndx(h_10826362, 0, (data_10826358[data_10826358_Idx] != null ? data_10826358[data_10826358_Idx].length : 0)+0-1)-0].Field0 = hc_10826361;
    F.line = 1227;
    data_10826358[data_10826358_Idx][chckIndx(h_10826362, 0, (data_10826358[data_10826358_Idx] != null ? data_10826358[data_10826358_Idx].length : 0)+0-1)-0].Field1 = -1;
    if ((t_10826355.first < 0)) {
    F.line = 1228;
    t_10826355.first = h_10826362;
    }
    
    if ((0 <= t_10826355.last)) {
    F.line = 1229;
    data_10826358[data_10826358_Idx][chckIndx(t_10826355.last, 0, (data_10826358[data_10826358_Idx] != null ? data_10826358[data_10826358_Idx].length : 0)+0-1)-0].Field1 = h_10826362;
    }
    
    F.line = 1230;
    t_10826355.last = h_10826362;
  framePtr = F.prev;

  
}
function enlarge_10825180(t_10825186) {
          var Tmp6;
          var Tmp7;

  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1233;
    var n_10825194 = null;
    F.line = 1234;
    n_10825194 = new Array(chckRange(mulInt((t_10825186.data != null ? t_10825186.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10825186.data != null ? t_10825186.data.length : 0), 2), 0, 2147483647);++i) {n_10825194[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 1235;
    var h_10825333 = t_10825186.first;
    F.line = 1236;
    t_10825186.first = -1;
    F.line = 1237;
    t_10825186.last = -1;
    F.line = 1238;
    var Tmp1 = t_10825186.data; t_10825186.data = n_10825194; n_10825194 = Tmp1;    L2: do {
      F.line = 1239;
        L3: while (true) {
        if (!(0 <= h_10825333)) break L3;
          F.line = 1240;
          var nxt_10825489 = n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field1;
          F.line = 1241;
          var eh_10825638 = n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field0;
          if (is_filled_1004018(eh_10825638)) {
          F.line = 1243;
          var j_10825645 = (eh_10825638 & (t_10825186.data != null ? (t_10825186.data.length-1) : -1));
          L4: do {
            F.line = 1244;
              L5: while (true) {
              if (!is_filled_1004018(t_10825186.data[chckIndx(j_10825645, 0, (t_10825186.data != null ? t_10825186.data.length : 0)+0-1)-0].Field0)) break L5;
                F.line = 1245;
                j_10825645 = next_try_1005014(j_10825645, (t_10825186.data != null ? (t_10825186.data.length-1) : -1));
              }
          } while(false);
          F.line = 1246;
          Tmp6 = n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field2;
          n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field2 = genericReset(n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field2, NTI112);
          Tmp7 = n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field3;
          n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field3 = genericReset(n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field3, NTI10671043);
          raw_insert_10826349(t_10825186, t_10825186, "data", Tmp6, Tmp7, n_10825194[chckIndx(h_10825333, 0, (n_10825194 != null ? n_10825194.length : 0)+0-1)-0].Field0, j_10825645);
          }
          
          F.line = 1247;
          h_10825333 = nxt_10825489;
        }
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10827149(t_10827154, key_10827155, hc_10827156) {
  var result_10827157 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10827154.data != null ? t_10827154.data.length : 0) == 0)) {
    F.line = 47;
    result_10827157 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10830138 = (hc_10827156 & (t_10827154.data != null ? (t_10827154.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_10827154.data[chckIndx(h_10830138, 0, (t_10827154.data != null ? t_10827154.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10827154.data[chckIndx(h_10830138, 0, (t_10827154.data != null ? t_10827154.data.length : 0)+0-1)-0].Field0 == hc_10827156) && eqStrings(t_10827154.data[chckIndx(h_10830138, 0, (t_10827154.data != null ? t_10827154.data.length : 0)+0-1)-0].Field2, key_10827155))) {
          F.line = 55;
          result_10827157 = h_10830138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10830138 = next_try_1005014(h_10830138, (t_10827154.data != null ? (t_10827154.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10827157 = subInt(-1, h_10830138);
  } while (false);
  framePtr = F.prev;

  return result_10827157;

}
function HEX5BHEX5DHEX3D_10740311(t_10740317, key_10740318, val_10740319) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10740317.data != null ? t_10740317.data.length : 0) == 0)) {
    if (!(is_power_of_two_955029(64))) {
    F.line = 127;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 128;
    t_10740317.counter = 0;
    F.line = 129;
    t_10740317.data = new Array(64); for (var i=0;i<64;++i) {t_10740317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    t_10740317.first = -1;
    F.line = 132;
    t_10740317.last = -1;
    }
    
    F.line = 57;
    var hc_10765601 = [0];
    F.line = 58;
    var index_10775620 = raw_get_10765621(t_10740317, key_10740318, hc_10765601, 0);
    if ((0 <= index_10775620)) {
    F.line = 59;
    t_10740317.data[chckIndx(index_10775620, 0, (t_10740317.data != null ? t_10740317.data.length : 0)+0-1)-0].Field3 = val_10740319;
    }
    else {
      if (((t_10740317.data != null ? t_10740317.data.length : 0) == 0)) {
      if (!(is_power_of_two_955029(64))) {
      F.line = 127;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 128;
      t_10740317.counter = 0;
      F.line = 129;
      t_10740317.data = new Array(64); for (var i=0;i<64;++i) {t_10740317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}      F.line = 131;
      t_10740317.first = -1;
      F.line = 132;
      t_10740317.last = -1;
      }
      
      if (must_rehash_10800601(t_10740317)) {
      F.line = 49;
      enlarge_10825180(t_10740317);
      F.line = 50;
      index_10775620 = raw_get_known_hc_10827149(t_10740317, key_10740318, hc_10765601[0]);
      }
      
      F.line = 51;
      index_10775620 = subInt(-1, index_10775620);
      F.line = 52;
      raw_insert_10826349(t_10740317, t_10740317, "data", key_10740318, val_10740319, hc_10765601[0], index_10775620);
      F.line = 60;
      t_10740317.counter = addInt(t_10740317.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function new_jarray_10690657() {
  var result_10690659 = null;

  var F={procname:"json.newJArray",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 214;
    result_10690659 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};
  framePtr = F.prev;

  return result_10690659;

}
function copy_11016457(p_11016459) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
        var Tmp6;
              var Tmp9;
        var Tmp11;
              var Tmp14;
              var Tmp15;

  var result_11016460 = null;

  var F={procname:"json.copy",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 550;
    switch (p_11016459.kind) {
    case 4:
      F.line = 552;
      var Tmp1 = p_11016459;
      if (ConstSet236[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11016460 = new_jstring_10671086(Tmp1.str);
      break;
    case 2:
      F.line = 554;
      var Tmp2 = p_11016459;
      if (ConstSet237[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11016460 = new_jint_10671168(Tmp2.num);
      break;
    case 3:
      F.line = 556;
      var Tmp3 = p_11016459;
      if (ConstSet238[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11016460 = new_jfloat_10671185(Tmp3.fnum);
      break;
    case 1:
      F.line = 558;
      var Tmp4 = p_11016459;
      if (ConstSet239[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11016460 = new_jbool_10671202(Tmp4.bval);
      break;
    case 0:
      F.line = 560;
      result_11016460 = new_jnull_10671219();
      break;
    case 5:
      F.line = 562;
      result_11016460 = new_jobject_10671235();
      L5: do {
        F.line = 563;
        var key_11016473 = null;
        F.line = 563;
        var val_11016474 = null;
        F.line = 1646;
        var colontmp__12640911 = {data: null, counter: 0, first: 0, last: 0};
        F.line = 563;
        var Tmp6 = p_11016459;
        if (ConstSet240[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        nimCopy(colontmp__12640911, Tmp6.fields, NTI10671067);
        F.line = 1672;
        var l_12640912 = len_10850128(colontmp__12640911);
        if ((0 < colontmp__12640911.counter)) {
        F.line = 1251;
        var h_12640913 = colontmp__12640911.first;
        L7: do {
          F.line = 1252;
            L8: while (true) {
            if (!(0 <= h_12640913)) break L8;
              F.line = 1253;
              var nxt_12640915 = colontmp__12640911.data[chckIndx(h_12640913, 0, (colontmp__12640911.data != null ? colontmp__12640911.data.length : 0)+0-1)-0].Field1;
              if (is_filled_1004018(colontmp__12640911.data[chckIndx(h_12640913, 0, (colontmp__12640911.data != null ? colontmp__12640911.data.length : 0)+0-1)-0].Field0)) {
              F.line = 563;
              key_11016473 = colontmp__12640911.data[chckIndx(h_12640913, 0, (colontmp__12640911.data != null ? colontmp__12640911.data.length : 0)+0-1)-0].Field2;
              F.line = 1674;
              val_11016474 = colontmp__12640911.data[chckIndx(h_12640913, 0, (colontmp__12640911.data != null ? colontmp__12640911.data.length : 0)+0-1)-0].Field3;
              F.line = 564;
              var Tmp9 = result_11016460;
              if (ConstSet241[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
              HEX5BHEX5DHEX3D_10740311(Tmp9.fields, key_11016473, copy_11016457(val_11016474));
              if (!((len_10850128(colontmp__12640911) == l_12640912))) {
              F.line = 1675;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tables.nim(1675, 11) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 1256;
              h_12640913 = nxt_12640915;
            }
        } while(false);
        }
        
      } while(false);
      break;
    case 6:
      F.line = 566;
      result_11016460 = new_jarray_10690657();
      L10: do {
        F.line = 567;
        var i_11016602 = null;
        F.line = 182;
        var colontmp__12640917 = null;
        F.line = 567;
        var Tmp11 = p_11016459;
        if (ConstSet242[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        colontmp__12640917 = Tmp11.elems;
        F.line = 184;
        var i_12640919 = 0;
        F.line = 185;
        var l_12640920 = (colontmp__12640917 != null ? colontmp__12640917.length : 0);
        L12: do {
          F.line = 186;
            L13: while (true) {
            if (!(i_12640919 < l_12640920)) break L13;
              F.line = 567;
              i_11016602 = colontmp__12640917[chckIndx(i_12640919, 0, (colontmp__12640917 != null ? colontmp__12640917.length : 0)+0-1)-0];
              F.line = 568;
              var Tmp14 = result_11016460;
              if (ConstSet243[Tmp14.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
              if ((Tmp15 = Tmp14.elems, Tmp15) != null) { Tmp15.push(copy_11016457(i_11016602)); } else { Tmp15 = [copy_11016457(i_11016602)]; };
              F.line = 188;
              i_12640919 = addInt(i_12640919, 1);
              if (!(((colontmp__12640917 != null ? colontmp__12640917.length : 0) == l_12640920))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      break;
    }
  framePtr = F.prev;

  return result_11016460;

}
function init_from_json_11185879(dst_11185882, dst_11185882_Idx, json_node_11185883, json_path_11185885, json_path_11185885_Idx) {
  var F={procname:"json.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1001;
    dst_11185882[dst_11185882_Idx] = copy_11016457(json_node_11185883);
  framePtr = F.prev;

  
}
function HEX5BHEX5D_10900569(node_10900571, index_10900572) {
    var Tmp1;
    var Tmp2;

  var result_10900573 = null;

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(!((node_10900571 == null)))) {
    F.line = 474;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(474, 9) `not isNil(node)` "));
    }
    
    if (!((node_10900571.kind == 6))) {
    F.line = 475;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(475, 9) `node.kind == JArray` "));
    }
    
    F.line = 476;
    var Tmp1 = node_10900571;
    if (ConstSet244[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    result_10900573 = (Tmp2 = Tmp1.elems, Tmp2)[chckIndx(index_10900572, 0, (Tmp2 != null ? Tmp2.length : 0)+0-1)-0];
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10900573;

}
function init_from_json_12335201(dst_12335206, dst_12335206_Idx, json_node_12335207, json_path_12335208, json_path_12335208_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10840491(json_node_12335207, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12335208[json_path_12335208_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet232[json_node_12335207.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12335210_12350019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11200009(ConstSet233), nimCopy(null, json_path_12335208[json_path_12335208_Idx], NTI112), reprEnum(json_node_12335207.kind, NTI10671041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12335210_12350019, NTI112), parent: null, m_type: NTI10486039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1020;
    if (dst_12335206[dst_12335206_Idx] === null) dst_12335206[dst_12335206_Idx] = [];
               if (dst_12335206[dst_12335206_Idx].length < (Tmp1 = chckRange(len_10880341(json_node_12335207), 0, 2147483647), Tmp1)) { for (var i=dst_12335206[dst_12335206_Idx].length;i<Tmp1;++i) dst_12335206[dst_12335206_Idx].push(null); }
               else { dst_12335206[dst_12335206_Idx].length = Tmp1; };
    F.line = 1021;
    var orignal_json_path_len_12355010 = (json_path_12335208[json_path_12335208_Idx] != null ? json_path_12335208[json_path_12335208_Idx].length : 0);
    L2: do {
      F.line = 1022;
      var i_12355019 = 0;
      F.line = 104;
      var colontmp__12640907 = 0;
      F.line = 1022;
      colontmp__12640907 = len_10880341(json_node_12335207);
      F.line = 106;
      var i_12640908 = 0;
      L3: do {
        F.line = 107;
          L4: while (true) {
          if (!(i_12640908 < colontmp__12640907)) break L4;
            F.line = 1022;
            i_12355019 = i_12640908;
            F.line = 1023;
            if (json_path_12335208[json_path_12335208_Idx] != null) { addChar(json_path_12335208[json_path_12335208_Idx], 91); } else { json_path_12335208[json_path_12335208_Idx] = [91]; };
            F.line = 1024;
            add_int_325201(json_path_12335208, json_path_12335208_Idx, i_12355019);
            F.line = 1025;
            if (json_path_12335208[json_path_12335208_Idx] != null) { addChar(json_path_12335208[json_path_12335208_Idx], 93); } else { json_path_12335208[json_path_12335208_Idx] = [93]; };
            F.line = 1026;
            init_from_json_11185879(dst_12335206[dst_12335206_Idx], chckIndx(i_12355019, 0, (dst_12335206[dst_12335206_Idx] != null ? dst_12335206[dst_12335206_Idx].length : 0)+0-1)-0, HEX5BHEX5D_10900569(json_node_12335207, i_12355019), json_path_12335208, json_path_12335208_Idx);
            F.line = 1027;
            (json_path_12335208[json_path_12335208_Idx] == null ? json_path_12335208[json_path_12335208_Idx] = mnewString(chckRange(orignal_json_path_len_12355010, 0, 2147483647)) : json_path_12335208[json_path_12335208_Idx].length = chckRange(orignal_json_path_len_12355010, 0, 2147483647));
            F.line = 109;
            i_12640908 = addInt(i_12640908, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function get_or_default_10970192(t_10970197, key_10970198) {
  var result_10970199 = null;

  var F={procname:"getOrDefault.getOrDefault",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 142;
    var hcHEX60gensym10970200_10975001 = [0];
    F.line = 143;
    var indexHEX60gensym10970201_10975010 = raw_get_10865157(t_10970197, key_10970198, hcHEX60gensym10970200_10975001, 0);
    if ((0 <= indexHEX60gensym10970201_10975010)) {
    F.line = 144;
    result_10970199 = t_10970197.data[chckIndx(indexHEX60gensym10970201_10975010, 0, (t_10970197.data != null ? t_10970197.data.length : 0)+0-1)-0].Field3;
    }
    
  framePtr = F.prev;

  return result_10970199;

}
function get_or_default_10990016(node_10990018, key_10990019) {
      var Tmp1;
    var Tmp2;

  var result_10990020 = null;

  var F={procname:"json.getOrDefault",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
      if (!!((node_10990018 == null))) Tmp1 = false; else {        Tmp1 = (node_10990018.kind == 5);      }    if (Tmp1) {
    F.line = 524;
    var Tmp2 = node_10990018;
    if (ConstSet245[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    result_10990020 = get_or_default_10970192(Tmp2.fields, key_10990019);
    }
    
  framePtr = F.prev;

  return result_10990020;

}
function new_12380008() {
  var result_12380012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_12380202 = null;
    F.line = 851;
    r_12380202 = {cubeprice: 0};
    F.line = 852;
    result_12380012 = r_12380202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12380012;

}
function init_from_json_12390201(dst_12390205, dst_12390205_Idx, json_node_12390206, json_path_12390207, json_path_12390207_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10840491(json_node_12390206, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12390207[json_path_12390207_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet248[json_node_12390206.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12390209_12405019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11200009(ConstSet249), nimCopy(null, json_path_12390207[json_path_12390207_Idx], NTI112), reprEnum(json_node_12390206.kind, NTI10671041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12390209_12405019, NTI112), parent: null, m_type: NTI10486039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1005;
    var Tmp1 = json_node_12390206;
    if (ConstSet250[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    dst_12390205[dst_12390205_Idx] = chckRange(Tmp1.num, -2147483648, 2147483647);
  framePtr = F.prev;

  
}
function init_from_json_12380237(dst_12380241, json_node_12380242, json_path_12380243, json_path_12380243_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_12380245 = (json_path_12380243[json_path_12380243_Idx] != null ? json_path_12380243[json_path_12380243_Idx].length : 0);
    F.line = 1114;
    if (json_path_12380243[json_path_12380243_Idx] != null) { json_path_12380243[json_path_12380243_Idx] = (json_path_12380243[json_path_12380243_Idx]).concat(makeNimstrLit(".cubeprice")); } else { json_path_12380243[json_path_12380243_Idx] = makeNimstrLit(".cubeprice"); };
    F.line = 1124;
    init_from_json_12390201(dst_12380241, "cubeprice", get_or_default_10990016(json_node_12380242, makeNimstrLit("cubeprice")), json_path_12380243, json_path_12380243_Idx);
    F.line = 1125;
    (json_path_12380243[json_path_12380243_Idx] == null ? json_path_12380243[json_path_12380243_Idx] = mnewString(chckRange(original_json_path_len_12380245, 0, 2147483647)) : json_path_12380243[json_path_12380243_Idx].length = chckRange(original_json_path_len_12380245, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_12360202(dst_12360207, dst_12360207_Idx, json_node_12360208, json_path_12360209, json_path_12360209_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10840491(json_node_12360208, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12360209[json_path_12360209_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet246[json_node_12360208.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12360211_12375019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11200009(ConstSet247), nimCopy(null, json_path_12360209[json_path_12360209_Idx], NTI112), reprEnum(json_node_12360208.kind, NTI10671041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12360211_12375019, NTI112), parent: null, m_type: NTI10486039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_12360208.kind == 0)) {
    F.line = 1062;
    dst_12360207[dst_12360207_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_12360207[dst_12360207_Idx] = new_12380008();
      F.line = 1065;
      init_from_json_12380237(dst_12360207[dst_12360207_Idx], json_node_12360208, json_path_12360209, json_path_12360209_Idx);
    }
    
  framePtr = F.prev;

  
}
function init_from_json_12325252(dst_12325256, json_node_12325257, json_path_12325258, json_path_12325258_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_12325261 = (json_path_12325258[json_path_12325258_Idx] != null ? json_path_12325258[json_path_12325258_Idx].length : 0);
    F.line = 1114;
    if (json_path_12325258[json_path_12325258_Idx] != null) { json_path_12325258[json_path_12325258_Idx] = (json_path_12325258[json_path_12325258_Idx]).concat(makeNimstrLit(".children")); } else { json_path_12325258[json_path_12325258_Idx] = makeNimstrLit(".children"); };
    F.line = 1124;
    init_from_json_12335201(dst_12325256, "children", get_or_default_10990016(json_node_12325257, makeNimstrLit("children")), json_path_12325258, json_path_12325258_Idx);
    F.line = 1125;
    (json_path_12325258[json_path_12325258_Idx] == null ? json_path_12325258[json_path_12325258_Idx] = mnewString(chckRange(original_json_path_len_12325261, 0, 2147483647)) : json_path_12325258[json_path_12325258_Idx].length = chckRange(original_json_path_len_12325261, 0, 2147483647));
    F.line = 1114;
    if (json_path_12325258[json_path_12325258_Idx] != null) { json_path_12325258[json_path_12325258_Idx] = (json_path_12325258[json_path_12325258_Idx]).concat(makeNimstrLit(".settings")); } else { json_path_12325258[json_path_12325258_Idx] = makeNimstrLit(".settings"); };
    F.line = 1124;
    init_from_json_12360202(dst_12325256, "settings", get_or_default_10990016(json_node_12325257, makeNimstrLit("settings")), json_path_12325258, json_path_12325258_Idx);
    F.line = 1125;
    (json_path_12325258[json_path_12325258_Idx] == null ? json_path_12325258[json_path_12325258_Idx] = mnewString(chckRange(original_json_path_len_12325261, 0, 2147483647)) : json_path_12325258[json_path_12325258_Idx].length = chckRange(original_json_path_len_12325261, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_12305021(dst_12305026, dst_12305026_Idx, json_node_12305027, json_path_12305028, json_path_12305028_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10840491(json_node_12305027, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12305028[json_path_12305028_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet225[json_node_12305027.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12305030_12320019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11200009(ConstSet231), nimCopy(null, json_path_12305028[json_path_12305028_Idx], NTI112), reprEnum(json_node_12305027.kind, NTI10671041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12305030_12320019, NTI112), parent: null, m_type: NTI10486039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_12305027.kind == 0)) {
    F.line = 1062;
    dst_12305026[dst_12305026_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_12305026[dst_12305026_Idx] = new_12325008();
      F.line = 1065;
      init_from_json_12325252(dst_12305026[dst_12305026_Idx], json_node_12305027, json_path_12305028, json_path_12305028_Idx);
    }
    
  framePtr = F.prev;

  
}
function to_12305013(node_12305017) {
  var result_12305019 = [null];

  var F={procname:"to.to",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1230;
    var json_path_12305020 = [[]];
    F.line = 1231;
    init_from_json_12305021(result_12305019, 0, node_12305017, json_path_12305020, 0);
  framePtr = F.prev;

  return result_12305019[0];

}
function get_var_type_11145050(x_11145052) {
  var result_11145053 = 0;

  var F={procname:"json.getVarType",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 860;
    result_11145053 = 0;
    F.line = 863;
    switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_11145052)))) {
    case "[object Array]":
      F.line = 864;
      result_11145053 = 6;
      break BeforeRet;
      break;
    case "[object Object]":
      F.line = 865;
      result_11145053 = 5;
      break BeforeRet;
      break;
    case "[object Number]":
      if ((x_11145052 % 1.0000000000000000e+00 == 0.0)) {
      F.line = 868;
      result_11145053 = 2;
      break BeforeRet;
      }
      else {
        F.line = 870;
        result_11145053 = 3;
        break BeforeRet;
      }
      
      break;
    case "[object Boolean]":
      F.line = 871;
      result_11145053 = 1;
      break BeforeRet;
      break;
    case "[object Null]":
      F.line = 872;
      result_11145053 = 0;
      break BeforeRet;
      break;
    case "[object String]":
      F.line = 873;
      result_11145053 = 4;
      break BeforeRet;
      break;
    default: 
      if (true) {
      F.line = 874;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(874, 18) `false` "));
      }
      
      break;
    }
  } while (false);
  framePtr = F.prev;

  return result_11145053;

}
function len_11155214(x_11155216) {
  var result_11155217 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_11145050(x_11155216) == 6))) {
    F.line = 877;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(877, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 878;
          result_11155217 = x_11155216.length;
    
  framePtr = F.prev;

  return result_11155217;

}
function add_10720020(father_10720022, child_10720023) {
    var Tmp1;
    var Tmp2;

  var F={procname:"json.add",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((father_10720022.kind == 6))) {
    F.line = 272;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(272, 10) `father.kind == JArray` "));
    }
    
    F.line = 273;
    var Tmp1 = father_10720022;
    if (ConstSet251[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_10720023); } else { Tmp2 = [child_10720023]; };
  framePtr = F.prev;

  
}
function HEX5BHEX5D_11175214(x_11175216, y_11175217) {
  var result_11175218 = {};

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_11145050(x_11175216) == 6))) {
    F.line = 889;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(889, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 890;
          result_11175218 = x_11175216[y_11175217];
    
  framePtr = F.prev;

  return result_11175218;

}
function HEX5BHEX5DHEX3D_10831214(obj_10831216, key_10831217, val_10831218) {
    var Tmp1;

  var F={procname:"json.[]=",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((obj_10831216.kind == 5))) {
    F.line = 346;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(346, 9) `obj.kind == JObject` "));
    }
    
    F.line = 347;
    var Tmp1 = obj_10831216;
    if (ConstSet252[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    HEX5BHEX5DHEX3D_10740311(Tmp1.fields, key_10831217, val_10831218);
  framePtr = F.prev;

  
}
function convert_object_11185214(x_11185216) {
  var result_11185217 = null;

  var F={procname:"json.convertObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 895;
    switch (get_var_type_11145050(x_11185216)) {
    case 6:
      F.line = 897;
      result_11185217 = new_jarray_10690657();
      L1: do {
        F.line = 898;
        var i_11185225 = 0;
        F.line = 104;
        var colontmp__12640938 = 0;
        F.line = 898;
        colontmp__12640938 = len_11155214(x_11185216);
        F.line = 106;
        var i_12640939 = 0;
        L2: do {
          F.line = 107;
            L3: while (true) {
            if (!(i_12640939 < colontmp__12640938)) break L3;
              F.line = 898;
              i_11185225 = i_12640939;
              F.line = 899;
              add_10720020(result_11185217, convert_object_11185214(HEX5BHEX5D_11175214(x_11185216, i_11185225)));
              F.line = 109;
              i_12640939 = addInt(i_12640939, 1);
            }
        } while(false);
      } while(false);
      break;
    case 5:
      F.line = 901;
      result_11185217 = new_jobject_10671235();
      F.line = 902;
      for (var property in x_11185216) {
        if (x_11185216.hasOwnProperty(property)) {
      
      F.line = 905;
      var nim_property_11185227 = null;
      F.line = 906;
      var nim_value_11185228 = {};
      F.line = 907;
      nim_property_11185227 = property; nim_value_11185228 = x_11185216[property];
      F.line = 908;
      HEX5BHEX5DHEX3D_10831214(result_11185217, cstrToNimstr(nim_property_11185227), convert_object_11185214(nim_value_11185228));
      F.line = 909;
      }}
      break;
    case 2:
      F.line = 911;
      result_11185217 = new_jint_10671168(x_11185216);
      break;
    case 3:
      F.line = 913;
      result_11185217 = new_jfloat_10671185(x_11185216);
      break;
    case 4:
      F.line = 915;
      result_11185217 = new_jstring_10671086(cstrToNimstr(x_11185216));
      break;
    case 1:
      F.line = 917;
      result_11185217 = new_jbool_10671202(x_11185216);
      break;
    case 0:
      F.line = 919;
      result_11185217 = new_jnull_10671219();
      break;
    }
  framePtr = F.prev;

  return result_11185217;

}
function parse_json_11185257(buffer_11185259) {
  var result_11185260 = null;

  var F={procname:"json.parseJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 925;
    result_11185260 = convert_object_11185214(JSON.parse(toJSStr(buffer_11185259)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11185260;

}
function update_12410520(t_12410524, data_12410525, set_12410527, refresh_12410528) {
  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 759;
    t_12410524.data = data_12410525;
    L1: do {
      F.line = 760;
      var match_12420214 = null;
      F.line = 184;
      var i_12640947 = 0;
      F.line = 185;
      var l_12640948 = (t_12410524.matches != null ? t_12410524.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12640947 < l_12640948)) break L3;
            F.line = 760;
            match_12420214 = t_12410524.matches[chckIndx(i_12640947, 0, (t_12410524.matches != null ? t_12410524.matches.length : 0)+0-1)-0];
            F.line = 761;
            match_12420214.update(data_12410525, set_12410527, refresh_12410528);
            F.line = 188;
            i_12640947 = addInt(i_12640947, 1);
            if (!(((t_12410524.matches != null ? t_12410524.matches.length : 0) == l_12640948))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function open_12291128(c_12291134) {
    function HEX3Aanonymous_12291136(e_12291138) {
        function HEX3Aanonymous_12300009() {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 36;
            var json_12305010 = (reader_12300008.result);
            F.line = 37;
            c_12291134.data.doc = to_12305013(parse_json_11185257(cstrToNimstr(json_12305010)));
            F.line = 38;
            update_12410520(c_12291134, c_12291134.data, null, false);
          framePtr = F.prev;

          
        }

      var F={procname:"open.:anonymous",prev:framePtr,filename:"app.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 31;
        var file_12295004 = (input_12291135).files[0];
        if ((file_12295004 == null)) {
        F.line = 32;
        break BeforeRet;
        }
        
        F.line = 34;
        var reader_12300008 = (new window.FileReader());
        F.line = 35;
        reader_12300008.onload = HEX3Aanonymous_12300009;
        reader_12300008.readAsText((file_12295004));
      } while (false);
      framePtr = F.prev;

      
    }

  var F={procname:"app.open",prev:framePtr,filename:"app.nim",line:0};
  framePtr = F;
    F.line = 27;
    var input_12291135 = document.createElement("input");
    F.line = 28;
    input_12291135.style.display = "none";
    F.line = 29;
    input_12291135.setAttribute("type", "file");
    F.line = 30;
    input_12291135.addEventListener("change", HEX3Aanonymous_12291136, false);
    F.line = 43;
    document.body.appendChild(input_12291135);
    F.line = 44;
    input_12291135.click();
    F.line = 45;
    document.body.removeChild(input_12291135);
  framePtr = F.prev;

  
}
function new_12530207() {
  var result_12530211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12530401 = null;
    F.line = 851;
    r_12530401 = {children: null, settings: null};
    F.line = 852;
    result_12530211 = r_12530401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12530211;

}
function update_12611564(t_12611568, data_12611569, set_12611571, refresh_12611572) {
  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 759;
    t_12611568.data = data_12611569;
    L1: do {
      F.line = 760;
      var match_12620214 = null;
      F.line = 184;
      var i_12640962 = 0;
      F.line = 185;
      var l_12640963 = (t_12611568.matches != null ? t_12611568.matches.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12640962 < l_12640963)) break L3;
            F.line = 760;
            match_12620214 = t_12611568.matches[chckIndx(i_12640962, 0, (t_12611568.matches != null ? t_12611568.matches.length : 0)+0-1)-0];
            F.line = 761;
            match_12620214.update(data_12611569, set_12611571, refresh_12611572);
            F.line = 188;
            i_12640962 = addInt(i_12640962, 1);
            if (!(((t_12611568.matches != null ? t_12611568.matches.length : 0) == l_12640963))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function clone_12610203(comp_12610207) {
  var result_12610209 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 749;
    result_12610209 = compile_12270747({config: comp_12610207.config, m_type: NTI12171161, cmatches: null}, comp_12610207.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12610209;

}
function as_interface_12611128(comp_12611133, convert_12611135) {
    function HEX3Aanonymous_12611142() {
      var result_12611144 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 808;
        result_12611144 = comp_12611133.node;
      framePtr = F.prev;

      return result_12611144;

    }
    function HEX3Aanonymous_12611158(init_val_12611160, set_val_12611165, refresh_12611166) {
        function HEX3Aanonymous_12611168(new_value_12611170) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 812;
            convert_12611135.set(val_12611167, 0, new_value_12611170);
            if (!((set_val_12611165 == null))) {
            F.line = 813;
            set_val_12611165(val_12611167[0]);
            }
            
          framePtr = F.prev;

          
        }

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 810;
        var val_12611167 = [init_val_12611160];
        F.line = 811;
        var set_12611191 = HEX3Aanonymous_12611168;
        F.line = 814;
        update_12611564(comp_12611133, convert_12611135.get(val_12611167[0]), set_12611191, refresh_12611166);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_12620258() {
      var result_12620264 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 816;
        result_12620264 = as_interface_12611128(clone_12610203(comp_12611133), convert_12611135);
      framePtr = F.prev;

      return result_12620264;

    }

  var result_12611137 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 806;
    result_12611137 = {node: HEX3Aanonymous_12611142, update: HEX3Aanonymous_12611158, clone: HEX3Aanonymous_12620258};
  framePtr = F.prev;

  return result_12611137;

}
function mount_12600481(c_12600487, comp_12600489, convert_12600491) {
  var F={procname:"mount.mount",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((comp_12600489 == null)))) {
    F.line = 450;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(450, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 451;
    c_12600487.mount = as_interface_12611128(clone_12610203(comp_12600489), convert_12600491);
  framePtr = F.prev;

  
}
function HEX7C_12575436(p1_12575443, p2_12575446) {
    function HEX3Aanonymous_12575450(x_12575452) {
      var result_12575453 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 14;
        result_12575453 = p2_12575446(p1_12575443(x_12575452));
      framePtr = F.prev;

      return result_12575453;

    }

  var result_12575449 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 14;
    result_12575449 = HEX3Aanonymous_12575450;
  framePtr = F.prev;

  return result_12575449;

}
function HEX7C_12545226(p1_12545233, p2_12545236) {
    function HEX3Aanonymous_12545240(x_12545242) {
      var result_12545243 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 14;
        result_12545243 = p2_12545236(p1_12545233(x_12545242));
      framePtr = F.prev;

      return result_12545243;

    }

  var result_12545239 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 14;
    result_12545239 = HEX3Aanonymous_12545240;
  framePtr = F.prev;

  return result_12545239;

}
function access_12534241(c_12534246) {
    function HEX3Aanonymous_12534256(data_12534258) {
      var result_12534259 = null;

      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 190;
        result_12534259 = data_12534258;
      framePtr = F.prev;

      return result_12534259;

    }
    function HEX3Aanonymous_12534273(data_12534276, data_12534276_Idx, value_12534277) {
      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 191;
        data_12534276[data_12534276_Idx] = value_12534277;
      framePtr = F.prev;

      
    }

  var result_12534248 = null;

  var F={procname:"access.access",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 189;
    result_12534248 = {get: HEX3Aanonymous_12534256, set: HEX3Aanonymous_12534273, id: []};
  framePtr = F.prev;

  return result_12534248;

}
function HEX26_12555266(x_12555270, y_12555272) {
  var result_12555274 = null;

  var F={procname:"&.&",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1599;
    result_12555274 = new Array(chckRange(addInt((x_12555270 != null ? x_12555270.length : 0), (y_12555272 != null ? y_12555272.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_12555270 != null ? x_12555270.length : 0), (y_12555272 != null ? y_12555272.length : 0)), 0, 2147483647);++i) {result_12555274[i]=null;}    L1: do {
      F.line = 1600;
      var i_12555305 = 0;
      F.line = 66;
      var colontmp__12640968 = 0;
      F.line = 1600;
      colontmp__12640968 = subInt((x_12555270 != null ? x_12555270.length : 0), 1);
      F.line = 77;
      var res_12640969 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12640969 <= colontmp__12640968)) break L3;
            F.line = 1600;
            i_12555305 = res_12640969;
            F.line = 1601;
            result_12555274[chckIndx(i_12555305, 0, (result_12555274 != null ? result_12555274.length : 0)+0-1)-0] = nimCopy(null, x_12555270[chckIndx(i_12555305, 0, (x_12555270 != null ? x_12555270.length : 0)+0-1)-0], NTI112);
            F.line = 80;
            res_12640969 = addInt(res_12640969, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 1602;
      var i_12555319 = 0;
      F.line = 66;
      var colontmp__12640975 = 0;
      F.line = 1602;
      colontmp__12640975 = subInt((y_12555272 != null ? y_12555272.length : 0), 1);
      F.line = 77;
      var res_12640976 = 0;
      L5: do {
        F.line = 78;
          L6: while (true) {
          if (!(res_12640976 <= colontmp__12640975)) break L6;
            F.line = 1602;
            i_12555319 = res_12640976;
            F.line = 1603;
            result_12555274[chckIndx(addInt(i_12555319, (x_12555270 != null ? x_12555270.length : 0)), 0, (result_12555274 != null ? result_12555274.length : 0)+0-1)-0] = nimCopy(null, y_12555272[chckIndx(i_12555319, 0, (y_12555272 != null ? y_12555272.length : 0)+0-1)-0], NTI112);
            F.line = 80;
            res_12640976 = addInt(res_12640976, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12555274;

}
function new_12575207() {
  var result_12575211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12575401 = null;
    F.line = 851;
    r_12575401 = {cubeprice: 0};
    F.line = 852;
    result_12575211 = r_12575401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12575211;

}
function HEX3Aanonymous_12440109(node_12440112) {
    function HEX3Aanonymous_12440119(c_12440126) {
        function HEX3Aanonymous_12450001(arg0_12450005) {
          var result_12450013 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 150;
            var arg1_12450014 = arg0_12450005.times;
            F.line = 64;
            result_12450013 = arg1_12450014;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12450013;

        }
        function HEX3Aanonymous_12521187(event_12521189) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 51;
            open_12291128(c_12440126);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12524052(event_12524054) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 53;
            c_12440126.data.times = addInt(c_12440126.data.times, 1);
            F.line = 54;
            console.log("button clicked", c_12440126.data.times);
            F.line = 55;
            update_12410520(c_12440126, c_12440126.data, null, false);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12530001(arg0_12530005) {
          var result_12530018 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 150;
            var arg1_12530019 = arg0_12530005.doc;
            if ((arg1_12530019 == null)) {
            F.line = 150;
            arg1_12530019 = new_12530207();
            }
            
            F.line = 150;
            var arg2_12530421 = nimCopy(null, arg1_12530019.children, NTI12291024);
            F.line = 150;
            var arg3_12530606 = (arg2_12530421 != null ? arg2_12530421.length : 0);
            F.line = 64;
            result_12530018 = arg3_12530606;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12530018;

        }
        function HEX3Aanonymous_12533407(s_12533414) {
            function HEX3Aanonymous_12545001(arg0_12545003) {
              var result_12545009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 58;
                var arg1_12545010 = arg0_12545003.doc;
                if ((arg1_12545010 == null)) {
                F.line = 58;
                arg1_12545010 = new_12530207();
                }
                
                F.line = 64;
                result_12545009 = arg1_12545010;
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_12545009;

            }
            function HEX3Aanonymous_12545285(dataHEX60gensym12534351_12545288, dataHEX60gensym12534351_12545288_Idx, val3HEX60gensym12534352_12550007) {
                function HEX3Aanonymous_12555001(arg0_12555003, value_12555009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                  framePtr = F;
                    F.line = 58;
                    var arg1_12555010 = arg0_12555003.doc;
                    if ((arg1_12555010 == null)) {
                    F.line = 58;
                    arg1_12555010 = new_12530207();
                    }
                    
                    F.line = 117;
                    arg1_12555010 = value_12555009;
                    F.line = 129;
                    arg0_12555003.doc = arg1_12555010;
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 174;
                var val2HEX60gensym12534353_12550008 = access_12534241(s_12533414).get(dataHEX60gensym12534351_12545288[dataHEX60gensym12534351_12545288_Idx]);
                F.line = 175;
                var set2HEX60gensym12534354_12555224 = HEX3Aanonymous_12555001;
                F.line = 176;
                set2HEX60gensym12534354_12555224(val2HEX60gensym12534353_12550008, val3HEX60gensym12534352_12550007);
                F.line = 177;
                access_12534241(s_12533414).set(dataHEX60gensym12534351_12545288, dataHEX60gensym12534351_12545288_Idx, val2HEX60gensym12534353_12550008);
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_12575001(arg0_12575003) {
              var result_12575009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 58;
                var arg1_12575010 = arg0_12575003.settings;
                if ((arg1_12575010 == null)) {
                F.line = 58;
                arg1_12575010 = new_12575207();
                }
                
                F.line = 64;
                result_12575009 = arg1_12575010;
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_12575009;

            }
            function HEX3Aanonymous_12575495(dataHEX60gensym12555340_12575498, dataHEX60gensym12555340_12575498_Idx, val3HEX60gensym12555341_12580007) {
                function HEX3Aanonymous_12590001(arg0_12590003, value_12590009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                  framePtr = F;
                    F.line = 58;
                    var arg1_12590010 = arg0_12590003.settings;
                    if ((arg1_12590010 == null)) {
                    F.line = 58;
                    arg1_12590010 = new_12575207();
                    }
                    
                    F.line = 117;
                    arg1_12590010 = value_12590009;
                    F.line = 129;
                    arg0_12590003.settings = arg1_12590010;
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 174;
                var val2HEX60gensym12555342_12585011 = {get: HEX7C_12545226(access_12534241(s_12533414).get, HEX3Aanonymous_12545001), set: HEX3Aanonymous_12545285, id: HEX26_12555266(access_12534241(s_12533414).id, [makeNimstrLit("doc")])}.get(dataHEX60gensym12555340_12575498[dataHEX60gensym12555340_12575498_Idx]);
                F.line = 175;
                var set2HEX60gensym12555343_12590224 = HEX3Aanonymous_12590001;
                F.line = 176;
                set2HEX60gensym12555343_12590224(val2HEX60gensym12555342_12585011, val3HEX60gensym12555341_12580007);
                F.line = 177;
                {get: HEX7C_12545226(access_12534241(s_12533414).get, HEX3Aanonymous_12545001), set: HEX3Aanonymous_12545285, id: HEX26_12555266(access_12534241(s_12533414).id, [makeNimstrLit("doc")])}.set(dataHEX60gensym12555340_12575498, dataHEX60gensym12555340_12575498_Idx, val2HEX60gensym12555342_12585011);
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 58;
            mount_12600481(s_12533414, settings_component_12171221[0], {get: HEX7C_12575436({get: HEX7C_12545226(access_12534241(s_12533414).get, HEX3Aanonymous_12545001), set: HEX3Aanonymous_12545285, id: HEX26_12555266(access_12534241(s_12533414).id, [makeNimstrLit("doc")])}.get, HEX3Aanonymous_12575001), set: HEX3Aanonymous_12575495, id: HEX26_12555266({get: HEX7C_12545226(access_12534241(s_12533414).get, HEX3Aanonymous_12545001), set: HEX3Aanonymous_12545285, id: HEX26_12555266(access_12534241(s_12533414).id, [makeNimstrLit("doc")])}.id, [makeNimstrLit("settings")])});
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
      framePtr = F;
        F.line = 49;
        refresh_12477083(match_12452364(c_12440126, makeNimstrLit(".times"), HEX3Aanonymous_12450001, eql_12181789, null), set_text_12262268());
        F.line = 50;
        add_event_listener_12521427(match_12479406(c_12440126, makeNimstrLit("button.ouvrir"), null), makeNimstrLit("click"), HEX3Aanonymous_12521187, false);
        F.line = 52;
        add_event_listener_12521427(match_12479406(c_12440126, makeNimstrLit("button.click"), null), makeNimstrLit("click"), HEX3Aanonymous_12524052, false);
        F.line = 56;
        refresh_12477083(match_12452364(c_12440126, makeNimstrLit(".num-children"), HEX3Aanonymous_12530001, eql_12181789, null), set_text_12262268());
        match_12479406(c_12440126, makeNimstrLit(".settings"), HEX3Aanonymous_12533407);
      framePtr = F.prev;

      
    }

  var result_12440117 = null;

  var F={procname:"app.:anonymous",prev:framePtr,filename:"app.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 48;
    result_12440117 = compile_12623348(node_12440112, HEX3Aanonymous_12440119);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12440117;

}
declare_12640597(components_10223124[0], app_12291099, 0, fetch_template_12170001(makeNimstrLit("app.html"), makeNimstrLit("template"), true), HEX3Aanonymous_12440109);
function map_10230058(s_10230063, op_10230066) {
  var result_10230068 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_10230068 = new Array(chckRange((s_10230063 != null ? s_10230063.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_10230063 != null ? s_10230063.length : 0), 0, 2147483647);++i) {result_10230068[i]=null;}    L1: do {
      F.line = 375;
      var i_10230091 = 0;
      F.line = 104;
      var colontmp__12646017 = 0;
      F.line = 375;
      colontmp__12646017 = (s_10230063 != null ? s_10230063.length : 0);
      F.line = 106;
      var i_12646018 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_12646018 < colontmp__12646017)) break L3;
            F.line = 375;
            i_10230091 = i_12646018;
            F.line = 376;
            result_10230068[chckIndx(i_10230091, 0, (result_10230068 != null ? result_10230068.length : 0)+0-1)-0] = op_10230066(s_10230063[chckIndx(i_10230091, 0, (s_10230063 != null ? s_10230063.length : 0)+0-1)-0]);
            F.line = 109;
            i_12646018 = addInt(i_12646018, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10230068;

}
async function init_10230001(registry_10230003) {
    function HEX3Aanonymous_10230020(p_10230022) {
      var result_10230027 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 26;
        result_10230027 = p_10230022();
      framePtr = F.prev;

      return result_10230027;

    }

  var result_10230008 = null;

  var F={procname:"registry.init",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 26;
    (await (Promise.all((map_10230058(registry_10230003.Field0, HEX3Aanonymous_10230020)))));
    F.line = 131;
    result_10230008 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10230008;

}
function attach_12645511(t_12645515, target_12645516, anchor_12645517, data_12645518, set_12645520) {
  var F={procname:"attach.attach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 767;
    update_12410520(t_12645515, data_12645518, set_12645520, true);
    F.line = 768;
    target_12645516.insertBefore(t_12645515.node, anchor_12645517);
  framePtr = F.prev;

  
}
function clone_12645105(comp_12645109) {
  var result_12645111 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 749;
    result_12645111 = compile_12630747({config: comp_12645109.config, m_type: NTI12291039, cmatches: null}, comp_12645109.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12645111;

}
async function main_12645001() {
  var result_12645007 = null;

  var F={procname:"calcul_meubles.main",prev:framePtr,filename:"calcul_meubles.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 11;
    (await init_10230001(components_10223124[0]));
    F.line = 12;
    attach_12645511(clone_12645105(app_12291099[0]), document.body, null, {times: 0, doc: null}, null);
    F.line = 131;
    result_12645007 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12645007;

}
main_12645001();
