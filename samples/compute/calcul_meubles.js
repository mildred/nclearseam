/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI10526039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12660069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12660042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12647285 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12647279 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12653284 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12653278 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12653277 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12653290 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12653272 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12647420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647403 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647387 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647383 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12653260 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12647311 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647300 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647290 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12647289 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12647264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12653240 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12653236 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12653235 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12653308 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12652922 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12647376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647363 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647354 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647350 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12647349 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12647336 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647329 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647323 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12647319 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12625069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12625042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12611984 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12611978 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12616160 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12616155 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12612073 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12612065 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12612057 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12612053 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12616143 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12616123 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12616119 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12616118 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12616178 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12615805 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12612046 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12612033 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12612024 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12612020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12612019 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12612006 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12611999 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12611655 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12611992 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12612423 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12690819 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12690836 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12454085 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12454074 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12454044 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12454043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12454081 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12454039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10711084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI851017 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI10711073 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10711070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10711067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI179 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI10711041 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10711045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10711043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12454024 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12454023 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12454018 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12454019 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12454016 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12454063 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12454050 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12454049 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12454095 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12454035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12280851 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10260030 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12235293 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12250069 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12250042 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12237119 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10221379 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12237079 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10221019 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12241227 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12241221 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12241220 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12241233 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12237112 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237086 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12237085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12241215 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12237232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237215 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237199 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221061 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI12237195 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12237101 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237092 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12237091 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12241203 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12237145 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237134 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221434 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237124 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12237123 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10221535 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221463 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12237060 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12241183 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12241179 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12241178 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12241251 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12240865 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12237188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12220027 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12220018 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12220014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12220013 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12237170 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237163 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12237157 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10221045 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI12237153 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10221015 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6251 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6243 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4605232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI4860011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6235 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12420460 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12420477 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12211360 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12211349 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12211323 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12211322 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12211356 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12211318 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12211147 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12211146 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192268 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192264 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192260 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192256 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192252 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192248 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192244 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192240 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192236 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192232 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192228 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192224 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192220 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192216 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192212 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192208 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192204 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192200 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192196 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192192 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192188 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192184 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192180 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10192005 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192091 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192089 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192067 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192065 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192433 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192071 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192069 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192431 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192429 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192087 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192085 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192427 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192075 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192073 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192423 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192445 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192079 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192077 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192443 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192537 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI163 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI10192029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192027 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192041 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192039 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192037 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10192031 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10192390 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192388 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192386 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10192035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10192033 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12211338 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI12211329 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12211328 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12211370 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12211314 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6233 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10221029 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI6249 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10221017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10221021 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI143 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI6008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6286 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI6281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI6217 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6219 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI6241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI6241 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6241.node = NNI6241;
var NNI6219 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6219.node = NNI6219;
NTI6281.base = NTI6217;
NTI6286.base = NTI6217;
var NNI6217 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI6281, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI112, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI112, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI6286, name: "up", sons: null}]};
NTI6217.node = NNI6217;
var NNI6008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6008.node = NNI6008;
NTI6217.base = NTI6008;
NTI6219.base = NTI6217;
NTI6241.base = NTI6219;
var NNI160043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI114, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}]};
NTI160043.node = NNI160043;
var NNI10221021 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10221021.node = NNI10221021;
var NNI10221017 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10221017.node = NNI10221017;
var NNI6221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6221.node = NNI6221;
NTI6221.base = NTI6217;
NTI10221017.base = NTI6221;
NTI10221021.base = NTI10221017;
var NNI6249 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6249.node = NNI6249;
NTI6249.base = NTI6219;
NTI10221029.base = NTI112;
var NNI6237 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6237.node = NNI6237;
var NNI6233 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6233.node = NNI6233;
NTI6233.base = NTI6219;
NTI6237.base = NTI6233;
var NNI12211329 = {kind: 1, offset: "update", len: 0, typ: NTI12211338, name: "update", sons: null};
NTI12211329.node = NNI12211329;
NTI12211328.base = NTI12211329;
NTI12211370.base = NTI12211328;
NTI10192386.base = NTI10192033;
NTI10192388.base = NTI10192033;
NTI10192390.base = NTI10192033;
var NNI10192031 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI10192031, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10192031, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10192031, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10192031, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10192031, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10192031, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI10192031, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI10192031, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI10192031, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI10192031, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI10192031, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI10192031, name: "NotationNode", len: 0, sons: null}}};
NTI10192031.node = NNI10192031;
var NNI10192029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10192029.node = NNI10192029;
NTI10192029.base = NTI6008;
NTI10192027.base = NTI10192029;
NTI10192537.base = NTI10192041;
var NNI10192083 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI114, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI114, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI114, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI10192537, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI114, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI114, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI143, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI114, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI163, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}]};
NTI10192083.node = NNI10192083;
NTI10192083.base = NTI10192043;
NTI10192081.base = NTI10192083;
var NNI10192079 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI163, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI163, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI143, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI114, name: "value", sons: null}]};
NTI10192079.node = NNI10192079;
NTI10192079.base = NTI10192043;
NTI10192077.base = NTI10192079;
NTI10192443.base = NTI10192077;
NTI10192445.base = NTI10192077;
var NNI10192043 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "classList", len: 0, typ: NTI10192027, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI163, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI163, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI114, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI163, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI10192081, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI114, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI163, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI10192443, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI10192445, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI143, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI143, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI114, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI163, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI114, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI143, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI143, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI143, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI143, name: "offsetTop", sons: null}]};
NTI10192043.node = NNI10192043;
NTI10192043.base = NTI10192035;
NTI10192041.base = NTI10192043;
var NNI10192075 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10192075.node = NNI10192075;
NTI10192075.base = NTI10192043;
NTI10192073.base = NTI10192075;
NTI10192423.base = NTI10192073;
NTI10192425.base = NTI10192081;
var NNI10192087 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI143, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI163, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI114, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}]};
NTI10192087.node = NNI10192087;
NTI10192087.base = NTI10192043;
NTI10192085.base = NTI10192087;
NTI10192427.base = NTI10192085;
NTI10192429.base = NTI10192041;
var NNI10192071 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI143, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI143, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI114, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI143, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI114, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI143, name: "vspace", sons: null}]};
NTI10192071.node = NNI10192071;
NTI10192071.base = NTI10192043;
NTI10192069.base = NTI10192071;
NTI10192431.base = NTI10192069;
var NNI10192067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI114, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI114, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI143, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI143, name: "y", sons: null}]};
NTI10192067.node = NNI10192067;
NTI10192067.base = NTI10192043;
NTI10192065.base = NTI10192067;
NTI10192433.base = NTI10192065;
var NNI10192039 = {kind: 2, len: 21, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI10192041, name: "activeElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI114, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI114, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI10192041, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI114, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI114, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI114, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI114, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI10192041, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI114, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI114, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI114, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI114, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI114, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI114, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI10192423, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI10192425, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI10192427, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI10192429, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI10192431, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI10192433, name: "links", sons: null}]};
NTI10192039.node = NNI10192039;
NTI10192039.base = NTI10192035;
NTI10192037.base = NTI10192039;
var NNI10192091 = {kind: 2, len: 100, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI114, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI114, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI114, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI114, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI114, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI114, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI114, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI114, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI114, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI114, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI114, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI114, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI114, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI114, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI114, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI114, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI114, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI114, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI114, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI114, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI114, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI114, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI114, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI114, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI114, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI114, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI114, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI114, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI114, name: "bottom", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI114, name: "boxSizing", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI114, name: "boxShadow", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI114, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI114, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI114, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI114, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI114, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI114, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI114, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI114, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI114, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI114, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI114, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI114, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI114, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI114, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI114, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI114, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI114, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI114, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI114, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI114, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI114, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI114, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI114, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI114, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI114, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI114, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI114, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI114, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI114, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI114, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI114, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI114, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI114, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI114, name: "opacity", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI114, name: "outline", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI114, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI114, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI114, name: "overflowY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI114, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI114, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI114, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI114, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI114, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI114, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI114, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI114, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI114, name: "position", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI114, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI114, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI114, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI114, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI114, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI114, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI114, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI114, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI114, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI114, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI114, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI114, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI114, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI114, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI114, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI114, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI114, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI114, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI114, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI114, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI114, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI143, name: "zIndex", sons: null}]};
NTI10192091.node = NNI10192091;
NTI10192091.base = NTI6008;
NTI10192089.base = NTI10192091;
var NNI10192035 = {kind: 2, len: 19, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI10192386, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI10192388, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI10192390, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI114, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI10192033, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI10192033, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI10192033, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI114, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI10192031, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI114, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI10192033, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI10192033, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI10192033, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI10192037, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI114, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI114, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI114, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI114, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI10192089, name: "style", sons: null}]};
NTI10192035.node = NNI10192035;
var NNI10192005 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI10192180, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI10192184, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI10192188, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI10192192, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI10192196, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI10192200, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI10192204, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI10192208, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI10192212, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI10192216, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI10192220, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI10192224, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI10192228, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI10192232, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI10192236, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI10192240, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI10192244, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI10192248, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI10192252, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI10192256, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI10192260, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI10192264, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI10192268, name: "onloadend", sons: null}]};
NTI10192005.node = NNI10192005;
NTI10192005.base = NTI6008;
NTI10192035.base = NTI10192005;
NTI10192033.base = NTI10192035;
var NNI12211147 = {kind: 1, offset: "cubeprice", len: 0, typ: NTI143, name: "cubeprice", sons: null};
NTI12211147.node = NNI12211147;
NTI12211146.base = NTI12211147;
var NNI12211314 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI12211370, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI10192033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI12211146, name: "data", sons: null}]};
NTI12211314.node = NNI12211314;
var NNI12211323 = {kind: 1, offset: "compile", len: 0, typ: NTI12211349, name: "compile", sons: null};
NTI12211323.node = NNI12211323;
NTI12211322.base = NTI12211323;
NTI12211356.base = NTI12211322;
var NNI12211318 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI12211356, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI12211360, name: "config", sons: null}]};
NTI12211318.node = NNI12211318;
NTI12211318.base = NTI6008;
NTI12211314.base = NTI12211318;
NTI12420477.base = NTI12211328;
var NNI6253 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6253.node = NNI6253;
NTI6253.base = NTI6219;
NTI12420460.base = NTI12211328;
var NNI6235 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6235.node = NNI6235;
NTI6235.base = NTI6233;
var NNI4860011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI4605232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI143, name: "b", sons: null}]};
NTI4860011.node = NNI4860011;
var NNI6243 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6243.node = NNI6243;
NTI6243.base = NTI6221;
var NNI6251 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6251.node = NNI6251;
NTI6251.base = NTI6219;
var NNI10221015 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10221015.node = NNI10221015;
NTI10221015.base = NTI6221;
var NNI10221045 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI10221045, name: "SimpleTypeSelector", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10221045, name: "SerialTypeSelector", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10221045, name: "CompareTypeSelector", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10221045, name: "ObjectTypeSelector", len: 0, sons: null}}};
NTI10221045.node = NNI10221045;
var NNI12220014 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI12220018, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI12220027, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10221029, name: "id", sons: null}]};
NTI12220014.node = NNI12220014;
NTI12220013.base = NTI12220014;
var NNI12237153 = {kind: 3, offset: "kind", len: 4, typ: NTI10221045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12237157, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12237163, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI12237170, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI12220013, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI12237188, name: "eql", sons: null}]}]]};
NTI12237153.node = NNI12237153;
NTI12240865.base = NTI12211328;
NTI12241183.base = NTI12237060;
NTI10221463.base = NTI10221535;
var NNI12237124 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10221434, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI12237134, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI12237145, name: "clone", sons: null}]};
NTI12237124.node = NNI12237124;
NTI12237123.base = NTI12237124;
var NNI12237092 = {kind: 1, offset: "update", len: 0, typ: NTI12237101, name: "update", sons: null};
NTI12237092.node = NNI12237092;
NTI12237091.base = NTI12237092;
NTI12241203.base = NTI12237091;
var NNI10221061 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI10221061, name: "SimpleIterator", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10221061, name: "SerialIterator", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10221061, name: "TypeSelectorIterator", len: 0, sons: null}}};
NTI10221061.node = NNI10221061;
var NNI12237195 = {kind: 3, offset: "kind", len: 3, typ: NTI10221061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12237199, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12237215, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI12237232, name: "selector", sons: null}]]};
NTI12237195.node = NNI12237195;
var NNI12237086 = {kind: 1, offset: "compile", len: 0, typ: NTI12237112, name: "compile", sons: null};
NTI12237086.node = NNI12237086;
NTI12237085.base = NTI12237086;
NTI12241215.base = NTI12237085;
NTI12241227.base = NTI12237091;
var NNI12241221 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12241227, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12237123, name: "mount", sons: null}]};
NTI12241221.node = NNI12241221;
NTI12241220.base = NTI12241221;
NTI12241233.base = NTI12241220;
var NNI12241179 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI12241183, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10221463, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10221045, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI143, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI12237153, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI12237123, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12237123, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12241203, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI12237195, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI12237123, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI12241215, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI12241233, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10192033, name: "anchor", sons: null}]}]]}]};
NTI12241179.node = NNI12241179;
NTI12241178.base = NTI12241179;
NTI12241251.base = NTI12241178;
var NNI10221019 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10221019.node = NNI10221019;
NTI10221019.base = NTI10221017;
NTI12237079.base = NTI12237060;
NTI10221379.base = NTI10221535;
NTI12237119.base = NTI12237085;
NTI12250042.base = NTI12241220;
NTI12250069.base = NTI12237091;
NTI12235293.base = NTI112;
NTI10260030.base = NTI112;
NTI12280851.base = NTI12237091;
var NNI12454050 = {kind: 1, offset: "update", len: 0, typ: NTI12454063, name: "update", sons: null};
NTI12454050.node = NNI12454050;
NTI12454049.base = NTI12454050;
NTI12454095.base = NTI12454049;
var NNI10711041 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI10711041, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10711041, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10711041, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10711041, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10711041, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10711041, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10711041, name: "JArray", len: 0, sons: null}}};
NTI10711041.node = NNI10711041;
var NNI10711073 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI851017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI112, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI10711043, name: "Field3", sons: null}]};
NTI10711073.node = NNI10711073;
NTI10711070.base = NTI10711073;
var NNI10711067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI10711070, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI143, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI143, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI143, name: "last", sons: null}]};
NTI10711067.node = NNI10711067;
NTI10711084.base = NTI10711043;
var NNI10711045 = {kind: 3, offset: "kind", len: 7, typ: NTI10711041, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI112, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI179, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI104, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI163, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI10711067, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI10711084, name: "elems", sons: null}]]};
NTI10711045.node = NNI10711045;
NTI10711043.base = NTI10711045;
NTI12454024.base = NTI10711043;
var NNI12454023 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "children", len: 0, typ: NTI12454024, name: "children", sons: null}, 
{kind: 1, offset: "settings", len: 0, typ: NTI12211146, name: "settings", sons: null}]};
NTI12454023.node = NNI12454023;
NTI12454018.base = NTI12454023;
var NNI12454019 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "times", len: 0, typ: NTI143, name: "times", sons: null}, 
{kind: 1, offset: "doc", len: 0, typ: NTI12454018, name: "doc", sons: null}]};
NTI12454019.node = NNI12454019;
NTI12454016.base = NTI12454019;
var NNI12454035 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "matches", len: 0, typ: NTI12454095, name: "matches", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "original_node", len: 0, typ: NTI10192033, name: "original_node", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI12454016, name: "data", sons: null}]};
NTI12454035.node = NNI12454035;
var NNI12454044 = {kind: 1, offset: "compile", len: 0, typ: NTI12454074, name: "compile", sons: null};
NTI12454044.node = NNI12454044;
NTI12454043.base = NTI12454044;
NTI12454081.base = NTI12454043;
var NNI12454039 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "cmatches", len: 0, typ: NTI12454081, name: "cmatches", sons: null}, 
{kind: 1, offset: "config", len: 0, typ: NTI12454085, name: "config", sons: null}]};
NTI12454039.node = NNI12454039;
NTI12454039.base = NTI6008;
NTI12454035.base = NTI12454039;
NTI12690836.base = NTI12454049;
NTI12690819.base = NTI12454049;
var NNI12612423 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI143, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI163, name: "Field1", sons: null}]};
NTI12612423.node = NNI12612423;
var NNI12612020 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI12612024, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI12612033, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10221029, name: "id", sons: null}]};
NTI12612020.node = NNI12612020;
NTI12612019.base = NTI12612020;
var NNI12611992 = {kind: 3, offset: "kind", len: 4, typ: NTI10221045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12611655, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12611999, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI12612006, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI12612019, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI12612046, name: "eql", sons: null}]}]]};
NTI12611992.node = NNI12611992;
NTI12615805.base = NTI12454049;
NTI12616123.base = NTI12237060;
NTI12616143.base = NTI12237091;
var NNI12612053 = {kind: 3, offset: "kind", len: 3, typ: NTI10221061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12612057, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12612065, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI12612073, name: "selector", sons: null}]]};
NTI12612053.node = NNI12612053;
NTI12616155.base = NTI12237085;
NTI12616160.base = NTI12241220;
var NNI12616119 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI12616123, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10221463, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10221045, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI143, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI12611992, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI12237123, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12237123, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12616143, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI12612053, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI12237123, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI12616155, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI12616160, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10192033, name: "anchor", sons: null}]}]]}]};
NTI12616119.node = NNI12616119;
NTI12616118.base = NTI12616119;
NTI12616178.base = NTI12616118;
NTI12611978.base = NTI12237060;
NTI12611984.base = NTI12237085;
NTI12625042.base = NTI12241220;
NTI12625069.base = NTI12237091;
var NNI12647350 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "get", len: 0, typ: NTI12647354, name: "get", sons: null}, 
{kind: 1, offset: "set", len: 0, typ: NTI12647363, name: "set", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI10221029, name: "id", sons: null}]};
NTI12647350.node = NNI12647350;
NTI12647349.base = NTI12647350;
var NNI12647319 = {kind: 3, offset: "kind", len: 4, typ: NTI10221045, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12647323, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12647329, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "compare", len: 0, typ: NTI12647336, name: "compare", sons: null}], 
[setConstr(3), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "obj", len: 0, typ: NTI12647349, name: "obj", sons: null}, 
{kind: 1, offset: "eql", len: 0, typ: NTI12647376, name: "eql", sons: null}]}]]};
NTI12647319.node = NNI12647319;
NTI12652922.base = NTI12454049;
NTI12653240.base = NTI12647264;
var NNI12647290 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "node", len: 0, typ: NTI10221434, name: "node", sons: null}, 
{kind: 1, offset: "update", len: 0, typ: NTI12647300, name: "update", sons: null}, 
{kind: 1, offset: "clone", len: 0, typ: NTI12647311, name: "clone", sons: null}]};
NTI12647290.node = NNI12647290;
NTI12647289.base = NTI12647290;
NTI12653260.base = NTI12454049;
var NNI12647383 = {kind: 3, offset: "kind", len: 3, typ: NTI10221061, name: "kind", sons: [[setConstr(0), {kind: 1, offset: "simple", len: 0, typ: NTI12647387, name: "simple", sons: null}], 
[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI12647403, name: "serial", sons: null}], 
[setConstr(2), {kind: 1, offset: "selector", len: 0, typ: NTI12647420, name: "selector", sons: null}]]};
NTI12647383.node = NNI12647383;
NTI12653272.base = NTI12454043;
NTI12653284.base = NTI12454049;
var NNI12653278 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12653284, name: "matches", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12647289, name: "mount", sons: null}]};
NTI12653278.node = NNI12653278;
NTI12653277.base = NTI12653278;
NTI12653290.base = NTI12653277;
var NNI12653236 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "refresh", len: 0, typ: NTI12653240, name: "refresh", sons: null}, 
{kind: 1, offset: "init", len: 0, typ: NTI10221463, name: "init", sons: null}, 
{kind: 1, offset: "node", len: 0, typ: NTI10192033, name: "node", sons: null}, 
{kind: 3, offset: "iter", len: 2, typ: NTI163, name: "iter", sons: [[setConstr(0), {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "selectorKind", len: 4, typ: NTI10221045, name: "selectorKind", sons: [[setConstr(1), {kind: 1, offset: "serial", len: 0, typ: NTI143, name: "serial", sons: null}], 
[setConstr(2, 3), {kind: 1, offset: "value", len: 0, typ: NTI12454016, name: "value", sons: null}], 
[setConstr(4), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]}, 
{kind: 1, offset: "convert", len: 0, typ: NTI12647319, name: "convert", sons: null}, 
{kind: 1, offset: "mount_source", len: 0, typ: NTI12647289, name: "mount_source", sons: null}, 
{kind: 1, offset: "mount", len: 0, typ: NTI12647289, name: "mount", sons: null}, 
{kind: 1, offset: "matches", len: 0, typ: NTI12653260, name: "matches", sons: null}, 
{kind: 1, offset: "inited", len: 0, typ: NTI163, name: "inited", sons: null}]}], 
[setConstr(1), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "iterate", len: 0, typ: NTI12647383, name: "iterate", sons: null}, 
{kind: 1, offset: "mount_template", len: 0, typ: NTI12647289, name: "mount_template", sons: null}, 
{kind: 1, offset: "match_templates", len: 0, typ: NTI12653272, name: "match_templates", sons: null}, 
{kind: 1, offset: "items", len: 0, typ: NTI12653290, name: "items", sons: null}, 
{kind: 1, offset: "anchor", len: 0, typ: NTI10192033, name: "anchor", sons: null}]}]]}]};
NTI12653236.node = NNI12653236;
NTI12653235.base = NTI12653236;
NTI12653308.base = NTI12653235;
NTI12647279.base = NTI12647264;
NTI12647285.base = NTI12454043;
NTI12660042.base = NTI12653277;
NTI12660069.base = NTI12454049;
var NNI6245 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI6245.node = NNI6245;
NTI6245.base = NTI6243;
var NNI10526039 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10526039.node = NNI10526039;
NTI10526039.base = NTI6243;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_240023, src_240024, ti_240025) {
  var result_245219 = null;

    switch (ti_240025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_235401(ti_240025))) {
      result_245219 = src_240024;
      }
      else {
        result_245219 = [src_240024[0], src_240024[1]];
      }
      
      break;
    case 19:
            if (dest_240023 === null || dest_240023 === undefined) {
        dest_240023 = {};
      }
      else {
        for (var key in dest_240023) { delete dest_240023[key]; }
      }
      for (var key in src_240024) { dest_240023[key] = src_240024[key]; }
      result_245219 = dest_240023;
    
      break;
    case 18:
    case 17:
      if (!((ti_240025.base == null))) {
      result_245219 = nimCopy(dest_240023, src_240024, ti_240025.base);
      }
      else {
      if ((ti_240025.kind == 17)) {
      result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {m_type: ti_240025} : dest_240023;
      }
      else {
        result_245219 = (dest_240023 === null || dest_240023 === undefined) ? {} : dest_240023;
      }
      }
      nimCopyAux(result_245219, src_240024, ti_240025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_240024 === null) {
        result_245219 = null;
      }
      else {
        if (dest_240023 === null || dest_240023 === undefined) {
          dest_240023 = new Array(src_240024.length);
        }
        else {
          dest_240023.length = src_240024.length;
        }
        result_245219 = dest_240023;
        for (var i = 0; i < src_240024.length; ++i) {
          result_245219[i] = nimCopy(result_245219[i], src_240024[i], ti_240025.base);
        }
      }
    
      break;
    case 28:
            if (src_240024 !== null) {
        result_245219 = src_240024.slice(0);
      }
    
      break;
    default: 
      result_245219 = src_240024;
      break;
    }

  return result_245219;

}
function makeNimstrLit(c_225062) {
      var ln = c_225062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_225062.charCodeAt(i);
  }
  return result;
  

  
}
function arrayConstr(len_250067, value_250068, typ_250069) {
        var result = new Array(len_250067);
    for (var i = 0; i < len_250067; ++i) result[i] = nimCopy(null, value_250068, typ_250069);
    return result;
  

  
}
function cstrToNimstr(c_225079) {
      var ln = c_225079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_225079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_225079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_225096) {
                    var Tmp5;
            var Tmp7;

  var result_225097 = null;

    var res_225170 = new_seq_225128((s_225096 != null ? s_225096.length : 0));
    var i_225172 = 0;
    var j_225174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_225172 < (s_225096 != null ? s_225096.length : 0))) break L2;
          var c_225175 = s_225096[i_225172];
          if ((c_225175 < 128)) {
          res_225170[j_225174] = String.fromCharCode(c_225175);
          i_225172 += 1;
          }
          else {
            var helper_225198 = new_seq_225128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_225199 = c_225175.toString(16);
                  if (((code_225199 != null ? code_225199.length : 0) == 1)) {
                  if (helper_225198 != null) { helper_225198.push("%0"); } else { helper_225198 = ["%0"]; };
                  }
                  else {
                  if (helper_225198 != null) { helper_225198.push("%"); } else { helper_225198 = ["%"]; };
                  }
                  
                  if (helper_225198 != null) { helper_225198.push(code_225199); } else { helper_225198 = [code_225199]; };
                  i_225172 += 1;
                    if (((s_225096 != null ? s_225096.length : 0) <= i_225172)) Tmp5 = true; else {                      Tmp5 = (s_225096[i_225172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_225175 = s_225096[i_225172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_225170[j_225174] = decodeURIComponent(helper_225198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_225170[j_225174] = helper_225198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_225174 += 1;
        }
    } while(false);
    if (res_225170 === null) res_225170 = [];
               if (res_225170.length < j_225174) { for (var i=res_225170.length;i<j_225174;++i) res_225170.push(null); }
               else { res_225170.length = j_225174; };
    result_225097 = res_225170.join("");

  return result_225097;

}
function raiseException(e_190218, ename_190219) {
    e_190218.name = ename_190219;
    if ((excHandler == 0)) {
    unhandledException(e_190218);
    }
    
    e_190218.trace = nimCopy(null, raw_write_stack_trace_180059(), NTI112);
    throw e_190218;

  
}
function mnewString(len_230044) {
        return new Array(len_230044);
  

  
}
function chckIndx(i_250086, a_250087, b_250088) {
      var Tmp1;

  var result_250089 = 0;

  BeforeRet: do {
      if (!(a_250087 <= i_250086)) Tmp1 = false; else {        Tmp1 = (i_250086 <= b_250088);      }    if (Tmp1) {
    result_250089 = i_250086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_250086, a_250087, b_250088);
    }
    
  } while (false);

  return result_250089;

}
function addInt(a_230403, b_230404) {
        var result = a_230403 + b_230404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function chckRange(i_255016, a_255017, b_255018) {
      var Tmp1;

  var result_255019 = 0;

  BeforeRet: do {
      if (!(a_255017 <= i_255016)) Tmp1 = false; else {        Tmp1 = (i_255016 <= b_255018);      }    if (Tmp1) {
    result_255019 = i_255016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_255019;

}
function subInt(a_230421, b_230422) {
        var result = a_230421 - b_230422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function divInt(a_230457, b_230458) {
        if (b_230458 == 0) raiseDivByZero();
    if (b_230458 == -1 && a_230457 == 2147483647) raiseOverflow();
    return Math.trunc(a_230457 / b_230458);
  

  
}
function mulInt(a_230439, b_230440) {
        var result = a_230439 * b_230440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function nimMax(a_230821, b_230822) {
    var Tmp1;

  var result_230823 = 0;

  BeforeRet: do {
    if ((b_230822 <= a_230821)) {
    Tmp1 = a_230821;
    }
    else {
    Tmp1 = b_230822;
    }
    
    result_230823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230823;

}
function nimMin(a_230803, b_230804) {
    var Tmp1;

  var result_230805 = 0;

  BeforeRet: do {
    if ((a_230803 <= b_230804)) {
    Tmp1 = a_230803;
    }
    else {
    Tmp1 = b_230804;
    }
    
    result_230805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_230805;

}
var ConstSet9 = setConstr(true);
function raiseFieldError(f_220047) {
    raiseException({message: nimCopy(null, f_220047, NTI112), parent: null, m_type: NTI6251, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet10 = setConstr(false);
var ConstSet11 = setConstr(true);
var ConstSet12 = setConstr(true);
var ConstSet13 = setConstr(true);
var ConstSet14 = setConstr(true);
var ConstSet15 = setConstr(true);
var ConstSet16 = setConstr(true);
var ConstSet17 = setConstr(true);
var ConstSet18 = setConstr(false);
var ConstSet19 = setConstr(false);
var ConstSet20 = setConstr(false);
var ConstSet21 = setConstr(1);
var ConstSet22 = setConstr(false);
var ConstSet23 = setConstr(false);
var ConstSet24 = setConstr(false);
var ConstSet25 = setConstr(false);
var ConstSet26 = setConstr(false);
var ConstSet27 = setConstr(false);
var ConstSet28 = setConstr(false);
var ConstSet29 = setConstr(true);
var ConstSet30 = setConstr(true);
var ConstSet31 = setConstr(0);
var ConstSet32 = setConstr(true);
var ConstSet33 = setConstr(1);
var ConstSet34 = setConstr(true);
var ConstSet35 = setConstr(2);
var ConstSet36 = setConstr(true);
var ConstSet37 = setConstr(true);
var ConstSet38 = setConstr(true);
var ConstSet39 = setConstr(true);
function eqStrings(a_230222, b_230223) {
        if (a_230222 == b_230223) return true;
    if (a_230222 === null && b_230223.length == 0) return true;
    if (b_230223 === null && a_230222.length == 0) return true;
    if ((!a_230222) || (!b_230223)) return false;
    var alen = a_230222.length;
    if (alen != b_230223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_230222[i] != b_230223[i]) return false;
    return true;
  

  
}
var ConstSet40 = setConstr(true);
var ConstSet41 = setConstr(true);
var ConstSet42 = setConstr(true);
var ConstSet43 = setConstr(true);
var ConstSet44 = setConstr(true);
var ConstSet45 = setConstr(true);
var ConstSet46 = setConstr(true);
var ConstSet47 = setConstr(true);
var ConstSet48 = setConstr(true);
var ConstSet49 = setConstr(false);
var ConstSet50 = setConstr(0);
var ConstSet51 = setConstr(false);
var ConstSet52 = setConstr(1);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(false);
var ConstSet55 = setConstr(1);
var ConstSet56 = setConstr(2);
var ConstSet57 = setConstr(false);
var ConstSet58 = setConstr(2, 3);
var ConstSet59 = setConstr(2, 3);
var ConstSet60 = setConstr(3);
var ConstSet61 = setConstr(false);
var ConstSet62 = setConstr(3);
var ConstSet63 = setConstr(false);
var ConstSet64 = setConstr(3);
var ConstSet65 = setConstr(false);
var ConstSet66 = setConstr(2, 3);
var ConstSet67 = setConstr(false);
var ConstSet68 = setConstr(false);
var ConstSet69 = setConstr(false);
var ConstSet70 = setConstr(false);
var ConstSet71 = setConstr(false);
var ConstSet72 = setConstr(false);
var ConstSet73 = setConstr(false);
var ConstSet74 = setConstr(false);
var ConstSet75 = setConstr(false);
var ConstSet76 = setConstr(false);
var ConstSet77 = setConstr(false);
var ConstSet78 = setConstr(true);
var ConstSet79 = setConstr(true);
var ConstSet80 = setConstr(true);
var ConstSet81 = setConstr(true);
var ConstSet82 = setConstr(true);
var ConstSet83 = setConstr(true);
var ConstSet84 = setConstr(true);
var ConstSet85 = setConstr(false);
var ConstSet86 = setConstr(false);
var ConstSet87 = setConstr(false);
var ConstSet88 = setConstr(1);
var ConstSet89 = setConstr(false);
var ConstSet90 = setConstr(false);
var ConstSet91 = setConstr(false);
var ConstSet92 = setConstr(false);
var ConstSet93 = setConstr(false);
var ConstSet94 = setConstr(false);
var ConstSet95 = setConstr(false);
var ConstSet96 = setConstr(true);
var ConstSet97 = setConstr(true);
var ConstSet98 = setConstr(0);
var ConstSet99 = setConstr(true);
var ConstSet100 = setConstr(1);
var ConstSet101 = setConstr(true);
var ConstSet102 = setConstr(2);
var ConstSet103 = setConstr(true);
var ConstSet104 = setConstr(true);
var ConstSet105 = setConstr(true);
var ConstSet106 = setConstr(true);
var ConstSet107 = setConstr(true);
var ConstSet108 = setConstr(true);
var ConstSet109 = setConstr(true);
var ConstSet110 = setConstr(true);
var ConstSet111 = setConstr(true);
var ConstSet112 = setConstr(true);
var ConstSet113 = setConstr(true);
var ConstSet114 = setConstr(true);
var ConstSet115 = setConstr(true);
var ConstSet116 = setConstr(false);
var ConstSet117 = setConstr(0);
var ConstSet118 = setConstr(false);
var ConstSet119 = setConstr(1);
var ConstSet120 = setConstr(1);
var ConstSet121 = setConstr(false);
var ConstSet122 = setConstr(1);
var ConstSet123 = setConstr(2);
var ConstSet124 = setConstr(false);
var ConstSet125 = setConstr(2, 3);
var ConstSet126 = setConstr(2, 3);
var ConstSet127 = setConstr(3);
var ConstSet128 = setConstr(false);
var ConstSet129 = setConstr(3);
var ConstSet130 = setConstr(false);
var ConstSet131 = setConstr(3);
var ConstSet132 = setConstr(false);
var ConstSet133 = setConstr(2, 3);
var ConstSet134 = setConstr(false);
var ConstSet135 = setConstr(false);
var ConstSet136 = setConstr(false);
var ConstSet137 = setConstr(false);
var ConstSet138 = setConstr(false);
var ConstSet139 = setConstr(false);
var ConstSet140 = setConstr(false);
var ConstSet141 = setConstr(false);
var ConstSet142 = setConstr(false);
var ConstSet143 = setConstr(false);
var ConstSet144 = setConstr(false);
var ConstSet145 = setConstr(true);
var ConstSet146 = setConstr(true);
var ConstSet147 = setConstr(true);
var ConstSet148 = setConstr(true);
var ConstSet149 = setConstr(true);
var ConstSet150 = setConstr(true);
var ConstSet151 = setConstr(true);
var ConstSet152 = setConstr(false);
var ConstSet153 = setConstr(false);
var ConstSet154 = setConstr(false);
var ConstSet155 = setConstr(1);
var ConstSet156 = setConstr(false);
var ConstSet157 = setConstr(false);
var ConstSet158 = setConstr(false);
var ConstSet159 = setConstr(false);
var ConstSet160 = setConstr(false);
var ConstSet161 = setConstr(false);
var ConstSet162 = setConstr(false);
var ConstSet163 = setConstr(true);
var ConstSet164 = setConstr(true);
var ConstSet165 = setConstr(0);
var ConstSet166 = setConstr(true);
var ConstSet167 = setConstr(1);
var ConstSet168 = setConstr(true);
var ConstSet169 = setConstr(2);
var ConstSet170 = setConstr(true);
var ConstSet171 = setConstr(true);
var ConstSet172 = setConstr(true);
var ConstSet173 = setConstr(true);
var ConstSet174 = setConstr(true);
var ConstSet175 = setConstr(true);
var ConstSet176 = setConstr(true);
var ConstSet177 = setConstr(true);
var ConstSet178 = setConstr(true);
var ConstSet179 = setConstr(true);
var ConstSet180 = setConstr(true);
var ConstSet181 = setConstr(true);
var ConstSet182 = setConstr(true);
var ConstSet183 = setConstr(false);
var ConstSet184 = setConstr(0);
var ConstSet185 = setConstr(false);
var ConstSet186 = setConstr(1);
var ConstSet187 = setConstr(1);
var ConstSet188 = setConstr(false);
var ConstSet189 = setConstr(1);
var ConstSet190 = setConstr(2);
var ConstSet191 = setConstr(false);
var ConstSet192 = setConstr(2, 3);
var ConstSet193 = setConstr(2, 3);
var ConstSet194 = setConstr(3);
var ConstSet195 = setConstr(false);
var ConstSet196 = setConstr(3);
var ConstSet197 = setConstr(false);
var ConstSet198 = setConstr(3);
var ConstSet199 = setConstr(false);
var ConstSet200 = setConstr(2, 3);
var ConstSet201 = setConstr(false);
var ConstSet202 = setConstr(false);
var ConstSet203 = setConstr(false);
var ConstSet204 = setConstr(false);
var ConstSet205 = setConstr(false);
var ConstSet206 = setConstr(false);
var ConstSet207 = setConstr(false);
var ConstSet208 = setConstr(false);
var ConstSet209 = setConstr(false);
var ConstSet210 = setConstr(false);
var ConstSet211 = setConstr(false);
var ConstSet212 = setConstr(4);
var ConstSet213 = setConstr(4);
var ConstSet214 = setConstr(2);
var ConstSet215 = setConstr(2);
var ConstSet216 = setConstr(3);
var ConstSet217 = setConstr(3);
var ConstSet218 = setConstr(1);
var ConstSet219 = setConstr(1);
var ConstSet220 = setConstr(6);
var ConstSet221 = setConstr(6);
var ConstSet222 = setConstr(5);
var ConstSet223 = setConstr(5);
var ConstSet224 = setConstr(5);
function modInt(a_230475, b_230476) {
        if (b_230476 == 0) raiseDivByZero();
    if (b_230476 == -1 && a_230475 == 2147483647) raiseOverflow();
    return Math.trunc(a_230475 % b_230476);
  

  
}
var ConstSet225 = setConstr(5);
var ConstSet226 = setConstr(5);
var ConstSet227 = setConstr(5, 0);
function addChar(x_275031, c_275032) {
    x_275031.push(c_275032);

  
}
var ConstSet228 = setConstr([48, 57]);
var ConstSet229 = setConstr(0, 125);
var ConstSet230 = setConstr([48, 57]);
var ConstSet231 = setConstr([65, 90]);
var ConstSet232 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
function reprEnum(e_315480, typ_315481) {
  var result_315482 = null;

  var F={procname:"system.reprEnum",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    if (!(is_undefined_315483(typ_315481.node.sons[e_315480]))) {
    F.line = 38;
    result_315482 = nimCopy(null, makeNimstrLit(typ_315481.node.sons[e_315480].name), NTI112);
    }
    else {
      F.line = 40;
      result_315482 = nimCopy(null, (cstrToNimstr((e_315480)+"") || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI112);
    }
    
  framePtr = F.prev;

  return result_315482;

}
var ConstSet233 = setConstr(5, 0);
var ConstSet234 = setConstr(6);
var ConstSet235 = setConstr(6);
var ConstSet236 = setConstr(6);
var ConstSet237 = setConstr(5);
var ConstSet238 = setConstr(4);
var ConstSet239 = setConstr(2);
var ConstSet240 = setConstr(3);
var ConstSet241 = setConstr(1);
var ConstSet242 = setConstr(5);
function genericReset(x_250044, ti_250045) {
  var result_250046 = null;

    result_250046 = null;
    switch (ti_250045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (is_fat_pointer_235401(ti_250045)) {
              result_250046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_250046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_250045.kind == 17)) {
      result_250046 = {m_type: ti_250045};
      }
      else {
        result_250046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_250046 = [];
    
      break;
    case 4:
    case 16:
            result_250046 = new Array(x_250044.length);
      for (var i = 0; i < x_250044.length; ++i) {
        result_250046[i] = genericReset(x_250044[i], ti_250045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_250046;

}
var ConstSet243 = setConstr(5);
var ConstSet244 = setConstr(6);
var ConstSet245 = setConstr(6);
var ConstSet246 = setConstr(6);
var ConstSet247 = setConstr(5);
var ConstSet248 = setConstr(5, 0);
var ConstSet249 = setConstr(5, 0);
var ConstSet250 = setConstr(2);
var ConstSet251 = setConstr(2);
var ConstSet252 = setConstr(2);
var ConstSet253 = setConstr(6);
var ConstSet254 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_142018 = [null];
var local_raise_hook_142023 = [null];
var out_of_mem_hook_142026 = [null];
var unhandled_exception_hook_142031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_855031 = [0];
var refresh_all_10260531 = {paths: []};
var components_10263124 = [{Field0: null}];
var state_11297005 = [{a0: 1773455756, a1: 4275166512}];
var utc_instance_11555231 = [null];
var local_instance_11555232 = [null];
function is_fat_pointer_235401(ti_235403) {
  var result_235404 = false;

  BeforeRet: do {
    result_235404 = !((ConstSet1[ti_235403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_235404;

}
function nimCopyAux(dest_240028, src_240029, n_240031) {
    switch (n_240031.kind) {
    case 0:
      break;
    case 1:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_240031.sons.length; i++) {
      nimCopyAux(dest_240028, src_240029, n_240031.sons[i]);
    }
    
      break;
    case 3:
            dest_240028[n_240031.offset] = nimCopy(dest_240028[n_240031.offset], src_240029[n_240031.offset], n_240031.typ);
      for (var i = 0; i < n_240031.sons.length; ++i) {
        nimCopyAux(dest_240028, src_240029, n_240031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_142042(x_142045, x_142045_Idx, y_142046) {
          if (x_142045[x_142045_Idx] === null) { x_142045[x_142045_Idx] = []; }
      var off = x_142045[x_142045_Idx].length;
      x_142045[x_142045_Idx].length += y_142046.length;
      for (var i = 0; i < y_142046.length; ++i) {
        x_142045[x_142045_Idx][off+i] = y_142046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_160038(f_160040) {
          var Tmp3;

  var result_160041 = [null];

    var it_160049 = f_160040;
    var i_160051 = 0;
    var total_160053 = 0;
    var temp_frames_160060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI160043);
    L1: do {
        L2: while (true) {
          if (!!((it_160049 == null))) Tmp3 = false; else {            Tmp3 = (i_160051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_160060[i_160051].Field0 = it_160049.procname;
          temp_frames_160060[i_160051].Field1 = it_160049.line;
          i_160051 += 1;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_160049 == null))) break L5;
          total_160053 += 1;
          it_160049 = it_160049.prev;
        }
    } while(false);
    result_160041[0] = nimCopy(null, [], NTI112);
    if (!((total_160053 == i_160051))) {
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("(")); } else { result_160041[0] = makeNimstrLit("("); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr(((total_160053 - i_160051))+"")); } else { result_160041[0] = cstrToNimstr(((total_160053 - i_160051))+"").slice(); };
    if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_160041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_175236 = 0;
      var colontmp__12083098 = 0;
      colontmp__12083098 = (i_160051 - 1);
      var res_12083103 = colontmp__12083098;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_12083103)) break L8;
            j_175236 = res_12083103;
            add_142042(result_160041, 0, temp_frames_160060[j_175236].Field0);
            if ((0 < temp_frames_160060[j_175236].Field1)) {
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit(", line: ")); } else { result_160041[0] = makeNimstrLit(", line: "); };
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(cstrToNimstr((temp_frames_160060[j_175236].Field1)+"")); } else { result_160041[0] = cstrToNimstr((temp_frames_160060[j_175236].Field1)+"").slice(); };
            }
            
            if (result_160041[0] != null) { result_160041[0] = (result_160041[0]).concat(makeNimstrLit("\x0A")); } else { result_160041[0] = makeNimstrLit("\x0A"); };
            res_12083103 -= 1;
          }
      } while(false);
    } while(false);

  return result_160041[0];

}
function raw_write_stack_trace_180059() {
  var result_180061 = null;

    if (!((framePtr == null))) {
    result_180061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_160038(framePtr) || []), NTI112);
    }
    else {
      result_180061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI112);
    }
    

  return result_180061;

}
function new_seq_225128(len_225131) {
  var result_225133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_225133 = new Array(len_225131); for (var i=0;i<len_225131;++i) {result_225133[i]=null;}  framePtr = F.prev;

  return result_225133;

}
function unhandledException(e_185059) {
    var buf_185060 = [[]];
    if (!(((e_185059.message != null ? e_185059.message.length : 0) == 0))) {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(e_185059.message); } else { buf_185060[0] = e_185059.message.slice(); };
    }
    else {
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_185060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit(" [")); } else { buf_185060[0] = makeNimstrLit(" ["); };
    add_142042(buf_185060, 0, e_185059.name);
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_185060[0] = makeNimstrLit("]\x0A"); };
    if (buf_185060[0] != null) { buf_185060[0] = (buf_185060[0]).concat(raw_write_stack_trace_180059()); } else { buf_185060[0] = raw_write_stack_trace_180059().slice(); };
    var cbuf_190201 = toJSStr(buf_185060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_190201);
  }
  else {
    throw cbuf_190201;
  }
  

  
}
function sys_fatal_102618(message_102622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_102622, NTI112), m_type: NTI6241, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_102614(msg_102616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_102618(msg_102616);
  framePtr = F.prev;

  
}
function failed_assert_impl_102680(msg_102682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_102614(msg_102682);
  framePtr = F.prev;

  
}
function rotl_11297230(x_11297232, k_11297233) {
  var result_11297234 = 0;

  var F={procname:"random.rotl",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 122;
    result_11297234 = ((x_11297232 << k_11297233) | ((x_11297232 >>> 0) >>> ((64 - k_11297233) >>> 0)));
  framePtr = F.prev;

  return result_11297234;

}
function next_11297258(r_11297261) {
  var result_11297262 = 0;

  var F={procname:"random.next",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    F.line = 139;
    var s0_11297263 = r_11297261.a0;
    F.line = 140;
    var s1_11297264 = r_11297261.a1;
    F.line = 141;
    result_11297262 = ((s0_11297263 + s1_11297264) >>> 0);
    F.line = 142;
    s1_11297264 = (s1_11297264 ^ s0_11297263);
    F.line = 143;
    r_11297261.a0 = ((rotl_11297230(s0_11297263, 55) ^ s1_11297264) ^ (s1_11297264 << 14));
    F.line = 144;
    r_11297261.a1 = rotl_11297230(s1_11297264, 36);
  framePtr = F.prev;

  return result_11297262;

}
function init_rand_11300612(seed_11300614) {
  var result_11300615 = [{a0: 0, a1: 0}];

  var F={procname:"random.initRand",prev:framePtr,filename:"random.nim",line:0};
  framePtr = F;
    if (!(!((seed_11300614 == 0)))) {
    F.line = 572;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/random.nim(572, 12) `seed != 0` "));
    }
    
    F.line = 573;
    result_11300615[0].a0 = (seed_11300614 >> 16);
    F.line = 574;
    result_11300615[0].a1 = (seed_11300614 & 65535);
    F.line = 575;
    next_11297258(result_11300615[0]);
  framePtr = F.prev;

  return result_11300615[0];

}
var rand_12083079 = [init_rand_11300612(1)];
function raiseIndexError(i_210047, a_210048, b_210049) {
    var Tmp1;

    if ((b_210049 < a_210048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_210047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_210048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_210049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI112), parent: null, m_type: NTI6249, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI6237, name: null, trace: null, up: null}, "OverflowError");

  
}
function update_12440458(t_12440462, init_val_12440463, set_val_12440465, refresh_list_12440466) {
function set_12440470(new_val_12440472, changed_path_12440473) {
  var F={procname:"update.set",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 859;
    t_12440462.data = new_val_12440472;
    if (!((set_val_12440465 == null))) {
    F.line = 861;
    set_val_12440465(new_val_12440472, changed_path_12440473);
    }
    else {
      F.line = 863;
    upd_12440467({paths: [nimCopy(null, changed_path_12440473, NTI10221029)]});
    }
    
  framePtr = F.prev;

  
}
    function upd_12440467(refresh_list_12440469) {
      var F={procname:"update.upd",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        L1: do {
          F.line = 866;
          var match_12450214 = null;
          F.line = 184;
          var i_12452939 = 0;
          F.line = 185;
          var l_12452940 = (t_12440462.matches != null ? t_12440462.matches.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12452939 < l_12452940)) break L3;
                F.line = 866;
                match_12450214 = t_12440462.matches[chckIndx(i_12452939, 0, (t_12440462.matches != null ? t_12440462.matches.length : 0)+0-1)-0];
                F.line = 867;
                match_12450214.update(t_12440462.data, set_12440470, refresh_list_12440469);
                F.line = 188;
                i_12452939 = addInt(i_12452939, 1);
                if (!(((t_12440462.matches != null ? t_12440462.matches.length : 0) == l_12452940))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 855;
    t_12440462.data = init_val_12440463;
    F.line = 869;
    upd_12440467(refresh_list_12440466);
  framePtr = F.prev;

  
}
function new_12420207() {
  var result_12420211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12420401 = null;
    F.line = 851;
    r_12420401 = {m_type: NTI12211314, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_12420211 = r_12420401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12420211;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI6253, name: null, trace: null, up: null}, "RangeError");

  
}
function add_12430216(x_12430221, x_12430221_Idx, y_12430223) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_12430229 = (x_12430221[x_12430221_Idx] != null ? x_12430221[x_12430221_Idx].length : 0);
    F.line = 1209;
    if (x_12430221[x_12430221_Idx] === null) x_12430221[x_12430221_Idx] = [];
               if (x_12430221[x_12430221_Idx].length < (Tmp1 = chckRange(addInt(xl_12430229, (y_12430223 != null ? y_12430223.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_12430221[x_12430221_Idx].length;i<Tmp1;++i) x_12430221[x_12430221_Idx].push(null); }
               else { x_12430221[x_12430221_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_12430254 = 0;
      F.line = 66;
      var colontmp__12452961 = 0;
      F.line = 1210;
      colontmp__12452961 = (y_12430223 != null ? (y_12430223.length-1) : -1);
      F.line = 77;
      var res_12452962 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12452962 <= colontmp__12452961)) break L4;
            F.line = 1210;
            i_12430254 = res_12452962;
            F.line = 1210;
            x_12430221[x_12430221_Idx][chckIndx(addInt(xl_12430229, i_12430254), 0, (x_12430221[x_12430221_Idx] != null ? x_12430221[x_12430221_Idx].length : 0)+0-1)-0] = y_12430223[chckIndx(i_12430254, 0, (y_12430223 != null ? y_12430223.length : 0)+0-1)-0];
            F.line = 80;
            res_12452962 = addInt(res_12452962, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_12420453(cfgs_12420458, node_12420459) {
  var result_12420462 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 627;
    result_12420462[0] = nimCopy(null, [], NTI12420477);
    L1: do {
      F.line = 628;
      var cfg_12430214 = null;
      F.line = 184;
      var i_12452957 = 0;
      F.line = 185;
      var l_12452958 = (cfgs_12420458 != null ? cfgs_12420458.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12452957 < l_12452958)) break L3;
            F.line = 628;
            cfg_12430214 = cfgs_12420458[chckIndx(i_12452957, 0, (cfgs_12420458 != null ? cfgs_12420458.length : 0)+0-1)-0];
            F.line = 629;
            add_12430216(result_12420462, 0, cfg_12430214.compile(node_12420459));
            F.line = 188;
            i_12452957 = addInt(i_12452957, 1);
            if (!(((cfgs_12420458 != null ? cfgs_12420458.length : 0) == l_12452958))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12420462[0];

}
function compile_12410751(cfg_12410755, node_12410756) {
  var result_12410758 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_12410756 == null)))) {
    F.line = 634;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(634, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 635;
    result_12410758 = new_12420207();
    F.line = 636;
    result_12410758.config = cfg_12410755.config;
    F.line = 637;
    result_12410758.original_node = node_12410756;
    F.line = 638;
    result_12410758.node = node_12410756.cloneNode(true);
    F.line = 640;
    result_12410758.config(result_12410758);
    F.line = 641;
    result_12410758.matches = nimCopy(null, compile_12420453(result_12410758.cmatches, result_12410758.node), NTI12420460);
  framePtr = F.prev;

  return result_12410758;

}
function clone_12450340(comp_12450344) {
  var result_12450346 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 845;
    result_12450346 = compile_12410751({config: comp_12450344.config, m_type: NTI12211318, cmatches: null}, comp_12450344.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12450346;

}
function as_interface_12451393(comp_12451397) {
    function HEX3Aanonymous_12451404() {
      var result_12451406 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 906;
        result_12451406 = comp_12451397.node;
      framePtr = F.prev;

      return result_12451406;

    }
    function HEX3Aanonymous_12451420(data_12451422, set_12451427, refresh_list_12451428) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 908;
        update_12440458(comp_12451397, data_12451422, set_12451427, refresh_list_12451428);
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_12451828() {
      var result_12451834 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 910;
        result_12451834 = as_interface_12451393(clone_12450340(comp_12451397));
      framePtr = F.prev;

      return result_12451834;

    }

  var result_12451399 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 904;
    result_12451399 = {node: HEX3Aanonymous_12451404, update: HEX3Aanonymous_12451420, clone: HEX3Aanonymous_12451828};
  framePtr = F.prev;

  return result_12451399;

}
function late_12430584(late_comp_12430590) {
function resolve_comp_12430598() {
  var result_12430604 = null;

  var F={procname:"late.resolveComp",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((comp_12430597 == null)) {
    F.line = 946;
    var late_12430613 = late_comp_12430590();
    if ((late_12430613 == null)) {
    F.line = 948;
    var fmt_res_12430622 = mnewString(0);
    F.line = 948;
    if (fmt_res_12430622 != null) { fmt_res_12430622 = (fmt_res_12430622).concat(makeNimstrLit("Late component not resolved in time")); } else { fmt_res_12430622 = makeNimstrLit("Late component not resolved in time"); };
    F.line = 948;
    raiseException({message: nimCopy(null, fmt_res_12430622, NTI112), parent: null, m_type: NTI10221021, name: null, trace: null, up: null}, "CompileLateError");
    }
    
    F.line = 949;
    comp_12430597 = late_12430613;
    }
    
    F.line = 950;
    result_12430604 = comp_12430597;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12430604;

}
    function create_12440045() {
        function HEX3Aanonymous_12440056() {
          var result_12440058 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 955;
            result_12440058 = resolve_comp_12430598().node;
          framePtr = F.prev;

          return result_12440058;

        }
        function HEX3Aanonymous_12440072(data_12440074, set_12440079, refresh_list_12440080) {
          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 957;
            update_12440458(resolve_comp_12430598(), data_12440074, set_12440079, refresh_list_12440080);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12450256() {
          var result_12450262 = null;

          var F={procname:"create.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 959;
            result_12450262 = as_interface_12451393(clone_12450340(resolve_comp_12430598()));
          framePtr = F.prev;

          return result_12450262;

        }

      var result_12440051 = null;

      var F={procname:"late.create",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 953;
        result_12440051 = {node: HEX3Aanonymous_12440056, update: HEX3Aanonymous_12440072, clone: HEX3Aanonymous_12450256};
      framePtr = F.prev;

      return result_12440051;

    }

  var result_12430592 = null;

  var F={procname:"late.late",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 942;
    var comp_12430597 = null;
    F.line = 962;
    result_12430592 = create_12440045();
  framePtr = F.prev;

  return result_12430592;

}
async function init_comp_12452806(set_component_12452814, node_12452816, creator_12452818) {
  var result_12452820 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var n_12452842 = (await node_12452816);
    F.line = 22;
    set_component_12452814(creator_12452818(n_12452842));
    F.line = 131;
    result_12452820 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12452820;

}
function declare_12430450(registry_12430453, component_12430456, component_12430456_Idx, node_12430458, creator_12430460) {
    function HEX3Aanonymous_12430466(c_12430472) {
      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 30;
        comp_12430465 = c_12430472;
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_12430487() {
      var result_12430493 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 31;
        result_12430493 = comp_12430465;
      framePtr = F.prev;

      return result_12430493;

    }
    function HEX3Aanonymous_12452799() {
      var result_12452804 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 32;
        result_12452804 = init_comp_12452806(set_component_12430486, node_12430458, creator_12430460);
      framePtr = F.prev;

      return result_12452804;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 29;
    var comp_12430465 = null;
    F.line = 30;
    var set_component_12430486 = HEX3Aanonymous_12430466;
    F.line = 31;
    component_12430456[component_12430456_Idx] = late_12430584(HEX3Aanonymous_12430487);
    F.line = 32;
    if (registry_12430453.Field0 != null) { registry_12430453.Field0.push(HEX3Aanonymous_12452799); } else { registry_12430453.Field0 = [HEX3Aanonymous_12452799]; };
  framePtr = F.prev;

  
}
async function fetch_template_12150001(rel_path_12150003) {
  var result_12150008 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 9;
    var response_12175032 = (await (window.fetch((toJSStr(rel_path_12150003)))));
    F.line = 10;
    var text_12180026 = (await (response_12175032.text()));
    F.line = 11;
    result_12150008 = (window.document.createRange().createContextualFragment((text_12180026)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12150008;

}
function nsuToHex(x_9455243, len_9455244) {
  var result_9455245 = null;

  var F={procname:"strutils.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 936;
    var n_9455247 = x_9455243;
    F.line = 937;
    result_9455245 = nimCopy(null, mnewString(len_9455244), NTI112);
    L1: do {
      F.line = 938;
      var j_9455254 = 0;
      F.line = 6;
      var colontmp__12452983 = 0;
      F.line = 938;
      colontmp__12452983 = subInt(len_9455244, 1);
      F.line = 28;
      var res_12452984 = colontmp__12452983;
      L2: do {
        F.line = 29;
          L3: while (true) {
          if (!(0 <= res_12452984)) break L3;
            F.line = 938;
            j_9455254 = res_12452984;
            F.line = 939;
            result_9455245[chckIndx(j_9455254, 0, (result_9455245 != null ? result_9455245.length : 0)+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_9455247 & 15), 0, (makeNimstrLit("0123456789ABCDEF") != null ? makeNimstrLit("0123456789ABCDEF").length : 0)+0-1)-0];
            F.line = 940;
            n_9455247 = (n_9455247 >> 4);
            if (((n_9455247 == 0) && (x_9455243 < 0))) {
            F.line = 942;
            n_9455247 = -1;
            }
            
            F.line = 31;
            res_12452984 = subInt(res_12452984, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9455245;

}
function to_hex_12083115(x_12083118) {
  var result_12083119 = null;

  var F={procname:"toHex.toHex",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 945;
    result_12083119 = nimCopy(null, nsuToHex(chckRange(x_12083118, -9223372036854775808, 9223372036854775807), 16), NTI112);
  framePtr = F.prev;

  return result_12083119;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI6235, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_1450017(s_1450019, b_1450021, b_1450021_Idx, start_1450022) {
      var Tmp1;
          var Tmp4;

  var result_1450024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_1450025 = start_1450022;
    if (((i_1450025 < (s_1450019 != null ? s_1450019.length : 0)) && (s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_1450025 = addInt(i_1450025, 1);
    }
    
      if (!(i_1450025 < (s_1450019 != null ? s_1450019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_1450021[b_1450021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_1450025 < (s_1450019 != null ? s_1450019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_1460016 = subInt(s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0], 48);
          if ((b_1450021[b_1450021_Idx] <= divInt(subInt(2147483647, c_1460016), 10))) {
          F.line = 483;
          b_1450021[b_1450021_Idx] = addInt(mulInt(b_1450021[b_1450021_Idx], 10), c_1460016);
          }
          else {
            F.line = 485;
            b_1450021[b_1450021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_1450025 = addInt(i_1450025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_1450025 < (s_1450019 != null ? s_1450019.length : 0)) && (s_1450019[chckIndx(i_1450025, 0, (s_1450019 != null ? s_1450019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_1450025 = addInt(i_1450025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_1450024 = subInt(i_1450025, start_1450022);
    }
    
  framePtr = F.prev;

  return result_1450024;

}
function HEX5BHEX5D_4860068(s_4860072, x_4860074) {
  var result_4860075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_4860201 = x_4860074.a;
    F.line = 2437;
    var l_4860401 = addInt(subInt(subInt((s_4860072 != null ? s_4860072.length : 0), x_4860074.b), a_4860201), 1);
    F.line = 2438;
    result_4860075 = nimCopy(null, mnewString(chckRange(l_4860401, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2439;
      var i_4860409 = 0;
      F.line = 106;
      var i_12453003 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_12453003 < l_4860401)) break L3;
            F.line = 2439;
            i_4860409 = i_12453003;
            F.line = 2439;
            result_4860075[chckIndx(i_4860409, 0, (result_4860075 != null ? result_4860075.length : 0)+0-1)-0] = s_4860072[chckIndx(addInt(i_4860409, a_4860201), 0, (s_4860072 != null ? s_4860072.length : 0)+0-1)-0];
            F.line = 109;
            i_12453003 = addInt(i_12453003, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_4860075;

}
function HEX2EHEX2E_4860001(a_4860006, b_4860008) {
  var result_4860014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_4860014, {a: a_4860006, b: b_4860008}, NTI4860011);
  framePtr = F.prev;

  return result_4860014;

}
function parse_standard_format_specifier_10085322(s_10085324, start_10085325, ignore_unknown_suffix_10085327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10085328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_10085328.fill = 32;
    F.line = 380;
    result_10085328.align = 0;
    F.line = 381;
    result_10085328.sign = 45;
    F.line = 382;
    var i_10085331 = start_10085325;
    if (((addInt(i_10085331, 1) < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet2[s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_10085328.fill = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 385;
    result_10085328.align = s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 386;
    i_10085331 = addInt(i_10085331, 2);
    }
    else {
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet3[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_10085328.align = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 389;
    i_10085331 = addInt(i_10085331, 1);
    }
    }
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (ConstSet4[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_10085328.sign = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 393;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_10085328.alternateForm = true;
    F.line = 397;
    i_10085331 = addInt(i_10085331, 1);
    }
    
      if (!((addInt(i_10085331, 1) < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_10085324[chckIndx(addInt(i_10085331, 1), 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_10085328.padWithZero = true;
    F.line = 401;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    F.line = 403;
    var parsed_length_10105015 = parse_saturated_natural_1450017(s_10085324, result_10085328, "minimumWidth", i_10085331);
    F.line = 404;
    i_10085331 = addInt(i_10085331, parsed_length_10105015);
    if (((i_10085331 < (s_10085324 != null ? s_10085324.length : 0)) && (s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_10085331 = addInt(i_10085331, 1);
    F.line = 407;
    var parsed_length_b_10105029 = parse_saturated_natural_1450017(s_10085324, result_10085328, "precision", i_10085331);
    F.line = 408;
    i_10085331 = addInt(i_10085331, parsed_length_b_10105029);
    }
    else {
      F.line = 410;
      result_10085328.precision = -1;
    }
    
      if (!(i_10085331 < (s_10085324 != null ? s_10085324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_10085328.typ = s_10085324[chckIndx(i_10085331, 0, (s_10085324 != null ? s_10085324.length : 0)+0-1)-0];
    F.line = 414;
    i_10085331 = addInt(i_10085331, 1);
    }
    
    F.line = 415;
    result_10085328.endPosition = i_10085331;
      if (!!((i_10085331 == (s_10085324 != null ? s_10085324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_10085327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_4860068(s_10085324, HEX2EHEX2E_4860001(i_10085331, 1)) || []), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_10085328;

}
function nucruneLen(s_1531829) {
  var result_1531830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_1531832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_1531832 < (s_1531829 != null ? s_1531829.length : 0))) break L2;
          if ((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_1531832 = addInt(i_1531832, 1);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_1531832 = addInt(i_1531832, 2);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_1531832 = addInt(i_1531832, 3);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_1531832 = addInt(i_1531832, 4);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_1531832 = addInt(i_1531832, 5);
          }
          else {
          if ((((s_1531829[chckIndx(i_1531832, 0, (s_1531829 != null ? s_1531829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_1531832 = addInt(i_1531832, 6);
          }
          else {
            F.line = 49;
          i_1531832 = addInt(i_1531832, 1);
          }
          }}}}}
          F.line = 50;
          result_1531830 = addInt(result_1531830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_1531830;

}
function rune_len_at_1531931(s_1531933, i_1531934) {
  var result_1531935 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_1531935 = 1;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_1531935 = 2;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_1531935 = 3;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_1531935 = 4;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_1531935 = 5;
    }
    else {
    if ((((s_1531933[chckIndx(i_1531934, 0, (s_1531933 != null ? s_1531933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_1531935 = 6;
    }
    else {
      F.line = 68;
      result_1531935 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_1531935;

}
function rune_offset_2155244(s_2155246, pos_2155247, start_2155248) {
  var result_2155249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_2155251 = 0;
    F.line = 320;
    var o_2155252 = start_2155248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_2155251 < pos_2155247)) break L2;
          F.line = 322;
          o_2155252 = addInt(o_2155252, chckRange(rune_len_at_1531931(s_2155246, o_2155252), 0, 2147483647));
          if (((s_2155246 != null ? s_2155246.length : 0) <= o_2155252)) {
          F.line = 324;
          result_2155249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_2155251 = addInt(i_2155251, 1);
        }
    } while(false);
    F.line = 326;
    result_2155249 = o_2155252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_2155249;

}
function validate_utf8_1775229(s_1775231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_1775232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_1775234 = 0;
    F.line = 173;
    var l_1775235 = (s_1775231 != null ? s_1775231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_1775234 < l_1775235)) break L2;
          if ((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_1775234 = addInt(i_1775234, 1);
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_1775232 = i_1775234;
          break BeforeRet;
          }
          
            if (!(addInt(i_1775234, 1) < l_1775235)) Tmp3 = false; else {              Tmp3 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_1775234 = addInt(i_1775234, 2);
          }
          else {
            F.line = 180;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_1775234, 2) < l_1775235)) Tmp5 = false; else {              Tmp5 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_1775231[chckIndx(addInt(i_1775234, 2), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_1775234 = addInt(i_1775234, 3);
          }
          else {
            F.line = 184;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_1775231[chckIndx(i_1775234, 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_1775234, 3) < l_1775235)) Tmp8 = false; else {              Tmp8 = (((s_1775231[chckIndx(addInt(i_1775234, 1), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_1775231[chckIndx(addInt(i_1775234, 2), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_1775231[chckIndx(addInt(i_1775234, 3), 0, (s_1775231 != null ? s_1775231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_1775234 = addInt(i_1775234, 4);
          }
          else {
            F.line = 190;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_1775232 = i_1775234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_1775232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1775232;

}
function nsuRepeatChar(c_9630048, count_9630049) {
  var result_9630050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_9630050 = nimCopy(null, mnewString(count_9630049), NTI112);
    L1: do {
      F.line = 1283;
      var i_9630059 = 0;
      F.line = 66;
      var colontmp__12453034 = 0;
      F.line = 1283;
      colontmp__12453034 = subInt(count_9630049, 1);
      F.line = 77;
      var res_12453035 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12453035 <= colontmp__12453034)) break L3;
            F.line = 1283;
            i_9630059 = res_12453035;
            F.line = 1283;
            result_9630050[chckIndx(i_9630059, 0, (result_9630050 != null ? result_9630050.length : 0)+0-1)-0] = c_9630048;
            F.line = 80;
            res_12453035 = addInt(res_12453035, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_9630050;

}
function align_string_10085222(s_10085224, minimum_width_10085225, align_10085226, fill_10085227) {
      var Tmp1;

  var result_10085228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_10085225 == 0)) {
    F.line = 282;
    result_10085228 = nimCopy(null, s_10085224, NTI112);
    }
    else {
      F.line = 284;
      if ((validate_utf8_1775229(s_10085224) == -1)) {
      Tmp1 = nucruneLen(s_10085224);
      }
      else {
      Tmp1 = (s_10085224 != null ? s_10085224.length : 0);
      }
      
      var s_rune_len_10085229 = Tmp1;
      F.line = 285;
      var to_fill_10085230 = subInt(minimum_width_10085225, s_rune_len_10085229);
      if ((to_fill_10085230 <= 0)) {
      F.line = 287;
      result_10085228 = nimCopy(null, s_10085224, NTI112);
      }
      else {
      if (((align_10085226 == 60) || (align_10085226 == 0))) {
      F.line = 289;
      result_10085228 = nimCopy(null, (s_10085224 || []).concat(nsuRepeatChar(fill_10085227, chckRange(to_fill_10085230, 0, 2147483647)) || []), NTI112);
      }
      else {
      if ((align_10085226 == 94)) {
      F.line = 291;
      var half_10085231 = divInt(to_fill_10085230, 2);
      F.line = 292;
      result_10085228 = nimCopy(null, (nsuRepeatChar(fill_10085227, chckRange(half_10085231, 0, 2147483647)) || []).concat(s_10085224 || [],nsuRepeatChar(fill_10085227, chckRange(subInt(to_fill_10085230, half_10085231), 0, 2147483647)) || []), NTI112);
      }
      else {
        F.line = 294;
        result_10085228 = nimCopy(null, (nsuRepeatChar(fill_10085227, chckRange(to_fill_10085230, 0, 2147483647)) || []).concat(s_10085224 || []), NTI112);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_10085228;

}
function format_value_10130080(result_10130083, result_10130083_Idx, value_10130084, specifier_10130085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_10130086 = parse_standard_format_specifier_10085322(specifier_10130085, 0, false);
    F.line = 503;
    var value_10130087 = nimCopy(null, value_10130084, NTI112);
    F.line = 504;
    switch (spec_10130086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10130086.typ]), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_10130086.precision == -1))) {
    if ((spec_10130086.precision < nucruneLen(value_10130087))) {
    F.line = 512;
    (value_10130087 == null ? value_10130087 = mnewString(chckRange(rune_offset_2155244(value_10130087, chckRange(spec_10130086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_10130087.length = chckRange(rune_offset_2155244(value_10130087, chckRange(spec_10130086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_10130083[result_10130083_Idx] != null) { result_10130083[result_10130083_Idx] = (result_10130083[result_10130083_Idx]).concat(align_string_10085222(value_10130087, spec_10130086.minimumWidth, spec_10130086.align, spec_10130086.fill)); } else { result_10130083[result_10130083_Idx] = align_string_10085222(value_10130087, spec_10130086.minimumWidth, spec_10130086.align, spec_10130086.fill).slice(); };
  framePtr = F.prev;

  
}
function nsuFindChar(s_9775216, sub_9775217, start_9775218, last_9775219) {
    var Tmp1;

  var result_9775221 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1855;
    if ((last_9775219 == 0)) {
    Tmp1 = (s_9775216 != null ? (s_9775216.length-1) : -1);
    }
    else {
    Tmp1 = last_9775219;
    }
    
    var last_9775223 = Tmp1;
    L2: do {
      F.line = 1867;
      var i_9775606 = 0;
      F.line = 66;
      var colontmp__12453052 = 0;
      F.line = 1867;
      colontmp__12453052 = start_9775218;
      F.line = 77;
      var res_12453053 = colontmp__12453052;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12453053 <= last_9775223)) break L4;
            F.line = 1867;
            i_9775606 = res_12453053;
            if ((sub_9775217 == s_9775216[chckIndx(i_9775606, 0, (s_9775216 != null ? s_9775216.length : 0)+0-1)-0])) {
            F.line = 1868;
            result_9775221 = i_9775606;
            break BeforeRet;
            }
            
            F.line = 80;
            res_12453053 = addInt(res_12453053, 1);
          }
      } while(false);
    } while(false);
    F.line = 1869;
    result_9775221 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9775221;

}
function substr_341022(s_341024, first_341025, last_341026) {
  var result_341027 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2943;
    var first_341028 = nimMax(first_341025, 0);
    F.line = 2944;
    var l_341030 = nimMax(addInt(subInt(nimMin(last_341026, (s_341024 != null ? (s_341024.length-1) : -1)), first_341028), 1), 0);
    F.line = 2945;
    result_341027 = nimCopy(null, mnewString(chckRange(l_341030, 0, 2147483647)), NTI112);
    L1: do {
      F.line = 2946;
      var i_341039 = 0;
      F.line = 66;
      var colontmp__12453059 = 0;
      F.line = 2946;
      colontmp__12453059 = subInt(l_341030, 1);
      F.line = 77;
      var res_12453060 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12453060 <= colontmp__12453059)) break L3;
            F.line = 2946;
            i_341039 = res_12453060;
            F.line = 2947;
            result_341027[chckIndx(i_341039, 0, (result_341027 != null ? result_341027.length : 0)+0-1)-0] = s_341024[chckIndx(addInt(i_341039, first_341028), 0, (s_341024 != null ? s_341024.length : 0)+0-1)-0];
            F.line = 80;
            res_12453060 = addInt(res_12453060, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_341027;

}
function substr_341053(s_341055, first_341056) {
  var result_341058 = null;

  var F={procname:"system.substr",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2950;
    result_341058 = nimCopy(null, substr_341022(s_341055, first_341056, (s_341055 != null ? (s_341055.length-1) : -1)), NTI112);
  framePtr = F.prev;

  return result_341058;

}
function nsuInitSkipTable(a_9770081, sub_9770082) {
  var F={procname:"strutils.initSkipTable",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1791;
    var m_9770083 = (sub_9770082 != null ? sub_9770082.length : 0);
    F.line = 1792;
    var i_9770085 = 0;
    L1: do {
      F.line = 1793;
        L2: while (true) {
        if (!(i_9770085 <= 248)) break L2;
          F.line = 1794;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 0), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1795;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 1), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1796;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 2), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1797;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 3), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1798;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 4), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1799;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 5), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1800;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 6), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1801;
          a_9770081[chckIndx(chckRange(addInt(i_9770085, 7), 0, 255), 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = m_9770083;
          F.line = 1802;
          i_9770085 = addInt(i_9770085, 8);
        }
    } while(false);
    L3: do {
      F.line = 1804;
      var i_9770101 = 0;
      F.line = 104;
      var colontmp__12453067 = 0;
      F.line = 1804;
      colontmp__12453067 = subInt(m_9770083, 1);
      F.line = 106;
      var i_12453068 = 0;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_12453068 < colontmp__12453067)) break L5;
            F.line = 1804;
            i_9770101 = i_12453068;
            F.line = 1805;
            a_9770081[chckIndx(sub_9770082[chckIndx(i_9770101, 0, (sub_9770082 != null ? sub_9770082.length : 0)+0-1)-0], 0, (a_9770081 != null ? a_9770081.length : 0)+0-1)-0] = subInt(subInt(m_9770083, 1), i_9770101);
            F.line = 109;
            i_12453068 = addInt(i_12453068, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function nsuFindStrA(a_9770117, s_9770118, sub_9770119, start_9770120, last_9770121) {
    var Tmp1;

  var result_9770123 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1815;
    if ((last_9770121 == 0)) {
    Tmp1 = (s_9770118 != null ? (s_9770118.length-1) : -1);
    }
    else {
    Tmp1 = last_9770121;
    }
    
    var last_9770125 = Tmp1;
    F.line = 1816;
    var sub_last_9770126 = subInt((sub_9770119 != null ? sub_9770119.length : 0), 1);
    if ((sub_last_9770126 == -1)) {
    F.line = 1821;
    result_9770123 = start_9770120;
    break BeforeRet;
    }
    
    F.line = 1825;
    var skip_9770127 = start_9770120;
    L2: do {
      F.line = 1827;
        L3: while (true) {
        if (!(sub_last_9770126 <= subInt(last_9770125, skip_9770127))) break L3;
          F.line = 1828;
          var i_9775001 = sub_last_9770126;
          L4: do {
            F.line = 1829;
              L5: while (true) {
              if (!(s_9770118[chckIndx(addInt(skip_9770127, i_9775001), 0, (s_9770118 != null ? s_9770118.length : 0)+0-1)-0] == sub_9770119[chckIndx(i_9775001, 0, (sub_9770119 != null ? sub_9770119.length : 0)+0-1)-0])) break L5;
                if ((i_9775001 == 0)) {
                F.line = 1831;
                result_9770123 = skip_9770127;
                break BeforeRet;
                }
                
                F.line = 1832;
                i_9775001 = subInt(i_9775001, 1);
              }
          } while(false);
          F.line = 1833;
          skip_9770127 = addInt(skip_9770127, a_9770117[chckIndx(s_9770118[chckIndx(addInt(skip_9770127, sub_last_9770126), 0, (s_9770118 != null ? s_9770118.length : 0)+0-1)-0], 0, (a_9770117 != null ? a_9770117.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 1834;
    result_9770123 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9770123;

}
function nsuReplaceStr(s_9845016, sub_9845017, by_9845018) {
  var result_9845019 = null;

  var F={procname:"strutils.replace",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2056;
    result_9845019 = nimCopy(null, [], NTI112);
    F.line = 2057;
    var sub_len_9845020 = (sub_9845017 != null ? sub_9845017.length : 0);
    if ((sub_len_9845020 == 0)) {
    F.line = 2059;
    result_9845019 = nimCopy(null, s_9845016, NTI112);
    }
    else {
    if ((sub_len_9845020 == 1)) {
    F.line = 2063;
    var c_9845021 = sub_9845017[chckIndx(0, 0, (sub_9845017 != null ? sub_9845017.length : 0)+0-1)-0];
    F.line = 2064;
    var last_9845023 = (s_9845016 != null ? (s_9845016.length-1) : -1);
    F.line = 2065;
    var i_9845025 = 0;
    L1: do {
      F.line = 2066;
        L2: while (true) {
        if (!true) break L2;
          F.line = 2067;
          var j_9845026 = nsuFindChar(s_9845016, c_9845021, chckRange(i_9845025, 0, 2147483647), last_9845023);
          if ((j_9845026 < 0)) {
          F.line = 2068;
          break L1;
          }
          
          F.line = 2069;
          if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341022(s_9845016, i_9845025, subInt(j_9845026, 1))); } else { result_9845019 = substr_341022(s_9845016, i_9845025, subInt(j_9845026, 1)).slice(); };
          F.line = 2070;
          if (result_9845019 != null) { result_9845019 = (result_9845019).concat(by_9845018); } else { result_9845019 = by_9845018.slice(); };
          F.line = 2071;
          i_9845025 = addInt(j_9845026, sub_len_9845020);
        }
    } while(false);
    F.line = 2073;
    if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341053(s_9845016, i_9845025)); } else { result_9845019 = substr_341053(s_9845016, i_9845025).slice(); };
    }
    else {
      F.line = 2075;
      var a_9845027 = [new Int32Array(256)];
      F.line = 2076;
      nsuInitSkipTable(a_9845027[0], sub_9845017);
      F.line = 2077;
      var last_9845030 = (s_9845016 != null ? (s_9845016.length-1) : -1);
      F.line = 2078;
      var i_9845032 = 0;
      L3: do {
        F.line = 2079;
          L4: while (true) {
          if (!true) break L4;
            F.line = 2080;
            var j_9845033 = nsuFindStrA(a_9845027[0], s_9845016, sub_9845017, chckRange(i_9845032, 0, 2147483647), last_9845030);
            if ((j_9845033 < 0)) {
            F.line = 2081;
            break L3;
            }
            
            F.line = 2082;
            if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341022(s_9845016, i_9845032, subInt(j_9845033, 1))); } else { result_9845019 = substr_341022(s_9845016, i_9845032, subInt(j_9845033, 1)).slice(); };
            F.line = 2083;
            if (result_9845019 != null) { result_9845019 = (result_9845019).concat(by_9845018); } else { result_9845019 = by_9845018.slice(); };
            F.line = 2084;
            i_9845032 = addInt(j_9845033, sub_len_9845020);
          }
      } while(false);
      F.line = 2086;
      if (result_9845019 != null) { result_9845019 = (result_9845019).concat(substr_341053(s_9845016, i_9845032)); } else { result_9845019 = substr_341053(s_9845016, i_9845032).slice(); };
    }
    }
  framePtr = F.prev;

  return result_9845019;

}
function scope_12083110(node_12083113) {
  var F={procname:"css.scope",prev:framePtr,filename:"css.nim",line:0};
  framePtr = F;
    F.line = 11;
    var comp_12083138 = to_hex_12083115(next_11297258(rand_12083079[0]));
    L1: do {
      F.line = 12;
      var element_12090214 = null;
      F.line = 182;
      var colontmp__12452972 = null;
      F.line = 12;
      colontmp__12452972 = node_12083113.querySelectorAll("*");
      F.line = 184;
      var i_12452974 = 0;
      F.line = 185;
      var l_12452975 = (colontmp__12452972 != null ? colontmp__12452972.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12452974 < l_12452975)) break L3;
            F.line = 12;
            element_12090214 = colontmp__12452972[chckIndx(i_12452974, 0, (colontmp__12452972 != null ? colontmp__12452972.length : 0)+0-1)-0];
            F.line = 13;
            F.line = 13;
            var fmt_res_12090218 = [mnewString(0)];
            F.line = 13;
            if (fmt_res_12090218[0] != null) { fmt_res_12090218[0] = (fmt_res_12090218[0]).concat(makeNimstrLit("component-")); } else { fmt_res_12090218[0] = makeNimstrLit("component-"); };
            F.line = 13;
            format_value_10130080(fmt_res_12090218, 0, comp_12083138, []);
            element_12090214.classList.add(toJSStr(fmt_res_12090218[0]));
            F.line = 188;
            i_12452974 = addInt(i_12452974, 1);
            if (!(((colontmp__12452972 != null ? colontmp__12452972.length : 0) == l_12452975))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 14;
      var style_12095008 = null;
      F.line = 182;
      var colontmp__12452978 = null;
      F.line = 14;
      colontmp__12452978 = node_12083113.querySelectorAll("style[scope]");
      F.line = 184;
      var i_12452979 = 0;
      F.line = 185;
      var l_12452980 = (colontmp__12452978 != null ? colontmp__12452978.length : 0);
      L5: do {
        F.line = 186;
          L6: while (true) {
          if (!(i_12452979 < l_12452980)) break L6;
            F.line = 14;
            style_12095008 = colontmp__12452978[chckIndx(i_12452979, 0, (colontmp__12452978 != null ? colontmp__12452978.length : 0)+0-1)-0];
            F.line = 15;
            var scope_12095014 = to_hex_12083115(next_11297258(rand_12083079[0]));
            F.line = 16;
            var fmt_res_12100004 = [mnewString(0)];
            F.line = 16;
            if (fmt_res_12100004[0] != null) { fmt_res_12100004[0] = (fmt_res_12100004[0]).concat(makeNimstrLit("scope-")); } else { fmt_res_12100004[0] = makeNimstrLit("scope-"); };
            F.line = 16;
            format_value_10130080(fmt_res_12100004, 0, scope_12095014, []);
            (style_12095008.parentNode).classList.add((toJSStr(fmt_res_12100004[0])));
            F.line = 21;
            F.line = 20;
            var fmt_res_12130005 = [mnewString(0)];
            F.line = 20;
            if (fmt_res_12130005[0] != null) { fmt_res_12130005[0] = (fmt_res_12130005[0]).concat(makeNimstrLit(".scope-")); } else { fmt_res_12130005[0] = makeNimstrLit(".scope-"); };
            F.line = 20;
            format_value_10130080(fmt_res_12130005, 0, scope_12095014, []);
            F.line = 21;
            var fmt_res_12135002 = [mnewString(0)];
            F.line = 21;
            if (fmt_res_12135002[0] != null) { fmt_res_12135002[0] = (fmt_res_12135002[0]).concat(makeNimstrLit(".component-")); } else { fmt_res_12135002[0] = makeNimstrLit(".component-"); };
            F.line = 21;
            format_value_10130080(fmt_res_12135002, 0, comp_12083138, []);
            style_12095008.textContent = toJSStr(nsuReplaceStr(nsuReplaceStr(cstrToNimstr(style_12095008.textContent), makeNimstrLit(":scope"), fmt_res_12130005[0]), makeNimstrLit(":component"), fmt_res_12135002[0]));
            F.line = 188;
            i_12452979 = addInt(i_12452979, 1);
            if (!(((colontmp__12452978 != null ? colontmp__12452978.length : 0) == l_12452980))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
async function fetch_template_12210001(rel_path_12210003, template_selector_12210004, css_12210005) {
  var result_12210010 = null;

  var F={procname:"fetchutil.fetchTemplate",prev:framePtr,filename:"fetchutil.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 14;
    var tmpl_12210035 = (await fetch_template_12150001(rel_path_12210003));
    F.line = 15;
    var node_12210036 = tmpl_12210035.querySelector(toJSStr(template_selector_12210004)).content;
    if (css_12210005) {
    F.line = 17;
    scope_12083110(node_12210036);
    }
    
    F.line = 18;
    result_12210010 = node_12210036;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12210010;

}
function new_12410284() {
  var result_12410288 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12410401 = null;
    F.line = 851;
    r_12410401 = {m_type: NTI12211318, cmatches: null, config: null};
    F.line = 852;
    result_12410288 = r_12410401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12410288;

}
function create_12410269(config_12410275) {
  var result_12410277 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 330;
    result_12410277 = new_12410284();
    F.line = 331;
    result_12410277.config = config_12410275;
  framePtr = F.prev;

  return result_12410277;

}
function compile_12402837(node_12402842, configurator_12402848) {
  var result_12402850 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 838;
    if (!(!((node_12402842 == null)))) {
    F.line = 840;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(840, 10) `\x0Anot (node == nil)` "));
    }
    
    result_12402850 = compile_12410751(create_12410269(configurator_12402848), node_12402842);
  framePtr = F.prev;

  return result_12402850;

}
function refresh_12325301(c_12325306, refresh_12325308) {
    var Tmp1;
      var Tmp2;

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (c_12325306.iter) {
    F.line = 478;
    var Tmp1 = c_12325306;
    if (ConstSet9[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
    switch (Tmp1.iterate.kind) {
    case 0:
      F.line = 480;
      var fmt_res_12325310 = mnewString(0);
      F.line = 480;
      if (fmt_res_12325310 != null) { fmt_res_12325310 = (fmt_res_12325310).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates")); } else { fmt_res_12325310 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (simple) does not allow updates"); };
      F.line = 480;
      raiseException({message: nimCopy(null, fmt_res_12325310, NTI112), parent: null, m_type: NTI10221015, name: null, trace: null, up: null}, "BindError");
      break;
    case 1:
      F.line = 482;
      var fmt_res_12335002 = mnewString(0);
      F.line = 482;
      if (fmt_res_12335002 != null) { fmt_res_12335002 = (fmt_res_12335002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates")); } else { fmt_res_12335002 = makeNimstrLit("refresh with RefreshEvent is forbidden when iterator (serial) does not allow updates"); };
      F.line = 482;
      raiseException({message: nimCopy(null, fmt_res_12335002, NTI112), parent: null, m_type: NTI10221015, name: null, trace: null, up: null}, "BindError");
      break;
    case 2:
      break;
    }
    }
    else {
      F.line = 486;
      var Tmp2 = c_12325306;
      if (ConstSet10[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
      switch (Tmp2.convert.kind) {
      case 0:
        F.line = 488;
        var fmt_res_12345003 = mnewString(0);
        F.line = 488;
        if (fmt_res_12345003 != null) { fmt_res_12345003 = (fmt_res_12345003).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates")); } else { fmt_res_12345003 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (simple) does not allow updates"); };
        F.line = 488;
        raiseException({message: nimCopy(null, fmt_res_12345003, NTI112), parent: null, m_type: NTI10221015, name: null, trace: null, up: null}, "BindError");
        break;
      case 1:
        F.line = 490;
        var fmt_res_12355002 = mnewString(0);
        F.line = 490;
        if (fmt_res_12355002 != null) { fmt_res_12355002 = (fmt_res_12355002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates")); } else { fmt_res_12355002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (serial) does not allow updates"); };
        F.line = 490;
        raiseException({message: nimCopy(null, fmt_res_12355002, NTI112), parent: null, m_type: NTI10221015, name: null, trace: null, up: null}, "BindError");
        break;
      case 2:
        F.line = 492;
        var fmt_res_12365002 = mnewString(0);
        F.line = 492;
        if (fmt_res_12365002 != null) { fmt_res_12365002 = (fmt_res_12365002).concat(makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates")); } else { fmt_res_12365002 = makeNimstrLit("refresh with RefreshEvent is forbidden when type selector (compare) does not allow updates"); };
        F.line = 492;
        raiseException({message: nimCopy(null, fmt_res_12365002, NTI112), parent: null, m_type: NTI10221015, name: null, trace: null, up: null}, "BindError");
        break;
      case 3:
        break;
      }
    }
    
    F.line = 495;
    if (c_12325306.refresh != null) { c_12325306.refresh.push(refresh_12325308); } else { c_12325306.refresh = [refresh_12325308]; };
  framePtr = F.prev;

  
}
function add_12260218(x_12260223, x_12260223_Idx, y_12260225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_12260231 = (x_12260223[x_12260223_Idx] != null ? x_12260223[x_12260223_Idx].length : 0);
    F.line = 1209;
    if (x_12260223[x_12260223_Idx] === null) x_12260223[x_12260223_Idx] = [];
               if (x_12260223[x_12260223_Idx].length < (Tmp1 = chckRange(addInt(xl_12260231, (y_12260225 != null ? y_12260225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_12260223[x_12260223_Idx].length;i<Tmp1;++i) x_12260223[x_12260223_Idx].push(null); }
               else { x_12260223[x_12260223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_12260256 = 0;
      F.line = 66;
      var colontmp__12453109 = 0;
      F.line = 1210;
      colontmp__12453109 = (y_12260225 != null ? (y_12260225.length-1) : -1);
      F.line = 77;
      var res_12453110 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12453110 <= colontmp__12453109)) break L4;
            F.line = 1210;
            i_12260256 = res_12453110;
            F.line = 1210;
            x_12260223[x_12260223_Idx][chckIndx(addInt(xl_12260231, i_12260256), 0, (x_12260223[x_12260223_Idx] != null ? x_12260223[x_12260223_Idx].length : 0)+0-1)-0] = y_12260225[chckIndx(i_12260256, 0, (y_12260225 != null ? y_12260225.length : 0)+0-1)-0];
            F.line = 80;
            res_12453110 = addInt(res_12453110, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_12241168(cfg_12241173, node_12241174) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_12241236 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 588;
    result_12241236 = nimCopy(null, [], NTI12241251);
    F.line = 589;
    var matched_nodes_12241252 = node_12241174.querySelectorAll(toJSStr(cfg_12241173.selector));
    if (((matched_nodes_12241252 != null ? matched_nodes_12241252.length : 0) == 0)) {
    F.line = 591;
    var selector_12241258 = nimCopy(null, cfg_12241173.selector, NTI112);
    F.line = 592;
    var fmt_res_12241259 = [mnewString(0)];
    F.line = 592;
    if (fmt_res_12241259[0] != null) { fmt_res_12241259[0] = (fmt_res_12241259[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_12241259[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 592;
    format_value_10130080(fmt_res_12241259, 0, selector_12241258, []);
    F.line = 592;
    if (fmt_res_12241259[0] != null) { fmt_res_12241259[0] = (fmt_res_12241259[0]).concat(makeNimstrLit("\'")); } else { fmt_res_12241259[0] = makeNimstrLit("\'"); };
    F.line = 592;
    raiseException({message: nimCopy(null, fmt_res_12241259[0], NTI112), parent: null, m_type: NTI10221019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 594;
      var matched_node_12250008 = null;
      F.line = 184;
      var i_12453105 = 0;
      F.line = 185;
      var l_12453106 = (matched_nodes_12241252 != null ? matched_nodes_12241252.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12453105 < l_12453106)) break L3;
            F.line = 594;
            matched_node_12250008 = matched_nodes_12241252[chckIndx(i_12453105, 0, (matched_nodes_12241252 != null ? matched_nodes_12241252.length : 0)+0-1)-0];
            F.line = 595;
            var match_12250016 = {refresh: nimCopy(null, cfg_12241173.refresh, NTI12237079), init: nimCopy(null, cfg_12241173.init, NTI10221379), iter: cfg_12241173.iter, node: matched_node_12250008, selectorKind: 0, serial: 0, value: 0, convert: {kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null, selector: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 600;
            match_12250016.node = matched_node_12250008;
            if (match_12250016.iter) {
            var Tmp4 = match_12250016;
            if (ConstSet11[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 602;
            var Tmp5 = cfg_12241173;
            if (ConstSet12[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI12237195);
            var Tmp6 = match_12250016;
            if (ConstSet13[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 603;
            Tmp6.anchor = matched_node_12250008.ownerDocument.createComment(matched_node_12250008.outerHTML);
            var Tmp7 = match_12250016;
            if (ConstSet14[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 604;
            Tmp7.mount_template = cfg_12241173.mount;
            var Tmp8 = match_12250016;
            if (ConstSet15[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 605;
            Tmp8.match_templates = nimCopy(null, cfg_12241173.cmatches, NTI12237119);
            var Tmp9 = match_12250016;
            if (ConstSet16[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 606;
            Tmp9.items = nimCopy(null, [], NTI12250042);
            F.line = 607;
            var Tmp10 = match_12250016;
            if (ConstSet17[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_12250008.parentNode.replaceChild(Tmp10.anchor, matched_node_12250008);
            }
            else {
              var Tmp11 = match_12250016;
              if (ConstSet18[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 609;
              var Tmp12 = cfg_12241173;
              if (ConstSet19[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 610;
              var Tmp13 = match_12250016;
              if (ConstSet20[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_12250016;
                if (ConstSet21[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 612;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_12250016;
              if (ConstSet22[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 615;
              var Tmp16 = cfg_12241173;
              if (ConstSet23[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI12237153);
              var Tmp17 = match_12250016;
              if (ConstSet24[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 616;
              Tmp17.matches = nimCopy(null, [], NTI12250069);
              var Tmp18 = match_12250016;
              if (ConstSet25[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 617;
              Tmp18.inited = false;
              var Tmp19 = match_12250016;
              if (ConstSet26[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 618;
              Tmp19.mount = null;
              if (!((cfg_12241173.mount == null))) {
              var Tmp20 = match_12250016;
              if (ConstSet27[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 620;
              Tmp20.mount_source = cfg_12241173.mount;
              }
              else {
                L21: do {
                  F.line = 622;
                  var submatch_12260214 = null;
                  F.line = 184;
                  var i_12453102 = 0;
                  F.line = 185;
                  var l_12453103 = (cfg_12241173.cmatches != null ? cfg_12241173.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_12453102 < l_12453103)) break L23;
                        F.line = 622;
                        submatch_12260214 = cfg_12241173.cmatches[chckIndx(i_12453102, 0, (cfg_12241173.cmatches != null ? cfg_12241173.cmatches.length : 0)+0-1)-0];
                        F.line = 623;
                        var Tmp24 = match_12250016;
                        if (ConstSet28[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_12260218(Tmp24, "matches", submatch_12260214.compile(matched_node_12250008));
                        F.line = 188;
                        i_12453102 = addInt(i_12453102, 1);
                        if (!(((cfg_12241173.cmatches != null ? cfg_12241173.cmatches.length : 0) == l_12453103))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 624;
            if (result_12241236 != null) { result_12241236.push(match_12250016); } else { result_12241236 = [match_12250016]; };
            F.line = 188;
            i_12453105 = addInt(i_12453105, 1);
            if (!(((matched_nodes_12241252 != null ? matched_nodes_12241252.length : 0) == l_12453106))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12241236;

}
function is_changed_10221605(set_10221607) {
    var Tmp1;

  var result_10221608 = false;

  var F={procname:"nclearseam.is_changed",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 260;
    if ((set_10221607 == null)) Tmp1 = true; else {      Tmp1 = (0 < (set_10221607.paths != null ? set_10221607.paths.length : 0));    }    result_10221608 = Tmp1;
  framePtr = F.prev;

  return result_10221608;

}
function HEX26_12235286(x_12235290, y_12235292) {
  var result_12235294 = null;

  var F={procname:"&.&",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1599;
    result_12235294 = new Array(chckRange(addInt((x_12235290 != null ? x_12235290.length : 0), (y_12235292 != null ? y_12235292.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_12235290 != null ? x_12235290.length : 0), (y_12235292 != null ? y_12235292.length : 0)), 0, 2147483647);++i) {result_12235294[i]=null;}    L1: do {
      F.line = 1600;
      var i_12235325 = 0;
      F.line = 66;
      var colontmp__12453150 = 0;
      F.line = 1600;
      colontmp__12453150 = subInt((x_12235290 != null ? x_12235290.length : 0), 1);
      F.line = 77;
      var res_12453151 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12453151 <= colontmp__12453150)) break L3;
            F.line = 1600;
            i_12235325 = res_12453151;
            F.line = 1601;
            result_12235294[chckIndx(i_12235325, 0, (result_12235294 != null ? result_12235294.length : 0)+0-1)-0] = nimCopy(null, x_12235290[chckIndx(i_12235325, 0, (x_12235290 != null ? x_12235290.length : 0)+0-1)-0], NTI112);
            F.line = 80;
            res_12453151 = addInt(res_12453151, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      F.line = 1602;
      var i_12235339 = 0;
      F.line = 66;
      var colontmp__12453157 = 0;
      F.line = 1602;
      colontmp__12453157 = subInt((y_12235292 != null ? y_12235292.length : 0), 1);
      F.line = 77;
      var res_12453158 = 0;
      L5: do {
        F.line = 78;
          L6: while (true) {
          if (!(res_12453158 <= colontmp__12453157)) break L6;
            F.line = 1602;
            i_12235339 = res_12453158;
            F.line = 1603;
            result_12235294[chckIndx(addInt(i_12235339, (x_12235290 != null ? x_12235290.length : 0)), 0, (result_12235294 != null ? result_12235294.length : 0)+0-1)-0] = nimCopy(null, y_12235292[chckIndx(i_12235339, 0, (y_12235292 != null ? y_12235292.length : 0)+0-1)-0], NTI112);
            F.line = 80;
            res_12453158 = addInt(res_12453158, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12235294;

}
function nsuJoinSep(a_9765018, sep_9765019) {
  var result_9765020 = null;

  var F={procname:"strutils.join",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((0 < (a_9765018 != null ? a_9765018.length : 0))) {
    F.line = 1762;
    var l_9770009 = mulInt((sep_9765019 != null ? sep_9765019.length : 0), subInt((a_9765018 != null ? a_9765018.length : 0), 1));
    L1: do {
      F.line = 1763;
      var i_9770023 = 0;
      F.line = 66;
      var colontmp__12453164 = 0;
      F.line = 1763;
      colontmp__12453164 = (a_9765018 != null ? (a_9765018.length-1) : -1);
      F.line = 77;
      var res_12453165 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12453165 <= colontmp__12453164)) break L3;
            F.line = 1763;
            i_9770023 = res_12453165;
            F.line = 1763;
            l_9770009 = addInt(l_9770009, (a_9765018[chckIndx(i_9770023, 0, (a_9765018 != null ? a_9765018.length : 0)+0-1)-0] != null ? a_9765018[chckIndx(i_9770023, 0, (a_9765018 != null ? a_9765018.length : 0)+0-1)-0].length : 0));
            F.line = 80;
            res_12453165 = addInt(res_12453165, 1);
          }
      } while(false);
    } while(false);
    F.line = 1764;
    result_9765020 = nimCopy(null, mnewString(0), NTI112);
    F.line = 1765;
    if (result_9765020 != null) { result_9765020 = (result_9765020).concat(a_9765018[chckIndx(0, 0, (a_9765018 != null ? a_9765018.length : 0)+0-1)-0]); } else { result_9765020 = a_9765018[chckIndx(0, 0, (a_9765018 != null ? a_9765018.length : 0)+0-1)-0].slice(); };
    L4: do {
      F.line = 1766;
      var i_9770043 = 0;
      F.line = 66;
      var colontmp__12453171 = 0;
      F.line = 1766;
      colontmp__12453171 = (a_9765018 != null ? (a_9765018.length-1) : -1);
      F.line = 77;
      var res_12453172 = 1;
      L5: do {
        F.line = 78;
          L6: while (true) {
          if (!(res_12453172 <= colontmp__12453171)) break L6;
            F.line = 1766;
            i_9770043 = res_12453172;
            F.line = 1767;
            if (result_9765020 != null) { result_9765020 = (result_9765020).concat(sep_9765019); } else { result_9765020 = sep_9765019.slice(); };
            F.line = 1768;
            if (result_9765020 != null) { result_9765020 = (result_9765020).concat(a_9765018[chckIndx(i_9770043, 0, (a_9765018 != null ? a_9765018.length : 0)+0-1)-0]); } else { result_9765020 = a_9765018[chckIndx(i_9770043, 0, (a_9765018 != null ? a_9765018.length : 0)+0-1)-0].slice(); };
            F.line = 80;
            res_12453172 = addInt(res_12453172, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      F.line = 1770;
      result_9765020 = nimCopy(null, [], NTI112);
    }
    
  framePtr = F.prev;

  return result_9765020;

}
function HEX24_10260579(path_10260581) {
  var result_10260582 = null;

  var F={procname:"nclearseam.$",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 298;
    result_10260582 = nimCopy(null, nsuJoinSep(path_10260581, makeNimstrLit("->")), NTI112);
  framePtr = F.prev;

  return result_10260582;

}
function sub_12280624(ts_12280629, val_12280631, val_12280631_Idx, set_val_12280633, update_12280634) {
    function HEX3Aanonymous_12280647(new_value_12280649, changed_path_12280650) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 289;
        ts_12280629.set(val_12280631, val_12280631_Idx, new_value_12280649);
        F.line = 290;
        var new_path_12280659 = HEX26_12235286(ts_12280629.id, changed_path_12280650);
        if (!((set_val_12280633 == null))) {
        F.line = 292;
        set_val_12280633(val_12280631[val_12280631_Idx], new_path_12280659);
        }
        else {
        if (!((update_12280634 == null))) {
        F.line = 294;
        console.log("Update %s", toJSStr(HEX24_10260579(new_path_12280659)));
        F.line = 295;
        update_12280634({paths: [nimCopy(null, new_path_12280659, NTI12235293)]});
        }
        }
      framePtr = F.prev;

      
    }

  var result_12280636 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_12280633 == null) && (update_12280634 == null))) {
    F.line = 287;
    result_12280636 = null;
    break BeforeRet;
    }
    
    F.line = 288;
    result_12280636 = HEX3Aanonymous_12280647;
  } while (false);
  framePtr = F.prev;

  return result_12280636;

}
function HEX5BHEX5D_10260021(s_10260027, x_10260029) {
  var result_10260031 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2492;
    var a_10260201 = x_10260029.a;
    F.line = 2493;
    var l_10260405 = addInt(subInt(subInt((s_10260027 != null ? s_10260027.length : 0), x_10260029.b), a_10260201), 1);
    F.line = 2494;
    result_10260031 = new Array(chckRange(l_10260405, 0, 2147483647)); for (var i=0;i<chckRange(l_10260405, 0, 2147483647);++i) {result_10260031[i]=null;}    L1: do {
      F.line = 2495;
      var i_10260420 = 0;
      F.line = 106;
      var i_12453194 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_12453194 < l_10260405)) break L3;
            F.line = 2495;
            i_10260420 = i_12453194;
            F.line = 2495;
            result_10260031[chckIndx(i_10260420, 0, (result_10260031 != null ? result_10260031.length : 0)+0-1)-0] = nimCopy(null, s_10260027[chckIndx(addInt(i_10260420, a_10260201), 0, (s_10260027 != null ? s_10260027.length : 0)+0-1)-0], NTI112);
            F.line = 109;
            i_12453194 = addInt(i_12453194, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10260031;

}
function walk_10225019(set_10225021, path_10225022) {
  var result_10225023 = null;

  var F={procname:"nclearseam.walk",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((set_10225021 == null)) {
    F.line = 265;
    result_10225023 = null;
    break BeforeRet;
    }
    
    F.line = 266;
    result_10225023 = {paths: []};
    L1: do {
      F.line = 267;
      var old_path_10235214 = null;
      F.line = 184;
      var i_12453188 = 0;
      F.line = 185;
      var l_12453189 = (set_10225021.paths != null ? set_10225021.paths.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12453188 < l_12453189)) break L3;
            F.line = 267;
            old_path_10235214 = set_10225021.paths[chckIndx(i_12453188, 0, (set_10225021.paths != null ? set_10225021.paths.length : 0)+0-1)-0];
            L4: do {
              F.line = 269;
              var new_path_10235231 = [];
              if (((old_path_10235214 != null ? old_path_10235214.length : 0) < (path_10225022 != null ? path_10225022.length : 0))) {
              F.line = 271;
              break L4;
              }
              
              L5: do {
                F.line = 272;
                var i_10235255 = 0;
                F.line = 66;
                var colontmp__12453180 = 0;
                F.line = 272;
                colontmp__12453180 = subInt((path_10225022 != null ? path_10225022.length : 0), 1);
                F.line = 77;
                var res_12453181 = 0;
                L6: do {
                  F.line = 78;
                    L7: while (true) {
                    if (!(res_12453181 <= colontmp__12453180)) break L7;
                      F.line = 272;
                      i_10235255 = res_12453181;
                      if (((old_path_10235214 != null ? old_path_10235214.length : 0) <= i_10235255)) {
                      F.line = 274;
                      break L5;
                      }
                      
                      if (!(eqStrings(path_10225022[chckIndx(i_10235255, 0, (path_10225022 != null ? path_10225022.length : 0)+0-1)-0], old_path_10235214[chckIndx(i_10235255, 0, (old_path_10235214 != null ? old_path_10235214.length : 0)+0-1)-0]))) {
                      F.line = 276;
                      break L4;
                      }
                      
                      F.line = 80;
                      res_12453181 = addInt(res_12453181, 1);
                    }
                } while(false);
              } while(false);
              if (((path_10225022 != null ? path_10225022.length : 0) < (old_path_10235214 != null ? old_path_10235214.length : 0))) {
              F.line = 278;
              new_path_10235231 = nimCopy(null, HEX5BHEX5D_10260021(old_path_10235214, HEX2EHEX2E_4860001(addInt((path_10225022 != null ? path_10225022.length : 0), 1), 1)), NTI10260030);
              }
              
              F.line = 279;
              var Tmp8 = nimCopy(null, new_path_10235231, NTI10221029);
              if (result_10225023.paths != null) { result_10225023.paths.push(Tmp8); } else { result_10225023.paths = [Tmp8]; };
            } while(false);
            F.line = 188;
            i_12453188 = addInt(i_12453188, 1);
            if (!(((set_10225021.paths != null ? set_10225021.paths.length : 0) == l_12453189))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  } while (false);
  framePtr = F.prev;

  return result_10225023;

}
function compile_12280827(cfgs_12280832, node_12280833) {
  var result_12280836 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 627;
    result_12280836[0] = nimCopy(null, [], NTI12280851);
    L1: do {
      F.line = 628;
      var cfg_12280858 = null;
      F.line = 184;
      var i_12453198 = 0;
      F.line = 185;
      var l_12453199 = (cfgs_12280832 != null ? cfgs_12280832.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12453198 < l_12453199)) break L3;
            F.line = 628;
            cfg_12280858 = cfgs_12280832[chckIndx(i_12453198, 0, (cfgs_12280832 != null ? cfgs_12280832.length : 0)+0-1)-0];
            F.line = 629;
            add_12260218(result_12280836, 0, cfg_12280858.compile(node_12280833));
            F.line = 188;
            i_12453198 = addInt(i_12453198, 1);
            if (!(((cfgs_12280832 != null ? cfgs_12280832.length : 0) == l_12453199))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12280836[0];

}
function create_iter_item_12280762(match_12280767, parent_node_12280768) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_12280770 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 649;
    var comp_12280775 = null;
    F.line = 650;
    var node_12280776 = null;
      var Tmp1 = match_12280767;
      if (ConstSet42[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 652;
    var Tmp2 = match_12280767;
    if (ConstSet43[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_12280775 = Tmp2.mount_template.clone();
    F.line = 653;
    node_12280776 = comp_12280775.node();
    }
    else {
      F.line = 655;
      node_12280776 = match_12280767.node.cloneNode(true);
    }
    
    F.line = 656;
    var Tmp3 = match_12280767;
    if (ConstSet44[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_12280770 = {serial: 0, mount: comp_12280775, node: node_12280776, matches: compile_12280827(Tmp3.match_templates, node_12280776)};
    F.line = 661;
    var Tmp4 = match_12280767;
    if (ConstSet45[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_12280768.insertBefore(node_12280776, Tmp4.anchor);
  framePtr = F.prev;

  return result_12280770;

}
function detach_12310490(iter_item_12310494, parent_node_12310495) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 665;
    parent_node_12310495.removeChild(iter_item_12310494.node);
  framePtr = F.prev;

  
}
function pop_12310224(s_12310229, s_12310229_Idx) {
  var result_12310230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_12310236 = subInt((s_12310229[s_12310229_Idx] != null ? s_12310229[s_12310229_Idx].length : 0), 1);
    F.line = 1784;
    result_12310230 = s_12310229[s_12310229_Idx][chckIndx(l_12310236, 0, (s_12310229[s_12310229_Idx] != null ? s_12310229[s_12310229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_12310229[s_12310229_Idx] === null) s_12310229[s_12310229_Idx] = [];
               if (s_12310229[s_12310229_Idx].length < chckRange(l_12310236, 0, 2147483647)) { for (var i=s_12310229[s_12310229_Idx].length;i<chckRange(l_12310236, 0, 2147483647);++i) s_12310229[s_12310229_Idx].push(null); }
               else { s_12310229[s_12310229_Idx].length = chckRange(l_12310236, 0, 2147483647); };
  framePtr = F.prev;

  return result_12310230;

}
function update_12270963(match_12270968, init_val_12270969, set_val_12270971, refresh_list_12270972) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          var Tmp16;
            function HEX3Aanonymous_12280298(refresh_list_12280300) {
              var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 707;
                update_12270963(match_12270968, val_12280201[0], set_val_12270971, refresh_list_12280300);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
          var Tmp34;
          var Tmp35;
          var Tmp36;
      var Tmp37;
        var Tmp38;
        var Tmp39;
        var Tmp40;
        var Tmp41;
        var Tmp42;
          var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
            var Tmp51;
            var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        function HEX3Aanonymous_12310583(refresh_list_12310585) {
          var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 787;
            update_12270963(match_12270968, val_12280201[0], set_val_12270971, refresh_list_12310585);
          framePtr = F.prev;

          
        }
        var Tmp56;
        var Tmp57;
          var Tmp58;
      var Tmp59;
      var Tmp60;
      var Tmp61;
      var Tmp62;
      var Tmp66;
        var Tmp67;
          var Tmp68;
      var Tmp69;
      var Tmp70;
        var Tmp72;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_12270971 == null)))) {
    F.line = 668;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(668, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 669;
    var val_12280201 = [init_val_12270969];
    if (match_12270968.iter) {
    F.line = 672;
    var i_12280203 = 0;
    F.line = 673;
    var Tmp1 = match_12270968;
    if (ConstSet29[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_12280206 = Tmp1.anchor.parentNode;
    F.line = 674;
    var sub_list_12280207 = null;
    F.line = 675;
    var it_simple_12280212 = null;
    F.line = 676;
    var it_serial_12280217 = null;
    F.line = 677;
    var it_select_12280225 = null;
    F.line = 678;
    var Tmp2 = match_12270968;
    if (ConstSet30[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 680;
      var Tmp3 = match_12270968;
      if (ConstSet32[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet31[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_12280212 = Tmp4.simple(val_12280201[0]);
      break;
    case 1:
      F.line = 682;
      var Tmp5 = match_12270968;
      if (ConstSet34[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet33[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_12280217 = Tmp6.serial(val_12280201[0]);
      break;
    case 2:
      F.line = 684;
      var Tmp7 = match_12270968;
      if (ConstSet36[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet35[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_12280225 = Tmp8.selector(val_12280201[0]);
      break;
    }
    L9: do {
      F.line = 686;
        L10: while (true) {
        if (!true) break L10;
          F.line = 687;
            var Tmp12 = match_12270968;
            if (ConstSet37[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12280203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_12270968;
          if (ConstSet38[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_12280203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_12280250 = [Tmp11];
          F.line = 688;
          var changed_12280251 = is_changed_10221605(refresh_list_12270972);
          F.line = 689;
          var item_12280252 = 0;
          F.line = 690;
          var set_12280257 = null;
          F.line = 691;
          var Tmp16 = match_12270968;
          if (ConstSet39[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 693;
            var it_12280260 = it_simple_12280212();
            if ((it_12280260["Field0"] == false)) {
            F.line = 694;
            break L9;
            }
            
            F.line = 695;
            item_12280252 = it_12280260["Field1"];
            F.line = 696;
            console.log("nclearseam.update(iter, changed=%o) using %o", changed_12280251, item_12280252);
            break;
          case 1:
            F.line = 698;
            var it_12280262 = it_serial_12280217(serial_12280250, 0);
            if ((it_12280262["Field0"] == false)) {
            F.line = 699;
            break L9;
            }
            
            F.line = 700;
            item_12280252 = it_12280262["Field1"];
            F.line = 701;
            console.log("nclearseam.update(iter, changed=%o) using %o", changed_12280251, item_12280252);
            break;
          case 2:
            F.line = 703;
            var it_12280263 = it_select_12280225();
            if ((it_12280263 == null)) {
            F.line = 704;
            break L9;
            }
            
            F.line = 705;
            item_12280252 = it_12280263.get(val_12280201[0]);
            F.line = 706;
            set_12280257 = sub_12280624(it_12280263, val_12280201, 0, set_val_12270971, HEX3Aanonymous_12280298);
            F.line = 708;
            sub_list_12280207 = walk_10225019(refresh_list_12270972, it_12280263.id);
            F.line = 709;
            changed_12280251 = is_changed_10221605(sub_list_12280207);
            F.line = 710;
            console.log("nclearseam.update(iter, changed=%o, id=%o) using %o", changed_12280251, toJSStr(HEX24_10260579(it_12280263.id)), item_12280252);
            break;
          }
          F.line = 712;
          var iter_item_12280745 = null;
          F.line = 713;
          var inited_12280746 = false;
            var Tmp17 = match_12270968;
            if (ConstSet40[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12280203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 717;
          var Tmp19 = match_12270968;
          if (ConstSet41[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_12280745 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_12280203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 718;
          inited_12280746 = true;
          F.line = 719;
          changed_12280251 = true;
          }
          else {
            F.line = 721;
            iter_item_12280745 = create_iter_item_12280762(match_12270968, parent_node_12280206);
            F.line = 722;
            var Tmp21 = match_12270968;
            if (ConstSet46[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_12280745); } else { Tmp22 = [iter_item_12280745]; };
            F.line = 723;
            inited_12280746 = false;
            if (!((serial_12280250[0] == iter_item_12280745.serial))) {
            F.line = 725;
            changed_12280251 = true;
            }
            
          }
          
          if (!(inited_12280746)) {
          L23: do {
            F.line = 729;
            var init_proc_12290214 = null;
            F.line = 184;
            var i_12453119 = 0;
            F.line = 185;
            var l_12453120 = (match_12270968.init != null ? match_12270968.init.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_12453119 < l_12453120)) break L25;
                  F.line = 729;
                  init_proc_12290214 = match_12270968.init[chckIndx(i_12453119, 0, (match_12270968.init != null ? match_12270968.init.length : 0)+0-1)-0];
                  F.line = 730;
                  init_proc_12290214(iter_item_12280745.node);
                  F.line = 188;
                  i_12453119 = addInt(i_12453119, 1);
                  if (!(((match_12270968.init != null ? match_12270968.init.length : 0) == l_12453120))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_12280745.mount == null))) {
          F.line = 734;
          iter_item_12280745.mount.update(item_12280252, set_12280257, sub_list_12280207);
          }
          
          L26: do {
            F.line = 737;
            var submatch_12300214 = null;
            F.line = 184;
            var i_12453124 = 0;
            F.line = 185;
            var l_12453125 = (iter_item_12280745.matches != null ? iter_item_12280745.matches.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_12453124 < l_12453125)) break L28;
                  F.line = 737;
                  submatch_12300214 = iter_item_12280745.matches[chckIndx(i_12453124, 0, (iter_item_12280745.matches != null ? iter_item_12280745.matches.length : 0)+0-1)-0];
                  F.line = 738;
                  submatch_12300214.update(item_12280252, set_12280257, sub_list_12280207);
                  F.line = 188;
                  i_12453124 = addInt(i_12453124, 1);
                  if (!(((iter_item_12280745.matches != null ? iter_item_12280745.matches.length : 0) == l_12453125))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 741;
          var e_12300219 = {node: iter_item_12280745.node, data: item_12280252, init: !(inited_12280746), set: set_12280257};
          L29: do {
            F.line = 746;
            var refresh_proc_12310214 = null;
            F.line = 184;
            var i_12453130 = 0;
            F.line = 185;
            var l_12453131 = (match_12270968.refresh != null ? match_12270968.refresh.length : 0);
            L30: do {
              F.line = 186;
                L31: while (true) {
                if (!(i_12453130 < l_12453131)) break L31;
                  F.line = 746;
                  refresh_proc_12310214 = match_12270968.refresh[chckIndx(i_12453130, 0, (match_12270968.refresh != null ? match_12270968.refresh.length : 0)+0-1)-0];
                  F.line = 747;
                  refresh_proc_12310214(e_12300219);
                  F.line = 188;
                  i_12453130 = addInt(i_12453130, 1);
                  if (!(((match_12270968.refresh != null ? match_12270968.refresh.length : 0) == l_12453131))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 749;
          i_12280203 = addInt(i_12280203, 1);
        }
    } while(false);
    L32: do {
      F.line = 752;
        L33: while (true) {
          var Tmp34 = match_12270968;
          if (ConstSet47[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_12280203 < ((Tmp35 = Tmp34.items, Tmp35) != null ? Tmp35.length : 0))) break L33;
          F.line = 753;
          var Tmp36 = match_12270968;
          if (ConstSet48[Tmp36.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_12310490(pop_12310224(Tmp36, "items"), parent_node_12280206);
        }
    } while(false);
    }
    else {
      F.line = 755;
      var changed_12310509 = is_changed_10221605(refresh_list_12270972);
      F.line = 756;
      var sub_list_12310510 = null;
      F.line = 757;
      var node_12310511 = match_12270968.node;
      F.line = 758;
      var converted_val_12310512 = 0;
      F.line = 759;
      var set_12310517 = null;
      F.line = 761;
      var Tmp37 = match_12270968;
      if (ConstSet49[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp37.convert.kind) {
      case 0:
        F.line = 763;
        var Tmp38 = match_12270968;
        if (ConstSet51[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet50[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12310512 = Tmp39.simple(val_12280201[0]);
        F.line = 764;
        changed_12310509 = true;
        F.line = 765;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12310509, converted_val_12310512);
        break;
      case 1:
        F.line = 767;
        var Tmp40 = match_12270968;
        if (ConstSet52[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_12310525 = [Tmp40.serial];
        F.line = 768;
        var Tmp41 = match_12270968;
        if (ConstSet54[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet53[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12310512 = Tmp42.serial(val_12280201[0], serial_12310525, 0);
          var Tmp43 = match_12270968;
          if (ConstSet55[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_12310525[0] == Tmp43.serial))) {
        F.line = 770;
        changed_12310509 = true;
        }
        
        F.line = 771;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12310509, converted_val_12310512);
        break;
      case 2:
        F.line = 773;
        var Tmp44 = match_12270968;
        if (ConstSet57[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp45 = Tmp44.convert;
        if (ConstSet56[Tmp45.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp46 = match_12270968;
        if (ConstSet58[Tmp46.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_12310537 = Tmp45.compare(val_12280201[0], Tmp46.value);
        F.line = 774;
        converted_val_12310512 = res_12310537.Field0;
        var Tmp47 = match_12270968;
        if (ConstSet59[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 775;
        Tmp47.value = res_12310537.Field0;
        if (res_12310537.Field1) {
        F.line = 777;
        changed_12310509 = true;
        }
        
        F.line = 778;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12310509, converted_val_12310512);
        break;
      case 3:
        F.line = 780;
        var Tmp48 = match_12270968;
        if (ConstSet61[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet60[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_12310543 = Tmp49.obj;
        F.line = 781;
        converted_val_12310512 = obj_12310543.get(val_12280201[0]);
        F.line = 782;
        sub_list_12310510 = walk_10225019(refresh_list_12270972, obj_12310543.id);
        F.line = 783;
        changed_12310509 = is_changed_10221605(sub_list_12310510);
          if (!changed_12310509) Tmp50 = false; else {            var Tmp51 = match_12270968;
            if (ConstSet63[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp52 = Tmp51.convert;
            if (ConstSet62[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp50 = !((Tmp52.eql == null));          }        if (Tmp50) {
        F.line = 785;
        var Tmp53 = match_12270968;
        if (ConstSet65[Tmp53.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp54 = Tmp53.convert;
        if (ConstSet64[Tmp54.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp55 = match_12270968;
        if (ConstSet66[Tmp55.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_12310509 = !(Tmp54.eql(converted_val_12310512, Tmp55.value));
        }
        
        F.line = 786;
        set_12310517 = sub_12280624(obj_12310543, val_12280201, 0, set_val_12270971, HEX3Aanonymous_12310583);
        F.line = 788;
        console.log("nclearseam.update(match, changed=%o, id=%o) with %o", changed_12310509, toJSStr(HEX24_10260579(obj_12310543.id)), converted_val_12310512);
        break;
      }
        var Tmp57 = match_12270968;
        if (ConstSet67[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp57.mount == null)) Tmp56 = false; else {          var Tmp58 = match_12270968;
          if (ConstSet68[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp58.mount_source == null));        }      if (Tmp56) {
      var Tmp59 = match_12270968;
      if (ConstSet69[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 792;
      var Tmp60 = match_12270968;
      if (ConstSet70[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount = Tmp60.mount_source.clone();
      F.line = 793;
      var Tmp61 = match_12270968;
      if (ConstSet71[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12310511.parentNode.replaceChild(Tmp61.mount.node(), node_12310511);
      }
      
      F.line = 796;
      var Tmp62 = match_12270968;
      if (ConstSet72[Tmp62.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_12310951 = Tmp62.inited;
      if (!(inited_12310951)) {
      L63: do {
        F.line = 798;
        var init_proc_12310958 = null;
        F.line = 184;
        var i_12453135 = 0;
        F.line = 185;
        var l_12453136 = (match_12270968.init != null ? match_12270968.init.length : 0);
        L64: do {
          F.line = 186;
            L65: while (true) {
            if (!(i_12453135 < l_12453136)) break L65;
              F.line = 798;
              init_proc_12310958 = match_12270968.init[chckIndx(i_12453135, 0, (match_12270968.init != null ? match_12270968.init.length : 0)+0-1)-0];
              F.line = 799;
              init_proc_12310958(node_12310511);
              F.line = 188;
              i_12453135 = addInt(i_12453135, 1);
              if (!(((match_12270968.init != null ? match_12270968.init.length : 0) == l_12453136))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp66 = match_12270968;
      if (ConstSet73[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 800;
      Tmp66.inited = true;
      F.line = 801;
      changed_12310509 = true;
      }
      
        if (!changed_12310509) Tmp67 = false; else {          var Tmp68 = match_12270968;
          if (ConstSet74[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp67 = !((Tmp68.mount == null));        }      if (Tmp67) {
      F.line = 805;
      var Tmp69 = match_12270968;
      if (ConstSet75[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12310511 = Tmp69.mount.node();
      F.line = 806;
      var Tmp70 = match_12270968;
      if (ConstSet76[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp70.mount.update(converted_val_12310512, set_12310517, sub_list_12310510);
      }
      
      if (changed_12310509) {
      L71: do {
        F.line = 810;
        var submatch_12310983 = null;
        F.line = 182;
        var colontmp__12453139 = null;
        F.line = 810;
        var Tmp72 = match_12270968;
        if (ConstSet77[Tmp72.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__12453139 = Tmp72.matches;
        F.line = 184;
        var i_12453140 = 0;
        F.line = 185;
        var l_12453141 = (colontmp__12453139 != null ? colontmp__12453139.length : 0);
        L73: do {
          F.line = 186;
            L74: while (true) {
            if (!(i_12453140 < l_12453141)) break L74;
              F.line = 810;
              submatch_12310983 = colontmp__12453139[chckIndx(i_12453140, 0, (colontmp__12453139 != null ? colontmp__12453139.length : 0)+0-1)-0];
              F.line = 811;
              submatch_12310983.update(converted_val_12310512, set_12310517, sub_list_12310510);
              F.line = 188;
              i_12453140 = addInt(i_12453140, 1);
              if (!(((colontmp__12453139 != null ? colontmp__12453139.length : 0) == l_12453141))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_12310509) {
      F.line = 814;
      var e_12310988 = {node: node_12310511, data: converted_val_12310512, init: !(inited_12310951), set: set_12310517};
      L75: do {
        F.line = 819;
        var refresh_proc_12310995 = null;
        F.line = 184;
        var i_12453145 = 0;
        F.line = 185;
        var l_12453146 = (match_12270968.refresh != null ? match_12270968.refresh.length : 0);
        L76: do {
          F.line = 186;
            L77: while (true) {
            if (!(i_12453145 < l_12453146)) break L77;
              F.line = 819;
              refresh_proc_12310995 = match_12270968.refresh[chckIndx(i_12453145, 0, (match_12270968.refresh != null ? match_12270968.refresh.length : 0)+0-1)-0];
              F.line = 820;
              refresh_proc_12310995(e_12310988);
              F.line = 188;
              i_12453145 = addInt(i_12453145, 1);
              if (!(((match_12270968.refresh != null ? match_12270968.refresh.length : 0) == l_12453146))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_12270937(match_12270942) {
    function HEX3Aanonymous_12270949(data_12270951, set_12270956, refresh_list_12270957) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 891;
        update_12270963(match_12270942, data_12270951, set_12270956, refresh_list_12270957);
      framePtr = F.prev;

      
    }

  var result_12270944 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 890;
    result_12270944 = {update: HEX3Aanonymous_12270949};
  framePtr = F.prev;

  return result_12270944;

}
function as_interface_12240830(config_12240835) {
    function HEX3Aanonymous_12240842(node_12240844) {
      var result_12240850 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 897;
        result_12240850 = nimCopy(null, [], NTI12240865);
        L1: do {
          F.line = 898;
          var comp_match_12270214 = null;
          F.line = 182;
          var colontmp__12453092 = null;
          F.line = 898;
          colontmp__12453092 = compile_12241168(config_12240835, node_12240844);
          F.line = 184;
          var i_12453094 = 0;
          F.line = 185;
          var l_12453095 = (colontmp__12453092 != null ? colontmp__12453092.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12453094 < l_12453095)) break L3;
                F.line = 898;
                comp_match_12270214 = colontmp__12453092[chckIndx(i_12453094, 0, (colontmp__12453092 != null ? colontmp__12453092.length : 0)+0-1)-0];
                F.line = 899;
                if (result_12240850 != null) { result_12240850.push(as_interface_12270937(comp_match_12270214)); } else { result_12240850 = [as_interface_12270937(comp_match_12270214)]; };
                F.line = 188;
                i_12453094 = addInt(i_12453094, 1);
                if (!(((colontmp__12453092 != null ? colontmp__12453092.length : 0) == l_12453095))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_12240850;

    }

  var result_12240837 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 895;
    result_12240837 = {compile: HEX3Aanonymous_12240842};
  framePtr = F.prev;

  return result_12240837;

}
function match_12240055(c_12240060, selector_12240061, convert_12240063, actions_12240069) {
  var result_12240071 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 351;
    result_12240071 = {selector: nimCopy(null, selector_12240061, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_12240063, NTI12237153), cmatches: null, iterate: {kind: 0, simple: null, serial: null, selector: null}};
    F.line = 358;
    if (c_12240060.cmatches != null) { c_12240060.cmatches.push(as_interface_12240830(result_12240071)); } else { c_12240060.cmatches = [as_interface_12240830(result_12240071)]; };
    if (!((actions_12240069 == null))) {
    F.line = 360;
    actions_12240069(result_12240071);
    }
    
  framePtr = F.prev;

  return result_12240071;

}
function match_12237474(c_12237479, selector_12237480, convert_12237482, equal_12237486, actions_12237492) {
  var result_12237494 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 405;
    var type_selector_12237502 = {kind: 3, obj: convert_12237482, eql: equal_12237486, simple: null, serial: null, compare: null};
    F.line = 409;
    result_12237494 = match_12240055(c_12237479, selector_12237480, type_selector_12237502, actions_12237492);
  framePtr = F.prev;

  return result_12237494;

}
function HEX7C_12225216(p1_12225223, p2_12225226) {
    function HEX3Aanonymous_12225230(x_12225232) {
      var result_12225233 = 0;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_12225233 = p2_12225226(p1_12225223(x_12225232));
      framePtr = F.prev;

      return result_12225233;

    }

  var result_12225229 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_12225229 = HEX3Aanonymous_12225230;
  framePtr = F.prev;

  return result_12225229;

}
function access_12211993(c_12211997) {
    function HEX3Aanonymous_12212029(data_12212031) {
      var result_12212032 = null;

      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 187;
        result_12212032 = data_12212031;
      framePtr = F.prev;

      return result_12212032;

    }
    function HEX3Aanonymous_12212061(data_12212064, data_12212064_Idx, value_12212065) {
      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 188;
        data_12212064[data_12212064_Idx] = value_12212065;
      framePtr = F.prev;

      
    }

  var result_12212021 = null;

  var F={procname:"access.access",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 186;
    result_12212021 = {get: HEX3Aanonymous_12212029, set: HEX3Aanonymous_12212061, id: []};
  framePtr = F.prev;

  return result_12212021;

}
function eql_12237029(s1_12237032, s2_12237033) {
  var result_12237034 = false;

  var F={procname:"eql.eql",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 11;
    result_12237034 = (s1_12237032 == s2_12237033);
  framePtr = F.prev;

  return result_12237034;

}
function bind_value_12311584() {
    function HEX3Aanonymous_12311591(re_12311597) {
        function HEX3Aanonymous_12320201(e_12320203) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
            F.line = 244;
            re_12311597.set(((re_12311597.node)["value"]), []);
          framePtr = F.prev;

          
        }

      var F={procname:"bindValue.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 240;
        console.log("bindValue(%o)", re_12311597);
        if (re_12311597.init) {
        if (!(!((re_12311597.set == null)))) {
        F.line = 242;
        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam/util.nim(242, 13) `\x0Anot (re.set == nil)` Cannot bind value where type selector does not allow changing the data"));
        }
        
        F.line = 243;
        re_12311597.node.addEventListener("change", HEX3Aanonymous_12320201, false);
        }
        
        F.line = 245;
        (re_12311597.node).value = (re_12311597.data);
      framePtr = F.prev;

      
    }

  var result_12311590 = null;

  var F={procname:"bindValue.bindValue",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 239;
    result_12311590 = HEX3Aanonymous_12311591;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12311590;

}
function refresh_12402704(c_12402709, refresh_12402715) {
    function HEX3Aanonymous_12402716(re_12402722) {
      var F={procname:"refresh.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 471;
        refresh_12402715(re_12402722.node, re_12402722.data);
      framePtr = F.prev;

      
    }

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 471;
    if (c_12402709.refresh != null) { c_12402709.refresh.push(HEX3Aanonymous_12402716); } else { c_12402709.refresh = [HEX3Aanonymous_12402716]; };
  framePtr = F.prev;

  
}
function set_text_12402408() {
    function HEX3Aanonymous_12402417(node_12402419, text_12402420) {
      var F={procname:"setText.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 232;
        node_12402419.textContent = toJSStr(cstrToNimstr((text_12402420)+""));
      framePtr = F.prev;

      
    }

  var result_12402416 = null;

  var F={procname:"setText.setText",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 232;
    result_12402416 = HEX3Aanonymous_12402417;
  framePtr = F.prev;

  return result_12402416;

}
function HEX3Aanonymous_12211303(node_12211306) {
    function HEX3Aanonymous_12211377(c_12211384) {
        function HEX3Aanonymous_12225001(arg0_12225003) {
          var result_12225009 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 18;
            var arg1_12225010 = arg0_12225003.cubeprice;
            F.line = 65;
            result_12225009 = arg1_12225010;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12225009;

        }
        function HEX3Aanonymous_12225275(dataHEX60gensym12212184_12225278, dataHEX60gensym12212184_12225278_Idx, val3HEX60gensym12212185_12230007) {
            function HEX3Aanonymous_12235001(arg0_12235003, value_12235009) {
              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
              framePtr = F;
                F.line = 18;
                var arg1_12235010 = arg0_12235003.cubeprice;
                F.line = 118;
                arg1_12235010 = value_12235009;
                F.line = 130;
                arg0_12235003.cubeprice = arg1_12235010;
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
            F.line = 178;
            var val2HEX60gensym12212186_12230008 = access_12211993(c_12211384).get(dataHEX60gensym12212184_12225278[dataHEX60gensym12212184_12225278_Idx]);
            F.line = 179;
            var set2HEX60gensym12212187_12235214 = HEX3Aanonymous_12235001;
            F.line = 180;
            set2HEX60gensym12212187_12235214(val2HEX60gensym12212186_12230008, val3HEX60gensym12212185_12230007);
            F.line = 181;
            access_12211993(c_12211384).set(dataHEX60gensym12212184_12225278, dataHEX60gensym12212184_12225278_Idx, val2HEX60gensym12212186_12230008);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12390001(arg0_12390003) {
          var result_12390009 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 19;
            var arg1_12390010 = arg0_12390003.cubeprice;
            F.line = 65;
            result_12390009 = arg1_12390010;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12390009;

        }
        function HEX3Aanonymous_12390229(dataHEX60gensym12375666_12390232, dataHEX60gensym12375666_12390232_Idx, val3HEX60gensym12375667_12395007) {
            function HEX3Aanonymous_12400001(arg0_12400003, value_12400009) {
              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
              framePtr = F;
                F.line = 19;
                var arg1_12400010 = arg0_12400003.cubeprice;
                F.line = 118;
                arg1_12400010 = value_12400009;
                F.line = 130;
                arg0_12400003.cubeprice = arg1_12400010;
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
            F.line = 178;
            var val2HEX60gensym12375668_12395008 = access_12211993(c_12211384).get(dataHEX60gensym12375666_12390232[dataHEX60gensym12375666_12390232_Idx]);
            F.line = 179;
            var set2HEX60gensym12375669_12400214 = HEX3Aanonymous_12400001;
            F.line = 180;
            set2HEX60gensym12375669_12400214(val2HEX60gensym12375668_12395008, val3HEX60gensym12375667_12395007);
            F.line = 181;
            access_12211993(c_12211384).set(dataHEX60gensym12375666_12390232, dataHEX60gensym12375666_12390232_Idx, val2HEX60gensym12375668_12395008);
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
      framePtr = F;
        F.line = 18;
        refresh_12325301(match_12237474(c_12211384, makeNimstrLit("[name=cubeprice]"), ({get: HEX7C_12225216(access_12211993(c_12211384).get, HEX3Aanonymous_12225001), set: HEX3Aanonymous_12225275, id: HEX26_12235286(access_12211993(c_12211384).id, [makeNimstrLit("cubeprice")])}), eql_12237029, null), bind_value_12311584());
        F.line = 19;
        refresh_12402704(match_12237474(c_12211384, makeNimstrLit(".cubeprice"), ({get: HEX7C_12225216(access_12211993(c_12211384).get, HEX3Aanonymous_12390001), set: HEX3Aanonymous_12390229, id: HEX26_12235286(access_12211993(c_12211384).id, [makeNimstrLit("cubeprice")])}), eql_12237029, null), set_text_12402408());
      framePtr = F.prev;

      
    }

  var result_12211375 = null;

  var F={procname:"settings.:anonymous",prev:framePtr,filename:"settings.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 17;
    result_12211375 = compile_12402837(node_12211306, HEX3Aanonymous_12211377);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12211375;

}
var settings_component_12211185 = [null];
declare_12430450(components_10263124[0], settings_component_12211185, 0, fetch_template_12210001(makeNimstrLit("settings.html"), makeNimstrLit("template"), true), HEX3Aanonymous_12211303);
var app_12454100 = [null];
async function init_comp_12790638(set_component_12790646, node_12790648, creator_12790650) {
  var result_12790652 = null;

  var F={procname:"initComp.initComp",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var n_12790674 = (await node_12790648);
    F.line = 22;
    set_component_12790646(creator_12790650(n_12790674));
    F.line = 131;
    result_12790652 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12790652;

}
function declare_12790599(registry_12790602, component_12790605, component_12790605_Idx, node_12790607, creator_12790609) {
    function HEX3Aanonymous_12790610(c_12790616) {
      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 25;
        component_12790605[component_12790605_Idx] = c_12790616;
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_12790631() {
      var result_12790636 = null;

      var F={procname:"declare.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 26;
        result_12790636 = init_comp_12790638(set_component_12790630, node_12790607, creator_12790609);
      framePtr = F.prev;

      return result_12790636;

    }

  var F={procname:"declare.declare",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
    F.line = 25;
    var set_component_12790630 = HEX3Aanonymous_12790610;
    F.line = 26;
    if (registry_12790602.Field0 != null) { registry_12790602.Field0.push(HEX3Aanonymous_12790631); } else { registry_12790602.Field0 = [HEX3Aanonymous_12790631]; };
  framePtr = F.prev;

  
}
function new_12790207() {
  var result_12790211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12790401 = null;
    F.line = 851;
    r_12790401 = {m_type: NTI12454035, matches: null, node: null, original_node: null, data: null, cmatches: null, config: null};
    F.line = 852;
    result_12790211 = r_12790401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12790211;

}
function add_12670218(x_12670223, x_12670223_Idx, y_12670225) {
    var Tmp1;

  var F={procname:"add.add",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1208;
    var xl_12670231 = (x_12670223[x_12670223_Idx] != null ? x_12670223[x_12670223_Idx].length : 0);
    F.line = 1209;
    if (x_12670223[x_12670223_Idx] === null) x_12670223[x_12670223_Idx] = [];
               if (x_12670223[x_12670223_Idx].length < (Tmp1 = chckRange(addInt(xl_12670231, (y_12670225 != null ? y_12670225.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_12670223[x_12670223_Idx].length;i<Tmp1;++i) x_12670223[x_12670223_Idx].push(null); }
               else { x_12670223[x_12670223_Idx].length = Tmp1; };
    L2: do {
      F.line = 1210;
      var i_12670256 = 0;
      F.line = 66;
      var colontmp__12790774 = 0;
      F.line = 1210;
      colontmp__12790774 = (y_12670225 != null ? (y_12670225.length-1) : -1);
      F.line = 77;
      var res_12790775 = 0;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_12790775 <= colontmp__12790774)) break L4;
            F.line = 1210;
            i_12670256 = res_12790775;
            F.line = 1210;
            x_12670223[x_12670223_Idx][chckIndx(addInt(xl_12670231, i_12670256), 0, (x_12670223[x_12670223_Idx] != null ? x_12670223[x_12670223_Idx].length : 0)+0-1)-0] = y_12670225[chckIndx(i_12670256, 0, (y_12670225 != null ? y_12670225.length : 0)+0-1)-0];
            F.line = 80;
            res_12790775 = addInt(res_12790775, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function compile_12690812(cfgs_12690817, node_12690818) {
  var result_12690821 = [null];

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 627;
    result_12690821[0] = nimCopy(null, [], NTI12690836);
    L1: do {
      F.line = 628;
      var cfg_12690843 = null;
      F.line = 184;
      var i_12790770 = 0;
      F.line = 185;
      var l_12790771 = (cfgs_12690817 != null ? cfgs_12690817.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12790770 < l_12790771)) break L3;
            F.line = 628;
            cfg_12690843 = cfgs_12690817[chckIndx(i_12790770, 0, (cfgs_12690817 != null ? cfgs_12690817.length : 0)+0-1)-0];
            F.line = 629;
            add_12670218(result_12690821, 0, cfg_12690843.compile(node_12690818));
            F.line = 188;
            i_12790770 = addInt(i_12790770, 1);
            if (!(((cfgs_12690817 != null ? cfgs_12690817.length : 0) == l_12790771))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12690821[0];

}
function compile_12780751(cfg_12780755, node_12780756) {
  var result_12780758 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((node_12780756 == null)))) {
    F.line = 634;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(634, 10) `\x0Anot (node == nil)` "));
    }
    
    F.line = 635;
    result_12780758 = new_12790207();
    F.line = 636;
    result_12780758.config = cfg_12780755.config;
    F.line = 637;
    result_12780758.original_node = node_12780756;
    F.line = 638;
    result_12780758.node = node_12780756.cloneNode(true);
    F.line = 640;
    result_12780758.config(result_12780758);
    F.line = 641;
    result_12780758.matches = nimCopy(null, compile_12690812(result_12780758.cmatches, result_12780758.node), NTI12690819);
  framePtr = F.prev;

  return result_12780758;

}
function new_12780284() {
  var result_12780288 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12780401 = null;
    F.line = 851;
    r_12780401 = {m_type: NTI12454039, cmatches: null, config: null};
    F.line = 852;
    result_12780288 = r_12780401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12780288;

}
function create_12780269(config_12780275) {
  var result_12780277 = null;

  var F={procname:"create.create",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 330;
    result_12780277 = new_12780284();
    F.line = 331;
    result_12780277.config = config_12780275;
  framePtr = F.prev;

  return result_12780277;

}
function compile_12774097(node_12774102, configurator_12774108) {
  var result_12774110 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 838;
    if (!(!((node_12774102 == null)))) {
    F.line = 840;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(840, 10) `\x0Anot (node == nil)` "));
    }
    
    result_12774110 = compile_12780751(create_12780269(configurator_12774108), node_12774102);
  framePtr = F.prev;

  return result_12774110;

}
function refresh_12647131(c_12647136, refresh_12647138) {
    function HEX3Aanonymous_12647139(re_12647145) {
      var F={procname:"refresh.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 471;
        refresh_12647138(re_12647145.node, re_12647145.data);
      framePtr = F.prev;

      
    }

  var F={procname:"refresh.refresh",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 471;
    if (c_12647136.refresh != null) { c_12647136.refresh.push(HEX3Aanonymous_12647139); } else { c_12647136.refresh = [HEX3Aanonymous_12647139]; };
  framePtr = F.prev;

  
}
function compile_12616108(cfg_12616113, node_12616114) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_12616163 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 588;
    result_12616163 = nimCopy(null, [], NTI12616178);
    F.line = 589;
    var matched_nodes_12616179 = node_12616114.querySelectorAll(toJSStr(cfg_12616113.selector));
    if (((matched_nodes_12616179 != null ? matched_nodes_12616179.length : 0) == 0)) {
    F.line = 591;
    var selector_12616185 = nimCopy(null, cfg_12616113.selector, NTI112);
    F.line = 592;
    var fmt_res_12616186 = [mnewString(0)];
    F.line = 592;
    if (fmt_res_12616186[0] != null) { fmt_res_12616186[0] = (fmt_res_12616186[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_12616186[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 592;
    format_value_10130080(fmt_res_12616186, 0, selector_12616185, []);
    F.line = 592;
    if (fmt_res_12616186[0] != null) { fmt_res_12616186[0] = (fmt_res_12616186[0]).concat(makeNimstrLit("\'")); } else { fmt_res_12616186[0] = makeNimstrLit("\'"); };
    F.line = 592;
    raiseException({message: nimCopy(null, fmt_res_12616186[0], NTI112), parent: null, m_type: NTI10221019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 594;
      var matched_node_12625008 = null;
      F.line = 184;
      var i_12790801 = 0;
      F.line = 185;
      var l_12790802 = (matched_nodes_12616179 != null ? matched_nodes_12616179.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12790801 < l_12790802)) break L3;
            F.line = 594;
            matched_node_12625008 = matched_nodes_12616179[chckIndx(i_12790801, 0, (matched_nodes_12616179 != null ? matched_nodes_12616179.length : 0)+0-1)-0];
            F.line = 595;
            var match_12625016 = {refresh: nimCopy(null, cfg_12616113.refresh, NTI12611978), init: nimCopy(null, cfg_12616113.init, NTI10221379), iter: cfg_12616113.iter, node: matched_node_12625008, selectorKind: 0, serial: 0, value: 0, convert: {kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null, selector: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 600;
            match_12625016.node = matched_node_12625008;
            if (match_12625016.iter) {
            var Tmp4 = match_12625016;
            if (ConstSet78[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 602;
            var Tmp5 = cfg_12616113;
            if (ConstSet79[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI12612053);
            var Tmp6 = match_12625016;
            if (ConstSet80[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 603;
            Tmp6.anchor = matched_node_12625008.ownerDocument.createComment(matched_node_12625008.outerHTML);
            var Tmp7 = match_12625016;
            if (ConstSet81[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 604;
            Tmp7.mount_template = cfg_12616113.mount;
            var Tmp8 = match_12625016;
            if (ConstSet82[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 605;
            Tmp8.match_templates = nimCopy(null, cfg_12616113.cmatches, NTI12611984);
            var Tmp9 = match_12625016;
            if (ConstSet83[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 606;
            Tmp9.items = nimCopy(null, [], NTI12625042);
            F.line = 607;
            var Tmp10 = match_12625016;
            if (ConstSet84[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_12625008.parentNode.replaceChild(Tmp10.anchor, matched_node_12625008);
            }
            else {
              var Tmp11 = match_12625016;
              if (ConstSet85[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 609;
              var Tmp12 = cfg_12616113;
              if (ConstSet86[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 610;
              var Tmp13 = match_12625016;
              if (ConstSet87[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_12625016;
                if (ConstSet88[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 612;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_12625016;
              if (ConstSet89[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 615;
              var Tmp16 = cfg_12616113;
              if (ConstSet90[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI12611992);
              var Tmp17 = match_12625016;
              if (ConstSet91[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 616;
              Tmp17.matches = nimCopy(null, [], NTI12625069);
              var Tmp18 = match_12625016;
              if (ConstSet92[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 617;
              Tmp18.inited = false;
              var Tmp19 = match_12625016;
              if (ConstSet93[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 618;
              Tmp19.mount = null;
              if (!((cfg_12616113.mount == null))) {
              var Tmp20 = match_12625016;
              if (ConstSet94[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 620;
              Tmp20.mount_source = cfg_12616113.mount;
              }
              else {
                L21: do {
                  F.line = 622;
                  var submatch_12625090 = null;
                  F.line = 184;
                  var i_12790798 = 0;
                  F.line = 185;
                  var l_12790799 = (cfg_12616113.cmatches != null ? cfg_12616113.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_12790798 < l_12790799)) break L23;
                        F.line = 622;
                        submatch_12625090 = cfg_12616113.cmatches[chckIndx(i_12790798, 0, (cfg_12616113.cmatches != null ? cfg_12616113.cmatches.length : 0)+0-1)-0];
                        F.line = 623;
                        var Tmp24 = match_12625016;
                        if (ConstSet95[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_12260218(Tmp24, "matches", submatch_12625090.compile(matched_node_12625008));
                        F.line = 188;
                        i_12790798 = addInt(i_12790798, 1);
                        if (!(((cfg_12616113.cmatches != null ? cfg_12616113.cmatches.length : 0) == l_12790799))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 624;
            if (result_12616163 != null) { result_12616163.push(match_12625016); } else { result_12616163 = [match_12625016]; };
            F.line = 188;
            i_12790801 = addInt(i_12790801, 1);
            if (!(((matched_nodes_12616179 != null ? matched_nodes_12616179.length : 0) == l_12790802))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12616163;

}
function sub_12645624(ts_12645629, val_12645631, val_12645631_Idx, set_val_12645633, update_12645634) {
    function HEX3Aanonymous_12645647(new_value_12645649, changed_path_12645650) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 289;
        ts_12645629.set(val_12645631, val_12645631_Idx, new_value_12645649);
        F.line = 290;
        var new_path_12645659 = HEX26_12235286(ts_12645629.id, changed_path_12645650);
        if (!((set_val_12645633 == null))) {
        F.line = 292;
        set_val_12645633(val_12645631[val_12645631_Idx], new_path_12645659);
        }
        else {
        if (!((update_12645634 == null))) {
        F.line = 294;
        console.log("Update %s", toJSStr(HEX24_10260579(new_path_12645659)));
        F.line = 295;
        update_12645634({paths: [nimCopy(null, new_path_12645659, NTI12235293)]});
        }
        }
      framePtr = F.prev;

      
    }

  var result_12645636 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_12645633 == null) && (update_12645634 == null))) {
    F.line = 287;
    result_12645636 = null;
    break BeforeRet;
    }
    
    F.line = 288;
    result_12645636 = HEX3Aanonymous_12645647;
  } while (false);
  framePtr = F.prev;

  return result_12645636;

}
function create_iter_item_12645732(match_12645737, parent_node_12645738) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_12645740 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 649;
    var comp_12645745 = null;
    F.line = 650;
    var node_12645746 = null;
      var Tmp1 = match_12645737;
      if (ConstSet109[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 652;
    var Tmp2 = match_12645737;
    if (ConstSet110[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_12645745 = Tmp2.mount_template.clone();
    F.line = 653;
    node_12645746 = comp_12645745.node();
    }
    else {
      F.line = 655;
      node_12645746 = match_12645737.node.cloneNode(true);
    }
    
    F.line = 656;
    var Tmp3 = match_12645737;
    if (ConstSet111[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_12645740 = {serial: 0, mount: comp_12645745, node: node_12645746, matches: compile_12280827(Tmp3.match_templates, node_12645746)};
    F.line = 661;
    var Tmp4 = match_12645737;
    if (ConstSet112[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_12645738.insertBefore(node_12645746, Tmp4.anchor);
  framePtr = F.prev;

  return result_12645740;

}
function update_12635963(match_12635968, init_val_12635969, set_val_12635971, refresh_list_12635972) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          var Tmp16;
            function HEX3Aanonymous_12645298(refresh_list_12645300) {
              var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 707;
                update_12635963(match_12635968, val_12645201[0], set_val_12635971, refresh_list_12645300);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
          var Tmp34;
          var Tmp35;
          var Tmp36;
      var Tmp37;
        var Tmp38;
        var Tmp39;
        var Tmp40;
        var Tmp41;
        var Tmp42;
          var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
            var Tmp51;
            var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        function HEX3Aanonymous_12646030(refresh_list_12646032) {
          var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 787;
            update_12635963(match_12635968, val_12645201[0], set_val_12635971, refresh_list_12646032);
          framePtr = F.prev;

          
        }
        var Tmp56;
        var Tmp57;
          var Tmp58;
      var Tmp59;
      var Tmp60;
      var Tmp61;
      var Tmp62;
      var Tmp66;
        var Tmp67;
          var Tmp68;
      var Tmp69;
      var Tmp70;
        var Tmp72;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_12635971 == null)))) {
    F.line = 668;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(668, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 669;
    var val_12645201 = [init_val_12635969];
    if (match_12635968.iter) {
    F.line = 672;
    var i_12645203 = 0;
    F.line = 673;
    var Tmp1 = match_12635968;
    if (ConstSet96[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_12645206 = Tmp1.anchor.parentNode;
    F.line = 674;
    var sub_list_12645207 = null;
    F.line = 675;
    var it_simple_12645212 = null;
    F.line = 676;
    var it_serial_12645217 = null;
    F.line = 677;
    var it_select_12645225 = null;
    F.line = 678;
    var Tmp2 = match_12635968;
    if (ConstSet97[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 680;
      var Tmp3 = match_12635968;
      if (ConstSet99[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet98[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_12645212 = Tmp4.simple(val_12645201[0]);
      break;
    case 1:
      F.line = 682;
      var Tmp5 = match_12635968;
      if (ConstSet101[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet100[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_12645217 = Tmp6.serial(val_12645201[0]);
      break;
    case 2:
      F.line = 684;
      var Tmp7 = match_12635968;
      if (ConstSet103[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet102[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_12645225 = Tmp8.selector(val_12645201[0]);
      break;
    }
    L9: do {
      F.line = 686;
        L10: while (true) {
        if (!true) break L10;
          F.line = 687;
            var Tmp12 = match_12635968;
            if (ConstSet104[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12645203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_12635968;
          if (ConstSet105[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_12645203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_12645250 = [Tmp11];
          F.line = 688;
          var changed_12645251 = is_changed_10221605(refresh_list_12635972);
          F.line = 689;
          var item_12645252 = 0;
          F.line = 690;
          var set_12645257 = null;
          F.line = 691;
          var Tmp16 = match_12635968;
          if (ConstSet106[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 693;
            var it_12645260 = it_simple_12645212();
            if ((it_12645260["Field0"] == false)) {
            F.line = 694;
            break L9;
            }
            
            F.line = 695;
            item_12645252 = it_12645260["Field1"];
            F.line = 696;
            console.log("nclearseam.update(iter, changed=%o) using %o", changed_12645251, item_12645252);
            break;
          case 1:
            F.line = 698;
            var it_12645262 = it_serial_12645217(serial_12645250, 0);
            if ((it_12645262["Field0"] == false)) {
            F.line = 699;
            break L9;
            }
            
            F.line = 700;
            item_12645252 = it_12645262["Field1"];
            F.line = 701;
            console.log("nclearseam.update(iter, changed=%o) using %o", changed_12645251, item_12645252);
            break;
          case 2:
            F.line = 703;
            var it_12645263 = it_select_12645225();
            if ((it_12645263 == null)) {
            F.line = 704;
            break L9;
            }
            
            F.line = 705;
            item_12645252 = it_12645263.get(val_12645201[0]);
            F.line = 706;
            set_12645257 = sub_12645624(it_12645263, val_12645201, 0, set_val_12635971, HEX3Aanonymous_12645298);
            F.line = 708;
            sub_list_12645207 = walk_10225019(refresh_list_12635972, it_12645263.id);
            F.line = 709;
            changed_12645251 = is_changed_10221605(sub_list_12645207);
            F.line = 710;
            console.log("nclearseam.update(iter, changed=%o, id=%o) using %o", changed_12645251, toJSStr(HEX24_10260579(it_12645263.id)), item_12645252);
            break;
          }
          F.line = 712;
          var iter_item_12645715 = null;
          F.line = 713;
          var inited_12645716 = false;
            var Tmp17 = match_12635968;
            if (ConstSet107[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12645203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 717;
          var Tmp19 = match_12635968;
          if (ConstSet108[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_12645715 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_12645203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 718;
          inited_12645716 = true;
          F.line = 719;
          changed_12645251 = true;
          }
          else {
            F.line = 721;
            iter_item_12645715 = create_iter_item_12645732(match_12635968, parent_node_12645206);
            F.line = 722;
            var Tmp21 = match_12635968;
            if (ConstSet113[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_12645715); } else { Tmp22 = [iter_item_12645715]; };
            F.line = 723;
            inited_12645716 = false;
            if (!((serial_12645250[0] == iter_item_12645715.serial))) {
            F.line = 725;
            changed_12645251 = true;
            }
            
          }
          
          if (!(inited_12645716)) {
          L23: do {
            F.line = 729;
            var init_proc_12645838 = null;
            F.line = 184;
            var i_12790807 = 0;
            F.line = 185;
            var l_12790808 = (match_12635968.init != null ? match_12635968.init.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_12790807 < l_12790808)) break L25;
                  F.line = 729;
                  init_proc_12645838 = match_12635968.init[chckIndx(i_12790807, 0, (match_12635968.init != null ? match_12635968.init.length : 0)+0-1)-0];
                  F.line = 730;
                  init_proc_12645838(iter_item_12645715.node);
                  F.line = 188;
                  i_12790807 = addInt(i_12790807, 1);
                  if (!(((match_12635968.init != null ? match_12635968.init.length : 0) == l_12790808))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_12645715.mount == null))) {
          F.line = 734;
          iter_item_12645715.mount.update(item_12645252, set_12645257, sub_list_12645207);
          }
          
          L26: do {
            F.line = 737;
            var submatch_12645853 = null;
            F.line = 184;
            var i_12790811 = 0;
            F.line = 185;
            var l_12790812 = (iter_item_12645715.matches != null ? iter_item_12645715.matches.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_12790811 < l_12790812)) break L28;
                  F.line = 737;
                  submatch_12645853 = iter_item_12645715.matches[chckIndx(i_12790811, 0, (iter_item_12645715.matches != null ? iter_item_12645715.matches.length : 0)+0-1)-0];
                  F.line = 738;
                  submatch_12645853.update(item_12645252, set_12645257, sub_list_12645207);
                  F.line = 188;
                  i_12790811 = addInt(i_12790811, 1);
                  if (!(((iter_item_12645715.matches != null ? iter_item_12645715.matches.length : 0) == l_12790812))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 741;
          var e_12645858 = {node: iter_item_12645715.node, data: item_12645252, init: !(inited_12645716), set: set_12645257};
          L29: do {
            F.line = 746;
            var refresh_proc_12645865 = null;
            F.line = 184;
            var i_12790816 = 0;
            F.line = 185;
            var l_12790817 = (match_12635968.refresh != null ? match_12635968.refresh.length : 0);
            L30: do {
              F.line = 186;
                L31: while (true) {
                if (!(i_12790816 < l_12790817)) break L31;
                  F.line = 746;
                  refresh_proc_12645865 = match_12635968.refresh[chckIndx(i_12790816, 0, (match_12635968.refresh != null ? match_12635968.refresh.length : 0)+0-1)-0];
                  F.line = 747;
                  refresh_proc_12645865(e_12645858);
                  F.line = 188;
                  i_12790816 = addInt(i_12790816, 1);
                  if (!(((match_12635968.refresh != null ? match_12635968.refresh.length : 0) == l_12790817))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 749;
          i_12645203 = addInt(i_12645203, 1);
        }
    } while(false);
    L32: do {
      F.line = 752;
        L33: while (true) {
          var Tmp34 = match_12635968;
          if (ConstSet114[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_12645203 < ((Tmp35 = Tmp34.items, Tmp35) != null ? Tmp35.length : 0))) break L33;
          F.line = 753;
          var Tmp36 = match_12635968;
          if (ConstSet115[Tmp36.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_12310490(pop_12310224(Tmp36, "items"), parent_node_12645206);
        }
    } while(false);
    }
    else {
      F.line = 755;
      var changed_12645956 = is_changed_10221605(refresh_list_12635972);
      F.line = 756;
      var sub_list_12645957 = null;
      F.line = 757;
      var node_12645958 = match_12635968.node;
      F.line = 758;
      var converted_val_12645959 = 0;
      F.line = 759;
      var set_12645964 = null;
      F.line = 761;
      var Tmp37 = match_12635968;
      if (ConstSet116[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp37.convert.kind) {
      case 0:
        F.line = 763;
        var Tmp38 = match_12635968;
        if (ConstSet118[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet117[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12645959 = Tmp39.simple(val_12645201[0]);
        F.line = 764;
        changed_12645956 = true;
        F.line = 765;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12645956, converted_val_12645959);
        break;
      case 1:
        F.line = 767;
        var Tmp40 = match_12635968;
        if (ConstSet119[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_12645972 = [Tmp40.serial];
        F.line = 768;
        var Tmp41 = match_12635968;
        if (ConstSet121[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet120[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12645959 = Tmp42.serial(val_12645201[0], serial_12645972, 0);
          var Tmp43 = match_12635968;
          if (ConstSet122[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_12645972[0] == Tmp43.serial))) {
        F.line = 770;
        changed_12645956 = true;
        }
        
        F.line = 771;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12645956, converted_val_12645959);
        break;
      case 2:
        F.line = 773;
        var Tmp44 = match_12635968;
        if (ConstSet124[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp45 = Tmp44.convert;
        if (ConstSet123[Tmp45.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp46 = match_12635968;
        if (ConstSet125[Tmp46.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_12645984 = Tmp45.compare(val_12645201[0], Tmp46.value);
        F.line = 774;
        converted_val_12645959 = res_12645984.Field0;
        var Tmp47 = match_12635968;
        if (ConstSet126[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 775;
        Tmp47.value = res_12645984.Field0;
        if (res_12645984.Field1) {
        F.line = 777;
        changed_12645956 = true;
        }
        
        F.line = 778;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12645956, converted_val_12645959);
        break;
      case 3:
        F.line = 780;
        var Tmp48 = match_12635968;
        if (ConstSet128[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet127[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_12645990 = Tmp49.obj;
        F.line = 781;
        converted_val_12645959 = obj_12645990.get(val_12645201[0]);
        F.line = 782;
        sub_list_12645957 = walk_10225019(refresh_list_12635972, obj_12645990.id);
        F.line = 783;
        changed_12645956 = is_changed_10221605(sub_list_12645957);
          if (!changed_12645956) Tmp50 = false; else {            var Tmp51 = match_12635968;
            if (ConstSet130[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp52 = Tmp51.convert;
            if (ConstSet129[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp50 = !((Tmp52.eql == null));          }        if (Tmp50) {
        F.line = 785;
        var Tmp53 = match_12635968;
        if (ConstSet132[Tmp53.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp54 = Tmp53.convert;
        if (ConstSet131[Tmp54.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp55 = match_12635968;
        if (ConstSet133[Tmp55.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_12645956 = !(Tmp54.eql(converted_val_12645959, Tmp55.value));
        }
        
        F.line = 786;
        set_12645964 = sub_12645624(obj_12645990, val_12645201, 0, set_val_12635971, HEX3Aanonymous_12646030);
        F.line = 788;
        console.log("nclearseam.update(match, changed=%o, id=%o) with %o", changed_12645956, toJSStr(HEX24_10260579(obj_12645990.id)), converted_val_12645959);
        break;
      }
        var Tmp57 = match_12635968;
        if (ConstSet134[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp57.mount == null)) Tmp56 = false; else {          var Tmp58 = match_12635968;
          if (ConstSet135[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp58.mount_source == null));        }      if (Tmp56) {
      var Tmp59 = match_12635968;
      if (ConstSet136[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 792;
      var Tmp60 = match_12635968;
      if (ConstSet137[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount = Tmp60.mount_source.clone();
      F.line = 793;
      var Tmp61 = match_12635968;
      if (ConstSet138[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12645958.parentNode.replaceChild(Tmp61.mount.node(), node_12645958);
      }
      
      F.line = 796;
      var Tmp62 = match_12635968;
      if (ConstSet139[Tmp62.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_12646398 = Tmp62.inited;
      if (!(inited_12646398)) {
      L63: do {
        F.line = 798;
        var init_proc_12646405 = null;
        F.line = 184;
        var i_12790821 = 0;
        F.line = 185;
        var l_12790822 = (match_12635968.init != null ? match_12635968.init.length : 0);
        L64: do {
          F.line = 186;
            L65: while (true) {
            if (!(i_12790821 < l_12790822)) break L65;
              F.line = 798;
              init_proc_12646405 = match_12635968.init[chckIndx(i_12790821, 0, (match_12635968.init != null ? match_12635968.init.length : 0)+0-1)-0];
              F.line = 799;
              init_proc_12646405(node_12645958);
              F.line = 188;
              i_12790821 = addInt(i_12790821, 1);
              if (!(((match_12635968.init != null ? match_12635968.init.length : 0) == l_12790822))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp66 = match_12635968;
      if (ConstSet140[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 800;
      Tmp66.inited = true;
      F.line = 801;
      changed_12645956 = true;
      }
      
        if (!changed_12645956) Tmp67 = false; else {          var Tmp68 = match_12635968;
          if (ConstSet141[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp67 = !((Tmp68.mount == null));        }      if (Tmp67) {
      F.line = 805;
      var Tmp69 = match_12635968;
      if (ConstSet142[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12645958 = Tmp69.mount.node();
      F.line = 806;
      var Tmp70 = match_12635968;
      if (ConstSet143[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp70.mount.update(converted_val_12645959, set_12645964, sub_list_12645957);
      }
      
      if (changed_12645956) {
      L71: do {
        F.line = 810;
        var submatch_12646430 = null;
        F.line = 182;
        var colontmp__12790825 = null;
        F.line = 810;
        var Tmp72 = match_12635968;
        if (ConstSet144[Tmp72.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__12790825 = Tmp72.matches;
        F.line = 184;
        var i_12790826 = 0;
        F.line = 185;
        var l_12790827 = (colontmp__12790825 != null ? colontmp__12790825.length : 0);
        L73: do {
          F.line = 186;
            L74: while (true) {
            if (!(i_12790826 < l_12790827)) break L74;
              F.line = 810;
              submatch_12646430 = colontmp__12790825[chckIndx(i_12790826, 0, (colontmp__12790825 != null ? colontmp__12790825.length : 0)+0-1)-0];
              F.line = 811;
              submatch_12646430.update(converted_val_12645959, set_12645964, sub_list_12645957);
              F.line = 188;
              i_12790826 = addInt(i_12790826, 1);
              if (!(((colontmp__12790825 != null ? colontmp__12790825.length : 0) == l_12790827))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_12645956) {
      F.line = 814;
      var e_12646435 = {node: node_12645958, data: converted_val_12645959, init: !(inited_12646398), set: set_12645964};
      L75: do {
        F.line = 819;
        var refresh_proc_12646442 = null;
        F.line = 184;
        var i_12790831 = 0;
        F.line = 185;
        var l_12790832 = (match_12635968.refresh != null ? match_12635968.refresh.length : 0);
        L76: do {
          F.line = 186;
            L77: while (true) {
            if (!(i_12790831 < l_12790832)) break L77;
              F.line = 819;
              refresh_proc_12646442 = match_12635968.refresh[chckIndx(i_12790831, 0, (match_12635968.refresh != null ? match_12635968.refresh.length : 0)+0-1)-0];
              F.line = 820;
              refresh_proc_12646442(e_12646435);
              F.line = 188;
              i_12790831 = addInt(i_12790831, 1);
              if (!(((match_12635968.refresh != null ? match_12635968.refresh.length : 0) == l_12790832))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_12635937(match_12635942) {
    function HEX3Aanonymous_12635949(data_12635951, set_12635956, refresh_list_12635957) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 891;
        update_12635963(match_12635942, data_12635951, set_12635956, refresh_list_12635957);
      framePtr = F.prev;

      
    }

  var result_12635944 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 890;
    result_12635944 = {update: HEX3Aanonymous_12635949};
  framePtr = F.prev;

  return result_12635944;

}
function as_interface_12615770(config_12615775) {
    function HEX3Aanonymous_12615782(node_12615784) {
      var result_12615790 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 897;
        result_12615790 = nimCopy(null, [], NTI12615805);
        L1: do {
          F.line = 898;
          var comp_match_12635214 = null;
          F.line = 182;
          var colontmp__12790789 = null;
          F.line = 898;
          colontmp__12790789 = compile_12616108(config_12615775, node_12615784);
          F.line = 184;
          var i_12790791 = 0;
          F.line = 185;
          var l_12790792 = (colontmp__12790789 != null ? colontmp__12790789.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12790791 < l_12790792)) break L3;
                F.line = 898;
                comp_match_12635214 = colontmp__12790789[chckIndx(i_12790791, 0, (colontmp__12790789 != null ? colontmp__12790789.length : 0)+0-1)-0];
                F.line = 899;
                if (result_12615790 != null) { result_12615790.push(as_interface_12635937(comp_match_12635214)); } else { result_12615790 = [as_interface_12635937(comp_match_12635214)]; };
                F.line = 188;
                i_12790791 = addInt(i_12790791, 1);
                if (!(((colontmp__12790789 != null ? colontmp__12790789.length : 0) == l_12790792))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_12615790;

    }

  var result_12615777 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 895;
    result_12615777 = {compile: HEX3Aanonymous_12615782};
  framePtr = F.prev;

  return result_12615777;

}
function match_12614995(c_12615000, selector_12615001, convert_12615003, actions_12615009) {
  var result_12615011 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 351;
    result_12615011 = {selector: nimCopy(null, selector_12615001, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_12615003, NTI12611992), cmatches: null, iterate: {kind: 0, simple: null, serial: null, selector: null}};
    F.line = 358;
    if (c_12615000.cmatches != null) { c_12615000.cmatches.push(as_interface_12615770(result_12615011)); } else { c_12615000.cmatches = [as_interface_12615770(result_12615011)]; };
    if (!((actions_12615009 == null))) {
    F.line = 360;
    actions_12615009(result_12615011);
    }
    
  framePtr = F.prev;

  return result_12615011;

}
function match_12612391(c_12612396, selector_12612397, convert_12612399, equal_12612403, actions_12612409) {
    function HEX3Aanonymous_12612419(data_12612421, old_data_12612422) {
      var result_12612426 = {Field0: 0, Field1: false};

      var F={procname:"match.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 427;
        var data2_12612427 = convert_12612399(data_12612421);
        F.line = 428;
        var colontmp__12790784 = data2_12612427;
        F.line = 428;
        var colontmp__12790785 = !(equal_12612403(data2_12612427, old_data_12612422));
        F.line = 428;
        nimCopy(result_12612426, {Field0: colontmp__12790784, Field1: colontmp__12790785}, NTI12612423);
      framePtr = F.prev;

      return result_12612426;

    }

  var result_12612411 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 424;
    var type_selector_12612442 = {kind: 2, compare: HEX3Aanonymous_12612419, simple: null, serial: null, obj: null, eql: null};
    F.line = 429;
    result_12612411 = match_12614995(c_12612396, selector_12612397, type_selector_12612442, actions_12612409);
  framePtr = F.prev;

  return result_12612411;

}
function init_12702017(c_12702022, init_12702023) {
  var F={procname:"init.init",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 500;
    if (c_12702022.init != null) { c_12702022.init.push(init_12702023); } else { c_12702022.init = [init_12702023]; };
  framePtr = F.prev;

  
}
function add_event_listener_12701765(c_12701770, event_12701771, cb_12701772, use_capture_12701773) {
    event_12701771 = nimCopy(null, event_12701771, NTI112);
    function HEX3Aanonymous_12702001(node_12702003) {
      var F={procname:"addEventListener.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 216;
        node_12702003.addEventListener(toJSStr(event_12701771), cb_12701772, use_capture_12701773);
      framePtr = F.prev;

      
    }

  var F={procname:"addEventListener.addEventListener",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 215;
    init_12702017(c_12701770, HEX3Aanonymous_12702001);
  framePtr = F.prev;

  
}
function compile_12653225(cfg_12653230, node_12653231) {
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
            var Tmp9;
            var Tmp10;
              var Tmp11;
              var Tmp12;
              var Tmp13;
                var Tmp14;
              var Tmp15;
              var Tmp16;
              var Tmp17;
              var Tmp18;
              var Tmp19;
              var Tmp20;
                        var Tmp24;

  var result_12653293 = null;

  var F={procname:"compile.compile",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 588;
    result_12653293 = nimCopy(null, [], NTI12653308);
    F.line = 589;
    var matched_nodes_12653309 = node_12653231.querySelectorAll(toJSStr(cfg_12653230.selector));
    if (((matched_nodes_12653309 != null ? matched_nodes_12653309.length : 0) == 0)) {
    F.line = 591;
    var selector_12653315 = nimCopy(null, cfg_12653230.selector, NTI112);
    F.line = 592;
    var fmt_res_12653316 = [mnewString(0)];
    F.line = 592;
    if (fmt_res_12653316[0] != null) { fmt_res_12653316[0] = (fmt_res_12653316[0]).concat(makeNimstrLit("Cannot match selector \'")); } else { fmt_res_12653316[0] = makeNimstrLit("Cannot match selector \'"); };
    F.line = 592;
    format_value_10130080(fmt_res_12653316, 0, selector_12653315, []);
    F.line = 592;
    if (fmt_res_12653316[0] != null) { fmt_res_12653316[0] = (fmt_res_12653316[0]).concat(makeNimstrLit("\'")); } else { fmt_res_12653316[0] = makeNimstrLit("\'"); };
    F.line = 592;
    raiseException({message: nimCopy(null, fmt_res_12653316[0], NTI112), parent: null, m_type: NTI10221019, name: null, trace: null, up: null}, "CompileSelectorError");
    }
    
    L1: do {
      F.line = 594;
      var matched_node_12660008 = null;
      F.line = 184;
      var i_12790852 = 0;
      F.line = 185;
      var l_12790853 = (matched_nodes_12653309 != null ? matched_nodes_12653309.length : 0);
      L2: do {
        F.line = 186;
          L3: while (true) {
          if (!(i_12790852 < l_12790853)) break L3;
            F.line = 594;
            matched_node_12660008 = matched_nodes_12653309[chckIndx(i_12790852, 0, (matched_nodes_12653309 != null ? matched_nodes_12653309.length : 0)+0-1)-0];
            F.line = 595;
            var match_12660016 = {refresh: nimCopy(null, cfg_12653230.refresh, NTI12647279), init: nimCopy(null, cfg_12653230.init, NTI10221379), iter: cfg_12653230.iter, node: matched_node_12660008, selectorKind: 0, serial: 0, value: null, convert: {kind: 0, simple: null, serial: null, compare: null, obj: null, eql: null}, mount_source: null, mount: null, matches: null, inited: false, iterate: {kind: 0, simple: null, serial: null, selector: null}, mount_template: null, match_templates: null, items: null, anchor: null};
            F.line = 600;
            match_12660016.node = matched_node_12660008;
            if (match_12660016.iter) {
            var Tmp4 = match_12660016;
            if (ConstSet145[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 602;
            var Tmp5 = cfg_12653230;
            if (ConstSet146[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
            nimCopy(Tmp4.iterate, Tmp5.iterate, NTI12647383);
            var Tmp6 = match_12660016;
            if (ConstSet147[Tmp6.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 603;
            Tmp6.anchor = matched_node_12660008.ownerDocument.createComment(matched_node_12660008.outerHTML);
            var Tmp7 = match_12660016;
            if (ConstSet148[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 604;
            Tmp7.mount_template = cfg_12653230.mount;
            var Tmp8 = match_12660016;
            if (ConstSet149[Tmp8.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 605;
            Tmp8.match_templates = nimCopy(null, cfg_12653230.cmatches, NTI12647285);
            var Tmp9 = match_12660016;
            if (ConstSet150[Tmp9.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            F.line = 606;
            Tmp9.items = nimCopy(null, [], NTI12660042);
            F.line = 607;
            var Tmp10 = match_12660016;
            if (ConstSet151[Tmp10.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            matched_node_12660008.parentNode.replaceChild(Tmp10.anchor, matched_node_12660008);
            }
            else {
              var Tmp11 = match_12660016;
              if (ConstSet152[Tmp11.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 609;
              var Tmp12 = cfg_12653230;
              if (ConstSet153[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              Tmp11.selectorKind = Tmp12.convert.kind;
              F.line = 610;
              var Tmp13 = match_12660016;
              if (ConstSet154[Tmp13.iter]===undefined) { raiseFieldError(makeNimstrLit("\'selectorKind\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              switch (Tmp13.selectorKind) {
              case 1:
                var Tmp14 = match_12660016;
                if (ConstSet155[Tmp14.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
                F.line = 612;
                Tmp14.serial = 0;
                break;
              default: 
                break;
              }
              var Tmp15 = match_12660016;
              if (ConstSet156[Tmp15.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 615;
              var Tmp16 = cfg_12653230;
              if (ConstSet157[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'MatchConfig\'")); }
              nimCopy(Tmp15.convert, Tmp16.convert, NTI12647319);
              var Tmp17 = match_12660016;
              if (ConstSet158[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 616;
              Tmp17.matches = nimCopy(null, [], NTI12660069);
              var Tmp18 = match_12660016;
              if (ConstSet159[Tmp18.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 617;
              Tmp18.inited = false;
              var Tmp19 = match_12660016;
              if (ConstSet160[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 618;
              Tmp19.mount = null;
              if (!((cfg_12653230.mount == null))) {
              var Tmp20 = match_12660016;
              if (ConstSet161[Tmp20.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
              F.line = 620;
              Tmp20.mount_source = cfg_12653230.mount;
              }
              else {
                L21: do {
                  F.line = 622;
                  var submatch_12670214 = null;
                  F.line = 184;
                  var i_12790849 = 0;
                  F.line = 185;
                  var l_12790850 = (cfg_12653230.cmatches != null ? cfg_12653230.cmatches.length : 0);
                  L22: do {
                    F.line = 186;
                      L23: while (true) {
                      if (!(i_12790849 < l_12790850)) break L23;
                        F.line = 622;
                        submatch_12670214 = cfg_12653230.cmatches[chckIndx(i_12790849, 0, (cfg_12653230.cmatches != null ? cfg_12653230.cmatches.length : 0)+0-1)-0];
                        F.line = 623;
                        var Tmp24 = match_12660016;
                        if (ConstSet162[Tmp24.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
                        add_12670218(Tmp24, "matches", submatch_12670214.compile(matched_node_12660008));
                        F.line = 188;
                        i_12790849 = addInt(i_12790849, 1);
                        if (!(((cfg_12653230.cmatches != null ? cfg_12653230.cmatches.length : 0) == l_12790850))) {
                        F.line = 189;
                        failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while(false);
                } while(false);
              }
              
            }
            
            F.line = 624;
            if (result_12653293 != null) { result_12653293.push(match_12660016); } else { result_12653293 = [match_12660016]; };
            F.line = 188;
            i_12790852 = addInt(i_12790852, 1);
            if (!(((matched_nodes_12653309 != null ? matched_nodes_12653309.length : 0) == l_12790853))) {
            F.line = 189;
            failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_12653293;

}
function sub_12690624(ts_12690629, val_12690631, val_12690631_Idx, set_val_12690633, update_12690634) {
    function HEX3Aanonymous_12690647(new_value_12690649, changed_path_12690650) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 289;
        ts_12690629.set(val_12690631, val_12690631_Idx, new_value_12690649);
        F.line = 290;
        var new_path_12690659 = HEX26_12235286(ts_12690629.id, changed_path_12690650);
        if (!((set_val_12690633 == null))) {
        F.line = 292;
        set_val_12690633(val_12690631[val_12690631_Idx], new_path_12690659);
        }
        else {
        if (!((update_12690634 == null))) {
        F.line = 294;
        console.log("Update %s", toJSStr(HEX24_10260579(new_path_12690659)));
        F.line = 295;
        update_12690634({paths: [nimCopy(null, new_path_12690659, NTI12235293)]});
        }
        }
      framePtr = F.prev;

      
    }

  var result_12690636 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_12690633 == null) && (update_12690634 == null))) {
    F.line = 287;
    result_12690636 = null;
    break BeforeRet;
    }
    
    F.line = 288;
    result_12690636 = HEX3Aanonymous_12690647;
  } while (false);
  framePtr = F.prev;

  return result_12690636;

}
function create_iter_item_12690747(match_12690752, parent_node_12690753) {
      var Tmp1;
    var Tmp2;
    var Tmp3;
    var Tmp4;

  var result_12690755 = null;

  var F={procname:"createIterItem.createIterItem",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 649;
    var comp_12690760 = null;
    F.line = 650;
    var node_12690761 = null;
      var Tmp1 = match_12690752;
      if (ConstSet176[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    if (!((Tmp1.mount_template == null))) {
    F.line = 652;
    var Tmp2 = match_12690752;
    if (ConstSet177[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_template\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    comp_12690760 = Tmp2.mount_template.clone();
    F.line = 653;
    node_12690761 = comp_12690760.node();
    }
    else {
      F.line = 655;
      node_12690761 = match_12690752.node.cloneNode(true);
    }
    
    F.line = 656;
    var Tmp3 = match_12690752;
    if (ConstSet178[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'match_templates\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    result_12690755 = {serial: 0, mount: comp_12690760, node: node_12690761, matches: compile_12690812(Tmp3.match_templates, node_12690761)};
    F.line = 661;
    var Tmp4 = match_12690752;
    if (ConstSet179[Tmp4.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    parent_node_12690753.insertBefore(node_12690761, Tmp4.anchor);
  framePtr = F.prev;

  return result_12690755;

}
function detach_12700490(iter_item_12700494, parent_node_12700495) {
  var F={procname:"detach.detach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 665;
    parent_node_12700495.removeChild(iter_item_12700494.node);
  framePtr = F.prev;

  
}
function pop_12700224(s_12700229, s_12700229_Idx) {
  var result_12700230 = null;

  var F={procname:"pop.pop",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 1779;
    var l_12700236 = subInt((s_12700229[s_12700229_Idx] != null ? s_12700229[s_12700229_Idx].length : 0), 1);
    F.line = 1784;
    result_12700230 = s_12700229[s_12700229_Idx][chckIndx(l_12700236, 0, (s_12700229[s_12700229_Idx] != null ? s_12700229[s_12700229_Idx].length : 0)+0-1)-0];
    F.line = 1785;
    if (s_12700229[s_12700229_Idx] === null) s_12700229[s_12700229_Idx] = [];
               if (s_12700229[s_12700229_Idx].length < chckRange(l_12700236, 0, 2147483647)) { for (var i=s_12700229[s_12700229_Idx].length;i<chckRange(l_12700236, 0, 2147483647);++i) s_12700229[s_12700229_Idx].push(null); }
               else { s_12700229[s_12700229_Idx].length = chckRange(l_12700236, 0, 2147483647); };
  framePtr = F.prev;

  return result_12700230;

}
function update_12680963(match_12680968, init_val_12680969, set_val_12680971, refresh_list_12680972) {
    var Tmp1;
    var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
          var Tmp11;
            var Tmp12;
            var Tmp13;
          var Tmp14;
          var Tmp15;
          var Tmp16;
            function HEX3Aanonymous_12690298(refresh_list_12690300) {
              var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
              framePtr = F;
                F.line = 707;
                update_12680963(match_12680968, val_12690201[0], set_val_12680971, refresh_list_12690300);
              framePtr = F.prev;

              
            }
            var Tmp17;
            var Tmp18;
          var Tmp19;
          var Tmp20;
            var Tmp21;
            var Tmp22;
          var Tmp34;
          var Tmp35;
          var Tmp36;
      var Tmp37;
        var Tmp38;
        var Tmp39;
        var Tmp40;
        var Tmp41;
        var Tmp42;
          var Tmp43;
        var Tmp44;
        var Tmp45;
        var Tmp46;
        var Tmp47;
        var Tmp48;
        var Tmp49;
          var Tmp50;
            var Tmp51;
            var Tmp52;
        var Tmp53;
        var Tmp54;
        var Tmp55;
        function HEX3Aanonymous_12700583(refresh_list_12700585) {
          var F={procname:"update.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
          framePtr = F;
            F.line = 787;
            update_12680963(match_12680968, val_12690201[0], set_val_12680971, refresh_list_12700585);
          framePtr = F.prev;

          
        }
        var Tmp56;
        var Tmp57;
          var Tmp58;
      var Tmp59;
      var Tmp60;
      var Tmp61;
      var Tmp62;
      var Tmp66;
        var Tmp67;
          var Tmp68;
      var Tmp69;
      var Tmp70;
        var Tmp72;

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((set_val_12680971 == null)))) {
    F.line = 668;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(668, 9) `\x0Anot (setVal == nil)` "));
    }
    
    F.line = 669;
    var val_12690201 = [init_val_12680969];
    if (match_12680968.iter) {
    F.line = 672;
    var i_12690203 = 0;
    F.line = 673;
    var Tmp1 = match_12680968;
    if (ConstSet163[Tmp1.iter]===undefined) { raiseFieldError(makeNimstrLit("\'anchor\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    var parent_node_12690206 = Tmp1.anchor.parentNode;
    F.line = 674;
    var sub_list_12690207 = null;
    F.line = 675;
    var it_simple_12690212 = null;
    F.line = 676;
    var it_serial_12690217 = null;
    F.line = 677;
    var it_select_12690225 = null;
    F.line = 678;
    var Tmp2 = match_12680968;
    if (ConstSet164[Tmp2.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
    switch (Tmp2.iterate.kind) {
    case 0:
      F.line = 680;
      var Tmp3 = match_12680968;
      if (ConstSet166[Tmp3.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp4 = Tmp3.iterate;
      if (ConstSet165[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_simple_12690212 = Tmp4.simple(val_12690201[0]);
      break;
    case 1:
      F.line = 682;
      var Tmp5 = match_12680968;
      if (ConstSet168[Tmp5.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp6 = Tmp5.iterate;
      if (ConstSet167[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_serial_12690217 = Tmp6.serial(val_12690201[0]);
      break;
    case 2:
      F.line = 684;
      var Tmp7 = match_12680968;
      if (ConstSet170[Tmp7.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var Tmp8 = Tmp7.iterate;
      if (ConstSet169[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'selector\' is not accessible using discriminant \'kind\' of type \'Iterator\'")); }
      it_select_12690225 = Tmp8.selector(val_12690201[0]);
      break;
    }
    L9: do {
      F.line = 686;
        L10: while (true) {
        if (!true) break L10;
          F.line = 687;
            var Tmp12 = match_12680968;
            if (ConstSet171[Tmp12.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12690203 < ((Tmp13 = Tmp12.items, Tmp13) != null ? Tmp13.length : 0))) {
          var Tmp14 = match_12680968;
          if (ConstSet172[Tmp14.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp11 = (Tmp15 = Tmp14.items, Tmp15)[chckIndx(i_12690203, 0, (Tmp15 != null ? Tmp15.length : 0)+0-1)-0].serial;
          }
          else {
          Tmp11 = 0;
          }
          
          var serial_12690250 = [Tmp11];
          F.line = 688;
          var changed_12690251 = is_changed_10221605(refresh_list_12680972);
          F.line = 689;
          var item_12690252 = null;
          F.line = 690;
          var set_12690257 = null;
          F.line = 691;
          var Tmp16 = match_12680968;
          if (ConstSet173[Tmp16.iter]===undefined) { raiseFieldError(makeNimstrLit("\'iterate\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          switch (Tmp16.iterate.kind) {
          case 0:
            F.line = 693;
            var it_12690260 = it_simple_12690212();
            if ((it_12690260["Field0"] == false)) {
            F.line = 694;
            break L9;
            }
            
            F.line = 695;
            item_12690252 = it_12690260["Field1"];
            F.line = 696;
            console.log("nclearseam.update(iter, changed=%o) using %o", changed_12690251, item_12690252);
            break;
          case 1:
            F.line = 698;
            var it_12690262 = it_serial_12690217(serial_12690250, 0);
            if ((it_12690262["Field0"] == false)) {
            F.line = 699;
            break L9;
            }
            
            F.line = 700;
            item_12690252 = it_12690262["Field1"];
            F.line = 701;
            console.log("nclearseam.update(iter, changed=%o) using %o", changed_12690251, item_12690252);
            break;
          case 2:
            F.line = 703;
            var it_12690263 = it_select_12690225();
            if ((it_12690263 == null)) {
            F.line = 704;
            break L9;
            }
            
            F.line = 705;
            item_12690252 = it_12690263.get(val_12690201[0]);
            F.line = 706;
            set_12690257 = sub_12690624(it_12690263, val_12690201, 0, set_val_12680971, HEX3Aanonymous_12690298);
            F.line = 708;
            sub_list_12690207 = walk_10225019(refresh_list_12680972, it_12690263.id);
            F.line = 709;
            changed_12690251 = is_changed_10221605(sub_list_12690207);
            F.line = 710;
            console.log("nclearseam.update(iter, changed=%o, id=%o) using %o", changed_12690251, toJSStr(HEX24_10260579(it_12690263.id)), item_12690252);
            break;
          }
          F.line = 712;
          var iter_item_12690730 = null;
          F.line = 713;
          var inited_12690731 = false;
            var Tmp17 = match_12680968;
            if (ConstSet174[Tmp17.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          if ((i_12690203 < ((Tmp18 = Tmp17.items, Tmp18) != null ? Tmp18.length : 0))) {
          F.line = 717;
          var Tmp19 = match_12680968;
          if (ConstSet175[Tmp19.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          iter_item_12690730 = (Tmp20 = Tmp19.items, Tmp20)[chckIndx(i_12690203, 0, (Tmp20 != null ? Tmp20.length : 0)+0-1)-0];
          F.line = 718;
          inited_12690731 = true;
          F.line = 719;
          changed_12690251 = true;
          }
          else {
            F.line = 721;
            iter_item_12690730 = create_iter_item_12690747(match_12680968, parent_node_12690206);
            F.line = 722;
            var Tmp21 = match_12680968;
            if (ConstSet180[Tmp21.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            if ((Tmp22 = Tmp21.items, Tmp22) != null) { Tmp22.push(iter_item_12690730); } else { Tmp22 = [iter_item_12690730]; };
            F.line = 723;
            inited_12690731 = false;
            if (!((serial_12690250[0] == iter_item_12690730.serial))) {
            F.line = 725;
            changed_12690251 = true;
            }
            
          }
          
          if (!(inited_12690731)) {
          L23: do {
            F.line = 729;
            var init_proc_12690915 = null;
            F.line = 184;
            var i_12790858 = 0;
            F.line = 185;
            var l_12790859 = (match_12680968.init != null ? match_12680968.init.length : 0);
            L24: do {
              F.line = 186;
                L25: while (true) {
                if (!(i_12790858 < l_12790859)) break L25;
                  F.line = 729;
                  init_proc_12690915 = match_12680968.init[chckIndx(i_12790858, 0, (match_12680968.init != null ? match_12680968.init.length : 0)+0-1)-0];
                  F.line = 730;
                  init_proc_12690915(iter_item_12690730.node);
                  F.line = 188;
                  i_12790858 = addInt(i_12790858, 1);
                  if (!(((match_12680968.init != null ? match_12680968.init.length : 0) == l_12790859))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          }
          
          if (!((iter_item_12690730.mount == null))) {
          F.line = 734;
          iter_item_12690730.mount.update(item_12690252, set_12690257, sub_list_12690207);
          }
          
          L26: do {
            F.line = 737;
            var submatch_12690930 = null;
            F.line = 184;
            var i_12790863 = 0;
            F.line = 185;
            var l_12790864 = (iter_item_12690730.matches != null ? iter_item_12690730.matches.length : 0);
            L27: do {
              F.line = 186;
                L28: while (true) {
                if (!(i_12790863 < l_12790864)) break L28;
                  F.line = 737;
                  submatch_12690930 = iter_item_12690730.matches[chckIndx(i_12790863, 0, (iter_item_12690730.matches != null ? iter_item_12690730.matches.length : 0)+0-1)-0];
                  F.line = 738;
                  submatch_12690930.update(item_12690252, set_12690257, sub_list_12690207);
                  F.line = 188;
                  i_12790863 = addInt(i_12790863, 1);
                  if (!(((iter_item_12690730.matches != null ? iter_item_12690730.matches.length : 0) == l_12790864))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 741;
          var e_12690935 = {node: iter_item_12690730.node, data: item_12690252, init: !(inited_12690731), set: set_12690257};
          L29: do {
            F.line = 746;
            var refresh_proc_12700214 = null;
            F.line = 184;
            var i_12790869 = 0;
            F.line = 185;
            var l_12790870 = (match_12680968.refresh != null ? match_12680968.refresh.length : 0);
            L30: do {
              F.line = 186;
                L31: while (true) {
                if (!(i_12790869 < l_12790870)) break L31;
                  F.line = 746;
                  refresh_proc_12700214 = match_12680968.refresh[chckIndx(i_12790869, 0, (match_12680968.refresh != null ? match_12680968.refresh.length : 0)+0-1)-0];
                  F.line = 747;
                  refresh_proc_12700214(e_12690935);
                  F.line = 188;
                  i_12790869 = addInt(i_12790869, 1);
                  if (!(((match_12680968.refresh != null ? match_12680968.refresh.length : 0) == l_12790870))) {
                  F.line = 189;
                  failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          F.line = 749;
          i_12690203 = addInt(i_12690203, 1);
        }
    } while(false);
    L32: do {
      F.line = 752;
        L33: while (true) {
          var Tmp34 = match_12680968;
          if (ConstSet181[Tmp34.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(i_12690203 < ((Tmp35 = Tmp34.items, Tmp35) != null ? Tmp35.length : 0))) break L33;
          F.line = 753;
          var Tmp36 = match_12680968;
          if (ConstSet182[Tmp36.iter]===undefined) { raiseFieldError(makeNimstrLit("\'items\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          detach_12700490(pop_12700224(Tmp36, "items"), parent_node_12690206);
        }
    } while(false);
    }
    else {
      F.line = 755;
      var changed_12700509 = is_changed_10221605(refresh_list_12680972);
      F.line = 756;
      var sub_list_12700510 = null;
      F.line = 757;
      var node_12700511 = match_12680968.node;
      F.line = 758;
      var converted_val_12700512 = null;
      F.line = 759;
      var set_12700517 = null;
      F.line = 761;
      var Tmp37 = match_12680968;
      if (ConstSet183[Tmp37.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      switch (Tmp37.convert.kind) {
      case 0:
        F.line = 763;
        var Tmp38 = match_12680968;
        if (ConstSet185[Tmp38.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp39 = Tmp38.convert;
        if (ConstSet184[Tmp39.kind]===undefined) { raiseFieldError(makeNimstrLit("\'simple\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12700512 = Tmp39.simple(val_12690201[0]);
        F.line = 764;
        changed_12700509 = true;
        F.line = 765;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12700509, converted_val_12700512);
        break;
      case 1:
        F.line = 767;
        var Tmp40 = match_12680968;
        if (ConstSet186[Tmp40.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var serial_12700525 = [Tmp40.serial];
        F.line = 768;
        var Tmp41 = match_12680968;
        if (ConstSet188[Tmp41.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp42 = Tmp41.convert;
        if (ConstSet187[Tmp42.kind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        converted_val_12700512 = Tmp42.serial(val_12690201[0], serial_12700525, 0);
          var Tmp43 = match_12680968;
          if (ConstSet189[Tmp43.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'serial\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        if (!((serial_12700525[0] == Tmp43.serial))) {
        F.line = 770;
        changed_12700509 = true;
        }
        
        F.line = 771;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12700509, converted_val_12700512);
        break;
      case 2:
        F.line = 773;
        var Tmp44 = match_12680968;
        if (ConstSet191[Tmp44.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp45 = Tmp44.convert;
        if (ConstSet190[Tmp45.kind]===undefined) { raiseFieldError(makeNimstrLit("\'compare\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp46 = match_12680968;
        if (ConstSet192[Tmp46.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        var res_12700537 = Tmp45.compare(val_12690201[0], Tmp46.value);
        F.line = 774;
        converted_val_12700512 = res_12700537.Field0;
        var Tmp47 = match_12680968;
        if (ConstSet193[Tmp47.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        F.line = 775;
        Tmp47.value = res_12700537.Field0;
        if (res_12700537.Field1) {
        F.line = 777;
        changed_12700509 = true;
        }
        
        F.line = 778;
        console.log("nclearseam.update(match, changed=%o) with %o", changed_12700509, converted_val_12700512);
        break;
      case 3:
        F.line = 780;
        var Tmp48 = match_12680968;
        if (ConstSet195[Tmp48.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp49 = Tmp48.convert;
        if (ConstSet194[Tmp49.kind]===undefined) { raiseFieldError(makeNimstrLit("\'obj\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var obj_12700543 = Tmp49.obj;
        F.line = 781;
        converted_val_12700512 = obj_12700543.get(val_12690201[0]);
        F.line = 782;
        sub_list_12700510 = walk_10225019(refresh_list_12680972, obj_12700543.id);
        F.line = 783;
        changed_12700509 = is_changed_10221605(sub_list_12700510);
          if (!changed_12700509) Tmp50 = false; else {            var Tmp51 = match_12680968;
            if (ConstSet197[Tmp51.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
            var Tmp52 = Tmp51.convert;
            if (ConstSet196[Tmp52.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
            Tmp50 = !((Tmp52.eql == null));          }        if (Tmp50) {
        F.line = 785;
        var Tmp53 = match_12680968;
        if (ConstSet199[Tmp53.iter]===undefined) { raiseFieldError(makeNimstrLit("\'convert\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        var Tmp54 = Tmp53.convert;
        if (ConstSet198[Tmp54.kind]===undefined) { raiseFieldError(makeNimstrLit("\'eql\' is not accessible using discriminant \'kind\' of type \'MultiTypeSelector\'")); }
        var Tmp55 = match_12680968;
        if (ConstSet200[Tmp55.selectorKind]===undefined) { raiseFieldError(makeNimstrLit("\'value\' is not accessible using discriminant \'selectorKind\' of type \'CompMatch\'")); }
        changed_12700509 = !(Tmp54.eql(converted_val_12700512, Tmp55.value));
        }
        
        F.line = 786;
        set_12700517 = sub_12690624(obj_12700543, val_12690201, 0, set_val_12680971, HEX3Aanonymous_12700583);
        F.line = 788;
        console.log("nclearseam.update(match, changed=%o, id=%o) with %o", changed_12700509, toJSStr(HEX24_10260579(obj_12700543.id)), converted_val_12700512);
        break;
      }
        var Tmp57 = match_12680968;
        if (ConstSet201[Tmp57.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        if (!(Tmp57.mount == null)) Tmp56 = false; else {          var Tmp58 = match_12680968;
          if (ConstSet202[Tmp58.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp56 = !((Tmp58.mount_source == null));        }      if (Tmp56) {
      var Tmp59 = match_12680968;
      if (ConstSet203[Tmp59.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 792;
      var Tmp60 = match_12680968;
      if (ConstSet204[Tmp60.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount_source\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp59.mount = Tmp60.mount_source.clone();
      F.line = 793;
      var Tmp61 = match_12680968;
      if (ConstSet205[Tmp61.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12700511.parentNode.replaceChild(Tmp61.mount.node(), node_12700511);
      }
      
      F.line = 796;
      var Tmp62 = match_12680968;
      if (ConstSet206[Tmp62.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      var inited_12700951 = Tmp62.inited;
      if (!(inited_12700951)) {
      L63: do {
        F.line = 798;
        var init_proc_12700958 = null;
        F.line = 184;
        var i_12790874 = 0;
        F.line = 185;
        var l_12790875 = (match_12680968.init != null ? match_12680968.init.length : 0);
        L64: do {
          F.line = 186;
            L65: while (true) {
            if (!(i_12790874 < l_12790875)) break L65;
              F.line = 798;
              init_proc_12700958 = match_12680968.init[chckIndx(i_12790874, 0, (match_12680968.init != null ? match_12680968.init.length : 0)+0-1)-0];
              F.line = 799;
              init_proc_12700958(node_12700511);
              F.line = 188;
              i_12790874 = addInt(i_12790874, 1);
              if (!(((match_12680968.init != null ? match_12680968.init.length : 0) == l_12790875))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      var Tmp66 = match_12680968;
      if (ConstSet207[Tmp66.iter]===undefined) { raiseFieldError(makeNimstrLit("\'inited\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      F.line = 800;
      Tmp66.inited = true;
      F.line = 801;
      changed_12700509 = true;
      }
      
        if (!changed_12700509) Tmp67 = false; else {          var Tmp68 = match_12680968;
          if (ConstSet208[Tmp68.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
          Tmp67 = !((Tmp68.mount == null));        }      if (Tmp67) {
      F.line = 805;
      var Tmp69 = match_12680968;
      if (ConstSet209[Tmp69.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      node_12700511 = Tmp69.mount.node();
      F.line = 806;
      var Tmp70 = match_12680968;
      if (ConstSet210[Tmp70.iter]===undefined) { raiseFieldError(makeNimstrLit("\'mount\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
      Tmp70.mount.update(converted_val_12700512, set_12700517, sub_list_12700510);
      }
      
      if (changed_12700509) {
      L71: do {
        F.line = 810;
        var submatch_12700983 = null;
        F.line = 182;
        var colontmp__12790878 = null;
        F.line = 810;
        var Tmp72 = match_12680968;
        if (ConstSet211[Tmp72.iter]===undefined) { raiseFieldError(makeNimstrLit("\'matches\' is not accessible using discriminant \'iter\' of type \'CompMatch\'")); }
        colontmp__12790878 = Tmp72.matches;
        F.line = 184;
        var i_12790879 = 0;
        F.line = 185;
        var l_12790880 = (colontmp__12790878 != null ? colontmp__12790878.length : 0);
        L73: do {
          F.line = 186;
            L74: while (true) {
            if (!(i_12790879 < l_12790880)) break L74;
              F.line = 810;
              submatch_12700983 = colontmp__12790878[chckIndx(i_12790879, 0, (colontmp__12790878 != null ? colontmp__12790878.length : 0)+0-1)-0];
              F.line = 811;
              submatch_12700983.update(converted_val_12700512, set_12700517, sub_list_12700510);
              F.line = 188;
              i_12790879 = addInt(i_12790879, 1);
              if (!(((colontmp__12790878 != null ? colontmp__12790878.length : 0) == l_12790880))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
      if (changed_12700509) {
      F.line = 814;
      var e_12700988 = {node: node_12700511, data: converted_val_12700512, init: !(inited_12700951), set: set_12700517};
      L75: do {
        F.line = 819;
        var refresh_proc_12700995 = null;
        F.line = 184;
        var i_12790884 = 0;
        F.line = 185;
        var l_12790885 = (match_12680968.refresh != null ? match_12680968.refresh.length : 0);
        L76: do {
          F.line = 186;
            L77: while (true) {
            if (!(i_12790884 < l_12790885)) break L77;
              F.line = 819;
              refresh_proc_12700995 = match_12680968.refresh[chckIndx(i_12790884, 0, (match_12680968.refresh != null ? match_12680968.refresh.length : 0)+0-1)-0];
              F.line = 820;
              refresh_proc_12700995(e_12700988);
              F.line = 188;
              i_12790884 = addInt(i_12790884, 1);
              if (!(((match_12680968.refresh != null ? match_12680968.refresh.length : 0) == l_12790885))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      }
      
    }
    
  framePtr = F.prev;

  
}
function as_interface_12680937(match_12680942) {
    function HEX3Aanonymous_12680949(data_12680951, set_12680956, refresh_list_12680957) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 891;
        update_12680963(match_12680942, data_12680951, set_12680956, refresh_list_12680957);
      framePtr = F.prev;

      
    }

  var result_12680944 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 890;
    result_12680944 = {update: HEX3Aanonymous_12680949};
  framePtr = F.prev;

  return result_12680944;

}
function as_interface_12652887(config_12652892) {
    function HEX3Aanonymous_12652899(node_12652901) {
      var result_12652907 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 897;
        result_12652907 = nimCopy(null, [], NTI12652922);
        L1: do {
          F.line = 898;
          var comp_match_12680214 = null;
          F.line = 182;
          var colontmp__12790840 = null;
          F.line = 898;
          colontmp__12790840 = compile_12653225(config_12652892, node_12652901);
          F.line = 184;
          var i_12790842 = 0;
          F.line = 185;
          var l_12790843 = (colontmp__12790840 != null ? colontmp__12790840.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12790842 < l_12790843)) break L3;
                F.line = 898;
                comp_match_12680214 = colontmp__12790840[chckIndx(i_12790842, 0, (colontmp__12790840 != null ? colontmp__12790840.length : 0)+0-1)-0];
                F.line = 899;
                if (result_12652907 != null) { result_12652907.push(as_interface_12680937(comp_match_12680214)); } else { result_12652907 = [as_interface_12680937(comp_match_12680214)]; };
                F.line = 188;
                i_12790842 = addInt(i_12790842, 1);
                if (!(((colontmp__12790840 != null ? colontmp__12790840.length : 0) == l_12790843))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      return result_12652907;

    }

  var result_12652894 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 895;
    result_12652894 = {compile: HEX3Aanonymous_12652899};
  framePtr = F.prev;

  return result_12652894;

}
function match_12652112(c_12652117, selector_12652118, convert_12652120, actions_12652126) {
  var result_12652128 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 351;
    result_12652128 = {selector: nimCopy(null, selector_12652118, NTI112), refresh: [], init: [], mount: null, iter: false, convert: nimCopy(null, convert_12652120, NTI12647319), cmatches: null, iterate: {kind: 0, simple: null, serial: null, selector: null}};
    F.line = 358;
    if (c_12652117.cmatches != null) { c_12652117.cmatches.push(as_interface_12652887(result_12652128)); } else { c_12652117.cmatches = [as_interface_12652887(result_12652128)]; };
    if (!((actions_12652126 == null))) {
    F.line = 360;
    actions_12652126(result_12652128);
    }
    
  framePtr = F.prev;

  return result_12652128;

}
function match_12649535(c_12649540, selector_12649541, convert_12649543, actions_12649549) {
  var result_12649551 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 376;
    var type_selector_12649559 = {kind: 0, simple: convert_12649543, serial: null, compare: null, obj: null, eql: null};
    F.line = 379;
    result_12649551 = match_12652112(c_12649540, selector_12649541, type_selector_12649559, actions_12649549);
  framePtr = F.prev;

  return result_12649551;

}
function id_12649500(data_12649503) {
  var result_12649504 = null;

  var F={procname:"id.id",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 255;
    result_12649504 = data_12649503;
  framePtr = F.prev;

  return result_12649504;

}
function match_12649480(c_12649484, selector_12649485, actions_12649491) {
  var result_12649493 = null;

  var F={procname:"match.match",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 464;
    result_12649493 = match_12649535(c_12649484, selector_12649485, id_12649500, actions_12649491);
  framePtr = F.prev;

  return result_12649493;

}
function HEX3DHEX3D_10885020(x_10885024, y_10885026) {
  var result_10885027 = false;

  var F={procname:"==.==",prev:framePtr,filename:"comparisons.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 301;
    var same_object_10885601 = false;
    F.line = 302;
    same_object_10885601 = x_10885024 === y_10885026
    if (same_object_10885601) {
    F.line = 303;
    result_10885027 = true;
    break BeforeRet;
    }
    
    if (!(((x_10885024 != null ? x_10885024.length : 0) == (y_10885026 != null ? y_10885026.length : 0)))) {
    F.line = 310;
    result_10885027 = false;
    break BeforeRet;
    }
    
    L1: do {
      F.line = 312;
      var i_10886024 = 0;
      F.line = 66;
      var colontmp__12790902 = 0;
      F.line = 312;
      colontmp__12790902 = subInt((x_10885024 != null ? x_10885024.length : 0), 1);
      F.line = 77;
      var res_12790903 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12790903 <= colontmp__12790902)) break L3;
            F.line = 312;
            i_10886024 = res_12790903;
            if (!(HEX3DHEX3D_10880491(x_10885024[chckIndx(i_10886024, 0, (x_10885024 != null ? x_10885024.length : 0)+0-1)-0], y_10885026[chckIndx(i_10886024, 0, (y_10885026 != null ? y_10885026.length : 0)+0-1)-0]))) {
            F.line = 314;
            result_10885027 = false;
            break BeforeRet;
            }
            
            F.line = 80;
            res_12790903 = addInt(res_12790903, 1);
          }
      } while(false);
    } while(false);
    F.line = 316;
    result_10885027 = true;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10885027;

}
function len_10890128(t_10890133) {
  var result_10890134 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1467;
    result_10890134 = t_10890133.counter;
  framePtr = F.prev;

  return result_10890134;

}
function is_filled_1004018(hcode_1004020) {
  var result_1004021 = false;

  var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_1004021 = !((hcode_1004020 == 0));
  framePtr = F.prev;

  return result_1004021;

}
function imul_855517(a_855519, b_855520) {
  var result_855521 = 0;

  var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 133;
    var mask_855522 = 65535;
    F.line = 135;
    var a_hi_855531 = (((a_855519 >>> 0) >>> 16) & mask_855522);
    F.line = 136;
    var a_lo_855532 = (a_855519 & mask_855522);
    F.line = 137;
    var b_hi_855541 = (((b_855520 >>> 0) >>> 16) & mask_855522);
    F.line = 138;
    var b_lo_855542 = (b_855520 & mask_855522);
    F.line = 139;
    result_855521 = ((((a_lo_855532 * b_lo_855542) >>> 0) + (((((a_hi_855531 * b_lo_855542) >>> 0) + ((a_lo_855532 * b_hi_855541) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_855521;

}
function rotl32_855601(x_855603, r_855604) {
  var result_855605 = 0;

  var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_855605 = ((x_855603 << r_855604) | ((x_855603 >>> 0) >>> subInt(32, r_855604)));
  framePtr = F.prev;

  return result_855605;

}
function murmur_hash_855629(x_855632) {
  var result_855633 = 0;

  var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 155;
    var size_855643 = (x_855632 != null ? x_855632.length : 0);
    F.line = 156;
    var step_size_855645 = 4;
    F.line = 157;
    var n_855646 = divInt(size_855643, step_size_855645);
    F.line = 159;
    var h1_855647 = 0;
    F.line = 160;
    var i_855649 = 0;
    L1: do {
      F.line = 163;
        L2: while (true) {
        if (!(i_855649 < mulInt(n_855646, step_size_855645))) break L2;
          F.line = 164;
          var k1_855650 = 0;
          F.line = 166;
          var j_855651 = step_size_855645;
          L3: do {
            F.line = 167;
              L4: while (true) {
              if (!(0 < j_855651)) break L4;
                F.line = 168;
                j_855651 = subInt(j_855651, 1);
                F.line = 169;
                k1_855650 = ((k1_855650 << 8) | x_855632[chckIndx(addInt(i_855649, j_855651), 0, (x_855632 != null ? x_855632.length : 0)+0-1)-0]);
              }
          } while(false);
          F.line = 172;
          i_855649 = addInt(i_855649, step_size_855645);
          F.line = 174;
          k1_855650 = imul_855517(k1_855650, 3432918353);
          F.line = 175;
          k1_855650 = rotl32_855601(k1_855650, 15);
          F.line = 176;
          k1_855650 = imul_855517(k1_855650, 461845907);
          F.line = 178;
          h1_855647 = (h1_855647 ^ k1_855650);
          F.line = 179;
          h1_855647 = rotl32_855601(h1_855647, 13);
          F.line = 180;
          h1_855647 = ((((h1_855647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    F.line = 183;
    var k1_860208 = 0;
    F.line = 184;
    var rem_860209 = modInt(size_855643, step_size_855645);
    L5: do {
      F.line = 185;
        L6: while (true) {
        if (!(0 < rem_860209)) break L6;
          F.line = 186;
          rem_860209 = subInt(rem_860209, 1);
          F.line = 187;
          k1_860208 = ((k1_860208 << 8) | x_855632[chckIndx(addInt(i_855649, rem_860209), 0, (x_855632 != null ? x_855632.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 188;
    k1_860208 = imul_855517(k1_860208, 3432918353);
    F.line = 189;
    k1_860208 = rotl32_855601(k1_860208, 15);
    F.line = 190;
    k1_860208 = imul_855517(k1_860208, 461845907);
    F.line = 191;
    h1_855647 = (h1_855647 ^ k1_860208);
    F.line = 194;
    h1_855647 = (h1_855647 ^ size_855643);
    F.line = 195;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 16));
    F.line = 196;
    h1_855647 = imul_855517(h1_855647, 2246822507);
    F.line = 197;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 13));
    F.line = 198;
    h1_855647 = imul_855517(h1_855647, 3266489909);
    F.line = 199;
    h1_855647 = (h1_855647 ^ ((h1_855647 >>> 0) >>> 16));
    F.line = 200;
    result_855633 = (h1_855647|0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_855633;

}
function hash_895214(x_895216) {
  var result_895217 = 0;

  var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_895217 = murmur_hash_855629((x_895216.slice(0, (x_895216 != null ? (x_895216.length-1) : -1)+1)));
  framePtr = F.prev;

  return result_895217;

}
function next_try_1005014(h_1005016, max_hash_1005017) {
  var result_1005018 = 0;

  var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_1005018 = (addInt(h_1005016, 1) & max_hash_1005017);
  framePtr = F.prev;

  return result_1005018;

}
function raw_get_10805621(t_10805626, key_10805627, hc_10805628, hc_10805628_Idx) {
            var Tmp3;

  var result_10805629 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10805628[hc_10805628_Idx] = hash_895214(key_10805627);
    if ((hc_10805628[hc_10805628_Idx] == 0)) {
    F.line = 65;
    hc_10805628[hc_10805628_Idx] = 314159265;
    }
    
    if (((t_10805626.data != null ? t_10805626.data.length : 0) == 0)) {
    F.line = 47;
    result_10805629 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10815138 = (hc_10805628[hc_10805628_Idx] & (t_10805626.data != null ? (t_10805626.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_10805626.data[chckIndx(h_10815138, 0, (t_10805626.data != null ? t_10805626.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10805626.data[chckIndx(h_10815138, 0, (t_10805626.data != null ? t_10805626.data.length : 0)+0-1)-0].Field0 == hc_10805628[hc_10805628_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10805626.data[chckIndx(h_10815138, 0, (t_10805626.data != null ? t_10805626.data.length : 0)+0-1)-0].Field2, key_10805627);            }          if (Tmp3) {
          F.line = 55;
          result_10805629 = h_10815138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10815138 = next_try_1005014(h_10815138, (t_10805626.data != null ? (t_10805626.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10805629 = subInt(-1, h_10815138);
  } while (false);
  framePtr = F.prev;

  return result_10805629;

}
function has_key_10900326(t_10900331, key_10900332) {
  var result_10900333 = false;

  var F={procname:"hasKey.hasKey",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1371;
    var hc_10900334 = [0];
    F.line = 1372;
    result_10900333 = (0 <= raw_get_10805621(t_10900331, key_10900332, hc_10900334, 0));
  framePtr = F.prev;

  return result_10900333;

}
function raw_get_10905157(t_10905161, key_10905162, hc_10905163, hc_10905163_Idx) {
            var Tmp3;

  var result_10905164 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_10905163[hc_10905163_Idx] = hash_895214(key_10905162);
    if ((hc_10905163[hc_10905163_Idx] == 0)) {
    F.line = 65;
    hc_10905163[hc_10905163_Idx] = 314159265;
    }
    
    if (((t_10905161.data != null ? t_10905161.data.length : 0) == 0)) {
    F.line = 47;
    result_10905164 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10915138 = (hc_10905163[hc_10905163_Idx] & (t_10905161.data != null ? (t_10905161.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_10905161.data[chckIndx(h_10915138, 0, (t_10905161.data != null ? t_10905161.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_10905161.data[chckIndx(h_10915138, 0, (t_10905161.data != null ? t_10905161.data.length : 0)+0-1)-0].Field0 == hc_10905163[hc_10905163_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10905161.data[chckIndx(h_10915138, 0, (t_10905161.data != null ? t_10905161.data.length : 0)+0-1)-0].Field2, key_10905162);            }          if (Tmp3) {
          F.line = 55;
          result_10905164 = h_10915138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10915138 = next_try_1005014(h_10915138, (t_10905161.data != null ? (t_10905161.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10905164 = subInt(-1, h_10915138);
  } while (false);
  framePtr = F.prev;

  return result_10905164;

}
function HEX5BHEX5D_10905146(t_10905152, key_10905153) {
  var result_10905155 = null;
  var result_10905155_Idx = 0;

  var F={procname:"[].[]",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 257;
    var hcHEX60gensym1020595_10905156 = [0];
    F.line = 258;
    var indexHEX60gensym1020596_10915605 = raw_get_10905157(t_10905152, key_10905153, hcHEX60gensym1020595_10905156, 0);
    if ((0 <= indexHEX60gensym1020596_10915605)) {
    F.line = 259;
    result_10905155 = t_10905152.data[chckIndx(indexHEX60gensym1020596_10915605, 0, (t_10905152.data != null ? t_10905152.data.length : 0)+0-1)-0]; result_10905155_Idx = "Field3";
    }
    else {
      F.line = 262;
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10905153 || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    
  framePtr = F.prev;

  return [result_10905155, result_10905155_Idx];

}
function HEX3DHEX3D_10880491(a_10880493, b_10880494) {
      var Tmp1;
        var Tmp2;
        var Tmp3;
        var Tmp4;
        var Tmp5;
        var Tmp6;
        var Tmp7;
        var Tmp8;
        var Tmp9;
        var Tmp10;
        var Tmp11;
          var Tmp12;
          var Tmp13;
          var Tmp15;
                  var Tmp18;
                  var Tmp19;
                  var Tmp20;

  var result_10880495 = false;

  var F={procname:"json.==",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if ((a_10880493 == null)) {
    if ((b_10880494 == null)) {
    F.line = 400;
    result_10880495 = true;
    break BeforeRet;
    }
    
    F.line = 401;
    result_10880495 = false;
    break BeforeRet;
    }
    else {
      if ((b_10880494 == null)) Tmp1 = true; else {        Tmp1 = !((a_10880493.kind == b_10880494.kind));      }    if (Tmp1) {
    F.line = 403;
    result_10880495 = false;
    break BeforeRet;
    }
    else {
      F.line = 405;
      switch (a_10880493.kind) {
      case 4:
        F.line = 407;
        var Tmp2 = a_10880493;
        if (ConstSet212[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp3 = b_10880494;
        if (ConstSet213[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10880495 = eqStrings(Tmp2.str, Tmp3.str);
        break;
      case 2:
        F.line = 409;
        var Tmp4 = a_10880493;
        if (ConstSet214[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp5 = b_10880494;
        if (ConstSet215[Tmp5.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10880495 = (Tmp4.num == Tmp5.num);
        break;
      case 3:
        F.line = 411;
        var Tmp6 = a_10880493;
        if (ConstSet216[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp7 = b_10880494;
        if (ConstSet217[Tmp7.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10880495 = (Tmp6.fnum == Tmp7.fnum);
        break;
      case 1:
        F.line = 413;
        var Tmp8 = a_10880493;
        if (ConstSet218[Tmp8.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp9 = b_10880494;
        if (ConstSet219[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10880495 = (Tmp8.bval == Tmp9.bval);
        break;
      case 0:
        F.line = 415;
        result_10880495 = true;
        break;
      case 6:
        F.line = 417;
        var Tmp10 = a_10880493;
        if (ConstSet220[Tmp10.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        var Tmp11 = b_10880494;
        if (ConstSet221[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        result_10880495 = HEX3DHEX3D_10885020(Tmp10.elems, Tmp11.elems);
        break;
      case 5:
          var Tmp12 = a_10880493;
          if (ConstSet222[Tmp12.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          var Tmp13 = b_10880494;
          if (ConstSet223[Tmp13.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        if (!((len_10890128(Tmp12.fields) == len_10890128(Tmp13.fields)))) {
        F.line = 421;
        result_10880495 = false;
        break BeforeRet;
        }
        
        L14: do {
          F.line = 422;
          var key_10900214 = null;
          F.line = 422;
          var val_10900215 = null;
          F.line = 1646;
          var colontmp__12790895 = {data: null, counter: 0, first: 0, last: 0};
          F.line = 422;
          var Tmp15 = a_10880493;
          if (ConstSet224[Tmp15.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
          nimCopy(colontmp__12790895, Tmp15.fields, NTI10711067);
          F.line = 1672;
          var l_12790897 = len_10890128(colontmp__12790895);
          if ((0 < colontmp__12790895.counter)) {
          F.line = 1251;
          var h_12790898 = colontmp__12790895.first;
          L16: do {
            F.line = 1252;
              L17: while (true) {
              if (!(0 <= h_12790898)) break L17;
                F.line = 1253;
                var nxt_12790900 = colontmp__12790895.data[chckIndx(h_12790898, 0, (colontmp__12790895.data != null ? colontmp__12790895.data.length : 0)+0-1)-0].Field1;
                if (is_filled_1004018(colontmp__12790895.data[chckIndx(h_12790898, 0, (colontmp__12790895.data != null ? colontmp__12790895.data.length : 0)+0-1)-0].Field0)) {
                F.line = 422;
                key_10900214 = colontmp__12790895.data[chckIndx(h_12790898, 0, (colontmp__12790895.data != null ? colontmp__12790895.data.length : 0)+0-1)-0].Field2;
                F.line = 1674;
                val_10900215 = colontmp__12790895.data[chckIndx(h_12790898, 0, (colontmp__12790895.data != null ? colontmp__12790895.data.length : 0)+0-1)-0].Field3;
                  var Tmp18 = b_10880494;
                  if (ConstSet225[Tmp18.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(has_key_10900326(Tmp18.fields, key_10900214))) {
                F.line = 423;
                result_10880495 = false;
                break BeforeRet;
                }
                
                  var Tmp19 = b_10880494;
                  if (ConstSet226[Tmp19.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
                if (!(HEX3DHEX3D_10880491((Tmp20 = HEX5BHEX5D_10905146(Tmp19.fields, key_10900214), Tmp20)[0][Tmp20[1]], val_10900215))) {
                F.line = 424;
                result_10880495 = false;
                break BeforeRet;
                }
                
                if (!((len_10890128(colontmp__12790895) == l_12790897))) {
                F.line = 1675;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tables.nim(1675, 11) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 1256;
                h_12790898 = nxt_12790900;
              }
          } while(false);
          }
          
        } while(false);
        F.line = 425;
        result_10880495 = true;
        break;
      }
    }
    }
  } while (false);
  framePtr = F.prev;

  return result_10880495;

}
function invalid_format_string_9975046() {
  var F={procname:"strutils.invalidFormatString",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2624;
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI6243, name: null, trace: null, up: null}, "ValueError");
  framePtr = F.prev;

  
}
function nsuToLowerAsciiChar(c_9125023) {
  var result_9125024 = 0;

  var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet231[c_9125023] != undefined)) {
    F.line = 209;
    result_9125024 = chckRange(addInt(c_9125023, 32), 0, 255);
    }
    else {
      F.line = 211;
      result_9125024 = c_9125023;
    }
    
  framePtr = F.prev;

  return result_9125024;

}
function nsuCmpIgnoreStyle(a_9185022, b_9185023) {
          var Tmp7;
          var Tmp8;

  var result_9185024 = 0;

  BeforeRet: do {
    var i_9185026 = 0;
    var j_9185028 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          L3: do {
              L4: while (true) {
              if (!((i_9185026 < (a_9185022 != null ? a_9185022.length : 0)) && (a_9185022[i_9185026] == 95))) break L4;
                i_9185026 += 1;
              }
          } while(false);
          L5: do {
              L6: while (true) {
              if (!((j_9185028 < (b_9185023 != null ? b_9185023.length : 0)) && (b_9185023[j_9185028] == 95))) break L6;
                j_9185028 += 1;
              }
          } while(false);
          if ((i_9185026 < (a_9185022 != null ? a_9185022.length : 0))) {
          Tmp7 = nsuToLowerAsciiChar(a_9185022[i_9185026]);
          }
          else {
          Tmp7 = 0;
          }
          
          var aa_9185041 = Tmp7;
          if ((j_9185028 < (b_9185023 != null ? b_9185023.length : 0))) {
          Tmp8 = nsuToLowerAsciiChar(b_9185023[j_9185028]);
          }
          else {
          Tmp8 = 0;
          }
          
          var bb_9185042 = Tmp8;
          result_9185024 = (aa_9185041 - bb_9185042);
          if (!((result_9185024 == 0))) {
          break BeforeRet;
          }
          
          if (((a_9185022 != null ? a_9185022.length : 0) <= i_9185026)) {
          if (((b_9185023 != null ? b_9185023.length : 0) <= j_9185028)) {
          result_9185024 = 0;
          break BeforeRet;
          }
          
          result_9185024 = -1;
          break BeforeRet;
          }
          else {
          if (((b_9185023 != null ? b_9185023.length : 0) <= j_9185028)) {
          result_9185024 = 1;
          break BeforeRet;
          }
          }
          i_9185026 += 1;
          j_9185028 += 1;
        }
    } while(false);
  } while (false);

  return result_9185024;

}
function find_normalized_9975014(x_9975016, in_array_9975018) {
  var result_9975019 = 0;

  var F={procname:"strutils.findNormalized",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 2616;
    var i_9975021 = 0;
    L1: do {
      F.line = 2617;
        L2: while (true) {
        if (!(i_9975021 < (in_array_9975018 != null ? (in_array_9975018.length-1) : -1))) break L2;
          if ((nsuCmpIgnoreStyle(x_9975016, in_array_9975018[chckIndx(i_9975021, 0, (in_array_9975018 != null ? in_array_9975018.length : 0)+0-1)-0]) == 0)) {
          F.line = 2618;
          result_9975019 = i_9975021;
          break BeforeRet;
          }
          
          F.line = 2619;
          i_9975021 = addInt(i_9975021, 2);
        }
    } while(false);
    F.line = 2621;
    result_9975019 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_9975019;

}
function nsuAddf(s_9980018, s_9980018_Idx, formatstr_9980019, a_9980021) {
                  var Tmp5;
            var Tmp6;
              var Tmp7;
            var Tmp10;
              var Tmp11;
                var Tmp12;
                  var Tmp15;
              var Tmp16;

  var F={procname:"strutils.addf",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2630;
    var i_9980025 = 0;
    F.line = 2631;
    var num_9980027 = 0;
    L1: do {
      F.line = 2632;
        L2: while (true) {
        if (!(i_9980025 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) break L2;
          if (((formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 36) && (addInt(i_9980025, 1) < (formatstr_9980019 != null ? formatstr_9980019.length : 0)))) {
          F.line = 2634;
          switch (formatstr_9980019[chckIndx(addInt(i_9980025, 1), 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]) {
          case 35:
            if (((a_9980021 != null ? (a_9980021.length-1) : -1) < num_9980027)) {
            F.line = 2636;
            invalid_format_string_9975046();
            }
            
            F.line = 2637;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(num_9980027, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(num_9980027, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            F.line = 2638;
            i_9980025 = addInt(i_9980025, 2);
            F.line = 2639;
            num_9980027 = addInt(num_9980027, 1);
            break;
          case 36:
            F.line = 2641;
            if (s_9980018[s_9980018_Idx] != null) { addChar(s_9980018[s_9980018_Idx], 36); } else { s_9980018[s_9980018_Idx] = [36]; };
            F.line = 2642;
            i_9980025 = addInt(i_9980025, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            F.line = 2644;
            var j_9985025 = 0;
            F.line = 2645;
            i_9980025 = addInt(i_9980025, 1);
            F.line = 2646;
            var negative_9985032 = (formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 45);
            if (negative_9985032) {
            F.line = 2647;
            i_9980025 = addInt(i_9980025, 1);
            }
            
            L3: do {
              F.line = 2648;
                L4: while (true) {
                  if (!(i_9980025 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) Tmp5 = false; else {                    Tmp5 = (ConstSet228[formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined);                  }                if (!Tmp5) break L4;
                  F.line = 2649;
                  j_9985025 = subInt(addInt(mulInt(j_9985025, 10), formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]), 48);
                  F.line = 2650;
                  i_9980025 = addInt(i_9980025, 1);
                }
            } while(false);
            F.line = 2651;
            if (!(negative_9985032)) {
            Tmp6 = subInt(j_9985025, 1);
            }
            else {
            Tmp6 = subInt((a_9980021 != null ? a_9980021.length : 0), j_9985025);
            }
            
            var idx_9990025 = Tmp6;
              if ((idx_9990025 < 0)) Tmp7 = true; else {                Tmp7 = ((a_9980021 != null ? (a_9980021.length-1) : -1) < idx_9990025);              }            if (Tmp7) {
            F.line = 2652;
            invalid_format_string_9975046();
            }
            
            F.line = 2653;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(idx_9990025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(idx_9990025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            break;
          case 123:
            F.line = 2655;
            var j_9995006 = addInt(i_9980025, 2);
            F.line = 2656;
            var k_9995008 = 0;
            F.line = 2657;
            var negative_9995009 = (formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0] == 45);
            if (negative_9995009) {
            F.line = 2658;
            j_9995006 = addInt(j_9995006, 1);
            }
            
            F.line = 2659;
            var is_number_9995017 = 0;
            L8: do {
              F.line = 2660;
                L9: while (true) {
                if (!((j_9995006 < (formatstr_9980019 != null ? formatstr_9980019.length : 0)) && !((ConstSet229[formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined)))) break L9;
                  if ((ConstSet230[formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined)) {
                  F.line = 2662;
                  k_9995008 = subInt(addInt(mulInt(k_9995008, 10), formatstr_9980019[chckIndx(j_9995006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]), 48);
                  if ((is_number_9995017 == 0)) {
                  F.line = 2663;
                  is_number_9995017 = 1;
                  }
                  
                  }
                  else {
                    F.line = 2665;
                    is_number_9995017 = -1;
                  }
                  
                  F.line = 2666;
                  j_9995006 = addInt(j_9995006, 1);
                }
            } while(false);
            if ((is_number_9995017 == 1)) {
            F.line = 2668;
            if (!(negative_9995009)) {
            Tmp10 = subInt(k_9995008, 1);
            }
            else {
            Tmp10 = subInt((a_9980021 != null ? a_9980021.length : 0), k_9995008);
            }
            
            var idx_10005025 = Tmp10;
              if ((idx_10005025 < 0)) Tmp11 = true; else {                Tmp11 = ((a_9980021 != null ? (a_9980021.length-1) : -1) < idx_10005025);              }            if (Tmp11) {
            F.line = 2669;
            invalid_format_string_9975046();
            }
            
            F.line = 2670;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(idx_10005025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(idx_10005025, 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            }
            else {
              F.line = 2672;
              var x_10010006 = find_normalized_9975014(substr_341022(formatstr_9980019, addInt(i_9980025, 2), subInt(j_9995006, 1)), a_9980021);
                if (!(0 <= x_10010006)) Tmp12 = false; else {                  Tmp12 = (x_10010006 < (a_9980021 != null ? (a_9980021.length-1) : -1));                }              if (Tmp12) {
              F.line = 2673;
              if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(addInt(x_10010006, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(addInt(x_10010006, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
              }
              else {
                F.line = 2674;
              invalid_format_string_9975046();
              }
              
            }
            
            F.line = 2675;
            i_9980025 = addInt(j_9995006, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            F.line = 2677;
            var j_10015006 = addInt(i_9980025, 1);
            L13: do {
              F.line = 2678;
                L14: while (true) {
                  if (!(j_10015006 < (formatstr_9980019 != null ? formatstr_9980019.length : 0))) Tmp15 = false; else {                    Tmp15 = (ConstSet232[formatstr_9980019[chckIndx(j_10015006, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]] != undefined);                  }                if (!Tmp15) break L14;
                  F.line = 2678;
                  j_10015006 = addInt(j_10015006, 1);
                }
            } while(false);
            F.line = 2679;
            var x_10020013 = find_normalized_9975014(substr_341022(formatstr_9980019, addInt(i_9980025, 1), subInt(j_10015006, 1)), a_9980021);
              if (!(0 <= x_10020013)) Tmp16 = false; else {                Tmp16 = (x_10020013 < (a_9980021 != null ? (a_9980021.length-1) : -1));              }            if (Tmp16) {
            F.line = 2680;
            if (s_9980018[s_9980018_Idx] != null) { s_9980018[s_9980018_Idx] = (s_9980018[s_9980018_Idx]).concat(a_9980021[chckIndx(addInt(x_10020013, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = a_9980021[chckIndx(addInt(x_10020013, 1), 0, (a_9980021 != null ? a_9980021.length : 0)+0-1)-0].slice(); };
            }
            else {
              F.line = 2681;
            invalid_format_string_9975046();
            }
            
            F.line = 2682;
            i_9980025 = j_10015006;
            break;
          default: 
            F.line = 2684;
            invalid_format_string_9975046();
            break;
          }
          }
          else {
            F.line = 2686;
            if (s_9980018[s_9980018_Idx] != null) { addChar(s_9980018[s_9980018_Idx], formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]); } else { s_9980018[s_9980018_Idx] = [formatstr_9980019[chckIndx(i_9980025, 0, (formatstr_9980019 != null ? formatstr_9980019.length : 0)+0-1)-0]]; };
            F.line = 2687;
            i_9980025 = addInt(i_9980025, 1);
          }
          
        }
    } while(false);
  framePtr = F.prev;

  
}
function nsuFormatOpenArray(formatstr_10025027, a_10025029) {
  var result_10025030 = [null];

  var F={procname:"strutils.%",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 2734;
    result_10025030[0] = nimCopy(null, mnewString(0), NTI112);
    F.line = 2735;
    nsuAddf(result_10025030, 0, formatstr_10025027, a_10025029);
  framePtr = F.prev;

  return result_10025030[0];

}
function is_undefined_315483(x_315486) {
  var result_315487 = false;

  var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"reprjs.nim",line:0};
  framePtr = F;
    F.line = 34;
    result_315487 = x_315486 === undefined;
  framePtr = F.prev;

  return result_315487;

}
function add_quoted_11240201(s_11240204, s_11240204_Idx, x_11240205) {
  var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2807;
    if (s_11240204[s_11240204_Idx] != null) { s_11240204[s_11240204_Idx] = (s_11240204[s_11240204_Idx]).concat(reprEnum(x_11240205, NTI10711041)); } else { s_11240204[s_11240204_Idx] = reprEnum(x_11240205, NTI10711041).slice(); };
  framePtr = F.prev;

  
}
function collection_to_string_11240015(x_11240018, prefix_11240019, separator_11240020, suffix_11240021) {
  var result_11240022 = [null];

  var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"dollars.nim",line:0};
  framePtr = F;
    F.line = 106;
    result_11240022[0] = nimCopy(null, prefix_11240019, NTI112);
    F.line = 107;
    var first_element_11240023 = true;
    L1: do {
      F.line = 108;
      var value_11240069 = 0;
      F.line = 37;
      var i_12790930 = 0;
      L2: do {
        F.line = 38;
          L3: while (true) {
          if (!(i_12790930 <= 6)) break L3;
            if ((x_11240018[i_12790930] != undefined)) {
            F.line = 108;
            value_11240069 = i_12790930;
            if (first_element_11240023) {
            F.line = 110;
            first_element_11240023 = false;
            }
            else {
              F.line = 112;
            if (result_11240022[0] != null) { result_11240022[0] = (result_11240022[0]).concat(separator_11240020); } else { result_11240022[0] = separator_11240020.slice(); };
            }
            
            F.line = 121;
            add_quoted_11240201(result_11240022, 0, value_11240069);
            }
            
            F.line = 40;
            i_12790930 += 1;
          }
      } while(false);
    } while(false);
    F.line = 122;
    if (result_11240022[0] != null) { result_11240022[0] = (result_11240022[0]).concat(suffix_11240021); } else { result_11240022[0] = suffix_11240021.slice(); };
  framePtr = F.prev;

  return result_11240022[0];

}
function HEX24_11240009(x_11240013) {
  var result_11240014 = null;

  var F={procname:"$.$",prev:framePtr,filename:"dollars.nim",line:0};
  framePtr = F;
    F.line = 125;
    result_11240014 = nimCopy(null, collection_to_string_11240015(x_11240013, makeNimstrLit("{"), makeNimstrLit(", "), makeNimstrLit("}")), NTI112);
  framePtr = F.prev;

  return result_11240014;

}
function new_12485008() {
  var result_12485012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_12485202 = null;
    F.line = 851;
    r_12485202 = {children: null, settings: null};
    F.line = 852;
    result_12485012 = r_12485202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12485012;

}
function len_10920341(n_10920343) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10920344 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 456;
    switch (n_10920343.kind) {
    case 6:
      F.line = 457;
      var Tmp1 = n_10920343;
      if (ConstSet236[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_10920344 = ((Tmp2 = Tmp1.elems, Tmp2) != null ? Tmp2.length : 0);
      break;
    case 5:
      F.line = 458;
      var Tmp3 = n_10920343;
      if (ConstSet237[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_10920344 = len_10890128(Tmp3.fields);
      break;
    default: 
      break;
    }
  framePtr = F.prev;

  return result_10920344;

}
function add_int_325201(result_325204, result_325204_Idx, x_325205) {
  var F={procname:"system.addInt",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2347;
    if (result_325204[result_325204_Idx] != null) { result_325204[result_325204_Idx] = (result_325204[result_325204_Idx]).concat(cstrToNimstr((x_325205)+"")); } else { result_325204[result_325204_Idx] = cstrToNimstr((x_325205)+"").slice(); };
  framePtr = F.prev;

  
}
function new_jstring_10711086(s_10711088) {
  var result_10711089 = null;

  var F={procname:"json.newJString",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 186;
    result_10711089 = {kind: 4, str: nimCopy(null, s_10711088, NTI112), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10711089;

}
function new_jint_10711168(n_10711170) {
  var result_10711171 = null;

  var F={procname:"json.newJInt",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 194;
    result_10711171 = {kind: 2, num: n_10711170, str: null, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10711171;

}
function new_jfloat_10711185(n_10711187) {
  var result_10711188 = null;

  var F={procname:"json.newJFloat",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 198;
    result_10711188 = {kind: 3, fnum: n_10711187, str: null, num: 0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10711188;

}
function new_jbool_10711202(b_10711204) {
  var result_10711205 = null;

  var F={procname:"json.newJBool",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 202;
    result_10711205 = {kind: 1, bval: b_10711204, str: null, num: 0, fnum: 0.0, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10711205;

}
function new_jnull_10711219() {
  var result_10711221 = null;

  var F={procname:"json.newJNull",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 206;
    result_10711221 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_10711221;

}
function is_power_of_two_955029(x_955031) {
    var Tmp1;

  var result_955032 = false;

  BeforeRet: do {
    if (!(0 < x_955031)) Tmp1 = false; else {      Tmp1 = ((x_955031 & (x_955031 - 1)) == 0);    }    result_955032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_955032;

}
function init_ordered_table_10711240(initial_size_10711244) {
  var result_10711246 = {data: null, counter: 0, first: 0, last: 0};

  var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_955029(initial_size_10711244))) {
    F.line = 127;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 128;
    result_10711246.counter = 0;
    F.line = 129;
    result_10711246.data = new Array(chckRange(initial_size_10711244, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_10711244, 0, 2147483647);++i) {result_10711246.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    result_10711246.first = -1;
    F.line = 132;
    result_10711246.last = -1;
  framePtr = F.prev;

  return result_10711246;

}
function new_jobject_10711235() {
  var result_10711237 = null;

  var F={procname:"json.newJObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_10711237 = {kind: 5, fields: init_ordered_table_10711240(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
  framePtr = F.prev;

  return result_10711237;

}
function must_rehash_10840601(t_10840604) {
  var result_10840605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_10840604.counter < (t_10840604.data != null ? t_10840604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_10840605 = ((mulInt((t_10840604.data != null ? t_10840604.data.length : 0), 2) < mulInt(t_10840604.counter, 3)) || (subInt((t_10840604.data != null ? t_10840604.data.length : 0), t_10840604.counter) < 4));
  framePtr = F.prev;

  return result_10840605;

}
function raw_insert_10866349(t_10866355, data_10866358, data_10866358_Idx, key_10866359, val_10866360, hc_10866361, h_10866362) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_10866358[data_10866358_Idx][chckIndx(h_10866362, 0, (data_10866358[data_10866358_Idx] != null ? data_10866358[data_10866358_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, key_10866359, NTI112);
    F.line = 23;
    data_10866358[data_10866358_Idx][chckIndx(h_10866362, 0, (data_10866358[data_10866358_Idx] != null ? data_10866358[data_10866358_Idx].length : 0)+0-1)-0].Field3 = val_10866360;
    F.line = 24;
    data_10866358[data_10866358_Idx][chckIndx(h_10866362, 0, (data_10866358[data_10866358_Idx] != null ? data_10866358[data_10866358_Idx].length : 0)+0-1)-0].Field0 = hc_10866361;
    F.line = 1227;
    data_10866358[data_10866358_Idx][chckIndx(h_10866362, 0, (data_10866358[data_10866358_Idx] != null ? data_10866358[data_10866358_Idx].length : 0)+0-1)-0].Field1 = -1;
    if ((t_10866355.first < 0)) {
    F.line = 1228;
    t_10866355.first = h_10866362;
    }
    
    if ((0 <= t_10866355.last)) {
    F.line = 1229;
    data_10866358[data_10866358_Idx][chckIndx(t_10866355.last, 0, (data_10866358[data_10866358_Idx] != null ? data_10866358[data_10866358_Idx].length : 0)+0-1)-0].Field1 = h_10866362;
    }
    
    F.line = 1230;
    t_10866355.last = h_10866362;
  framePtr = F.prev;

  
}
function enlarge_10865180(t_10865186) {
          var Tmp6;
          var Tmp7;

  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1233;
    var n_10865194 = null;
    F.line = 1234;
    n_10865194 = new Array(chckRange(mulInt((t_10865186.data != null ? t_10865186.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_10865186.data != null ? t_10865186.data.length : 0), 2), 0, 2147483647);++i) {n_10865194[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 1235;
    var h_10865333 = t_10865186.first;
    F.line = 1236;
    t_10865186.first = -1;
    F.line = 1237;
    t_10865186.last = -1;
    F.line = 1238;
    var Tmp1 = t_10865186.data; t_10865186.data = n_10865194; n_10865194 = Tmp1;    L2: do {
      F.line = 1239;
        L3: while (true) {
        if (!(0 <= h_10865333)) break L3;
          F.line = 1240;
          var nxt_10865489 = n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field1;
          F.line = 1241;
          var eh_10865638 = n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field0;
          if (is_filled_1004018(eh_10865638)) {
          F.line = 1243;
          var j_10865645 = (eh_10865638 & (t_10865186.data != null ? (t_10865186.data.length-1) : -1));
          L4: do {
            F.line = 1244;
              L5: while (true) {
              if (!is_filled_1004018(t_10865186.data[chckIndx(j_10865645, 0, (t_10865186.data != null ? t_10865186.data.length : 0)+0-1)-0].Field0)) break L5;
                F.line = 1245;
                j_10865645 = next_try_1005014(j_10865645, (t_10865186.data != null ? (t_10865186.data.length-1) : -1));
              }
          } while(false);
          F.line = 1246;
          Tmp6 = n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field2;
          n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field2 = genericReset(n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field2, NTI112);
          Tmp7 = n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field3;
          n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field3 = genericReset(n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field3, NTI10711043);
          raw_insert_10866349(t_10865186, t_10865186, "data", Tmp6, Tmp7, n_10865194[chckIndx(h_10865333, 0, (n_10865194 != null ? n_10865194.length : 0)+0-1)-0].Field0, j_10865645);
          }
          
          F.line = 1247;
          h_10865333 = nxt_10865489;
        }
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_10867149(t_10867154, key_10867155, hc_10867156) {
  var result_10867157 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_10867154.data != null ? t_10867154.data.length : 0) == 0)) {
    F.line = 47;
    result_10867157 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_10870138 = (hc_10867156 & (t_10867154.data != null ? (t_10867154.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_1004018(t_10867154.data[chckIndx(h_10870138, 0, (t_10867154.data != null ? t_10867154.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_10867154.data[chckIndx(h_10870138, 0, (t_10867154.data != null ? t_10867154.data.length : 0)+0-1)-0].Field0 == hc_10867156) && eqStrings(t_10867154.data[chckIndx(h_10870138, 0, (t_10867154.data != null ? t_10867154.data.length : 0)+0-1)-0].Field2, key_10867155))) {
          F.line = 55;
          result_10867157 = h_10870138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_10870138 = next_try_1005014(h_10870138, (t_10867154.data != null ? (t_10867154.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_10867157 = subInt(-1, h_10870138);
  } while (false);
  framePtr = F.prev;

  return result_10867157;

}
function HEX5BHEX5DHEX3D_10780311(t_10780317, key_10780318, val_10780319) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_10780317.data != null ? t_10780317.data.length : 0) == 0)) {
    if (!(is_power_of_two_955029(64))) {
    F.line = 127;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 128;
    t_10780317.counter = 0;
    F.line = 129;
    t_10780317.data = new Array(64); for (var i=0;i<64;++i) {t_10780317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    t_10780317.first = -1;
    F.line = 132;
    t_10780317.last = -1;
    }
    
    F.line = 57;
    var hc_10805601 = [0];
    F.line = 58;
    var index_10815620 = raw_get_10805621(t_10780317, key_10780318, hc_10805601, 0);
    if ((0 <= index_10815620)) {
    F.line = 59;
    t_10780317.data[chckIndx(index_10815620, 0, (t_10780317.data != null ? t_10780317.data.length : 0)+0-1)-0].Field3 = val_10780319;
    }
    else {
      if (((t_10780317.data != null ? t_10780317.data.length : 0) == 0)) {
      if (!(is_power_of_two_955029(64))) {
      F.line = 127;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 128;
      t_10780317.counter = 0;
      F.line = 129;
      t_10780317.data = new Array(64); for (var i=0;i<64;++i) {t_10780317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}      F.line = 131;
      t_10780317.first = -1;
      F.line = 132;
      t_10780317.last = -1;
      }
      
      if (must_rehash_10840601(t_10780317)) {
      F.line = 49;
      enlarge_10865180(t_10780317);
      F.line = 50;
      index_10815620 = raw_get_known_hc_10867149(t_10780317, key_10780318, hc_10805601[0]);
      }
      
      F.line = 51;
      index_10815620 = subInt(-1, index_10815620);
      F.line = 52;
      raw_insert_10866349(t_10780317, t_10780317, "data", key_10780318, val_10780319, hc_10805601[0], index_10815620);
      F.line = 60;
      t_10780317.counter = addInt(t_10780317.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function new_jarray_10730657() {
  var result_10730659 = null;

  var F={procname:"json.newJArray",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 214;
    result_10730659 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};
  framePtr = F.prev;

  return result_10730659;

}
function copy_11056457(p_11056459) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
        var Tmp6;
              var Tmp9;
        var Tmp11;
              var Tmp14;
              var Tmp15;

  var result_11056460 = null;

  var F={procname:"json.copy",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 550;
    switch (p_11056459.kind) {
    case 4:
      F.line = 552;
      var Tmp1 = p_11056459;
      if (ConstSet238[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'str\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11056460 = new_jstring_10711086(Tmp1.str);
      break;
    case 2:
      F.line = 554;
      var Tmp2 = p_11056459;
      if (ConstSet239[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11056460 = new_jint_10711168(Tmp2.num);
      break;
    case 3:
      F.line = 556;
      var Tmp3 = p_11056459;
      if (ConstSet240[Tmp3.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fnum\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11056460 = new_jfloat_10711185(Tmp3.fnum);
      break;
    case 1:
      F.line = 558;
      var Tmp4 = p_11056459;
      if (ConstSet241[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'bval\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      result_11056460 = new_jbool_10711202(Tmp4.bval);
      break;
    case 0:
      F.line = 560;
      result_11056460 = new_jnull_10711219();
      break;
    case 5:
      F.line = 562;
      result_11056460 = new_jobject_10711235();
      L5: do {
        F.line = 563;
        var key_11056473 = null;
        F.line = 563;
        var val_11056474 = null;
        F.line = 1646;
        var colontmp__12790939 = {data: null, counter: 0, first: 0, last: 0};
        F.line = 563;
        var Tmp6 = p_11056459;
        if (ConstSet242[Tmp6.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        nimCopy(colontmp__12790939, Tmp6.fields, NTI10711067);
        F.line = 1672;
        var l_12790940 = len_10890128(colontmp__12790939);
        if ((0 < colontmp__12790939.counter)) {
        F.line = 1251;
        var h_12790941 = colontmp__12790939.first;
        L7: do {
          F.line = 1252;
            L8: while (true) {
            if (!(0 <= h_12790941)) break L8;
              F.line = 1253;
              var nxt_12790943 = colontmp__12790939.data[chckIndx(h_12790941, 0, (colontmp__12790939.data != null ? colontmp__12790939.data.length : 0)+0-1)-0].Field1;
              if (is_filled_1004018(colontmp__12790939.data[chckIndx(h_12790941, 0, (colontmp__12790939.data != null ? colontmp__12790939.data.length : 0)+0-1)-0].Field0)) {
              F.line = 563;
              key_11056473 = colontmp__12790939.data[chckIndx(h_12790941, 0, (colontmp__12790939.data != null ? colontmp__12790939.data.length : 0)+0-1)-0].Field2;
              F.line = 1674;
              val_11056474 = colontmp__12790939.data[chckIndx(h_12790941, 0, (colontmp__12790939.data != null ? colontmp__12790939.data.length : 0)+0-1)-0].Field3;
              F.line = 564;
              var Tmp9 = result_11056460;
              if (ConstSet243[Tmp9.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
              HEX5BHEX5DHEX3D_10780311(Tmp9.fields, key_11056473, copy_11056457(val_11056474));
              if (!((len_10890128(colontmp__12790939) == l_12790940))) {
              F.line = 1675;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tables.nim(1675, 11) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              F.line = 1256;
              h_12790941 = nxt_12790943;
            }
        } while(false);
        }
        
      } while(false);
      break;
    case 6:
      F.line = 566;
      result_11056460 = new_jarray_10730657();
      L10: do {
        F.line = 567;
        var i_11056602 = null;
        F.line = 182;
        var colontmp__12790945 = null;
        F.line = 567;
        var Tmp11 = p_11056459;
        if (ConstSet244[Tmp11.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
        colontmp__12790945 = Tmp11.elems;
        F.line = 184;
        var i_12790947 = 0;
        F.line = 185;
        var l_12790948 = (colontmp__12790945 != null ? colontmp__12790945.length : 0);
        L12: do {
          F.line = 186;
            L13: while (true) {
            if (!(i_12790947 < l_12790948)) break L13;
              F.line = 567;
              i_11056602 = colontmp__12790945[chckIndx(i_12790947, 0, (colontmp__12790945 != null ? colontmp__12790945.length : 0)+0-1)-0];
              F.line = 568;
              var Tmp14 = result_11056460;
              if (ConstSet245[Tmp14.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
              if ((Tmp15 = Tmp14.elems, Tmp15) != null) { Tmp15.push(copy_11056457(i_11056602)); } else { Tmp15 = [copy_11056457(i_11056602)]; };
              F.line = 188;
              i_12790947 = addInt(i_12790947, 1);
              if (!(((colontmp__12790945 != null ? colontmp__12790945.length : 0) == l_12790948))) {
              F.line = 189;
              failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
      break;
    }
  framePtr = F.prev;

  return result_11056460;

}
function init_from_json_11225879(dst_11225882, dst_11225882_Idx, json_node_11225883, json_path_11225885, json_path_11225885_Idx) {
  var F={procname:"json.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1001;
    dst_11225882[dst_11225882_Idx] = copy_11056457(json_node_11225883);
  framePtr = F.prev;

  
}
function HEX5BHEX5D_10940569(node_10940571, index_10940572) {
    var Tmp1;
    var Tmp2;

  var result_10940573 = null;

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (!(!((node_10940571 == null)))) {
    F.line = 474;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(474, 9) `not isNil(node)` "));
    }
    
    if (!((node_10940571.kind == 6))) {
    F.line = 475;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(475, 9) `node.kind == JArray` "));
    }
    
    F.line = 476;
    var Tmp1 = node_10940571;
    if (ConstSet246[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    result_10940573 = (Tmp2 = Tmp1.elems, Tmp2)[chckIndx(index_10940572, 0, (Tmp2 != null ? Tmp2.length : 0)+0-1)-0];
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10940573;

}
function init_from_json_12495201(dst_12495206, dst_12495206_Idx, json_node_12495207, json_path_12495208, json_path_12495208_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10880491(json_node_12495207, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12495208[json_path_12495208_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet234[json_node_12495207.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12495210_12510019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11240009(ConstSet235), nimCopy(null, json_path_12495208[json_path_12495208_Idx], NTI112), reprEnum(json_node_12495207.kind, NTI10711041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12495210_12510019, NTI112), parent: null, m_type: NTI10526039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1020;
    if (dst_12495206[dst_12495206_Idx] === null) dst_12495206[dst_12495206_Idx] = [];
               if (dst_12495206[dst_12495206_Idx].length < (Tmp1 = chckRange(len_10920341(json_node_12495207), 0, 2147483647), Tmp1)) { for (var i=dst_12495206[dst_12495206_Idx].length;i<Tmp1;++i) dst_12495206[dst_12495206_Idx].push(null); }
               else { dst_12495206[dst_12495206_Idx].length = Tmp1; };
    F.line = 1021;
    var orignal_json_path_len_12515010 = (json_path_12495208[json_path_12495208_Idx] != null ? json_path_12495208[json_path_12495208_Idx].length : 0);
    L2: do {
      F.line = 1022;
      var i_12515019 = 0;
      F.line = 104;
      var colontmp__12790935 = 0;
      F.line = 1022;
      colontmp__12790935 = len_10920341(json_node_12495207);
      F.line = 106;
      var i_12790936 = 0;
      L3: do {
        F.line = 107;
          L4: while (true) {
          if (!(i_12790936 < colontmp__12790935)) break L4;
            F.line = 1022;
            i_12515019 = i_12790936;
            F.line = 1023;
            if (json_path_12495208[json_path_12495208_Idx] != null) { addChar(json_path_12495208[json_path_12495208_Idx], 91); } else { json_path_12495208[json_path_12495208_Idx] = [91]; };
            F.line = 1024;
            add_int_325201(json_path_12495208, json_path_12495208_Idx, i_12515019);
            F.line = 1025;
            if (json_path_12495208[json_path_12495208_Idx] != null) { addChar(json_path_12495208[json_path_12495208_Idx], 93); } else { json_path_12495208[json_path_12495208_Idx] = [93]; };
            F.line = 1026;
            init_from_json_11225879(dst_12495206[dst_12495206_Idx], chckIndx(i_12515019, 0, (dst_12495206[dst_12495206_Idx] != null ? dst_12495206[dst_12495206_Idx].length : 0)+0-1)-0, HEX5BHEX5D_10940569(json_node_12495207, i_12515019), json_path_12495208, json_path_12495208_Idx);
            F.line = 1027;
            (json_path_12495208[json_path_12495208_Idx] == null ? json_path_12495208[json_path_12495208_Idx] = mnewString(chckRange(orignal_json_path_len_12515010, 0, 2147483647)) : json_path_12495208[json_path_12495208_Idx].length = chckRange(orignal_json_path_len_12515010, 0, 2147483647));
            F.line = 109;
            i_12790936 = addInt(i_12790936, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function get_or_default_11010192(t_11010197, key_11010198) {
  var result_11010199 = null;

  var F={procname:"getOrDefault.getOrDefault",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 142;
    var hcHEX60gensym11010200_11015001 = [0];
    F.line = 143;
    var indexHEX60gensym11010201_11015010 = raw_get_10905157(t_11010197, key_11010198, hcHEX60gensym11010200_11015001, 0);
    if ((0 <= indexHEX60gensym11010201_11015010)) {
    F.line = 144;
    result_11010199 = t_11010197.data[chckIndx(indexHEX60gensym11010201_11015010, 0, (t_11010197.data != null ? t_11010197.data.length : 0)+0-1)-0].Field3;
    }
    
  framePtr = F.prev;

  return result_11010199;

}
function get_or_default_11030016(node_11030018, key_11030019) {
      var Tmp1;
    var Tmp2;

  var result_11030020 = null;

  var F={procname:"json.getOrDefault",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
      if (!!((node_11030018 == null))) Tmp1 = false; else {        Tmp1 = (node_11030018.kind == 5);      }    if (Tmp1) {
    F.line = 524;
    var Tmp2 = node_11030018;
    if (ConstSet247[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    result_11030020 = get_or_default_11010192(Tmp2.fields, key_11030019);
    }
    
  framePtr = F.prev;

  return result_11030020;

}
function new_12540008() {
  var result_12540012 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 850;
    var r_12540202 = null;
    F.line = 851;
    r_12540202 = {cubeprice: 0};
    F.line = 852;
    result_12540012 = r_12540202;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12540012;

}
function init_from_json_12550201(dst_12550205, dst_12550205_Idx, json_node_12550206, json_path_12550207, json_path_12550207_Idx) {
    var Tmp1;

  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10880491(json_node_12550206, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12550207[json_path_12550207_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet250[json_node_12550206.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12550209_12565019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11240009(ConstSet251), nimCopy(null, json_path_12550207[json_path_12550207_Idx], NTI112), reprEnum(json_node_12550206.kind, NTI10711041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12550209_12565019, NTI112), parent: null, m_type: NTI10526039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    F.line = 1005;
    var Tmp1 = json_node_12550206;
    if (ConstSet252[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'num\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    dst_12550205[dst_12550205_Idx] = chckRange(Tmp1.num, -2147483648, 2147483647);
  framePtr = F.prev;

  
}
function init_from_json_12540237(dst_12540241, json_node_12540242, json_path_12540243, json_path_12540243_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_12540245 = (json_path_12540243[json_path_12540243_Idx] != null ? json_path_12540243[json_path_12540243_Idx].length : 0);
    F.line = 1114;
    if (json_path_12540243[json_path_12540243_Idx] != null) { json_path_12540243[json_path_12540243_Idx] = (json_path_12540243[json_path_12540243_Idx]).concat(makeNimstrLit(".cubeprice")); } else { json_path_12540243[json_path_12540243_Idx] = makeNimstrLit(".cubeprice"); };
    F.line = 1124;
    init_from_json_12550201(dst_12540241, "cubeprice", get_or_default_11030016(json_node_12540242, makeNimstrLit("cubeprice")), json_path_12540243, json_path_12540243_Idx);
    F.line = 1125;
    (json_path_12540243[json_path_12540243_Idx] == null ? json_path_12540243[json_path_12540243_Idx] = mnewString(chckRange(original_json_path_len_12540245, 0, 2147483647)) : json_path_12540243[json_path_12540243_Idx].length = chckRange(original_json_path_len_12540245, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_12520202(dst_12520207, dst_12520207_Idx, json_node_12520208, json_path_12520209, json_path_12520209_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10880491(json_node_12520208, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12520209[json_path_12520209_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet248[json_node_12520208.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12520211_12535019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11240009(ConstSet249), nimCopy(null, json_path_12520209[json_path_12520209_Idx], NTI112), reprEnum(json_node_12520208.kind, NTI10711041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12520211_12535019, NTI112), parent: null, m_type: NTI10526039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_12520208.kind == 0)) {
    F.line = 1062;
    dst_12520207[dst_12520207_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_12520207[dst_12520207_Idx] = new_12540008();
      F.line = 1065;
      init_from_json_12540237(dst_12520207[dst_12520207_Idx], json_node_12520208, json_path_12520209, json_path_12520209_Idx);
    }
    
  framePtr = F.prev;

  
}
function init_from_json_12485252(dst_12485256, json_node_12485257, json_path_12485258, json_path_12485258_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1182;
    var original_json_path_len_12485261 = (json_path_12485258[json_path_12485258_Idx] != null ? json_path_12485258[json_path_12485258_Idx].length : 0);
    F.line = 1114;
    if (json_path_12485258[json_path_12485258_Idx] != null) { json_path_12485258[json_path_12485258_Idx] = (json_path_12485258[json_path_12485258_Idx]).concat(makeNimstrLit(".children")); } else { json_path_12485258[json_path_12485258_Idx] = makeNimstrLit(".children"); };
    F.line = 1124;
    init_from_json_12495201(dst_12485256, "children", get_or_default_11030016(json_node_12485257, makeNimstrLit("children")), json_path_12485258, json_path_12485258_Idx);
    F.line = 1125;
    (json_path_12485258[json_path_12485258_Idx] == null ? json_path_12485258[json_path_12485258_Idx] = mnewString(chckRange(original_json_path_len_12485261, 0, 2147483647)) : json_path_12485258[json_path_12485258_Idx].length = chckRange(original_json_path_len_12485261, 0, 2147483647));
    F.line = 1114;
    if (json_path_12485258[json_path_12485258_Idx] != null) { json_path_12485258[json_path_12485258_Idx] = (json_path_12485258[json_path_12485258_Idx]).concat(makeNimstrLit(".settings")); } else { json_path_12485258[json_path_12485258_Idx] = makeNimstrLit(".settings"); };
    F.line = 1124;
    init_from_json_12520202(dst_12485256, "settings", get_or_default_11030016(json_node_12485257, makeNimstrLit("settings")), json_path_12485258, json_path_12485258_Idx);
    F.line = 1125;
    (json_path_12485258[json_path_12485258_Idx] == null ? json_path_12485258[json_path_12485258_Idx] = mnewString(chckRange(original_json_path_len_12485261, 0, 2147483647)) : json_path_12485258[json_path_12485258_Idx].length = chckRange(original_json_path_len_12485261, 0, 2147483647));
  framePtr = F.prev;

  
}
function init_from_json_12465021(dst_12465026, dst_12465026_Idx, json_node_12465027, json_path_12465028, json_path_12465028_Idx) {
  var F={procname:"initFromJson.initFromJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (HEX3DHEX3D_10880491(json_node_12465027, null)) {
    F.line = 946;
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(json_path_12465028[json_path_12465028_Idx] || []), parent: null, m_type: NTI6245, name: null, trace: null, up: null}, "KeyError");
    }
    else {
    if (!((ConstSet227[json_node_12465027.kind] != undefined))) {
    F.line = 948;
    var msgHEX60gensym12465030_12480019 = nsuFormatOpenArray(makeNimstrLit("Incorrect JSON kind. Wanted \'$1\' in \'$2\' but got \'$3\'."), [HEX24_11240009(ConstSet233), nimCopy(null, json_path_12465028[json_path_12465028_Idx], NTI112), reprEnum(json_node_12465027.kind, NTI10711041)]);
    F.line = 953;
    raiseException({message: nimCopy(null, msgHEX60gensym12465030_12480019, NTI112), parent: null, m_type: NTI10526039, name: null, trace: null, up: null}, "JsonKindError");
    }
    }
    if ((json_node_12465027.kind == 0)) {
    F.line = 1062;
    dst_12465026[dst_12465026_Idx] = null;
    }
    else {
      F.line = 1064;
      dst_12465026[dst_12465026_Idx] = new_12485008();
      F.line = 1065;
      init_from_json_12485252(dst_12465026[dst_12465026_Idx], json_node_12465027, json_path_12465028, json_path_12465028_Idx);
    }
    
  framePtr = F.prev;

  
}
function to_12465013(node_12465017) {
  var result_12465019 = [null];

  var F={procname:"to.to",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 1230;
    var json_path_12465020 = [[]];
    F.line = 1231;
    init_from_json_12465021(result_12465019, 0, node_12465017, json_path_12465020, 0);
  framePtr = F.prev;

  return result_12465019[0];

}
function get_var_type_11185050(x_11185052) {
  var result_11185053 = 0;

  var F={procname:"json.getVarType",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 860;
    result_11185053 = 0;
    F.line = 863;
    switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_11185052)))) {
    case "[object Array]":
      F.line = 864;
      result_11185053 = 6;
      break BeforeRet;
      break;
    case "[object Object]":
      F.line = 865;
      result_11185053 = 5;
      break BeforeRet;
      break;
    case "[object Number]":
      if ((x_11185052 % 1.0000000000000000e+00 == 0.0)) {
      F.line = 868;
      result_11185053 = 2;
      break BeforeRet;
      }
      else {
        F.line = 870;
        result_11185053 = 3;
        break BeforeRet;
      }
      
      break;
    case "[object Boolean]":
      F.line = 871;
      result_11185053 = 1;
      break BeforeRet;
      break;
    case "[object Null]":
      F.line = 872;
      result_11185053 = 0;
      break BeforeRet;
      break;
    case "[object String]":
      F.line = 873;
      result_11185053 = 4;
      break BeforeRet;
      break;
    default: 
      if (true) {
      F.line = 874;
      failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(874, 18) `false` "));
      }
      
      break;
    }
  } while (false);
  framePtr = F.prev;

  return result_11185053;

}
function len_11195214(x_11195216) {
  var result_11195217 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_11185050(x_11195216) == 6))) {
    F.line = 877;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(877, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 878;
          result_11195217 = x_11195216.length;
    
  framePtr = F.prev;

  return result_11195217;

}
function add_10760020(father_10760022, child_10760023) {
    var Tmp1;
    var Tmp2;

  var F={procname:"json.add",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((father_10760022.kind == 6))) {
    F.line = 272;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(272, 10) `father.kind == JArray` "));
    }
    
    F.line = 273;
    var Tmp1 = father_10760022;
    if (ConstSet253[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_10760023); } else { Tmp2 = [child_10760023]; };
  framePtr = F.prev;

  
}
function HEX5BHEX5D_11215214(x_11215216, y_11215217) {
  var result_11215218 = {};

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_11185050(x_11215216) == 6))) {
    F.line = 889;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(889, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 890;
          result_11215218 = x_11215216[y_11215217];
    
  framePtr = F.prev;

  return result_11215218;

}
function HEX5BHEX5DHEX3D_10871214(obj_10871216, key_10871217, val_10871218) {
    var Tmp1;

  var F={procname:"json.[]=",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((obj_10871216.kind == 5))) {
    F.line = 346;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(346, 9) `obj.kind == JObject` "));
    }
    
    F.line = 347;
    var Tmp1 = obj_10871216;
    if (ConstSet254[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    HEX5BHEX5DHEX3D_10780311(Tmp1.fields, key_10871217, val_10871218);
  framePtr = F.prev;

  
}
function convert_object_11225214(x_11225216) {
  var result_11225217 = null;

  var F={procname:"json.convertObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 895;
    switch (get_var_type_11185050(x_11225216)) {
    case 6:
      F.line = 897;
      result_11225217 = new_jarray_10730657();
      L1: do {
        F.line = 898;
        var i_11225225 = 0;
        F.line = 104;
        var colontmp__12790966 = 0;
        F.line = 898;
        colontmp__12790966 = len_11195214(x_11225216);
        F.line = 106;
        var i_12790967 = 0;
        L2: do {
          F.line = 107;
            L3: while (true) {
            if (!(i_12790967 < colontmp__12790966)) break L3;
              F.line = 898;
              i_11225225 = i_12790967;
              F.line = 899;
              add_10760020(result_11225217, convert_object_11225214(HEX5BHEX5D_11215214(x_11225216, i_11225225)));
              F.line = 109;
              i_12790967 = addInt(i_12790967, 1);
            }
        } while(false);
      } while(false);
      break;
    case 5:
      F.line = 901;
      result_11225217 = new_jobject_10711235();
      F.line = 902;
      for (var property in x_11225216) {
        if (x_11225216.hasOwnProperty(property)) {
      
      F.line = 905;
      var nim_property_11225227 = null;
      F.line = 906;
      var nim_value_11225228 = {};
      F.line = 907;
      nim_property_11225227 = property; nim_value_11225228 = x_11225216[property];
      F.line = 908;
      HEX5BHEX5DHEX3D_10871214(result_11225217, cstrToNimstr(nim_property_11225227), convert_object_11225214(nim_value_11225228));
      F.line = 909;
      }}
      break;
    case 2:
      F.line = 911;
      result_11225217 = new_jint_10711168(x_11225216);
      break;
    case 3:
      F.line = 913;
      result_11225217 = new_jfloat_10711185(x_11225216);
      break;
    case 4:
      F.line = 915;
      result_11225217 = new_jstring_10711086(cstrToNimstr(x_11225216));
      break;
    case 1:
      F.line = 917;
      result_11225217 = new_jbool_10711202(x_11225216);
      break;
    case 0:
      F.line = 919;
      result_11225217 = new_jnull_10711219();
      break;
    }
  framePtr = F.prev;

  return result_11225217;

}
function parse_json_11225257(buffer_11225259) {
  var result_11225260 = null;

  var F={procname:"json.parseJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 925;
    result_11225260 = convert_object_11225214(JSON.parse(toJSStr(buffer_11225259)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11225260;

}
function update_12570521(t_12570525, init_val_12570526, set_val_12570528, refresh_list_12570529) {
function set_12570533(new_val_12570535, changed_path_12570536) {
  var F={procname:"update.set",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 859;
    t_12570525.data = new_val_12570535;
    if (!((set_val_12570528 == null))) {
    F.line = 861;
    set_val_12570528(new_val_12570535, changed_path_12570536);
    }
    else {
      F.line = 863;
    upd_12570530({paths: [nimCopy(null, changed_path_12570536, NTI10221029)]});
    }
    
  framePtr = F.prev;

  
}
    function upd_12570530(refresh_list_12570532) {
      var F={procname:"update.upd",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        L1: do {
          F.line = 866;
          var match_12580214 = null;
          F.line = 184;
          var i_12790976 = 0;
          F.line = 185;
          var l_12790977 = (t_12570525.matches != null ? t_12570525.matches.length : 0);
          L2: do {
            F.line = 186;
              L3: while (true) {
              if (!(i_12790976 < l_12790977)) break L3;
                F.line = 866;
                match_12580214 = t_12570525.matches[chckIndx(i_12790976, 0, (t_12570525.matches != null ? t_12570525.matches.length : 0)+0-1)-0];
                F.line = 867;
                match_12580214.update(t_12570525.data, set_12570533, refresh_list_12570532);
                F.line = 188;
                i_12790976 = addInt(i_12790976, 1);
                if (!(((t_12570525.matches != null ? t_12570525.matches.length : 0) == l_12790977))) {
                F.line = 189;
                failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/.choosenim/toolchains/nim-1.2.0/lib/system/iterators.nim(189, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while(false);
        } while(false);
      framePtr = F.prev;

      
    }

  var F={procname:"update.update",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 855;
    t_12570525.data = init_val_12570526;
    F.line = 869;
    upd_12570530(refresh_list_12570529);
  framePtr = F.prev;

  
}
function open_12454129(c_12454135) {
    function HEX3Aanonymous_12454137(e_12454139) {
        function HEX3Aanonymous_12460009() {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 36;
            var json_12465010 = (reader_12460008.result);
            F.line = 37;
            c_12454135.data.doc = to_12465013(parse_json_11225257(cstrToNimstr(json_12465010)));
            F.line = 38;
            update_12570521(c_12454135, c_12454135.data, null, refresh_all_10260531);
          framePtr = F.prev;

          
        }

      var F={procname:"open.:anonymous",prev:framePtr,filename:"app.nim",line:0};
      framePtr = F;
      BeforeRet: do {
        F.line = 31;
        var file_12455004 = (input_12454136).files[0];
        if ((file_12455004 == null)) {
        F.line = 32;
        break BeforeRet;
        }
        
        F.line = 34;
        var reader_12460008 = (new window.FileReader());
        F.line = 35;
        reader_12460008.onload = HEX3Aanonymous_12460009;
        reader_12460008.readAsText((file_12455004));
      } while (false);
      framePtr = F.prev;

      
    }

  var F={procname:"app.open",prev:framePtr,filename:"app.nim",line:0};
  framePtr = F;
    F.line = 27;
    var input_12454136 = document.createElement("input");
    F.line = 28;
    input_12454136.style.display = "none";
    F.line = 29;
    input_12454136.setAttribute("type", "file");
    F.line = 30;
    input_12454136.addEventListener("change", HEX3Aanonymous_12454137, false);
    F.line = 43;
    document.body.appendChild(input_12454136);
    F.line = 44;
    input_12454136.click();
    F.line = 45;
    document.body.removeChild(input_12454136);
  framePtr = F.prev;

  
}
function new_12710207() {
  var result_12710211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12710401 = null;
    F.line = 851;
    r_12710401 = {children: null, settings: null};
    F.line = 852;
    result_12710211 = r_12710401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12710211;

}
function sub_12770912(ts_12770917, val_12770919, val_12770919_Idx, set_val_12770921, update_12770922) {
    function HEX3Aanonymous_12770935(new_value_12770937, changed_path_12770938) {
      var F={procname:"sub.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 289;
        ts_12770917.set(val_12770919, val_12770919_Idx, new_value_12770937);
        F.line = 290;
        var new_path_12770947 = HEX26_12235286(ts_12770917.id, changed_path_12770938);
        if (!((set_val_12770921 == null))) {
        F.line = 292;
        set_val_12770921(val_12770919[val_12770919_Idx], new_path_12770947);
        }
        else {
        if (!((update_12770922 == null))) {
        F.line = 294;
        console.log("Update %s", toJSStr(HEX24_10260579(new_path_12770947)));
        F.line = 295;
        update_12770922({paths: [nimCopy(null, new_path_12770947, NTI12235293)]});
        }
        }
      framePtr = F.prev;

      
    }

  var result_12770924 = null;

  var F={procname:"sub.sub",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((set_val_12770921 == null) && (update_12770922 == null))) {
    F.line = 287;
    result_12770924 = null;
    break BeforeRet;
    }
    
    F.line = 288;
    result_12770924 = HEX3Aanonymous_12770935;
  } while (false);
  framePtr = F.prev;

  return result_12770924;

}
function as_interface_12770845(comp_12770850, convert_12770852) {
    function HEX3Aanonymous_12770859() {
      var result_12770861 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 927;
        result_12770861 = comp_12770850.node();
      framePtr = F.prev;

      return result_12770861;

    }
    function HEX3Aanonymous_12770876(init_val_12770878, set_val_12770883, refresh_list_12770884) {
      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 929;
        var val_12770885 = [init_val_12770878];
        F.line = 930;
        comp_12770850.update(convert_12770852.get(val_12770885[0]), sub_12770912(convert_12770852, val_12770885, 0, set_val_12770883, null), walk_10225019(refresh_list_12770884, convert_12770852.id));
      framePtr = F.prev;

      
    }
    function HEX3Aanonymous_12771028() {
      var result_12771034 = null;

      var F={procname:"asInterface.:anonymous",prev:framePtr,filename:"nclearseam.nim",line:0};
      framePtr = F;
        F.line = 932;
        result_12771034 = as_interface_12770845(comp_12770850.clone(), convert_12770852);
      framePtr = F.prev;

      return result_12771034;

    }

  var result_12770854 = null;

  var F={procname:"asInterface.asInterface",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 925;
    result_12770854 = {node: HEX3Aanonymous_12770859, update: HEX3Aanonymous_12770876, clone: HEX3Aanonymous_12771028};
  framePtr = F.prev;

  return result_12770854;

}
function mount_12760873(c_12760879, comp_12760881, convert_12760883) {
  var F={procname:"mount.mount",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    if (!(!((comp_12760881 == null)))) {
    F.line = 536;
    failed_assert_impl_102680(makeNimstrLit("/var/home/mildred/Projects/nclearseam/src/nclearseam.nim(536, 9) `\x0Anot (comp == nil)` mounted component cannot be nil"));
    }
    
    F.line = 537;
    c_12760879.mount = as_interface_12770845(comp_12760881, convert_12760883);
  framePtr = F.prev;

  
}
function HEX7C_12750436(p1_12750443, p2_12750446) {
    function HEX3Aanonymous_12750450(x_12750452) {
      var result_12750453 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_12750453 = p2_12750446(p1_12750443(x_12750452));
      framePtr = F.prev;

      return result_12750453;

    }

  var result_12750449 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_12750449 = HEX3Aanonymous_12750450;
  framePtr = F.prev;

  return result_12750449;

}
function HEX7C_12725226(p1_12725233, p2_12725236) {
    function HEX3Aanonymous_12725240(x_12725242) {
      var result_12725243 = null;

      var F={procname:"|.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 15;
        result_12725243 = p2_12725236(p1_12725233(x_12725242));
      framePtr = F.prev;

      return result_12725243;

    }

  var result_12725239 = null;

  var F={procname:"|.|",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 15;
    result_12725239 = HEX3Aanonymous_12725240;
  framePtr = F.prev;

  return result_12725239;

}
function access_12714477(c_12714482) {
    function HEX3Aanonymous_12714492(data_12714494) {
      var result_12714495 = null;

      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 194;
        result_12714495 = data_12714494;
      framePtr = F.prev;

      return result_12714495;

    }
    function HEX3Aanonymous_12714509(data_12714512, data_12714512_Idx, value_12714513) {
      var F={procname:"access.:anonymous",prev:framePtr,filename:"util.nim",line:0};
      framePtr = F;
        F.line = 195;
        data_12714512[data_12714512_Idx] = value_12714513;
      framePtr = F.prev;

      
    }

  var result_12714484 = null;

  var F={procname:"access.access",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 193;
    result_12714484 = {get: HEX3Aanonymous_12714492, set: HEX3Aanonymous_12714509, id: []};
  framePtr = F.prev;

  return result_12714484;

}
function new_12750207() {
  var result_12750211 = null;

  var F={procname:"new.new",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 848;
    var r_12750401 = null;
    F.line = 851;
    r_12750401 = {cubeprice: 0};
    F.line = 852;
    result_12750211 = r_12750401;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12750211;

}
function HEX3Aanonymous_12600150(node_12600153) {
    function HEX3Aanonymous_12600160(c_12600167) {
        function HEX3Aanonymous_12610001(arg0_12610005) {
          var result_12610013 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 151;
            var arg1_12610014 = arg0_12610005.times;
            F.line = 65;
            result_12610013 = arg1_12610014;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12610013;

        }
        function HEX3Aanonymous_12701522(event_12701524) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 51;
            open_12454129(c_12600167);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12704424(event_12704426) {
          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 53;
            c_12600167.data.times = addInt(c_12600167.data.times, 1);
            F.line = 54;
            console.log("button clicked", c_12600167.data.times);
            F.line = 55;
            update_12570521(c_12600167, c_12600167.data, null, null);
          framePtr = F.prev;

          
        }
        function HEX3Aanonymous_12710001(arg0_12710005) {
          var result_12710018 = 0;

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
          framePtr = F;
          BeforeRet: do {
            F.line = 151;
            var arg1_12710019 = arg0_12710005.doc;
            if ((arg1_12710019 == null)) {
            F.line = 151;
            arg1_12710019 = new_12710207();
            }
            
            F.line = 151;
            var arg2_12710421 = nimCopy(null, arg1_12710019.children, NTI12454024);
            F.line = 151;
            var arg3_12710606 = (arg2_12710421 != null ? arg2_12710421.length : 0);
            F.line = 65;
            result_12710018 = arg3_12710606;
            break BeforeRet;
          } while (false);
          framePtr = F.prev;

          return result_12710018;

        }
        function HEX3Aanonymous_12713441(s_12713448) {
            function HEX3Aanonymous_12725001(arg0_12725003) {
              var result_12725009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 58;
                var arg1_12725010 = arg0_12725003.doc;
                if ((arg1_12725010 == null)) {
                F.line = 58;
                arg1_12725010 = new_12710207();
                }
                
                F.line = 65;
                result_12725009 = arg1_12725010;
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_12725009;

            }
            function HEX3Aanonymous_12725285(dataHEX60gensym12714587_12725288, dataHEX60gensym12714587_12725288_Idx, val3HEX60gensym12714588_12730007) {
                function HEX3Aanonymous_12735001(arg0_12735003, value_12735009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                  framePtr = F;
                    F.line = 58;
                    var arg1_12735010 = arg0_12735003.doc;
                    if ((arg1_12735010 == null)) {
                    F.line = 58;
                    arg1_12735010 = new_12710207();
                    }
                    
                    F.line = 118;
                    arg1_12735010 = value_12735009;
                    F.line = 130;
                    arg0_12735003.doc = arg1_12735010;
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 178;
                var val2HEX60gensym12714589_12730008 = access_12714477(s_12713448).get(dataHEX60gensym12714587_12725288[dataHEX60gensym12714587_12725288_Idx]);
                F.line = 179;
                var set2HEX60gensym12714590_12735224 = HEX3Aanonymous_12735001;
                F.line = 180;
                set2HEX60gensym12714590_12735224(val2HEX60gensym12714589_12730008, val3HEX60gensym12714588_12730007);
                F.line = 181;
                access_12714477(s_12713448).set(dataHEX60gensym12714587_12725288, dataHEX60gensym12714587_12725288_Idx, val2HEX60gensym12714589_12730008);
              framePtr = F.prev;

              
            }
            function HEX3Aanonymous_12750001(arg0_12750003) {
              var result_12750009 = null;

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
              framePtr = F;
              BeforeRet: do {
                F.line = 58;
                var arg1_12750010 = arg0_12750003.settings;
                if ((arg1_12750010 == null)) {
                F.line = 58;
                arg1_12750010 = new_12750207();
                }
                
                F.line = 65;
                result_12750009 = arg1_12750010;
                break BeforeRet;
              } while (false);
              framePtr = F.prev;

              return result_12750009;

            }
            function HEX3Aanonymous_12750495(dataHEX60gensym12735280_12750498, dataHEX60gensym12735280_12750498_Idx, val3HEX60gensym12735281_12755007) {
                function HEX3Aanonymous_12760001(arg0_12760003, value_12760009) {
                  var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
                  framePtr = F;
                    F.line = 58;
                    var arg1_12760010 = arg0_12760003.settings;
                    if ((arg1_12760010 == null)) {
                    F.line = 58;
                    arg1_12760010 = new_12750207();
                    }
                    
                    F.line = 118;
                    arg1_12760010 = value_12760009;
                    F.line = 130;
                    arg0_12760003.settings = arg1_12760010;
                  framePtr = F.prev;

                  
                }

              var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"util.nim",line:0};
              framePtr = F;
                F.line = 178;
                var val2HEX60gensym12735282_12755008 = ({get: HEX7C_12725226(access_12714477(s_12713448).get, HEX3Aanonymous_12725001), set: HEX3Aanonymous_12725285, id: HEX26_12235286(access_12714477(s_12713448).id, [makeNimstrLit("doc")])}).get(dataHEX60gensym12735280_12750498[dataHEX60gensym12735280_12750498_Idx]);
                F.line = 179;
                var set2HEX60gensym12735283_12760224 = HEX3Aanonymous_12760001;
                F.line = 180;
                set2HEX60gensym12735283_12760224(val2HEX60gensym12735282_12755008, val3HEX60gensym12735281_12755007);
                F.line = 181;
                ({get: HEX7C_12725226(access_12714477(s_12713448).get, HEX3Aanonymous_12725001), set: HEX3Aanonymous_12725285, id: HEX26_12235286(access_12714477(s_12713448).id, [makeNimstrLit("doc")])}).set(dataHEX60gensym12735280_12750498, dataHEX60gensym12735280_12750498_Idx, val2HEX60gensym12735282_12755008);
              framePtr = F.prev;

              
            }

          var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
          framePtr = F;
            F.line = 58;
            mount_12760873(s_12713448, settings_component_12211185[0], ({get: HEX7C_12750436(({get: HEX7C_12725226(access_12714477(s_12713448).get, HEX3Aanonymous_12725001), set: HEX3Aanonymous_12725285, id: HEX26_12235286(access_12714477(s_12713448).id, [makeNimstrLit("doc")])}).get, HEX3Aanonymous_12750001), set: HEX3Aanonymous_12750495, id: HEX26_12235286(({get: HEX7C_12725226(access_12714477(s_12713448).get, HEX3Aanonymous_12725001), set: HEX3Aanonymous_12725285, id: HEX26_12235286(access_12714477(s_12713448).id, [makeNimstrLit("doc")])}).id, [makeNimstrLit("settings")])}));
          framePtr = F.prev;

          
        }

      var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"app.nim",line:0};
      framePtr = F;
        F.line = 49;
        refresh_12647131(match_12612391(c_12600167, makeNimstrLit(".times"), HEX3Aanonymous_12610001, eql_12237029, null), set_text_12402408());
        F.line = 50;
        add_event_listener_12701765(match_12649480(c_12600167, makeNimstrLit("button.ouvrir"), null), makeNimstrLit("click"), HEX3Aanonymous_12701522, false);
        F.line = 52;
        add_event_listener_12701765(match_12649480(c_12600167, makeNimstrLit("button.click"), null), makeNimstrLit("click"), HEX3Aanonymous_12704424, false);
        F.line = 56;
        refresh_12647131(match_12612391(c_12600167, makeNimstrLit(".num-children"), HEX3Aanonymous_12710001, eql_12237029, null), set_text_12402408());
        match_12649480(c_12600167, makeNimstrLit(".settings"), HEX3Aanonymous_12713441);
      framePtr = F.prev;

      
    }

  var result_12600158 = null;

  var F={procname:"app.:anonymous",prev:framePtr,filename:"app.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 48;
    result_12600158 = compile_12774097(node_12600153, HEX3Aanonymous_12600160);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12600158;

}
declare_12790599(components_10263124[0], app_12454100, 0, fetch_template_12210001(makeNimstrLit("app.html"), makeNimstrLit("template"), true), HEX3Aanonymous_12600150);
function map_10270058(s_10270063, op_10270066) {
  var result_10270068 = null;

  var F={procname:"map.map",prev:framePtr,filename:"sequtils.nim",line:0};
  framePtr = F;
    F.line = 374;
    result_10270068 = new Array(chckRange((s_10270063 != null ? s_10270063.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_10270063 != null ? s_10270063.length : 0), 0, 2147483647);++i) {result_10270068[i]=null;}    L1: do {
      F.line = 375;
      var i_10270091 = 0;
      F.line = 104;
      var colontmp__12796017 = 0;
      F.line = 375;
      colontmp__12796017 = (s_10270063 != null ? s_10270063.length : 0);
      F.line = 106;
      var i_12796018 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_12796018 < colontmp__12796017)) break L3;
            F.line = 375;
            i_10270091 = i_12796018;
            F.line = 376;
            result_10270068[chckIndx(i_10270091, 0, (result_10270068 != null ? result_10270068.length : 0)+0-1)-0] = op_10270066(s_10270063[chckIndx(i_10270091, 0, (s_10270063 != null ? s_10270063.length : 0)+0-1)-0]);
            F.line = 109;
            i_12796018 = addInt(i_12796018, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10270068;

}
async function init_10270001(registry_10270003) {
    function HEX3Aanonymous_10270020(p_10270022) {
      var result_10270027 = null;

      var F={procname:"init.:anonymous",prev:framePtr,filename:"registry.nim",line:0};
      framePtr = F;
        F.line = 35;
        result_10270027 = p_10270022();
      framePtr = F.prev;

      return result_10270027;

    }

  var result_10270008 = null;

  var F={procname:"registry.init",prev:framePtr,filename:"registry.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 35;
    (await (Promise.all((map_10270058(registry_10270003.Field0, HEX3Aanonymous_10270020)))));
    F.line = 131;
    result_10270008 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10270008;

}
function attach_12795517(t_12795521, target_12795522, anchor_12795523, data_12795524, set_12795526) {
  var F={procname:"attach.attach",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
    F.line = 875;
    update_12570521(t_12795521, data_12795524, set_12795526, refresh_all_10260531);
    F.line = 876;
    target_12795522.insertBefore(t_12795521.node, anchor_12795523);
  framePtr = F.prev;

  
}
function clone_12795106(comp_12795110) {
  var result_12795112 = null;

  var F={procname:"clone.clone",prev:framePtr,filename:"nclearseam.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 845;
    result_12795112 = compile_12780751({config: comp_12795110.config, m_type: NTI12454039, cmatches: null}, comp_12795110.original_node);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12795112;

}
async function main_12795001() {
  var result_12795007 = null;

  var F={procname:"calcul_meubles.main",prev:framePtr,filename:"calcul_meubles.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 12;
    (await init_10270001(components_10263124[0]));
    F.line = 13;
    attach_12795517(clone_12795106(app_12454100[0]), document.body, null, {times: 0, doc: null}, null);
    F.line = 131;
    result_12795007 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12795007;

}
main_12795001();
